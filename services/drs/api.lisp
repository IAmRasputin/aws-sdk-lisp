;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/drs/api
  (:use)
  (:nicknames #:aws/drs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/drs/api)
(common-lisp:progn
 (common-lisp:define-condition drs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'drs-error))
(common-lisp:progn
 (common-lisp:defclass drs-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "drs" :api-version
                        "2020-02-26" :host-prefix "drs" :signing-name "drs"
                        :global-host common-lisp:nil))
 (common-lisp:export 'drs-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UninitializedAccountException" . uninitialized-account-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account (:copier common-lisp:nil) (:conc-name "struct-shape-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account 'make-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-ids () '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype accounts () '(trivial-types:proper-list account))
 (common-lisp:defun make-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-source-network-stack-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-source-network-stack-request-"))
   (cfn-stack-name (common-lisp:error ":cfnstackname is required") :type
    (common-lisp:or cfn-stack-name common-lisp:null))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-source-network-stack-request
                    'make-associate-source-network-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cfn-stack-name))
      (common-lisp:list
       (common-lisp:cons "cfnStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-source-network-stack-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-source-network-stack-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-source-network-stack-response
                    'make-associate-source-network-stack-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-network-stack-response))
   common-lisp:nil))
(common-lisp:deftype aws-availability-zone () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cpu (:copier common-lisp:nil) (:conc-name "struct-shape-cpu-"))
   (cores common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cpu 'make-cpu))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cores))
      (common-lisp:list
       (common-lisp:cons "cores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "modelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpu))
   common-lisp:nil))
(common-lisp:deftype cfn-stack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-message 'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype conversion-map () 'common-lisp:hash-table)
 (common-lisp:defun make-conversion-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (conversion-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-conversion-properties-"))
   (data-timestamp common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (force-uefi common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (root-volume-name common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (volume-to-conversion-map common-lisp:nil :type
    (common-lisp:or volume-to-conversion-map common-lisp:null))
   (volume-to-product-codes common-lisp:nil :type
    (common-lisp:or volume-to-product-codes common-lisp:null))
   (volume-to-volume-size common-lisp:nil :type
    (common-lisp:or volume-to-size-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conversion-properties 'make-conversion-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversion-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversion-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-timestamp))
      (common-lisp:list
       (common-lisp:cons "dataTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-uefi))
      (common-lisp:list
       (common-lisp:cons "forceUefi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-volume-name))
      (common-lisp:list
       (common-lisp:cons "rootVolumeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-to-conversion-map))
      (common-lisp:list
       (common-lisp:cons "volumeToConversionMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-to-product-codes))
      (common-lisp:list
       (common-lisp:cons "volumeToProductCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-to-volume-size))
      (common-lisp:list
       (common-lisp:cons "volumeToVolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversion-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cpus () '(trivial-types:proper-list cpu))
 (common-lisp:defun make-cpus
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cpu))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-extended-source-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-extended-source-server-request-"))
   (source-server-arn (common-lisp:error ":sourceserverarn is required") :type
    (common-lisp:or source-server-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-extended-source-server-request
                    'make-create-extended-source-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-arn))
      (common-lisp:list
       (common-lisp:cons "sourceServerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-extended-source-server-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-extended-source-server-response-"))
   (source-server common-lisp:nil :type
    (common-lisp:or source-server common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-extended-source-server-response
                    'make-create-extended-source-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server))
      (common-lisp:list
       (common-lisp:cons "sourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-extended-source-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-configuration-template-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-launch-configuration-template-request-"))
   (copy-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (copy-tags common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (export-bucket-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (launch-disposition common-lisp:nil :type
    (common-lisp:or launch-disposition common-lisp:null))
   (launch-into-source-instance common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (licensing common-lisp:nil :type
    (common-lisp:or licensing common-lisp:null))
   (post-launch-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (target-instance-type-right-sizing-method common-lisp:nil :type
    (common-lisp:or target-instance-type-right-sizing-method
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-configuration-template-request
                    'make-create-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "exportBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-source-instance))
      (common-lisp:list
       (common-lisp:cons "launchIntoSourceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-enabled))
      (common-lisp:list
       (common-lisp:cons "postLaunchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-launch-configuration-template-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-launch-configuration-template-response-"))
   (launch-configuration-template common-lisp:nil :type
    (common-lisp:or launch-configuration-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-launch-configuration-template-response
                    'make-create-launch-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-replication-configuration-template-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-replication-configuration-template-request-"))
   (associate-default-security-group
    (common-lisp:error ":associatedefaultsecuritygroup is required") :type
    (common-lisp:or boolean common-lisp:null))
   (auto-replicate-new-disks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bandwidth-throttling (common-lisp:error ":bandwidththrottling is required")
    :type (common-lisp:or positive-integer common-lisp:null))
   (create-public-ip (common-lisp:error ":createpublicip is required") :type
    (common-lisp:or boolean common-lisp:null))
   (data-plane-routing (common-lisp:error ":dataplanerouting is required")
    :type
    (common-lisp:or replication-configuration-data-plane-routing
                    common-lisp:null))
   (default-large-staging-disk-type
    (common-lisp:error ":defaultlargestagingdisktype is required") :type
    (common-lisp:or replication-configuration-default-large-staging-disk-type
                    common-lisp:null))
   (ebs-encryption (common-lisp:error ":ebsencryption is required") :type
    (common-lisp:or replication-configuration-ebs-encryption common-lisp:null))
   (ebs-encryption-key-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (pit-policy (common-lisp:error ":pitpolicy is required") :type
    (common-lisp:or pitpolicy common-lisp:null))
   (replication-server-instance-type
    (common-lisp:error ":replicationserverinstancetype is required") :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (replication-servers-security-groups-ids
    (common-lisp:error ":replicationserverssecuritygroupsids is required")
    :type
    (common-lisp:or replication-servers-security-groups-ids common-lisp:null))
   (staging-area-subnet-id
    (common-lisp:error ":stagingareasubnetid is required") :type
    (common-lisp:or subnet-id common-lisp:null))
   (staging-area-tags (common-lisp:error ":stagingareatags is required") :type
    (common-lisp:or tags-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (use-dedicated-replication-server
    (common-lisp:error ":usededicatedreplicationserver is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-replication-configuration-template-request
                    'make-create-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-replicate-new-disks))
      (common-lisp:list
       (common-lisp:cons "autoReplicateNewDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pit-policy))
      (common-lisp:list
       (common-lisp:cons "pitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-source-network-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-source-network-request-"))
   (origin-account-id (common-lisp:error ":originaccountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (origin-region (common-lisp:error ":originregion is required") :type
    (common-lisp:or aws-region common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (vpc-id (common-lisp:error ":vpcid is required") :type
    (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-source-network-request
                    'make-create-source-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-account-id))
      (common-lisp:list
       (common-lisp:cons "originAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-region))
      (common-lisp:list
       (common-lisp:cons "originRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-source-network-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-source-network-response-"))
   (source-network-id common-lisp:nil :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-source-network-response
                    'make-create-source-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-source-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-replication-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-replication-error-"))
   (error common-lisp:nil :type
    (common-lisp:or data-replication-error-string common-lisp:null))
   (raw-error common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-replication-error 'make-data-replication-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   common-lisp:nil))
(common-lisp:deftype data-replication-error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-replication-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-replication-info-"))
   (data-replication-error common-lisp:nil :type
    (common-lisp:or data-replication-error common-lisp:null))
   (data-replication-initiation common-lisp:nil :type
    (common-lisp:or data-replication-initiation common-lisp:null))
   (data-replication-state common-lisp:nil :type
    (common-lisp:or data-replication-state common-lisp:null))
   (eta-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (lag-duration common-lisp:nil :type
    (common-lisp:or iso8601duration-string common-lisp:null))
   (replicated-disks common-lisp:nil :type
    (common-lisp:or data-replication-info-replicated-disks common-lisp:null))
   (staging-availability-zone common-lisp:nil :type
    (common-lisp:or aws-availability-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-replication-info 'make-data-replication-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-error))
      (common-lisp:list
       (common-lisp:cons "dataReplicationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-initiation))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-state))
      (common-lisp:list
       (common-lisp:cons "dataReplicationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eta-date-time))
      (common-lisp:list
       (common-lisp:cons "etaDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-duration))
      (common-lisp:list
       (common-lisp:cons "lagDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-availability-zone))
      (common-lisp:list
       (common-lisp:cons "stagingAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-replication-info-replicated-disk (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-replication-info-replicated-disk-"))
   (backlogged-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (replicated-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (rescanned-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (total-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (volume-status common-lisp:nil :type
    (common-lisp:or volume-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-replication-info-replicated-disk
                    'make-data-replication-info-replicated-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backlogged-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "backloggedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicated-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "replicatedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rescanned-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "rescannedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "totalStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-status))
      (common-lisp:list
       (common-lisp:cons "volumeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-replication-info-replicated-disks ()
   '(trivial-types:proper-list data-replication-info-replicated-disk))
 (common-lisp:defun make-data-replication-info-replicated-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-replication-info-replicated-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-replication-initiation (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-replication-initiation-"))
   (next-attempt-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (start-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (steps common-lisp:nil :type
    (common-lisp:or data-replication-initiation-steps common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-replication-initiation
                    'make-data-replication-initiation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-attempt-date-time))
      (common-lisp:list
       (common-lisp:cons "nextAttemptDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-replication-initiation-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-replication-initiation-step-"))
   (name common-lisp:nil :type
    (common-lisp:or data-replication-initiation-step-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or data-replication-initiation-step-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-replication-initiation-step
                    'make-data-replication-initiation-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   common-lisp:nil))
(common-lisp:deftype data-replication-initiation-step-name ()
  'common-lisp:string)
(common-lisp:deftype data-replication-initiation-step-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-replication-initiation-steps ()
   '(trivial-types:proper-list data-replication-initiation-step))
 (common-lisp:defun make-data-replication-initiation-steps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-replication-initiation-step))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-replication-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-job-response 'make-delete-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-action-request-"))
   (action-id (common-lisp:error ":actionid is required") :type
    (common-lisp:or launch-action-id common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or launch-action-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-action-request
                    'make-delete-launch-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-launch-action-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-launch-action-response
                    'make-delete-launch-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-configuration-template-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-launch-configuration-template-request-"))
   (launch-configuration-template-id
    (common-lisp:error ":launchconfigurationtemplateid is required") :type
    (common-lisp:or launch-configuration-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-launch-configuration-template-request
                    'make-delete-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-launch-configuration-template-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-launch-configuration-template-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-launch-configuration-template-response
                    'make-delete-launch-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-recovery-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-recovery-instance-request-"))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-recovery-instance-request
                    'make-delete-recovery-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recovery-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-configuration-template-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-replication-configuration-template-request-"))
   (replication-configuration-template-id
    (common-lisp:error ":replicationconfigurationtemplateid is required") :type
    (common-lisp:or replication-configuration-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-replication-configuration-template-request
                    'make-delete-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-replication-configuration-template-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-replication-configuration-template-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-replication-configuration-template-response
                    'make-delete-replication-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-source-network-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-source-network-request-"))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-source-network-request
                    'make-delete-source-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-source-network-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-source-network-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-source-network-response
                    'make-delete-source-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-source-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-source-server-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-source-server-request
                    'make-delete-source-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-source-server-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-source-server-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-source-server-response
                    'make-delete-source-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-log-items-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-log-items-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-log-items-request
                    'make-describe-job-log-items-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-job-log-items-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-job-log-items-response-"))
   (items common-lisp:nil :type (common-lisp:or job-logs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-job-log-items-response
                    'make-describe-job-log-items-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-jobs-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-jobs-request-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-request 'make-describe-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-jobs-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-jobs-request-filters-"))
   (from-date common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (job-ids common-lisp:nil :type
    (common-lisp:or describe-jobs-request-filters-job-ids common-lisp:null))
   (to-date common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-request-filters
                    'make-describe-jobs-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-date))
      (common-lisp:list
       (common-lisp:cons "fromDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-ids))
      (common-lisp:list
       (common-lisp:cons "jobIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-date))
      (common-lisp:list
       (common-lisp:cons "toDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-jobs-request-filters-job-ids ()
   '(trivial-types:proper-list job-id))
 (common-lisp:defun make-describe-jobs-request-filters-job-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-jobs-response-"))
   (items common-lisp:nil :type (common-lisp:or jobs-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-response 'make-describe-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-launch-configuration-templates-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-launch-configuration-templates-request-"))
   (launch-configuration-template-ids common-lisp:nil :type
    (common-lisp:or launch-configuration-template-ids common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-launch-configuration-templates-request
                    'make-describe-launch-configuration-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-ids))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-launch-configuration-templates-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-launch-configuration-templates-response-"))
   (items common-lisp:nil :type
    (common-lisp:or launch-configuration-templates common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-launch-configuration-templates-response
                    'make-describe-launch-configuration-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-recovery-instances-items ()
   '(trivial-types:proper-list recovery-instance))
 (common-lisp:defun make-describe-recovery-instances-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-instances-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-recovery-instances-request-filters
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-instances-request
                    'make-describe-recovery-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-instances-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-instances-request-filters-"))
   (recovery-instance-ids common-lisp:nil :type
    (common-lisp:or recovery-instance-ids common-lisp:null))
   (source-server-ids common-lisp:nil :type
    (common-lisp:or source-server-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-instances-request-filters
                    'make-describe-recovery-instances-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-ids))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-instances-response-"))
   (items common-lisp:nil :type
    (common-lisp:or describe-recovery-instances-items common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-instances-response
                    'make-describe-recovery-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-snapshots-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-recovery-snapshots-request-filters
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or recovery-snapshots-order common-lisp:null))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-snapshots-request
                    'make-describe-recovery-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-snapshots-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-snapshots-request-filters-"))
   (from-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (to-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-snapshots-request-filters
                    'make-describe-recovery-snapshots-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-date-time))
      (common-lisp:list
       (common-lisp:cons "fromDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-date-time))
      (common-lisp:list
       (common-lisp:cons "toDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recovery-snapshots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recovery-snapshots-response-"))
   (items common-lisp:nil :type
    (common-lisp:or recovery-snapshots-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recovery-snapshots-response
                    'make-describe-recovery-snapshots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recovery-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-replication-configuration-templates-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-replication-configuration-templates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (replication-configuration-template-ids common-lisp:nil :type
    (common-lisp:or replication-configuration-template-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configuration-templates-request
                    'make-describe-replication-configuration-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-ids))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-replication-configuration-templates-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-replication-configuration-templates-response-"))
   (items common-lisp:nil :type
    (common-lisp:or replication-configuration-templates common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configuration-templates-response
                    'make-describe-replication-configuration-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-networks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-networks-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-source-networks-request-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-networks-request
                    'make-describe-source-networks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-networks-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-networks-request-filters-"))
   (origin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (origin-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (source-network-ids common-lisp:nil :type
    (common-lisp:or describe-source-networks-request-filters-ids
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-networks-request-filters
                    'make-describe-source-networks-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-account-id))
      (common-lisp:list
       (common-lisp:cons "originAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-region))
      (common-lisp:list
       (common-lisp:cons "originRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-ids))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-source-networks-request-filters-ids ()
   '(trivial-types:proper-list source-network-id))
 (common-lisp:defun make-describe-source-networks-request-filters-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-network-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-networks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-networks-response-"))
   (items common-lisp:nil :type
    (common-lisp:or source-networks-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-networks-response
                    'make-describe-source-networks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-networks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-servers-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-source-servers-request-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-request
                    'make-describe-source-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-servers-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-servers-request-filters-"))
   (hardware-id common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (source-server-ids common-lisp:nil :type
    (common-lisp:or describe-source-servers-request-filters-ids
                    common-lisp:null))
   (staging-account-ids common-lisp:nil :type
    (common-lisp:or account-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-request-filters
                    'make-describe-source-servers-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hardware-id))
      (common-lisp:list
       (common-lisp:cons "hardwareId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-account-ids))
      (common-lisp:list
       (common-lisp:cons "stagingAccountIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-source-servers-request-filters-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-describe-source-servers-request-filters-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-servers-response-"))
   (items common-lisp:nil :type
    (common-lisp:or source-servers-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-response
                    'make-describe-source-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disconnect-recovery-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disconnect-recovery-instance-request-"))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disconnect-recovery-instance-request
                    'make-disconnect-recovery-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-recovery-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-recovery-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-recovery-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disconnect-source-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disconnect-source-server-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disconnect-source-server-request
                    'make-disconnect-source-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-source-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-source-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-source-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk (:copier common-lisp:nil) (:conc-name "struct-shape-disk-"))
   (bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk 'make-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disks () '(trivial-types:proper-list disk))
 (common-lisp:defun make-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ec2instance-id () 'common-lisp:string)
(common-lisp:deftype ec2instance-state () 'common-lisp:string)
(common-lisp:deftype ec2instance-type () 'common-lisp:string)
(common-lisp:deftype ebs-snapshot () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-snapshots-list ()
   '(trivial-types:proper-list ebs-snapshot))
 (common-lisp:defun make-ebs-snapshots-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ebs-volume-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-resource-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-resource-data-"))
   (source-network-data common-lisp:nil :type
    (common-lisp:or source-network-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-resource-data 'make-event-resource-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-resource-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-resource-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-data))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-resource-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-source-network-cfn-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-source-network-cfn-template-request-"))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-source-network-cfn-template-request
                    'make-export-source-network-cfn-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-source-network-cfn-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-source-network-cfn-template-response-"))
   (s3destination-url common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-source-network-cfn-template-response
                    'make-export-source-network-cfn-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination-url))
      (common-lisp:list
       (common-lisp:cons "s3DestinationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-source-network-cfn-template-response))
   common-lisp:nil))
(common-lisp:deftype extension-status () 'common-lisp:string)
(common-lisp:deftype failback-launch-type () 'common-lisp:string)
(common-lisp:deftype failback-replication-error () 'common-lisp:string)
(common-lisp:deftype failback-state () 'common-lisp:string)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-failback-replication-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-failback-replication-configuration-request-"))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-failback-replication-configuration-request
                    'make-get-failback-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-failback-replication-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-failback-replication-configuration-response-"))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null))
   (use-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-failback-replication-configuration-response
                    'make-get-failback-replication-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-private-ip))
      (common-lisp:list
       (common-lisp:cons "usePrivateIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-failback-replication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-launch-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-launch-configuration-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-launch-configuration-request
                    'make-get-launch-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-replication-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-replication-configuration-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-replication-configuration-request
                    'make-get-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ips-list () '(trivial-types:proper-list bounded-string))
 (common-lisp:defun make-ips-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601datetime-string () 'common-lisp:string)
(common-lisp:deftype iso8601duration-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (identification-hints (:copier common-lisp:nil)
      (:conc-name "struct-shape-identification-hints-"))
   (aws-instance-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null))
   (fqdn common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (hostname common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (vm-ware-uuid common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identification-hints 'make-identification-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identification-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identification-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-instance-id))
      (common-lisp:list
       (common-lisp:cons "awsInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "fqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-ware-uuid))
      (common-lisp:list
       (common-lisp:cons "vmWareUuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identification-hints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (initialize-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-initialize-service-request-")))
 (common-lisp:export
  (common-lisp:list 'initialize-service-request
                    'make-initialize-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (initialize-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-initialize-service-response-")))
 (common-lisp:export
  (common-lisp:list 'initialize-service-response
                    'make-initialize-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   common-lisp:nil))
(common-lisp:deftype initiated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (drs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (end-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (initiated-by common-lisp:nil :type
    (common-lisp:or initiated-by common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (participating-resources common-lisp:nil :type
    (common-lisp:or participating-resources common-lisp:null))
   (participating-servers common-lisp:nil :type
    (common-lisp:or participating-servers common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or job-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-by))
      (common-lisp:list
       (common-lisp:cons "initiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participating-resources))
      (common-lisp:list
       (common-lisp:cons "participatingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participating-servers))
      (common-lisp:list
       (common-lisp:cons "participatingServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-log (:copier common-lisp:nil) (:conc-name "struct-shape-job-log-"))
   (event common-lisp:nil :type
    (common-lisp:or job-log-event common-lisp:null))
   (event-data common-lisp:nil :type
    (common-lisp:or job-log-event-data common-lisp:null))
   (log-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-log 'make-job-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data))
      (common-lisp:list
       (common-lisp:cons "eventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-date-time))
      (common-lisp:list
       (common-lisp:cons "logDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-log))
   common-lisp:nil))
(common-lisp:deftype job-log-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-log-event-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-log-event-data-"))
   (conversion-properties common-lisp:nil :type
    (common-lisp:or conversion-properties common-lisp:null))
   (conversion-server-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null))
   (event-resource-data common-lisp:nil :type
    (common-lisp:or event-resource-data common-lisp:null))
   (raw-error common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null))
   (target-instance-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-log-event-data 'make-job-log-event-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-log-event-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-log-event-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversion-properties))
      (common-lisp:list
       (common-lisp:cons "conversionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversion-server-id))
      (common-lisp:list
       (common-lisp:cons "conversionServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-data))
      (common-lisp:list
       (common-lisp:cons "eventResourceData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instance-id))
      (common-lisp:list
       (common-lisp:cons "targetInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-log-event-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-logs () '(trivial-types:proper-list job-log))
 (common-lisp:defun make-job-logs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-log))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype jobs-list () '(trivial-types:proper-list job))
 (common-lisp:defun make-jobs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype large-bounded-string () 'common-lisp:string)
(common-lisp:deftype last-launch-result () 'common-lisp:string)
(common-lisp:deftype last-launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-action-"))
   (action-code common-lisp:nil :type
    (common-lisp:or ssm-document-name common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or launch-action-id common-lisp:null))
   (action-version common-lisp:nil :type
    (common-lisp:or launch-action-version common-lisp:null))
   (active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or launch-action-category common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or launch-action-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or launch-action-name common-lisp:null))
   (optional common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or launch-action-order common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or launch-action-parameters common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or launch-action-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'launch-action 'make-launch-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-code))
      (common-lisp:list
       (common-lisp:cons "actionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-version))
      (common-lisp:list
       (common-lisp:cons "actionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-action))
   common-lisp:nil))
(common-lisp:deftype launch-action-category () 'common-lisp:string)
(common-lisp:deftype launch-action-description () 'common-lisp:string)
(common-lisp:deftype launch-action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-action-ids ()
   '(trivial-types:proper-list launch-action-id))
 (common-lisp:defun make-launch-action-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-action-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-action-name () 'common-lisp:string)
(common-lisp:deftype launch-action-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-action-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-action-parameter-"))
   (type common-lisp:nil :type
    (common-lisp:or launch-action-parameter-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or launch-action-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-action-parameter 'make-launch-action-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-action-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-action-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-action-parameter))
   common-lisp:nil))
(common-lisp:deftype launch-action-parameter-name () 'common-lisp:string)
(common-lisp:deftype launch-action-parameter-type () 'common-lisp:string)
(common-lisp:deftype launch-action-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-action-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-launch-action-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype launch-action-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-action-run (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-action-run-"))
   (action common-lisp:nil :type
    (common-lisp:or launch-action common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (run-id common-lisp:nil :type
    (common-lisp:or launch-action-run-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or launch-action-run-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-action-run 'make-launch-action-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-action-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-action-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "runId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-action-run))
   common-lisp:nil))
(common-lisp:deftype launch-action-run-id () 'common-lisp:string)
(common-lisp:deftype launch-action-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-action-runs ()
   '(trivial-types:proper-list launch-action-run))
 (common-lisp:defun make-launch-action-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-action-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-action-type () 'common-lisp:string)
(common-lisp:deftype launch-action-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-actions ()
   '(trivial-types:proper-list launch-action))
 (common-lisp:defun make-launch-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list launch-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-actions-request-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-actions-request-filters-"))
   (action-ids common-lisp:nil :type
    (common-lisp:or launch-action-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-actions-request-filters
                    'make-launch-actions-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-ids))
      (common-lisp:list
       (common-lisp:cons "actionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-actions-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-actions-status-"))
   (runs common-lisp:nil :type
    (common-lisp:or launch-action-runs common-lisp:null))
   (ssm-agent-discovery-datetime common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-actions-status 'make-launch-actions-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssm-agent-discovery-datetime))
      (common-lisp:list
       (common-lisp:cons "ssmAgentDiscoveryDatetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-actions-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-"))
   (copy-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (copy-tags common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ec2launch-template-id common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (launch-disposition common-lisp:nil :type
    (common-lisp:or launch-disposition common-lisp:null))
   (launch-into-instance-properties common-lisp:nil :type
    (common-lisp:or launch-into-instance-properties common-lisp:null))
   (licensing common-lisp:nil :type
    (common-lisp:or licensing common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or small-bounded-string common-lisp:null))
   (post-launch-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null))
   (target-instance-type-right-sizing-method common-lisp:nil :type
    (common-lisp:or target-instance-type-right-sizing-method
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2launch-template-id))
      (common-lisp:list
       (common-lisp:cons "ec2LaunchTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-instance-properties))
      (common-lisp:list
       (common-lisp:cons "launchIntoInstanceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-enabled))
      (common-lisp:list
       (common-lisp:cons "postLaunchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (launch-configuration-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-configuration-template-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (copy-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (copy-tags common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (export-bucket-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (launch-configuration-template-id common-lisp:nil :type
    (common-lisp:or launch-configuration-template-id common-lisp:null))
   (launch-disposition common-lisp:nil :type
    (common-lisp:or launch-disposition common-lisp:null))
   (launch-into-source-instance common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (licensing common-lisp:nil :type
    (common-lisp:or licensing common-lisp:null))
   (post-launch-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (target-instance-type-right-sizing-method common-lisp:nil :type
    (common-lisp:or target-instance-type-right-sizing-method
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-template
                    'make-launch-configuration-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "exportBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-source-instance))
      (common-lisp:list
       (common-lisp:cons "launchIntoSourceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-enabled))
      (common-lisp:list
       (common-lisp:cons "postLaunchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   common-lisp:nil))
(common-lisp:deftype launch-configuration-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-configuration-template-ids ()
   '(trivial-types:proper-list launch-configuration-template-id))
 (common-lisp:defun make-launch-configuration-template-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-configuration-template-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-templates ()
   '(trivial-types:proper-list launch-configuration-template))
 (common-lisp:defun make-launch-configuration-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-configuration-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-disposition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (launch-into-instance-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-launch-into-instance-properties-"))
   (launch-into-ec2instance-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'launch-into-instance-properties
                    'make-launch-into-instance-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-into-instance-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-into-instance-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "launchIntoEC2InstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-into-instance-properties))
   common-lisp:nil))
(common-lisp:deftype launch-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (licensing (:copier common-lisp:nil)
      (:conc-name "struct-shape-licensing-"))
   (os-byol common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'licensing 'make-licensing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input licensing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input licensing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-byol))
      (common-lisp:list
       (common-lisp:cons "osByol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input licensing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (life-cycle (:copier common-lisp:nil)
      (:conc-name "struct-shape-life-cycle-"))
   (added-to-service-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (elapsed-replication-duration common-lisp:nil :type
    (common-lisp:or iso8601duration-string common-lisp:null))
   (first-byte-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (last-launch common-lisp:nil :type
    (common-lisp:or life-cycle-last-launch common-lisp:null))
   (last-seen-by-service-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'life-cycle 'make-life-cycle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input life-cycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input life-cycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'added-to-service-date-time))
      (common-lisp:list
       (common-lisp:cons "addedToServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-replication-duration))
      (common-lisp:list
       (common-lisp:cons "elapsedReplicationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-byte-date-time))
      (common-lisp:list
       (common-lisp:cons "firstByteDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-launch))
      (common-lisp:list
       (common-lisp:cons "lastLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-seen-by-service-date-time))
      (common-lisp:list
       (common-lisp:cons "lastSeenByServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input life-cycle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (life-cycle-last-launch (:copier common-lisp:nil)
      (:conc-name "struct-shape-life-cycle-last-launch-"))
   (initiated common-lisp:nil :type
    (common-lisp:or life-cycle-last-launch-initiated common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or launch-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-launch 'make-life-cycle-last-launch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (life-cycle-last-launch-initiated (:copier common-lisp:nil)
      (:conc-name "struct-shape-life-cycle-last-launch-initiated-"))
   (api-call-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or last-launch-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-launch-initiated
                    'make-life-cycle-last-launch-initiated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch-initiated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch-initiated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-launch-initiated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-extensible-source-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-extensible-source-servers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-replicating-source-servers common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (staging-account-id (common-lisp:error ":stagingaccountid is required")
    :type (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-extensible-source-servers-request
                    'make-list-extensible-source-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-account-id))
      (common-lisp:list
       (common-lisp:cons "stagingAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-extensible-source-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-extensible-source-servers-response-"))
   (items common-lisp:nil :type
    (common-lisp:or staging-source-servers-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-extensible-source-servers-response
                    'make-list-extensible-source-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-extensible-source-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-actions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-actions-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or launch-actions-request-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or launch-action-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-actions-request
                    'make-list-launch-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-launch-actions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-launch-actions-response-"))
   (items common-lisp:nil :type
    (common-lisp:or launch-actions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-launch-actions-response
                    'make-list-launch-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-launch-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-staging-accounts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-staging-accounts-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-staging-accounts-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-staging-accounts-request
                    'make-list-staging-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-request))
   common-lisp:nil))
(common-lisp:deftype list-staging-accounts-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-staging-accounts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-staging-accounts-response-"))
   (accounts common-lisp:nil :type (common-lisp:or accounts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-staging-accounts-response
                    'make-list-staging-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-staging-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results-replicating-source-servers ()
  'common-lisp:integer)
(common-lisp:deftype max-results-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-"))
   (ips common-lisp:nil :type (common-lisp:or ips-list common-lisp:null))
   (is-primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ips))
      (common-lisp:list
       (common-lisp:cons "ips"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-primary))
      (common-lisp:list
       (common-lisp:cons "isPrimary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (os (:copier common-lisp:nil) (:conc-name "struct-shape-os-"))
   (full-string common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'os 'make-os))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input os))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input os))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-string))
      (common-lisp:list
       (common-lisp:cons "fullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input os))
   common-lisp:nil))
(common-lisp:deftype origin-environment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pitpolicy () '(trivial-types:proper-list pitpolicy-rule))
 (common-lisp:defun make-pitpolicy
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pitpolicy-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pitpolicy-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-pitpolicy-rule-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (interval (common-lisp:error ":interval is required") :type
    (common-lisp:or strictly-positive-integer common-lisp:null))
   (retention-duration (common-lisp:error ":retentionduration is required")
    :type (common-lisp:or strictly-positive-integer common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (units (common-lisp:error ":units is required") :type
    (common-lisp:or pitpolicy-rule-units common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pitpolicy-rule 'make-pitpolicy-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pitpolicy-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pitpolicy-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-duration))
      (common-lisp:list
       (common-lisp:cons "retentionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "ruleID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pitpolicy-rule))
   common-lisp:nil))
(common-lisp:deftype pitpolicy-rule-units () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (participating-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-participating-resource-"))
   (launch-status common-lisp:nil :type
    (common-lisp:or launch-status common-lisp:null))
   (participating-resource-id common-lisp:nil :type
    (common-lisp:or participating-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participating-resource 'make-participating-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-status))
      (common-lisp:list
       (common-lisp:cons "launchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participating-resource-id))
      (common-lisp:list
       (common-lisp:cons "participatingResourceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (participating-resource-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-participating-resource-id-"))
   (source-network-id common-lisp:nil :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participating-resource-id
                    'make-participating-resource-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participating-resource-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype participating-resources ()
   '(trivial-types:proper-list participating-resource))
 (common-lisp:defun make-participating-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list participating-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (participating-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-participating-server-"))
   (launch-actions-status common-lisp:nil :type
    (common-lisp:or launch-actions-status common-lisp:null))
   (launch-status common-lisp:nil :type
    (common-lisp:or launch-status common-lisp:null))
   (recovery-instance-id common-lisp:nil :type
    (common-lisp:or recovery-instance-id common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'participating-server 'make-participating-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input participating-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input participating-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-actions-status))
      (common-lisp:list
       (common-lisp:cons "launchActionsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-status))
      (common-lisp:list
       (common-lisp:cons "launchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input participating-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype participating-servers ()
   '(trivial-types:proper-list participating-server))
 (common-lisp:defun make-participating-servers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list participating-server))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (product-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-product-code-"))
   (product-code-id common-lisp:nil :type
    (common-lisp:or product-code-id common-lisp:null))
   (product-code-mode common-lisp:nil :type
    (common-lisp:or product-code-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'product-code 'make-product-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code-id))
      (common-lisp:list
       (common-lisp:cons "productCodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code-mode))
      (common-lisp:list
       (common-lisp:cons "productCodeMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product-code))
   common-lisp:nil))
(common-lisp:deftype product-code-id () 'common-lisp:string)
(common-lisp:deftype product-code-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype product-codes ()
   '(trivial-types:proper-list product-code))
 (common-lisp:defun make-product-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-launch-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-launch-action-request-"))
   (action-code (common-lisp:error ":actioncode is required") :type
    (common-lisp:or ssm-document-name common-lisp:null))
   (action-id (common-lisp:error ":actionid is required") :type
    (common-lisp:or launch-action-id common-lisp:null))
   (action-version (common-lisp:error ":actionversion is required") :type
    (common-lisp:or launch-action-version common-lisp:null))
   (active (common-lisp:error ":active is required") :type
    (common-lisp:or boolean common-lisp:null))
   (category (common-lisp:error ":category is required") :type
    (common-lisp:or launch-action-category common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or launch-action-description common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or launch-action-name common-lisp:null))
   (optional (common-lisp:error ":optional is required") :type
    (common-lisp:or boolean common-lisp:null))
   (order (common-lisp:error ":order is required") :type
    (common-lisp:or launch-action-order common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or launch-action-parameters common-lisp:null))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or launch-action-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-launch-action-request
                    'make-put-launch-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-code))
      (common-lisp:list
       (common-lisp:cons "actionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-version))
      (common-lisp:list
       (common-lisp:cons "actionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-launch-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-launch-action-response-"))
   (action-code common-lisp:nil :type
    (common-lisp:or ssm-document-name common-lisp:null))
   (action-id common-lisp:nil :type
    (common-lisp:or launch-action-id common-lisp:null))
   (action-version common-lisp:nil :type
    (common-lisp:or launch-action-version common-lisp:null))
   (active common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or launch-action-category common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or launch-action-description common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or launch-action-name common-lisp:null))
   (optional common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (order common-lisp:nil :type
    (common-lisp:or launch-action-order common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or launch-action-parameters common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or launch-action-resource-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or launch-action-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-launch-action-response
                    'make-put-launch-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-code))
      (common-lisp:list
       (common-lisp:cons "actionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-version))
      (common-lisp:list
       (common-lisp:cons "actionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional))
      (common-lisp:list
       (common-lisp:cons "optional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-launch-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-"))
   (agent-version common-lisp:nil :type
    (common-lisp:or agent-version common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-replication-info common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-info common-lisp:null))
   (ec2instance-id common-lisp:nil :type
    (common-lisp:or ec2instance-id common-lisp:null))
   (ec2instance-state common-lisp:nil :type
    (common-lisp:or ec2instance-state common-lisp:null))
   (failback common-lisp:nil :type
    (common-lisp:or recovery-instance-failback common-lisp:null))
   (is-drill common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (origin-availability-zone common-lisp:nil :type
    (common-lisp:or aws-availability-zone common-lisp:null))
   (origin-environment common-lisp:nil :type
    (common-lisp:or origin-environment common-lisp:null))
   (point-in-time-snapshot-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (recovery-instance-id common-lisp:nil :type
    (common-lisp:or recovery-instance-id common-lisp:null))
   (recovery-instance-properties common-lisp:nil :type
    (common-lisp:or recovery-instance-properties common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance 'make-recovery-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recovery-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recovery-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-info))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-state))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failback))
      (common-lisp:list
       (common-lisp:cons "failback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-drill))
      (common-lisp:list
       (common-lisp:cons "isDrill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-availability-zone))
      (common-lisp:list
       (common-lisp:cons "originAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-environment))
      (common-lisp:list
       (common-lisp:cons "originEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'point-in-time-snapshot-date-time))
      (common-lisp:list
       (common-lisp:cons "pointInTimeSnapshotDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-properties))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recovery-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-data-replication-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-data-replication-error-"))
   (error common-lisp:nil :type
    (common-lisp:or failback-replication-error common-lisp:null))
   (raw-error common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-data-replication-error
                    'make-recovery-instance-data-replication-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-data-replication-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-data-replication-info-"))
   (data-replication-error common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-error common-lisp:null))
   (data-replication-initiation common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-initiation
                    common-lisp:null))
   (data-replication-state common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-state common-lisp:null))
   (eta-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (lag-duration common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (replicated-disks common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-info-replicated-disks
                    common-lisp:null))
   (staging-availability-zone common-lisp:nil :type
    (common-lisp:or aws-availability-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-data-replication-info
                    'make-recovery-instance-data-replication-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-error))
      (common-lisp:list
       (common-lisp:cons "dataReplicationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-initiation))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-state))
      (common-lisp:list
       (common-lisp:cons "dataReplicationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eta-date-time))
      (common-lisp:list
       (common-lisp:cons "etaDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-duration))
      (common-lisp:list
       (common-lisp:cons "lagDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-availability-zone))
      (common-lisp:list
       (common-lisp:cons "stagingAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-data-replication-info-replicated-disk
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-recovery-instance-data-replication-info-replicated-disk-"))
   (backlogged-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (replicated-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (rescanned-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (total-storage-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-data-replication-info-replicated-disk
                    'make-recovery-instance-data-replication-info-replicated-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info-replicated-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info-replicated-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backlogged-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "backloggedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicated-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "replicatedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rescanned-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "rescannedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "totalStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-info-replicated-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-instance-data-replication-info-replicated-disks
                      ()
   '(trivial-types:proper-list
     recovery-instance-data-replication-info-replicated-disk))
 (common-lisp:defun make-recovery-instance-data-replication-info-replicated-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recovery-instance-data-replication-info-replicated-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-data-replication-initiation (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-recovery-instance-data-replication-initiation-"))
   (start-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (steps common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-initiation-steps
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-data-replication-initiation
                    'make-recovery-instance-data-replication-initiation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-data-replication-initiation-step
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-recovery-instance-data-replication-initiation-step-"))
   (name common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-initiation-step-name
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or recovery-instance-data-replication-initiation-step-status
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-data-replication-initiation-step
                    'make-recovery-instance-data-replication-initiation-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-data-replication-initiation-step))
   common-lisp:nil))
(common-lisp:deftype recovery-instance-data-replication-initiation-step-name ()
  'common-lisp:string)
(common-lisp:deftype recovery-instance-data-replication-initiation-step-status
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recovery-instance-data-replication-initiation-steps ()
   '(trivial-types:proper-list
     recovery-instance-data-replication-initiation-step))
 (common-lisp:defun make-recovery-instance-data-replication-initiation-steps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recovery-instance-data-replication-initiation-step))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recovery-instance-data-replication-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-disk (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-disk-"))
   (bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (ebs-volume-id common-lisp:nil :type
    (common-lisp:or ebs-volume-id common-lisp:null))
   (internal-device-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-disk 'make-recovery-instance-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volume-id))
      (common-lisp:list
       (common-lisp:cons "ebsVolumeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-device-name))
      (common-lisp:list
       (common-lisp:cons "internalDeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-instance-disks ()
   '(trivial-types:proper-list recovery-instance-disk))
 (common-lisp:defun make-recovery-instance-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-instance-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-failback (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-failback-"))
   (agent-last-seen-by-service-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (elapsed-replication-duration common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (failback-client-id common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (failback-client-last-seen-by-service-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (failback-initiation-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (failback-job-id common-lisp:nil :type
    (common-lisp:or job-id common-lisp:null))
   (failback-launch-type common-lisp:nil :type
    (common-lisp:or failback-launch-type common-lisp:null))
   (failback-to-original-server common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (first-byte-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or failback-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-failback
                    'make-recovery-instance-failback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-failback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-failback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-last-seen-by-service-date-time))
      (common-lisp:list
       (common-lisp:cons "agentLastSeenByServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-replication-duration))
      (common-lisp:list
       (common-lisp:cons "elapsedReplicationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failback-client-id))
      (common-lisp:list
       (common-lisp:cons "failbackClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failback-client-last-seen-by-service-date-time))
      (common-lisp:list
       (common-lisp:cons "failbackClientLastSeenByServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failback-initiation-time))
      (common-lisp:list
       (common-lisp:cons "failbackInitiationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failback-job-id))
      (common-lisp:list
       (common-lisp:cons "failbackJobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failback-launch-type))
      (common-lisp:list
       (common-lisp:cons "failbackLaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failback-to-original-server))
      (common-lisp:list
       (common-lisp:cons "failbackToOriginalServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-byte-date-time))
      (common-lisp:list
       (common-lisp:cons "firstByteDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-failback))
   common-lisp:nil))
(common-lisp:deftype recovery-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recovery-instance-ids ()
   '(trivial-types:proper-list recovery-instance-id))
 (common-lisp:defun make-recovery-instance-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-instance-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-instance-properties-"))
   (cpus common-lisp:nil :type (common-lisp:or cpus common-lisp:null))
   (disks common-lisp:nil :type
    (common-lisp:or recovery-instance-disks common-lisp:null))
   (identification-hints common-lisp:nil :type
    (common-lisp:or identification-hints common-lisp:null))
   (last-updated-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or network-interfaces common-lisp:null))
   (os common-lisp:nil :type (common-lisp:or os common-lisp:null))
   (ram-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-instance-properties
                    'make-recovery-instance-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpus))
      (common-lisp:list
       (common-lisp:cons "cpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-hints))
      (common-lisp:list
       (common-lisp:cons "identificationHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-bytes))
      (common-lisp:list
       (common-lisp:cons "ramBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recovery-instance-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-instances-for-termination-request ()
   '(trivial-types:proper-list recovery-instance-id))
 (common-lisp:defun make-recovery-instances-for-termination-request
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-life-cycle (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-life-cycle-"))
   (api-call-date-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (last-recovery-result common-lisp:nil :type
    (common-lisp:or recovery-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-life-cycle 'make-recovery-life-cycle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recovery-life-cycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recovery-life-cycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-recovery-result))
      (common-lisp:list
       (common-lisp:cons "lastRecoveryResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recovery-life-cycle))
   common-lisp:nil))
(common-lisp:deftype recovery-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-snapshot-"))
   (ebs-snapshots common-lisp:nil :type
    (common-lisp:or ebs-snapshots-list common-lisp:null))
   (expected-timestamp (common-lisp:error ":expectedtimestamp is required")
    :type (common-lisp:or iso8601datetime-string common-lisp:null))
   (snapshot-id (common-lisp:error ":snapshotid is required") :type
    (common-lisp:or recovery-snapshot-id common-lisp:null))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recovery-snapshot 'make-recovery-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recovery-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recovery-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-snapshots))
      (common-lisp:list
       (common-lisp:cons "ebsSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-timestamp))
      (common-lisp:list
       (common-lisp:cons "expectedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recovery-snapshot))
   common-lisp:nil))
(common-lisp:deftype recovery-snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recovery-snapshots-list ()
   '(trivial-types:proper-list recovery-snapshot))
 (common-lisp:defun make-recovery-snapshots-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recovery-snapshots-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-configuration-"))
   (associate-default-security-group common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-replicate-new-disks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (create-public-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-plane-routing common-lisp:nil :type
    (common-lisp:or replication-configuration-data-plane-routing
                    common-lisp:null))
   (default-large-staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-default-large-staging-disk-type
                    common-lisp:null))
   (ebs-encryption common-lisp:nil :type
    (common-lisp:or replication-configuration-ebs-encryption common-lisp:null))
   (ebs-encryption-key-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or small-bounded-string common-lisp:null))
   (pit-policy common-lisp:nil :type
    (common-lisp:or pitpolicy common-lisp:null))
   (replicated-disks common-lisp:nil :type
    (common-lisp:or replication-configuration-replicated-disks
                    common-lisp:null))
   (replication-server-instance-type common-lisp:nil :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (replication-servers-security-groups-ids common-lisp:nil :type
    (common-lisp:or replication-servers-security-groups-ids common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null))
   (staging-area-subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (staging-area-tags common-lisp:nil :type
    (common-lisp:or tags-map common-lisp:null))
   (use-dedicated-replication-server common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-replicate-new-disks))
      (common-lisp:list
       (common-lisp:cons "autoReplicateNewDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pit-policy))
      (common-lisp:list
       (common-lisp:cons "pitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-data-plane-routing ()
  'common-lisp:string)
(common-lisp:deftype replication-configuration-default-large-staging-disk-type
                     ()
  'common-lisp:string)
(common-lisp:deftype replication-configuration-ebs-encryption ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-configuration-replicated-disk (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-configuration-replicated-disk-"))
   (device-name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (is-boot-disk common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (optimized-staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-replicated-disk-staging-disk-type
                    common-lisp:null))
   (staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-replicated-disk-staging-disk-type
                    common-lisp:null))
   (throughput common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-configuration-replicated-disk
                    'make-replication-configuration-replicated-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-boot-disk))
      (common-lisp:list
       (common-lisp:cons "isBootDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimized-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "optimizedStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "stagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-replicated-disk-staging-disk-type
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-configuration-replicated-disks ()
   '(trivial-types:proper-list replication-configuration-replicated-disk))
 (common-lisp:defun make-replication-configuration-replicated-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-replicated-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-configuration-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-configuration-template-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (associate-default-security-group common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-replicate-new-disks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (create-public-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-plane-routing common-lisp:nil :type
    (common-lisp:or replication-configuration-data-plane-routing
                    common-lisp:null))
   (default-large-staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-default-large-staging-disk-type
                    common-lisp:null))
   (ebs-encryption common-lisp:nil :type
    (common-lisp:or replication-configuration-ebs-encryption common-lisp:null))
   (ebs-encryption-key-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (pit-policy common-lisp:nil :type
    (common-lisp:or pitpolicy common-lisp:null))
   (replication-configuration-template-id
    (common-lisp:error ":replicationconfigurationtemplateid is required") :type
    (common-lisp:or replication-configuration-template-id common-lisp:null))
   (replication-server-instance-type common-lisp:nil :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (replication-servers-security-groups-ids common-lisp:nil :type
    (common-lisp:or replication-servers-security-groups-ids common-lisp:null))
   (staging-area-subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (staging-area-tags common-lisp:nil :type
    (common-lisp:or tags-map common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (use-dedicated-replication-server common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-configuration-template
                    'make-replication-configuration-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-replicate-new-disks))
      (common-lisp:list
       (common-lisp:cons "autoReplicateNewDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pit-policy))
      (common-lisp:list
       (common-lisp:cons "pitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-template-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-configuration-template-ids ()
   '(trivial-types:proper-list replication-configuration-template-id))
 (common-lisp:defun make-replication-configuration-template-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-template-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-configuration-templates ()
   '(trivial-types:proper-list replication-configuration-template))
 (common-lisp:defun make-replication-configuration-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-servers-security-groups-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-replication-servers-security-groups-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-data-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-data-replication-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-data-replication-request
                    'make-retry-data-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reverse-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reverse-replication-request-"))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reverse-replication-request
                    'make-reverse-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reverse-replication-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reverse-replication-response-"))
   (reversed-direction-source-server-arn common-lisp:nil :type
    (common-lisp:or source-server-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reverse-replication-response
                    'make-reverse-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reversed-direction-source-server-arn))
      (common-lisp:list
       (common-lisp:cons "reversedDirectionSourceServerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reverse-replication-response))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype sensitive-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-code
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype small-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-cloud-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-cloud-properties-"))
   (origin-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (origin-availability-zone common-lisp:nil :type
    (common-lisp:or aws-availability-zone common-lisp:null))
   (origin-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-cloud-properties 'make-source-cloud-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-cloud-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-cloud-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-account-id))
      (common-lisp:list
       (common-lisp:cons "originAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-availability-zone))
      (common-lisp:list
       (common-lisp:cons "originAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-region))
      (common-lisp:list
       (common-lisp:cons "originRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-cloud-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-network (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-network-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (cfn-stack-name common-lisp:nil :type
    (common-lisp:or cfn-stack-name common-lisp:null))
   (last-recovery common-lisp:nil :type
    (common-lisp:or recovery-life-cycle common-lisp:null))
   (launched-vpc-id common-lisp:nil :type
    (common-lisp:or vpc-id common-lisp:null))
   (replication-status common-lisp:nil :type
    (common-lisp:or replication-status common-lisp:null))
   (replication-status-details common-lisp:nil :type
    (common-lisp:or sensitive-bounded-string common-lisp:null))
   (source-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (source-network-id common-lisp:nil :type
    (common-lisp:or source-network-id common-lisp:null))
   (source-region common-lisp:nil :type
    (common-lisp:or aws-region common-lisp:null))
   (source-vpc-id common-lisp:nil :type
    (common-lisp:or vpc-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-network 'make-source-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cfn-stack-name))
      (common-lisp:list
       (common-lisp:cons "cfnStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-recovery))
      (common-lisp:list
       (common-lisp:cons "lastRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-vpc-id))
      (common-lisp:list
       (common-lisp:cons "launchedVpcID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "replicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-status-details))
      (common-lisp:list
       (common-lisp:cons "replicationStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account-id))
      (common-lisp:list
       (common-lisp:cons "sourceAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-vpc-id))
      (common-lisp:list
       (common-lisp:cons "sourceVpcID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-network-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-network-data-"))
   (source-network-id common-lisp:nil :type
    (common-lisp:or source-network-id common-lisp:null))
   (source-vpc common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (target-vpc common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-network-data 'make-source-network-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-network-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-network-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-vpc))
      (common-lisp:list
       (common-lisp:cons "sourceVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "stackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-vpc))
      (common-lisp:list
       (common-lisp:cons "targetVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-network-data))
   common-lisp:nil))
(common-lisp:deftype source-network-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-networks-list ()
   '(trivial-types:proper-list source-network))
 (common-lisp:defun make-source-networks-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-properties-"))
   (cpus common-lisp:nil :type (common-lisp:or cpus common-lisp:null))
   (disks common-lisp:nil :type (common-lisp:or disks common-lisp:null))
   (identification-hints common-lisp:nil :type
    (common-lisp:or identification-hints common-lisp:null))
   (last-updated-date-time common-lisp:nil :type
    (common-lisp:or iso8601datetime-string common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or network-interfaces common-lisp:null))
   (os common-lisp:nil :type (common-lisp:or os common-lisp:null))
   (ram-bytes common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (recommended-instance-type common-lisp:nil :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (supports-nitro-instances common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-properties 'make-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpus))
      (common-lisp:list
       (common-lisp:cons "cpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-hints))
      (common-lisp:list
       (common-lisp:cons "identificationHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-bytes))
      (common-lisp:list
       (common-lisp:cons "ramBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-instance-type))
      (common-lisp:list
       (common-lisp:cons "recommendedInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-nitro-instances))
      (common-lisp:list
       (common-lisp:cons "supportsNitroInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-server-"))
   (agent-version common-lisp:nil :type
    (common-lisp:or agent-version common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (data-replication-info common-lisp:nil :type
    (common-lisp:or data-replication-info common-lisp:null))
   (last-launch-result common-lisp:nil :type
    (common-lisp:or last-launch-result common-lisp:null))
   (life-cycle common-lisp:nil :type
    (common-lisp:or life-cycle common-lisp:null))
   (recovery-instance-id common-lisp:nil :type
    (common-lisp:or recovery-instance-id common-lisp:null))
   (replication-direction common-lisp:nil :type
    (common-lisp:or replication-direction common-lisp:null))
   (reversed-direction-source-server-arn common-lisp:nil :type
    (common-lisp:or source-server-arn common-lisp:null))
   (source-cloud-properties common-lisp:nil :type
    (common-lisp:or source-cloud-properties common-lisp:null))
   (source-network-id common-lisp:nil :type
    (common-lisp:or source-network-id common-lisp:null))
   (source-properties common-lisp:nil :type
    (common-lisp:or source-properties common-lisp:null))
   (source-server-id common-lisp:nil :type
    (common-lisp:or source-server-id common-lisp:null))
   (staging-area common-lisp:nil :type
    (common-lisp:or staging-area common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-server 'make-source-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-info))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-launch-result))
      (common-lisp:list
       (common-lisp:cons "lastLaunchResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle))
      (common-lisp:list
       (common-lisp:cons "lifeCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-direction))
      (common-lisp:list
       (common-lisp:cons "replicationDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reversed-direction-source-server-arn))
      (common-lisp:list
       (common-lisp:cons "reversedDirectionSourceServerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-cloud-properties))
      (common-lisp:list
       (common-lisp:cons "sourceCloudProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-properties))
      (common-lisp:list
       (common-lisp:cons "sourceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area))
      (common-lisp:list
       (common-lisp:cons "stagingArea"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-server))
   common-lisp:nil))
(common-lisp:deftype source-server-arn () 'common-lisp:string)
(common-lisp:deftype source-server-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-servers-list ()
   '(trivial-types:proper-list source-server))
 (common-lisp:defun make-source-servers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssm-document-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (staging-area (:copier common-lisp:nil)
      (:conc-name "struct-shape-staging-area-"))
   (error-message common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (staging-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (staging-source-server-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or extension-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'staging-area 'make-staging-area))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input staging-area))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input staging-area))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-account-id))
      (common-lisp:list
       (common-lisp:cons "stagingAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-source-server-arn))
      (common-lisp:list
       (common-lisp:cons "stagingSourceServerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input staging-area))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (staging-source-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-staging-source-server-"))
   (arn common-lisp:nil :type
    (common-lisp:or source-server-arn common-lisp:null))
   (hostname common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'staging-source-server 'make-staging-source-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          staging-source-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          staging-source-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          staging-source-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype staging-source-servers-list ()
   '(trivial-types:proper-list staging-source-server))
 (common-lisp:defun make-staging-source-servers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list staging-source-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-failback-launch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-failback-launch-request-"))
   (recovery-instance-ids
    (common-lisp:error ":recoveryinstanceids is required") :type
    (common-lisp:or start-failback-request-recovery-instance-ids
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-failback-launch-request
                    'make-start-failback-launch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-ids))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-failback-launch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-failback-launch-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-failback-launch-response
                    'make-start-failback-launch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-failback-launch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-failback-request-recovery-instance-ids ()
   '(trivial-types:proper-list recovery-instance-id))
 (common-lisp:defun make-start-failback-request-recovery-instance-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-recovery-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-recovery-request-"))
   (is-drill common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (source-servers (common-lisp:error ":sourceservers is required") :type
    (common-lisp:or start-recovery-request-source-servers common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-recovery-request 'make-start-recovery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-drill))
      (common-lisp:list
       (common-lisp:cons "isDrill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-servers))
      (common-lisp:list
       (common-lisp:cons "sourceServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-recovery-request-source-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-recovery-request-source-server-"))
   (recovery-snapshot-id common-lisp:nil :type
    (common-lisp:or recovery-snapshot-id common-lisp:null))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-recovery-request-source-server
                    'make-start-recovery-request-source-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request-source-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request-source-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-snapshot-id))
      (common-lisp:list
       (common-lisp:cons "recoverySnapshotID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-request-source-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-recovery-request-source-servers ()
   '(trivial-types:proper-list start-recovery-request-source-server))
 (common-lisp:defun make-start-recovery-request-source-servers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-recovery-request-source-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-recovery-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-recovery-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-recovery-response 'make-start-recovery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recovery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-replication-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-replication-request
                    'make-start-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-replication-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-replication-response-"))
   (source-server common-lisp:nil :type
    (common-lisp:or source-server common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-replication-response
                    'make-start-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server))
      (common-lisp:list
       (common-lisp:cons "sourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-source-network-recovery-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-source-network-recovery-request-"))
   (deploy-as-new common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source-networks (common-lisp:error ":sourcenetworks is required") :type
    (common-lisp:or start-source-network-recovery-request-network-entries
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-source-network-recovery-request
                    'make-start-source-network-recovery-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deploy-as-new))
      (common-lisp:list
       (common-lisp:cons "deployAsNew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-networks))
      (common-lisp:list
       (common-lisp:cons "sourceNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-source-network-recovery-request-network-entries ()
   '(trivial-types:proper-list
     start-source-network-recovery-request-network-entry))
 (common-lisp:defun make-start-source-network-recovery-request-network-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-source-network-recovery-request-network-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-source-network-recovery-request-network-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-source-network-recovery-request-network-entry-"))
   (cfn-stack-name common-lisp:nil :type
    (common-lisp:or cfn-stack-name common-lisp:null))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-source-network-recovery-request-network-entry
                    'make-start-source-network-recovery-request-network-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request-network-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request-network-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cfn-stack-name))
      (common-lisp:list
       (common-lisp:cons "cfnStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-request-network-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-source-network-recovery-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-source-network-recovery-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-source-network-recovery-response
                    'make-start-source-network-recovery-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-recovery-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-source-network-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-source-network-replication-request-"))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-source-network-replication-request
                    'make-start-source-network-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-source-network-replication-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-source-network-replication-response-"))
   (source-network common-lisp:nil :type
    (common-lisp:or source-network common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-source-network-replication-response
                    'make-start-source-network-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network))
      (common-lisp:list
       (common-lisp:cons "sourceNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-source-network-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-failback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-failback-request-"))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-failback-request 'make-stop-failback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-failback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-failback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-failback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-replication-request-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-replication-request 'make-stop-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-replication-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-replication-response-"))
   (source-server common-lisp:nil :type
    (common-lisp:or source-server common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-replication-response
                    'make-stop-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server))
      (common-lisp:list
       (common-lisp:cons "sourceServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-source-network-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-source-network-replication-request-"))
   (source-network-id (common-lisp:error ":sourcenetworkid is required") :type
    (common-lisp:or source-network-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-source-network-replication-request
                    'make-stop-source-network-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network-id))
      (common-lisp:list
       (common-lisp:cons "sourceNetworkID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-source-network-replication-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-source-network-replication-response-"))
   (source-network common-lisp:nil :type
    (common-lisp:or source-network common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-source-network-replication-response
                    'make-stop-source-network-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-network))
      (common-lisp:list
       (common-lisp:cons "sourceNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-source-network-replication-response))
   common-lisp:nil))
(common-lisp:deftype strictly-positive-integer () 'common-lisp:integer)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-instance-type-right-sizing-method ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-recovery-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-recovery-instances-request-"))
   (recovery-instance-ids
    (common-lisp:error ":recoveryinstanceids is required") :type
    (common-lisp:or recovery-instances-for-termination-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-recovery-instances-request
                    'make-terminate-recovery-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-ids))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-recovery-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-recovery-instances-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-recovery-instances-response
                    'make-terminate-recovery-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recovery-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (drs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:define-condition uninitialized-account-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       uninitialized-account-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       uninitialized-account-exception-message)))
 (common-lisp:export
  (common-lisp:list 'uninitialized-account-exception
                    'uninitialized-account-exception-code
                    'uninitialized-account-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-failback-replication-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-failback-replication-configuration-request-"))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or bounded-string common-lisp:null))
   (recovery-instance-id (common-lisp:error ":recoveryinstanceid is required")
    :type (common-lisp:or recovery-instance-id common-lisp:null))
   (use-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-failback-replication-configuration-request
                    'make-update-failback-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-failback-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-failback-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-instance-id))
      (common-lisp:list
       (common-lisp:cons "recoveryInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-private-ip))
      (common-lisp:list
       (common-lisp:cons "usePrivateIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-failback-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-launch-configuration-request-"))
   (copy-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (copy-tags common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (launch-disposition common-lisp:nil :type
    (common-lisp:or launch-disposition common-lisp:null))
   (launch-into-instance-properties common-lisp:nil :type
    (common-lisp:or launch-into-instance-properties common-lisp:null))
   (licensing common-lisp:nil :type
    (common-lisp:or licensing common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or small-bounded-string common-lisp:null))
   (post-launch-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null))
   (target-instance-type-right-sizing-method common-lisp:nil :type
    (common-lisp:or target-instance-type-right-sizing-method
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-configuration-request
                    'make-update-launch-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-instance-properties))
      (common-lisp:list
       (common-lisp:cons "launchIntoInstanceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-enabled))
      (common-lisp:list
       (common-lisp:cons "postLaunchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-configuration-template-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-launch-configuration-template-request-"))
   (copy-private-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (copy-tags common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (export-bucket-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (launch-configuration-template-id
    (common-lisp:error ":launchconfigurationtemplateid is required") :type
    (common-lisp:or launch-configuration-template-id common-lisp:null))
   (launch-disposition common-lisp:nil :type
    (common-lisp:or launch-disposition common-lisp:null))
   (launch-into-source-instance common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (licensing common-lisp:nil :type
    (common-lisp:or licensing common-lisp:null))
   (post-launch-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (target-instance-type-right-sizing-method common-lisp:nil :type
    (common-lisp:or target-instance-type-right-sizing-method
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-configuration-template-request
                    'make-update-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-bucket-arn))
      (common-lisp:list
       (common-lisp:cons "exportBucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-into-source-instance))
      (common-lisp:list
       (common-lisp:cons "launchIntoSourceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-enabled))
      (common-lisp:list
       (common-lisp:cons "postLaunchEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-launch-configuration-template-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-launch-configuration-template-response-"))
   (launch-configuration-template common-lisp:nil :type
    (common-lisp:or launch-configuration-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-launch-configuration-template-response
                    'make-update-launch-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-replication-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-replication-configuration-request-"))
   (associate-default-security-group common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-replicate-new-disks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (create-public-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-plane-routing common-lisp:nil :type
    (common-lisp:or replication-configuration-data-plane-routing
                    common-lisp:null))
   (default-large-staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-default-large-staging-disk-type
                    common-lisp:null))
   (ebs-encryption common-lisp:nil :type
    (common-lisp:or replication-configuration-ebs-encryption common-lisp:null))
   (ebs-encryption-key-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or small-bounded-string common-lisp:null))
   (pit-policy common-lisp:nil :type
    (common-lisp:or pitpolicy common-lisp:null))
   (replicated-disks common-lisp:nil :type
    (common-lisp:or replication-configuration-replicated-disks
                    common-lisp:null))
   (replication-server-instance-type common-lisp:nil :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (replication-servers-security-groups-ids common-lisp:nil :type
    (common-lisp:or replication-servers-security-groups-ids common-lisp:null))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or source-server-id common-lisp:null))
   (staging-area-subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (staging-area-tags common-lisp:nil :type
    (common-lisp:or tags-map common-lisp:null))
   (use-dedicated-replication-server common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-replication-configuration-request
                    'make-update-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-replicate-new-disks))
      (common-lisp:list
       (common-lisp:cons "autoReplicateNewDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pit-policy))
      (common-lisp:list
       (common-lisp:cons "pitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-replication-configuration-template-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-replication-configuration-template-request-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (associate-default-security-group common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-replicate-new-disks common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bandwidth-throttling common-lisp:nil :type
    (common-lisp:or positive-integer common-lisp:null))
   (create-public-ip common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-plane-routing common-lisp:nil :type
    (common-lisp:or replication-configuration-data-plane-routing
                    common-lisp:null))
   (default-large-staging-disk-type common-lisp:nil :type
    (common-lisp:or replication-configuration-default-large-staging-disk-type
                    common-lisp:null))
   (ebs-encryption common-lisp:nil :type
    (common-lisp:or replication-configuration-ebs-encryption common-lisp:null))
   (ebs-encryption-key-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (pit-policy common-lisp:nil :type
    (common-lisp:or pitpolicy common-lisp:null))
   (replication-configuration-template-id
    (common-lisp:error ":replicationconfigurationtemplateid is required") :type
    (common-lisp:or replication-configuration-template-id common-lisp:null))
   (replication-server-instance-type common-lisp:nil :type
    (common-lisp:or ec2instance-type common-lisp:null))
   (replication-servers-security-groups-ids common-lisp:nil :type
    (common-lisp:or replication-servers-security-groups-ids common-lisp:null))
   (staging-area-subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (staging-area-tags common-lisp:nil :type
    (common-lisp:or tags-map common-lisp:null))
   (use-dedicated-replication-server common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-replication-configuration-template-request
                    'make-update-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-replicate-new-disks))
      (common-lisp:list
       (common-lisp:cons "autoReplicateNewDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pit-policy))
      (common-lisp:list
       (common-lisp:cons "pitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (drs-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       validation-exception-code)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-code
                    'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or large-bounded-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype volume-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volume-to-conversion-map () 'common-lisp:hash-table)
 (common-lisp:defun make-volume-to-conversion-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype volume-to-product-codes () 'common-lisp:hash-table)
 (common-lisp:defun make-volume-to-product-codes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype volume-to-size-map () 'common-lisp:hash-table)
 (common-lisp:defun make-volume-to-size-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-source-network-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cfn-stack-name source-network-id)
   (common-lisp:declare
    (common-lisp:ignorable cfn-stack-name source-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-source-network-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/AssociateSourceNetworkStack"
                                                        "AssociateSourceNetworkStack"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-source-network-stack))
(common-lisp:progn
 (common-lisp:defun create-extended-source-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-arn tags)
   (common-lisp:declare (common-lisp:ignorable source-server-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-extended-source-server-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateExtendedSourceServer"
                                                        "CreateExtendedSourceServer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-extended-source-server))
(common-lisp:progn
 (common-lisp:defun create-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key copy-private-ip copy-tags
                     export-bucket-arn launch-disposition
                     launch-into-source-instance licensing post-launch-enabled
                     tags target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable copy-private-ip copy-tags export-bucket-arn
     launch-disposition launch-into-source-instance licensing
     post-launch-enabled tags target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateLaunchConfigurationTemplate"
                                                        "CreateLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key associate-default-security-group
                     auto-replicate-new-disks bandwidth-throttling
                     create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn pit-policy
                     replication-server-instance-type
                     replication-servers-security-groups-ids
                     staging-area-subnet-id staging-area-tags tags
                     use-dedicated-replication-server)
   (common-lisp:declare
    (common-lisp:ignorable associate-default-security-group
     auto-replicate-new-disks bandwidth-throttling create-public-ip
     data-plane-routing default-large-staging-disk-type ebs-encryption
     ebs-encryption-key-arn pit-policy replication-server-instance-type
     replication-servers-security-groups-ids staging-area-subnet-id
     staging-area-tags tags use-dedicated-replication-server))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateReplicationConfigurationTemplate"
                                                        "CreateReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-replication-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-source-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key origin-account-id origin-region tags
                     vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable origin-account-id origin-region tags vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-source-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateSourceNetwork"
                                                        "CreateSourceNetwork"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-source-network))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DeleteJob"
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-launch-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-id resource-id)
   (common-lisp:declare (common-lisp:ignorable action-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-launch-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteLaunchAction"
                                                        "DeleteLaunchAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-action))
(common-lisp:progn
 (common-lisp:defun delete-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-template-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteLaunchConfigurationTemplate"
                                                        "DeleteLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-recovery-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-id)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-recovery-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteRecoveryInstance"
                                                        "DeleteRecoveryInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-recovery-instance))
(common-lisp:progn
 (common-lisp:defun delete-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-configuration-template-id)
   (common-lisp:declare
    (common-lisp:ignorable replication-configuration-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteReplicationConfigurationTemplate"
                                                        "DeleteReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-replication-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-source-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-network-id)
   (common-lisp:declare (common-lisp:ignorable source-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-source-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteSourceNetwork"
                                                        "DeleteSourceNetwork"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-source-network))
(common-lisp:progn
 (common-lisp:defun delete-source-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-source-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteSourceServer"
                                                        "DeleteSourceServer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-source-server))
(common-lisp:progn
 (common-lisp:defun describe-job-log-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-results next-token)
   (common-lisp:declare (common-lisp:ignorable job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-log-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeJobLogItems"
                                                        "DescribeJobLogItems"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-job-log-items))
(common-lisp:progn
 (common-lisp:defun describe-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DescribeJobs"
                                                        "DescribeJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-jobs))
(common-lisp:progn
 (common-lisp:defun describe-launch-configuration-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-template-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-template-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-launch-configuration-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeLaunchConfigurationTemplates"
                                                        "DescribeLaunchConfigurationTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-launch-configuration-templates))
(common-lisp:progn
 (common-lisp:defun describe-recovery-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-recovery-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeRecoveryInstances"
                                                        "DescribeRecoveryInstances"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-recovery-instances))
(common-lisp:progn
 (common-lisp:defun describe-recovery-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token order
                     source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token order
     source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-recovery-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeRecoverySnapshots"
                                                        "DescribeRecoverySnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-recovery-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-replication-configuration-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     replication-configuration-template-ids)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token
     replication-configuration-template-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-configuration-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeReplicationConfigurationTemplates"
                                                        "DescribeReplicationConfigurationTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-replication-configuration-templates))
(common-lisp:progn
 (common-lisp:defun describe-source-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-source-networks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeSourceNetworks"
                                                        "DescribeSourceNetworks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-source-networks))
(common-lisp:progn
 (common-lisp:defun describe-source-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-source-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeSourceServers"
                                                        "DescribeSourceServers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-source-servers))
(common-lisp:progn
 (common-lisp:defun disconnect-recovery-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-id)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disconnect-recovery-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DisconnectRecoveryInstance"
                                                        "DisconnectRecoveryInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disconnect-recovery-instance))
(common-lisp:progn
 (common-lisp:defun disconnect-source-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disconnect-source-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DisconnectSourceServer"
                                                        "DisconnectSourceServer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disconnect-source-server))
(common-lisp:progn
 (common-lisp:defun export-source-network-cfn-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-network-id)
   (common-lisp:declare (common-lisp:ignorable source-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-source-network-cfn-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ExportSourceNetworkCfnTemplate"
                                                        "ExportSourceNetworkCfnTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-source-network-cfn-template))
(common-lisp:progn
 (common-lisp:defun get-failback-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-id)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-failback-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetFailbackReplicationConfiguration"
                                                        "GetFailbackReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-failback-replication-configuration))
(common-lisp:progn
 (common-lisp:defun get-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetLaunchConfiguration"
                                                        "GetLaunchConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-launch-configuration))
(common-lisp:progn
 (common-lisp:defun get-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetReplicationConfiguration"
                                                        "GetReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-replication-configuration))
(common-lisp:progn
 (common-lisp:defun initialize-service ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'drs-request :method "POST" :path
                                "/InitializeService" :operation
                                "InitializeService"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'initialize-service))
(common-lisp:progn
 (common-lisp:defun list-extensible-source-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     staging-account-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token staging-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-extensible-source-servers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListExtensibleSourceServers"
                                                        "ListExtensibleSourceServers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-extensible-source-servers))
(common-lisp:progn
 (common-lisp:defun list-launch-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     resource-id)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-launch-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListLaunchActions"
                                                        "ListLaunchActions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-launch-actions))
(common-lisp:progn
 (common-lisp:defun list-staging-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-staging-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/ListStagingAccounts"
                                                        "ListStagingAccounts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-staging-accounts))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-launch-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-code action-id action-version
                     active category description name optional order parameters
                     resource-id)
   (common-lisp:declare
    (common-lisp:ignorable action-code action-id action-version active category
     description name optional order parameters resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-launch-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutLaunchAction"
                                                        "PutLaunchAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-launch-action))
(common-lisp:progn
 (common-lisp:defun retry-data-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-data-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RetryDataReplication"
                                                        "RetryDataReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retry-data-replication))
(common-lisp:progn
 (common-lisp:defun reverse-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-id)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reverse-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ReverseReplication"
                                                        "ReverseReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reverse-replication))
(common-lisp:progn
 (common-lisp:defun start-failback-launch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-ids tags)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-failback-launch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartFailbackLaunch"
                                                        "StartFailbackLaunch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-failback-launch))
(common-lisp:progn
 (common-lisp:defun start-recovery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key is-drill source-servers tags)
   (common-lisp:declare (common-lisp:ignorable is-drill source-servers tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-recovery-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StartRecovery"
                                                        "StartRecovery"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-recovery))
(common-lisp:progn
 (common-lisp:defun start-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartReplication"
                                                        "StartReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-replication))
(common-lisp:progn
 (common-lisp:defun start-source-network-recovery
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deploy-as-new source-networks tags)
   (common-lisp:declare
    (common-lisp:ignorable deploy-as-new source-networks tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-source-network-recovery-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartSourceNetworkRecovery"
                                                        "StartSourceNetworkRecovery"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-source-network-recovery))
(common-lisp:progn
 (common-lisp:defun start-source-network-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-network-id)
   (common-lisp:declare (common-lisp:ignorable source-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-source-network-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartSourceNetworkReplication"
                                                        "StartSourceNetworkReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-source-network-replication))
(common-lisp:progn
 (common-lisp:defun stop-failback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-id)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-failback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StopFailback"
                                                        "StopFailback"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-failback))
(common-lisp:progn
 (common-lisp:defun stop-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-server-id)
   (common-lisp:declare (common-lisp:ignorable source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StopReplication"
                                                        "StopReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-replication))
(common-lisp:progn
 (common-lisp:defun stop-source-network-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-network-id)
   (common-lisp:declare (common-lisp:ignorable source-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-source-network-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StopSourceNetworkReplication"
                                                        "StopSourceNetworkReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-source-network-replication))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-recovery-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-instance-ids)
   (common-lisp:declare (common-lisp:ignorable recovery-instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-recovery-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/TerminateRecoveryInstances"
                                                        "TerminateRecoveryInstances"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-recovery-instances))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-failback-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bandwidth-throttling name
                     recovery-instance-id use-private-ip)
   (common-lisp:declare
    (common-lisp:ignorable bandwidth-throttling name recovery-instance-id
     use-private-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-failback-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateFailbackReplicationConfiguration"
                                                        "UpdateFailbackReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-failback-replication-configuration))
(common-lisp:progn
 (common-lisp:defun update-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key copy-private-ip copy-tags
                     launch-disposition launch-into-instance-properties
                     licensing name post-launch-enabled source-server-id
                     target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable copy-private-ip copy-tags launch-disposition
     launch-into-instance-properties licensing name post-launch-enabled
     source-server-id target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateLaunchConfiguration"
                                                        "UpdateLaunchConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-configuration))
(common-lisp:progn
 (common-lisp:defun update-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key copy-private-ip copy-tags
                     export-bucket-arn launch-configuration-template-id
                     launch-disposition launch-into-source-instance licensing
                     post-launch-enabled
                     target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable copy-private-ip copy-tags export-bucket-arn
     launch-configuration-template-id launch-disposition
     launch-into-source-instance licensing post-launch-enabled
     target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateLaunchConfigurationTemplate"
                                                        "UpdateLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun update-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key associate-default-security-group
                     auto-replicate-new-disks bandwidth-throttling
                     create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn name pit-policy replicated-disks
                     replication-server-instance-type
                     replication-servers-security-groups-ids source-server-id
                     staging-area-subnet-id staging-area-tags
                     use-dedicated-replication-server)
   (common-lisp:declare
    (common-lisp:ignorable associate-default-security-group
     auto-replicate-new-disks bandwidth-throttling create-public-ip
     data-plane-routing default-large-staging-disk-type ebs-encryption
     ebs-encryption-key-arn name pit-policy replicated-disks
     replication-server-instance-type replication-servers-security-groups-ids
     source-server-id staging-area-subnet-id staging-area-tags
     use-dedicated-replication-server))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateReplicationConfiguration"
                                                        "UpdateReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-replication-configuration))
(common-lisp:progn
 (common-lisp:defun update-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn associate-default-security-group
                     auto-replicate-new-disks bandwidth-throttling
                     create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn pit-policy
                     replication-configuration-template-id
                     replication-server-instance-type
                     replication-servers-security-groups-ids
                     staging-area-subnet-id staging-area-tags
                     use-dedicated-replication-server)
   (common-lisp:declare
    (common-lisp:ignorable arn associate-default-security-group
     auto-replicate-new-disks bandwidth-throttling create-public-ip
     data-plane-routing default-large-staging-disk-type ebs-encryption
     ebs-encryption-key-arn pit-policy replication-configuration-template-id
     replication-server-instance-type replication-servers-security-groups-ids
     staging-area-subnet-id staging-area-tags
     use-dedicated-replication-server))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'drs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateReplicationConfigurationTemplate"
                                                        "UpdateReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-replication-configuration-template))
