;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/fsx/api
  (:use)
  (:nicknames #:aws/fsx)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/fsx/api)
(common-lisp:progn
 (common-lisp:defclass fsx-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "fsx" :protocol :json))
 (common-lisp:export 'fsx-request))
(common-lisp:progn
 (common-lisp:define-condition fsx-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'fsx-error))
(common-lisp:defvar *error-map*
  '(("ActiveDirectoryError" . active-directory-error)
    ("BackupBeingCopied" . backup-being-copied)
    ("BackupInProgress" . backup-in-progress)
    ("BackupNotFound" . backup-not-found)
    ("BackupRestoring" . backup-restoring) ("BadRequest" . bad-request)
    ("DataRepositoryAssociationNotFound"
     . data-repository-association-not-found)
    ("DataRepositoryTaskEnded" . data-repository-task-ended)
    ("DataRepositoryTaskExecuting" . data-repository-task-executing)
    ("DataRepositoryTaskNotFound" . data-repository-task-not-found)
    ("FileCacheNotFound" . file-cache-not-found)
    ("FileSystemNotFound" . file-system-not-found)
    ("IncompatibleParameterError" . incompatible-parameter-error)
    ("IncompatibleRegionForMultiAZ" . incompatible-region-for-multi-az)
    ("InternalServerError" . internal-server-error)
    ("InvalidDataRepositoryType" . invalid-data-repository-type)
    ("InvalidDestinationKmsKey" . invalid-destination-kms-key)
    ("InvalidExportPath" . invalid-export-path)
    ("InvalidImportPath" . invalid-import-path)
    ("InvalidNetworkSettings" . invalid-network-settings)
    ("InvalidPerUnitStorageThroughput" . invalid-per-unit-storage-throughput)
    ("InvalidRegion" . invalid-region)
    ("InvalidSourceKmsKey" . invalid-source-kms-key)
    ("MissingFileCacheConfiguration" . missing-file-cache-configuration)
    ("MissingFileSystemConfiguration" . missing-file-system-configuration)
    ("MissingVolumeConfiguration" . missing-volume-configuration)
    ("NotServiceResourceError" . not-service-resource-error)
    ("ResourceDoesNotSupportTagging" . resource-does-not-support-tagging)
    ("ResourceNotFound" . resource-not-found)
    ("ServiceLimitExceeded" . service-limit-exceeded)
    ("SnapshotNotFound" . snapshot-not-found)
    ("SourceBackupUnavailable" . source-backup-unavailable)
    ("StorageVirtualMachineNotFound" . storage-virtual-machine-not-found)
    ("UnsupportedOperation" . unsupported-operation)
    ("VolumeNotFound" . volume-not-found)))
(common-lisp:deftype awsaccount-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass active-directory-backup-attributes common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %active-directory-backup-attributes-resource-arn
                         :initform common-lisp:nil)
                        (active-directory-id :initarg :active-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %active-directory-backup-attributes-active-directory-id
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or active-directory-fully-qualified-name
                                         common-lisp:null)
                         :accessor
                         %active-directory-backup-attributes-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'active-directory-backup-attributes
                    'make-active-directory-backup-attributes))
 (common-lisp:defun make-active-directory-backup-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn active-directory-id
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'active-directory-backup-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-backup-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-backup-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory-id))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-directory-backup-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition active-directory-error
     (fsx-error)
     ((active-directory-id :initarg :active-directory-id :initform
       common-lisp:nil :reader active-directory-error-active-directory-id)
      (type :initarg :type :initform common-lisp:nil :reader
       active-directory-error-type)
      (message :initarg :message :initform common-lisp:nil :reader
       active-directory-error-message)))
 (common-lisp:export
  (common-lisp:list 'active-directory-error
                    'active-directory-error-active-directory-id
                    'active-directory-error-type
                    'active-directory-error-message)))
(common-lisp:deftype active-directory-error-type () 'common-lisp:string)
(common-lisp:deftype active-directory-fully-qualified-name ()
  'common-lisp:string)
(common-lisp:deftype admin-password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass administrative-action common-lisp:nil
                       ((target-snapshot-values :initarg
                         :target-snapshot-values :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %administrative-action-target-snapshot-values
                         :initform common-lisp:nil)
                        (target-volume-values :initarg :target-volume-values
                         :type (common-lisp:or volume common-lisp:null)
                         :accessor %administrative-action-target-volume-values
                         :initform common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or administrative-action-failure-details
                                         common-lisp:null)
                         :accessor %administrative-action-failure-details
                         :initform common-lisp:nil)
                        (target-file-system-values :initarg
                         :target-file-system-values :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor
                         %administrative-action-target-file-system-values
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %administrative-action-status :initform
                         common-lisp:nil)
                        (request-time :initarg :request-time :type
                         (common-lisp:or request-time common-lisp:null)
                         :accessor %administrative-action-request-time
                         :initform common-lisp:nil)
                        (progress-percent :initarg :progress-percent :type
                         (common-lisp:or progress-percent common-lisp:null)
                         :accessor %administrative-action-progress-percent
                         :initform common-lisp:nil)
                        (administrative-action-type :initarg
                         :administrative-action-type :type
                         (common-lisp:or administrative-action-type
                                         common-lisp:null)
                         :accessor
                         %administrative-action-administrative-action-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'administrative-action 'make-administrative-action))
 (common-lisp:defun make-administrative-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-snapshot-values
                     target-volume-values failure-details
                     target-file-system-values status request-time
                     progress-percent administrative-action-type)
   (common-lisp:apply #'common-lisp:make-instance 'administrative-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrative-action-type))
      (common-lisp:list
       (common-lisp:cons "AdministrativeActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percent))
      (common-lisp:list
       (common-lisp:cons "ProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "RequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-file-system-values))
      (common-lisp:list
       (common-lisp:cons "TargetFileSystemValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-volume-values))
      (common-lisp:list
       (common-lisp:cons "TargetVolumeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-values))
      (common-lisp:list
       (common-lisp:cons "TargetSnapshotValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass administrative-action-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %administrative-action-failure-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'administrative-action-failure-details
                    'make-administrative-action-failure-details))
 (common-lisp:defun make-administrative-action-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance
                      'administrative-action-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          administrative-action-failure-details))
   common-lisp:nil))
(common-lisp:deftype administrative-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype administrative-actions ()
   '(trivial-types:proper-list administrative-action))
 (common-lisp:defun |make-administrative-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list administrative-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass alias common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or alias-lifecycle common-lisp:null)
                         :accessor %alias-lifecycle :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or alternate-dnsname common-lisp:null)
                         :accessor %alias-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alias 'make-alias))
 (common-lisp:defun make-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle name)
   (common-lisp:apply #'common-lisp:make-instance 'alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias))
   common-lisp:nil))
(common-lisp:deftype alias-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aliases () '(trivial-types:proper-list alias))
 (common-lisp:defun |make-aliases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alternate-dnsname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alternate-dnsnames ()
   '(trivial-types:proper-list alternate-dnsname))
 (common-lisp:defun |make-alternate-dnsnames|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alternate-dnsname))
   aws-sdk/generator/shape::members))
(common-lisp:deftype archive-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-file-system-aliases-request common-lisp:nil
                       ((aliases :initarg :aliases :type
                         (common-lisp:or alternate-dnsnames common-lisp:null)
                         :accessor
                         %associate-file-system-aliases-request-aliases
                         :initform (common-lisp:error ":aliases is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %associate-file-system-aliases-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %associate-file-system-aliases-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-file-system-aliases-request
                    'make-associate-file-system-aliases-request))
 (common-lisp:defun make-associate-file-system-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aliases file-system-id
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-file-system-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-file-system-aliases-response common-lisp:nil
                       ((aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %associate-file-system-aliases-response-aliases
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-file-system-aliases-response
                    'make-associate-file-system-aliases-response))
 (common-lisp:defun make-associate-file-system-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aliases)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-file-system-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-file-system-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-export-policy common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-types common-lisp:null)
                         :accessor %auto-export-policy-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-export-policy 'make-auto-export-policy))
 (common-lisp:defun make-auto-export-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events)
   (common-lisp:apply #'common-lisp:make-instance 'auto-export-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-export-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-export-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-export-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-import-policy common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-types common-lisp:null)
                         :accessor %auto-import-policy-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-import-policy 'make-auto-import-policy))
 (common-lisp:defun make-auto-import-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events)
   (common-lisp:apply #'common-lisp:make-instance 'auto-import-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-import-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-import-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-import-policy))
   common-lisp:nil))
(common-lisp:deftype auto-import-policy-type () 'common-lisp:string)
(common-lisp:deftype automatic-backup-retention-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass backup common-lisp:nil
                       ((volume :initarg :volume :type
                         (common-lisp:or volume common-lisp:null) :accessor
                         %backup-volume :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %backup-resource-type :initform
                         common-lisp:nil)
                        (source-backup-region :initarg :source-backup-region
                         :type (common-lisp:or region common-lisp:null)
                         :accessor %backup-source-backup-region :initform
                         common-lisp:nil)
                        (source-backup-id :initarg :source-backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %backup-source-backup-id :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %backup-owner-id :initform common-lisp:nil)
                        (directory-information :initarg :directory-information
                         :type
                         (common-lisp:or active-directory-backup-attributes
                                         common-lisp:null)
                         :accessor %backup-directory-information :initform
                         common-lisp:nil)
                        (file-system :initarg :file-system :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor %backup-file-system :initform
                         (common-lisp:error ":file-system is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %backup-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %backup-resource-arn :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %backup-kms-key-id :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %backup-creation-time :initform
                         (common-lisp:error ":creation-time is required"))
                        (progress-percent :initarg :progress-percent :type
                         (common-lisp:or progress-percent common-lisp:null)
                         :accessor %backup-progress-percent :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or backup-type common-lisp:null)
                         :accessor %backup-type :initform
                         (common-lisp:error ":type is required"))
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or backup-failure-details
                                         common-lisp:null)
                         :accessor %backup-failure-details :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or backup-lifecycle common-lisp:null)
                         :accessor %backup-lifecycle :initform
                         (common-lisp:error ":lifecycle is required"))
                        (backup-id :initarg :backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %backup-backup-id :initform
                         (common-lisp:error ":backup-id is required"))))
 (common-lisp:export (common-lisp:list 'backup 'make-backup))
 (common-lisp:defun make-backup
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume resource-type source-backup-region
                     source-backup-id owner-id directory-information
                     file-system tags resource-arn kms-key-id creation-time
                     progress-percent type failure-details lifecycle backup-id)
   (common-lisp:apply #'common-lisp:make-instance 'backup
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percent))
      (common-lisp:list
       (common-lisp:cons "ProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system))
      (common-lisp:list
       (common-lisp:cons "FileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-information))
      (common-lisp:list
       (common-lisp:cons "DirectoryInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-id))
      (common-lisp:list
       (common-lisp:cons "SourceBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-region))
      (common-lisp:list
       (common-lisp:cons "SourceBackupRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition backup-being-copied
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       backup-being-copied-message)
      (backup-id :initarg :backup-id :initform common-lisp:nil :reader
       backup-being-copied-backup-id)))
 (common-lisp:export
  (common-lisp:list 'backup-being-copied 'backup-being-copied-message
                    'backup-being-copied-backup-id)))
(common-lisp:progn
 (common-lisp:defclass backup-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %backup-failure-details-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backup-failure-details 'make-backup-failure-details))
 (common-lisp:defun make-backup-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'backup-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backup-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backup-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backup-failure-details))
   common-lisp:nil))
(common-lisp:deftype backup-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backup-ids () '(trivial-types:proper-list backup-id))
 (common-lisp:defun |make-backup-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition backup-in-progress
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       backup-in-progress-message)))
 (common-lisp:export
  (common-lisp:list 'backup-in-progress 'backup-in-progress-message)))
(common-lisp:deftype backup-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition backup-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       backup-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'backup-not-found 'backup-not-found-message)))
(common-lisp:progn
 (common-lisp:define-condition backup-restoring
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       backup-restoring-message)
      (file-system-id :initarg :file-system-id :initform common-lisp:nil
       :reader backup-restoring-file-system-id)))
 (common-lisp:export
  (common-lisp:list 'backup-restoring 'backup-restoring-message
                    'backup-restoring-file-system-id)))
(common-lisp:deftype backup-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backups () '(trivial-types:proper-list backup))
 (common-lisp:defun |make-backups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backup))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-message)))
 (common-lisp:export (common-lisp:list 'bad-request 'bad-request-message)))
(common-lisp:deftype batch-import-meta-data-on-create () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-data-repository-task-request common-lisp:nil
                       ((task-id :initarg :task-id :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %cancel-data-repository-task-request-task-id :initform
                         (common-lisp:error ":task-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-data-repository-task-request
                    'make-cancel-data-repository-task-request))
 (common-lisp:defun make-cancel-data-repository-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-repository-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-data-repository-task-response common-lisp:nil
                       ((task-id :initarg :task-id :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %cancel-data-repository-task-response-task-id
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or data-repository-task-lifecycle
                                         common-lisp:null)
                         :accessor
                         %cancel-data-repository-task-response-lifecycle
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-data-repository-task-response
                    'make-cancel-data-repository-task-response))
 (common-lisp:defun make-cancel-data-repository-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id lifecycle)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-repository-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-repository-task-response))
   common-lisp:nil))
(common-lisp:deftype capacity-to-release () 'common-lisp:integer)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass completion-report common-lisp:nil
                       ((scope :initarg :scope :type
                         (common-lisp:or report-scope common-lisp:null)
                         :accessor %completion-report-scope :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or report-format common-lisp:null)
                         :accessor %completion-report-format :initform
                         common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or archive-path common-lisp:null)
                         :accessor %completion-report-path :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %completion-report-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'completion-report 'make-completion-report))
 (common-lisp:defun make-completion-report
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scope format path enabled)
   (common-lisp:apply #'common-lisp:make-instance 'completion-report
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input completion-report))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input completion-report))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input completion-report))
   common-lisp:nil))
(common-lisp:deftype cooling-period () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass copy-backup-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %copy-backup-request-tags :initform common-lisp:nil)
                        (copy-tags :initarg :copy-tags :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %copy-backup-request-copy-tags :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %copy-backup-request-kms-key-id :initform
                         common-lisp:nil)
                        (source-region :initarg :source-region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %copy-backup-request-source-region :initform
                         common-lisp:nil)
                        (source-backup-id :initarg :source-backup-id :type
                         (common-lisp:or source-backup-id common-lisp:null)
                         :accessor %copy-backup-request-source-backup-id
                         :initform
                         (common-lisp:error ":source-backup-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %copy-backup-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-backup-request 'make-copy-backup-request))
 (common-lisp:defun make-copy-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags copy-tags kms-key-id source-region
                     source-backup-id client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'copy-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-id))
      (common-lisp:list
       (common-lisp:cons "SourceBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-backup-response common-lisp:nil
                       ((backup :initarg :backup :type
                         (common-lisp:or backup common-lisp:null) :accessor
                         %copy-backup-response-backup :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-backup-response 'make-copy-backup-response))
 (common-lisp:defun make-copy-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup)
   (common-lisp:apply #'common-lisp:make-instance 'copy-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-backup-response))
   common-lisp:nil))
(common-lisp:deftype copy-tags-to-data-repository-associations ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-backup-request common-lisp:nil
                       ((volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %create-backup-request-volume-id :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-backup-request-tags :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-backup-request-client-request-token
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %create-backup-request-file-system-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backup-request 'make-create-backup-request))
 (common-lisp:defun make-create-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-id tags client-request-token
                     file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backup-response common-lisp:nil
                       ((backup :initarg :backup :type
                         (common-lisp:or backup common-lisp:null) :accessor
                         %create-backup-response-backup :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backup-response 'make-create-backup-response))
 (common-lisp:defun make-create-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup)
   (common-lisp:apply #'common-lisp:make-instance 'create-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup))
      (common-lisp:list
       (common-lisp:cons "Backup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-repository-association-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-data-repository-association-request-tags
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-data-repository-association-request-client-request-token
                         :initform common-lisp:nil)
                        (s3 :initarg :s3 :type
                         (common-lisp:or s3data-repository-configuration
                                         common-lisp:null)
                         :accessor
                         %create-data-repository-association-request-s3
                         :initform common-lisp:nil)
                        (imported-file-chunk-size :initarg
                         :imported-file-chunk-size :type
                         (common-lisp:or megabytes common-lisp:null) :accessor
                         %create-data-repository-association-request-imported-file-chunk-size
                         :initform common-lisp:nil)
                        (batch-import-meta-data-on-create :initarg
                         :batch-import-meta-data-on-create :type
                         (common-lisp:or batch-import-meta-data-on-create
                                         common-lisp:null)
                         :accessor
                         %create-data-repository-association-request-batch-import-meta-data-on-create
                         :initform common-lisp:nil)
                        (data-repository-path :initarg :data-repository-path
                         :type (common-lisp:or archive-path common-lisp:null)
                         :accessor
                         %create-data-repository-association-request-data-repository-path
                         :initform
                         (common-lisp:error
                          ":data-repository-path is required"))
                        (file-system-path :initarg :file-system-path :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %create-data-repository-association-request-file-system-path
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %create-data-repository-association-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-repository-association-request
                    'make-create-data-repository-association-request))
 (common-lisp:defun make-create-data-repository-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-request-token s3
                     imported-file-chunk-size batch-import-meta-data-on-create
                     data-repository-path file-system-path file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-repository-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-path))
      (common-lisp:list
       (common-lisp:cons "FileSystemPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-path))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-import-meta-data-on-create))
      (common-lisp:list
       (common-lisp:cons "BatchImportMetaDataOnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-file-chunk-size))
      (common-lisp:list
       (common-lisp:cons "ImportedFileChunkSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-repository-association-response
                       common-lisp:nil
                       ((association :initarg :association :type
                         (common-lisp:or data-repository-association
                                         common-lisp:null)
                         :accessor
                         %create-data-repository-association-response-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-repository-association-response
                    'make-create-data-repository-association-response))
 (common-lisp:defun make-create-data-repository-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-repository-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-repository-task-request common-lisp:nil
                       ((capacity-to-release :initarg :capacity-to-release
                         :type
                         (common-lisp:or capacity-to-release common-lisp:null)
                         :accessor
                         %create-data-repository-task-request-capacity-to-release
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-data-repository-task-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-data-repository-task-request-client-request-token
                         :initform common-lisp:nil)
                        (report :initarg :report :type
                         (common-lisp:or completion-report common-lisp:null)
                         :accessor %create-data-repository-task-request-report
                         :initform (common-lisp:error ":report is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %create-data-repository-task-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (paths :initarg :paths :type
                         (common-lisp:or data-repository-task-paths
                                         common-lisp:null)
                         :accessor %create-data-repository-task-request-paths
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or data-repository-task-type
                                         common-lisp:null)
                         :accessor %create-data-repository-task-request-type
                         :initform (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'create-data-repository-task-request
                    'make-create-data-repository-task-request))
 (common-lisp:defun make-create-data-repository-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-to-release tags
                     client-request-token report file-system-id paths type)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-repository-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-to-release))
      (common-lisp:list
       (common-lisp:cons "CapacityToRelease"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-repository-task-response common-lisp:nil
                       ((data-repository-task :initarg :data-repository-task
                         :type
                         (common-lisp:or data-repository-task common-lisp:null)
                         :accessor
                         %create-data-repository-task-response-data-repository-task
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-data-repository-task-response
                    'make-create-data-repository-task-response))
 (common-lisp:defun make-create-data-repository-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-repository-task)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-repository-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-task))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-repository-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-file-cache-data-repository-associations ()
   '(trivial-types:proper-list file-cache-data-repository-association))
 (common-lisp:defun |make-create-file-cache-data-repository-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            file-cache-data-repository-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-file-cache-lustre-configuration common-lisp:nil
                       ((metadata-configuration :initarg
                         :metadata-configuration :type
                         (common-lisp:or
                          file-cache-lustre-metadata-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-cache-lustre-configuration-metadata-configuration
                         :initform
                         (common-lisp:error
                          ":metadata-configuration is required"))
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %create-file-cache-lustre-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or file-cache-lustre-deployment-type
                                         common-lisp:null)
                         :accessor
                         %create-file-cache-lustre-configuration-deployment-type
                         :initform
                         (common-lisp:error ":deployment-type is required"))
                        (per-unit-storage-throughput :initarg
                         :per-unit-storage-throughput :type
                         (common-lisp:or per-unit-storage-throughput
                                         common-lisp:null)
                         :accessor
                         %create-file-cache-lustre-configuration-per-unit-storage-throughput
                         :initform
                         (common-lisp:error
                          ":per-unit-storage-throughput is required"))))
 (common-lisp:export
  (common-lisp:list 'create-file-cache-lustre-configuration
                    'make-create-file-cache-lustre-configuration))
 (common-lisp:defun make-create-file-cache-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-configuration
                     weekly-maintenance-start-time deployment-type
                     per-unit-storage-throughput)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-cache-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'per-unit-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "PerUnitStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-configuration))
      (common-lisp:list
       (common-lisp:cons "MetadataConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-lustre-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-cache-request common-lisp:nil
                       ((data-repository-associations :initarg
                         :data-repository-associations :type
                         (common-lisp:or
                          create-file-cache-data-repository-associations
                          common-lisp:null)
                         :accessor
                         %create-file-cache-request-data-repository-associations
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or create-file-cache-lustre-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-cache-request-lustre-configuration
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-file-cache-request-kms-key-id :initform
                         common-lisp:nil)
                        (copy-tags-to-data-repository-associations :initarg
                         :copy-tags-to-data-repository-associations :type
                         (common-lisp:or
                          copy-tags-to-data-repository-associations
                          common-lisp:null)
                         :accessor
                         %create-file-cache-request-copy-tags-to-data-repository-associations
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-file-cache-request-tags :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %create-file-cache-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %create-file-cache-request-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %create-file-cache-request-storage-capacity
                         :initform
                         (common-lisp:error ":storage-capacity is required"))
                        (file-cache-type-version :initarg
                         :file-cache-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor
                         %create-file-cache-request-file-cache-type-version
                         :initform
                         (common-lisp:error
                          ":file-cache-type-version is required"))
                        (file-cache-type :initarg :file-cache-type :type
                         (common-lisp:or file-cache-type common-lisp:null)
                         :accessor %create-file-cache-request-file-cache-type
                         :initform
                         (common-lisp:error ":file-cache-type is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-file-cache-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-cache-request
                    'make-create-file-cache-request))
 (common-lisp:defun make-create-file-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-repository-associations
                     lustre-configuration kms-key-id
                     copy-tags-to-data-repository-associations tags
                     security-group-ids subnet-ids storage-capacity
                     file-cache-type-version file-cache-type
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-file-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-type))
      (common-lisp:list
       (common-lisp:cons "FileCacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-cache-type-version))
      (common-lisp:list
       (common-lisp:cons "FileCacheTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-data-repository-associations))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToDataRepositoryAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-associations))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-cache-response common-lisp:nil
                       ((file-cache :initarg :file-cache :type
                         (common-lisp:or file-cache-creating common-lisp:null)
                         :accessor %create-file-cache-response-file-cache
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-cache-response
                    'make-create-file-cache-response))
 (common-lisp:defun make-create-file-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-cache)
   (common-lisp:apply #'common-lisp:make-instance 'create-file-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache))
      (common-lisp:list
       (common-lisp:cons "FileCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-from-backup-request common-lisp:nil
                       ((storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-storage-capacity
                         :initform common-lisp:nil)
                        (open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or
                          create-file-system-open-zfsconfiguration
                          common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (file-system-type-version :initarg
                         :file-system-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-file-system-type-version
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-file-system-from-backup-request-kms-key-id
                         :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-storage-type
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or
                          create-file-system-lustre-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-lustre-configuration
                         :initform common-lisp:nil)
                        (windows-configuration :initarg :windows-configuration
                         :type
                         (common-lisp:or
                          create-file-system-windows-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-windows-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-file-system-from-backup-request-tags :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %create-file-system-from-backup-request-subnet-ids
                         :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-request-client-request-token
                         :initform common-lisp:nil)
                        (backup-id :initarg :backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %create-file-system-from-backup-request-backup-id
                         :initform
                         (common-lisp:error ":backup-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-file-system-from-backup-request
                    'make-create-file-system-from-backup-request))
 (common-lisp:defun make-create-file-system-from-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-capacity open-zfsconfiguration
                     file-system-type-version kms-key-id storage-type
                     lustre-configuration windows-configuration tags
                     security-group-ids subnet-ids client-request-token
                     backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-from-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'windows-configuration))
      (common-lisp:list
       (common-lisp:cons "WindowsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-type-version))
      (common-lisp:list
       (common-lisp:cons "FileSystemTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-from-backup-response common-lisp:nil
                       ((file-system :initarg :file-system :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor
                         %create-file-system-from-backup-response-file-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-from-backup-response
                    'make-create-file-system-from-backup-response))
 (common-lisp:defun make-create-file-system-from-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-from-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system))
      (common-lisp:list
       (common-lisp:cons "FileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-from-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-lustre-configuration common-lisp:nil
                       ((root-squash-configuration :initarg
                         :root-squash-configuration :type
                         (common-lisp:or lustre-root-squash-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-root-squash-configuration
                         :initform common-lisp:nil)
                        (log-configuration :initarg :log-configuration :type
                         (common-lisp:or lustre-log-create-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-log-configuration
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or data-compression-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (drive-cache-type :initarg :drive-cache-type :type
                         (common-lisp:or drive-cache-type common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-drive-cache-type
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %create-file-system-lustre-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %create-file-system-lustre-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (per-unit-storage-throughput :initarg
                         :per-unit-storage-throughput :type
                         (common-lisp:or per-unit-storage-throughput
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-per-unit-storage-throughput
                         :initform common-lisp:nil)
                        (auto-import-policy :initarg :auto-import-policy :type
                         (common-lisp:or auto-import-policy-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-auto-import-policy
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or lustre-deployment-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-deployment-type
                         :initform common-lisp:nil)
                        (imported-file-chunk-size :initarg
                         :imported-file-chunk-size :type
                         (common-lisp:or megabytes common-lisp:null) :accessor
                         %create-file-system-lustre-configuration-imported-file-chunk-size
                         :initform common-lisp:nil)
                        (export-path :initarg :export-path :type
                         (common-lisp:or archive-path common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-export-path
                         :initform common-lisp:nil)
                        (import-path :initarg :import-path :type
                         (common-lisp:or archive-path common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-import-path
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %create-file-system-lustre-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-lustre-configuration
                    'make-create-file-system-lustre-configuration))
 (common-lisp:defun make-create-file-system-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-squash-configuration
                     log-configuration data-compression-type drive-cache-type
                     copy-tags-to-backups automatic-backup-retention-days
                     daily-automatic-backup-start-time
                     per-unit-storage-throughput auto-import-policy
                     deployment-type imported-file-chunk-size export-path
                     import-path weekly-maintenance-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-path))
      (common-lisp:list
       (common-lisp:cons "ImportPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-path))
      (common-lisp:list
       (common-lisp:cons "ExportPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-file-chunk-size))
      (common-lisp:list
       (common-lisp:cons "ImportedFileChunkSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-import-policy))
      (common-lisp:list
       (common-lisp:cons "AutoImportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'per-unit-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "PerUnitStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drive-cache-type))
      (common-lisp:list
       (common-lisp:cons "DriveCacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-squash-configuration))
      (common-lisp:list
       (common-lisp:cons "RootSquashConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-lustre-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-ontap-configuration common-lisp:nil
                       ((weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-throughput-capacity
                         :initform
                         (common-lisp:error
                          ":throughput-capacity is required"))
                        (route-table-ids :initarg :route-table-ids :type
                         (common-lisp:or route-table-ids common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-route-table-ids
                         :initform common-lisp:nil)
                        (preferred-subnet-id :initarg :preferred-subnet-id
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-preferred-subnet-id
                         :initform common-lisp:nil)
                        (disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (fsx-admin-password :initarg :fsx-admin-password :type
                         (common-lisp:or admin-password common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-fsx-admin-password
                         :initform common-lisp:nil)
                        (endpoint-ip-address-range :initarg
                         :endpoint-ip-address-range :type
                         (common-lisp:or ip-address-range common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-endpoint-ip-address-range
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or ontap-deployment-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-deployment-type
                         :initform
                         (common-lisp:error ":deployment-type is required"))
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %create-file-system-ontap-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %create-file-system-ontap-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-ontap-configuration
                    'make-create-file-system-ontap-configuration))
 (common-lisp:defun make-create-file-system-ontap-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weekly-maintenance-start-time
                     throughput-capacity route-table-ids preferred-subnet-id
                     disk-iops-configuration fsx-admin-password
                     endpoint-ip-address-range deployment-type
                     daily-automatic-backup-start-time
                     automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-ontap-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-ontap-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-ontap-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-ip-address-range))
      (common-lisp:list
       (common-lisp:cons "EndpointIpAddressRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fsx-admin-password))
      (common-lisp:list
       (common-lisp:cons "FsxAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-subnet-id))
      (common-lisp:list
       (common-lisp:cons "PreferredSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-ontap-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-open-zfsconfiguration common-lisp:nil
                       ((root-volume-configuration :initarg
                         :root-volume-configuration :type
                         (common-lisp:or
                          open-zfscreate-root-volume-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-root-volume-configuration
                         :initform common-lisp:nil)
                        (disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-throughput-capacity
                         :initform
                         (common-lisp:error
                          ":throughput-capacity is required"))
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or open-zfsdeployment-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-deployment-type
                         :initform
                         (common-lisp:error ":deployment-type is required"))
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %create-file-system-open-zfsconfiguration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (copy-tags-to-volumes :initarg :copy-tags-to-volumes
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %create-file-system-open-zfsconfiguration-copy-tags-to-volumes
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %create-file-system-open-zfsconfiguration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %create-file-system-open-zfsconfiguration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-open-zfsconfiguration
                    'make-create-file-system-open-zfsconfiguration))
 (common-lisp:defun make-create-file-system-open-zfsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-volume-configuration
                     disk-iops-configuration weekly-maintenance-start-time
                     throughput-capacity deployment-type
                     daily-automatic-backup-start-time copy-tags-to-volumes
                     copy-tags-to-backups automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-open-zfsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-open-zfsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-open-zfsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-volumes))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "RootVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-open-zfsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or
                          create-file-system-open-zfsconfiguration
                          common-lisp:null)
                         :accessor
                         %create-file-system-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (file-system-type-version :initarg
                         :file-system-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor
                         %create-file-system-request-file-system-type-version
                         :initform common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or create-file-system-ontap-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-request-ontap-configuration
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or
                          create-file-system-lustre-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-request-lustre-configuration
                         :initform common-lisp:nil)
                        (windows-configuration :initarg :windows-configuration
                         :type
                         (common-lisp:or
                          create-file-system-windows-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-request-windows-configuration
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-file-system-request-kms-key-id :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-file-system-request-tags :initform
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor
                         %create-file-system-request-security-group-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %create-file-system-request-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor %create-file-system-request-storage-type
                         :initform common-lisp:nil)
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %create-file-system-request-storage-capacity
                         :initform
                         (common-lisp:error ":storage-capacity is required"))
                        (file-system-type :initarg :file-system-type :type
                         (common-lisp:or file-system-type common-lisp:null)
                         :accessor %create-file-system-request-file-system-type
                         :initform
                         (common-lisp:error ":file-system-type is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-file-system-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-request
                    'make-create-file-system-request))
 (common-lisp:defun make-create-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration
                     file-system-type-version ontap-configuration
                     lustre-configuration windows-configuration kms-key-id tags
                     security-group-ids subnet-ids storage-type
                     storage-capacity file-system-type client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "FileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'windows-configuration))
      (common-lisp:list
       (common-lisp:cons "WindowsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-type-version))
      (common-lisp:list
       (common-lisp:cons "FileSystemTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-response common-lisp:nil
                       ((file-system :initarg :file-system :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor %create-file-system-response-file-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-response
                    'make-create-file-system-response))
 (common-lisp:defun make-create-file-system-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system)
   (common-lisp:apply #'common-lisp:make-instance 'create-file-system-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system))
      (common-lisp:list
       (common-lisp:cons "FileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-file-system-windows-configuration common-lisp:nil
                       ((audit-log-configuration :initarg
                         :audit-log-configuration :type
                         (common-lisp:or windows-audit-log-create-configuration
                                         common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-audit-log-configuration
                         :initform common-lisp:nil)
                        (aliases :initarg :aliases :type
                         (common-lisp:or alternate-dnsnames common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-aliases
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %create-file-system-windows-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %create-file-system-windows-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-throughput-capacity
                         :initform
                         (common-lisp:error
                          ":throughput-capacity is required"))
                        (preferred-subnet-id :initarg :preferred-subnet-id
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-preferred-subnet-id
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or windows-deployment-type
                                         common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-deployment-type
                         :initform common-lisp:nil)
                        (self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-configuration
                          common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)
                        (active-directory-id :initarg :active-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %create-file-system-windows-configuration-active-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-file-system-windows-configuration
                    'make-create-file-system-windows-configuration))
 (common-lisp:defun make-create-file-system-windows-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-log-configuration aliases
                     copy-tags-to-backups automatic-backup-retention-days
                     daily-automatic-backup-start-time
                     weekly-maintenance-start-time throughput-capacity
                     preferred-subnet-id deployment-type
                     self-managed-active-directory-configuration
                     active-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-file-system-windows-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-windows-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-windows-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory-id))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-subnet-id))
      (common-lisp:list
       (common-lisp:cons "PreferredSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-log-configuration))
      (common-lisp:list
       (common-lisp:cons "AuditLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-file-system-windows-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ontap-volume-configuration common-lisp:nil
                       ((copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %create-ontap-volume-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (snapshot-policy :initarg :snapshot-policy :type
                         (common-lisp:or snapshot-policy common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-snapshot-policy
                         :initform common-lisp:nil)
                        (ontap-volume-type :initarg :ontap-volume-type :type
                         (common-lisp:or input-ontap-volume-type
                                         common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-ontap-volume-type
                         :initform common-lisp:nil)
                        (tiering-policy :initarg :tiering-policy :type
                         (common-lisp:or tiering-policy common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-tiering-policy
                         :initform common-lisp:nil)
                        (storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-storage-virtual-machine-id
                         :initform
                         (common-lisp:error
                          ":storage-virtual-machine-id is required"))
                        (storage-efficiency-enabled :initarg
                         :storage-efficiency-enabled :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %create-ontap-volume-configuration-storage-efficiency-enabled
                         :initform common-lisp:nil)
                        (size-in-megabytes :initarg :size-in-megabytes :type
                         (common-lisp:or volume-capacity common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-size-in-megabytes
                         :initform
                         (common-lisp:error ":size-in-megabytes is required"))
                        (security-style :initarg :security-style :type
                         (common-lisp:or security-style common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-security-style
                         :initform common-lisp:nil)
                        (junction-path :initarg :junction-path :type
                         (common-lisp:or junction-path common-lisp:null)
                         :accessor
                         %create-ontap-volume-configuration-junction-path
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ontap-volume-configuration
                    'make-create-ontap-volume-configuration))
 (common-lisp:defun make-create-ontap-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-tags-to-backups snapshot-policy
                     ontap-volume-type tiering-policy
                     storage-virtual-machine-id storage-efficiency-enabled
                     size-in-megabytes security-style junction-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-ontap-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ontap-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ontap-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'junction-path))
      (common-lisp:list
       (common-lisp:cons "JunctionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-style))
      (common-lisp:list
       (common-lisp:cons "SecurityStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-megabytes))
      (common-lisp:list
       (common-lisp:cons "SizeInMegabytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-efficiency-enabled))
      (common-lisp:list
       (common-lisp:cons "StorageEfficiencyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tiering-policy))
      (common-lisp:list
       (common-lisp:cons "TieringPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-volume-type))
      (common-lisp:list
       (common-lisp:cons "OntapVolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-policy))
      (common-lisp:list
       (common-lisp:cons "SnapshotPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ontap-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-open-zfsorigin-snapshot-configuration
                       common-lisp:nil
                       ((copy-strategy :initarg :copy-strategy :type
                         (common-lisp:or open-zfscopy-strategy
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsorigin-snapshot-configuration-copy-strategy
                         :initform
                         (common-lisp:error ":copy-strategy is required"))
                        (snapshot-arn :initarg :snapshot-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %create-open-zfsorigin-snapshot-configuration-snapshot-arn
                         :initform
                         (common-lisp:error ":snapshot-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-open-zfsorigin-snapshot-configuration
                    'make-create-open-zfsorigin-snapshot-configuration))
 (common-lisp:defun make-create-open-zfsorigin-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-strategy snapshot-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-open-zfsorigin-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsorigin-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsorigin-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-strategy))
      (common-lisp:list
       (common-lisp:cons "CopyStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsorigin-snapshot-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-open-zfsvolume-configuration common-lisp:nil
                       ((user-and-group-quotas :initarg :user-and-group-quotas
                         :type
                         (common-lisp:or open-zfsuser-and-group-quotas
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-user-and-group-quotas
                         :initform common-lisp:nil)
                        (nfs-exports :initarg :nfs-exports :type
                         (common-lisp:or open-zfsnfs-exports common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-nfs-exports
                         :initform common-lisp:nil)
                        (read-only :initarg :read-only :type
                         (common-lisp:or read-only common-lisp:null) :accessor
                         %create-open-zfsvolume-configuration-read-only
                         :initform common-lisp:nil)
                        (origin-snapshot :initarg :origin-snapshot :type
                         (common-lisp:or
                          create-open-zfsorigin-snapshot-configuration
                          common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-origin-snapshot
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshots :initarg
                         :copy-tags-to-snapshots :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %create-open-zfsvolume-configuration-copy-tags-to-snapshots
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or open-zfsdata-compression-type
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (record-size-ki-b :initarg :record-size-ki-b :type
                         (common-lisp:or integer-record-size-ki-b
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-record-size-ki-b
                         :initform common-lisp:nil)
                        (storage-capacity-quota-gi-b :initarg
                         :storage-capacity-quota-gi-b :type
                         (common-lisp:or integer-no-max-from-negative-one
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-storage-capacity-quota-gi-b
                         :initform common-lisp:nil)
                        (storage-capacity-reservation-gi-b :initarg
                         :storage-capacity-reservation-gi-b :type
                         (common-lisp:or integer-no-max-from-negative-one
                                         common-lisp:null)
                         :accessor
                         %create-open-zfsvolume-configuration-storage-capacity-reservation-gi-b
                         :initform common-lisp:nil)
                        (parent-volume-id :initarg :parent-volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %create-open-zfsvolume-configuration-parent-volume-id
                         :initform
                         (common-lisp:error ":parent-volume-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-open-zfsvolume-configuration
                    'make-create-open-zfsvolume-configuration))
 (common-lisp:defun make-create-open-zfsvolume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-and-group-quotas nfs-exports
                     read-only origin-snapshot copy-tags-to-snapshots
                     data-compression-type record-size-ki-b
                     storage-capacity-quota-gi-b
                     storage-capacity-reservation-gi-b parent-volume-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-open-zfsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-volume-id))
      (common-lisp:list
       (common-lisp:cons "ParentVolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-reservation-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityReservationGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-quota-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityQuotaGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-size-ki-b))
      (common-lisp:list
       (common-lisp:cons "RecordSizeKiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshots))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-snapshot))
      (common-lisp:list
       (common-lisp:cons "OriginSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs-exports))
      (common-lisp:list
       (common-lisp:cons "NfsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-and-group-quotas))
      (common-lisp:list
       (common-lisp:cons "UserAndGroupQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-zfsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-snapshot-request-tags :initform
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %create-snapshot-request-volume-id :initform
                         (common-lisp:error ":volume-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or snapshot-name common-lisp:null)
                         :accessor %create-snapshot-request-name :initform
                         (common-lisp:error ":name is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-snapshot-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defun make-create-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags volume-id name client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-snapshot-response common-lisp:nil
                       ((snapshot :initarg :snapshot :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %create-snapshot-response-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-response 'make-create-snapshot-response))
 (common-lisp:defun make-create-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'create-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-storage-virtual-machine-request common-lisp:nil
                       ((root-volume-security-style :initarg
                         :root-volume-security-style :type
                         (common-lisp:or
                          storage-virtual-machine-root-volume-security-style
                          common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-request-root-volume-security-style
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-storage-virtual-machine-request-tags :initform
                         common-lisp:nil)
                        (svm-admin-password :initarg :svm-admin-password :type
                         (common-lisp:or admin-password common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-request-svm-admin-password
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or storage-virtual-machine-name
                                         common-lisp:null)
                         :accessor %create-storage-virtual-machine-request-name
                         :initform (common-lisp:error ":name is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-request-client-request-token
                         :initform common-lisp:nil)
                        (active-directory-configuration :initarg
                         :active-directory-configuration :type
                         (common-lisp:or
                          create-svm-active-directory-configuration
                          common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-request-active-directory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-storage-virtual-machine-request
                    'make-create-storage-virtual-machine-request))
 (common-lisp:defun make-create-storage-virtual-machine-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-volume-security-style tags
                     svm-admin-password name file-system-id
                     client-request-token active-directory-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-storage-virtual-machine-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'svm-admin-password))
      (common-lisp:list
       (common-lisp:cons "SvmAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-security-style))
      (common-lisp:list
       (common-lisp:cons "RootVolumeSecurityStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-storage-virtual-machine-response common-lisp:nil
                       ((storage-virtual-machine :initarg
                         :storage-virtual-machine :type
                         (common-lisp:or storage-virtual-machine
                                         common-lisp:null)
                         :accessor
                         %create-storage-virtual-machine-response-storage-virtual-machine
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-storage-virtual-machine-response
                    'make-create-storage-virtual-machine-response))
 (common-lisp:defun make-create-storage-virtual-machine-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-virtual-machine)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-storage-virtual-machine-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-storage-virtual-machine-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-svm-active-directory-configuration
                       common-lisp:nil
                       ((self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-configuration
                          common-lisp:null)
                         :accessor
                         %create-svm-active-directory-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)
                        (net-bios-name :initarg :net-bios-name :type
                         (common-lisp:or net-bios-alias common-lisp:null)
                         :accessor
                         %create-svm-active-directory-configuration-net-bios-name
                         :initform
                         (common-lisp:error ":net-bios-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-svm-active-directory-configuration
                    'make-create-svm-active-directory-configuration))
 (common-lisp:defun make-create-svm-active-directory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     self-managed-active-directory-configuration net-bios-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-svm-active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-svm-active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-svm-active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-bios-name))
      (common-lisp:list
       (common-lisp:cons "NetBiosName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-svm-active-directory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-volume-from-backup-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-volume-from-backup-request-tags :initform
                         common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or create-ontap-volume-configuration
                                         common-lisp:null)
                         :accessor
                         %create-volume-from-backup-request-ontap-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or volume-name common-lisp:null)
                         :accessor %create-volume-from-backup-request-name
                         :initform (common-lisp:error ":name is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-volume-from-backup-request-client-request-token
                         :initform common-lisp:nil)
                        (backup-id :initarg :backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %create-volume-from-backup-request-backup-id :initform
                         (common-lisp:error ":backup-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-volume-from-backup-request
                    'make-create-volume-from-backup-request))
 (common-lisp:defun make-create-volume-from-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags ontap-configuration name
                     client-request-token backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-volume-from-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-volume-from-backup-response common-lisp:nil
                       ((volume :initarg :volume :type
                         (common-lisp:or volume common-lisp:null) :accessor
                         %create-volume-from-backup-response-volume :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-volume-from-backup-response
                    'make-create-volume-from-backup-response))
 (common-lisp:defun make-create-volume-from-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-volume-from-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-from-backup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-volume-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or create-open-zfsvolume-configuration
                                         common-lisp:null)
                         :accessor %create-volume-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-volume-request-tags :initform common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or create-ontap-volume-configuration
                                         common-lisp:null)
                         :accessor %create-volume-request-ontap-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or volume-name common-lisp:null)
                         :accessor %create-volume-request-name :initform
                         (common-lisp:error ":name is required"))
                        (volume-type :initarg :volume-type :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor %create-volume-request-volume-type :initform
                         (common-lisp:error ":volume-type is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-volume-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-volume-request 'make-create-volume-request))
 (common-lisp:defun make-create-volume-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration tags
                     ontap-configuration name volume-type client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-volume-response common-lisp:nil
                       ((volume :initarg :volume :type
                         (common-lisp:or volume common-lisp:null) :accessor
                         %create-volume-response-volume :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-volume-response 'make-create-volume-response))
 (common-lisp:defun make-create-volume-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume)
   (common-lisp:apply #'common-lisp:make-instance 'create-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-volume-response))
   common-lisp:nil))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype daily-time () 'common-lisp:string)
(common-lisp:deftype data-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-repository-association common-lisp:nil
                       ((nfs :initarg :nfs :type
                         (common-lisp:or nfsdata-repository-configuration
                                         common-lisp:null)
                         :accessor %data-repository-association-nfs :initform
                         common-lisp:nil)
                        (data-repository-subdirectories :initarg
                         :data-repository-subdirectories :type
                         (common-lisp:or sub-directories-paths
                                         common-lisp:null)
                         :accessor
                         %data-repository-association-data-repository-subdirectories
                         :initform common-lisp:nil)
                        (file-cache-path :initarg :file-cache-path :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %data-repository-association-file-cache-path :initform
                         common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %data-repository-association-file-cache-id
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %data-repository-association-creation-time
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %data-repository-association-tags :initform
                         common-lisp:nil)
                        (s3 :initarg :s3 :type
                         (common-lisp:or s3data-repository-configuration
                                         common-lisp:null)
                         :accessor %data-repository-association-s3 :initform
                         common-lisp:nil)
                        (imported-file-chunk-size :initarg
                         :imported-file-chunk-size :type
                         (common-lisp:or megabytes common-lisp:null) :accessor
                         %data-repository-association-imported-file-chunk-size
                         :initform common-lisp:nil)
                        (batch-import-meta-data-on-create :initarg
                         :batch-import-meta-data-on-create :type
                         (common-lisp:or batch-import-meta-data-on-create
                                         common-lisp:null)
                         :accessor
                         %data-repository-association-batch-import-meta-data-on-create
                         :initform common-lisp:nil)
                        (data-repository-path :initarg :data-repository-path
                         :type (common-lisp:or archive-path common-lisp:null)
                         :accessor
                         %data-repository-association-data-repository-path
                         :initform common-lisp:nil)
                        (file-system-path :initarg :file-system-path :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %data-repository-association-file-system-path
                         :initform common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or data-repository-failure-details
                                         common-lisp:null)
                         :accessor %data-repository-association-failure-details
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or data-repository-lifecycle
                                         common-lisp:null)
                         :accessor %data-repository-association-lifecycle
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %data-repository-association-file-system-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %data-repository-association-resource-arn
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or data-repository-association-id
                                         common-lisp:null)
                         :accessor %data-repository-association-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-association
                    'make-data-repository-association))
 (common-lisp:defun make-data-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nfs data-repository-subdirectories
                     file-cache-path file-cache-id creation-time tags s3
                     imported-file-chunk-size batch-import-meta-data-on-create
                     data-repository-path file-system-path failure-details
                     lifecycle file-system-id resource-arn association-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-repository-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-path))
      (common-lisp:list
       (common-lisp:cons "FileSystemPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-path))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-import-meta-data-on-create))
      (common-lisp:list
       (common-lisp:cons "BatchImportMetaDataOnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-file-chunk-size))
      (common-lisp:list
       (common-lisp:cons "ImportedFileChunkSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-path))
      (common-lisp:list
       (common-lisp:cons "FileCachePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-subdirectories))
      (common-lisp:list
       (common-lisp:cons "DataRepositorySubdirectories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs))
      (common-lisp:list
       (common-lisp:cons "NFS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-association))
   common-lisp:nil))
(common-lisp:deftype data-repository-association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-repository-association-ids ()
   '(trivial-types:proper-list data-repository-association-id))
 (common-lisp:defun |make-data-repository-association-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-repository-association-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition data-repository-association-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-repository-association-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'data-repository-association-not-found
                    'data-repository-association-not-found-message)))
(common-lisp:progn
 (common-lisp:deftype data-repository-associations ()
   '(trivial-types:proper-list data-repository-association))
 (common-lisp:defun |make-data-repository-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-repository-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-repository-configuration common-lisp:nil
                       ((failure-details :initarg :failure-details :type
                         (common-lisp:or data-repository-failure-details
                                         common-lisp:null)
                         :accessor
                         %data-repository-configuration-failure-details
                         :initform common-lisp:nil)
                        (auto-import-policy :initarg :auto-import-policy :type
                         (common-lisp:or auto-import-policy-type
                                         common-lisp:null)
                         :accessor
                         %data-repository-configuration-auto-import-policy
                         :initform common-lisp:nil)
                        (imported-file-chunk-size :initarg
                         :imported-file-chunk-size :type
                         (common-lisp:or megabytes common-lisp:null) :accessor
                         %data-repository-configuration-imported-file-chunk-size
                         :initform common-lisp:nil)
                        (export-path :initarg :export-path :type
                         (common-lisp:or archive-path common-lisp:null)
                         :accessor %data-repository-configuration-export-path
                         :initform common-lisp:nil)
                        (import-path :initarg :import-path :type
                         (common-lisp:or archive-path common-lisp:null)
                         :accessor %data-repository-configuration-import-path
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or data-repository-lifecycle
                                         common-lisp:null)
                         :accessor %data-repository-configuration-lifecycle
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-configuration
                    'make-data-repository-configuration))
 (common-lisp:defun make-data-repository-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-details auto-import-policy
                     imported-file-chunk-size export-path import-path
                     lifecycle)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-repository-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-path))
      (common-lisp:list
       (common-lisp:cons "ImportPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-path))
      (common-lisp:list
       (common-lisp:cons "ExportPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-file-chunk-size))
      (common-lisp:list
       (common-lisp:cons "ImportedFileChunkSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-import-policy))
      (common-lisp:list
       (common-lisp:cons "AutoImportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-repository-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %data-repository-failure-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-failure-details
                    'make-data-repository-failure-details))
 (common-lisp:defun make-data-repository-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-repository-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-failure-details))
   common-lisp:nil))
(common-lisp:deftype data-repository-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-repository-task common-lisp:nil
                       ((file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %data-repository-task-file-cache-id
                         :initform common-lisp:nil)
                        (capacity-to-release :initarg :capacity-to-release
                         :type
                         (common-lisp:or capacity-to-release common-lisp:null)
                         :accessor %data-repository-task-capacity-to-release
                         :initform common-lisp:nil)
                        (report :initarg :report :type
                         (common-lisp:or completion-report common-lisp:null)
                         :accessor %data-repository-task-report :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or data-repository-task-status
                                         common-lisp:null)
                         :accessor %data-repository-task-status :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or data-repository-task-failure-details
                                         common-lisp:null)
                         :accessor %data-repository-task-failure-details
                         :initform common-lisp:nil)
                        (paths :initarg :paths :type
                         (common-lisp:or data-repository-task-paths
                                         common-lisp:null)
                         :accessor %data-repository-task-paths :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %data-repository-task-file-system-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %data-repository-task-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %data-repository-task-resource-arn :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or end-time common-lisp:null) :accessor
                         %data-repository-task-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %data-repository-task-start-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %data-repository-task-creation-time
                         :initform
                         (common-lisp:error ":creation-time is required"))
                        (type :initarg :type :type
                         (common-lisp:or data-repository-task-type
                                         common-lisp:null)
                         :accessor %data-repository-task-type :initform
                         (common-lisp:error ":type is required"))
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or data-repository-task-lifecycle
                                         common-lisp:null)
                         :accessor %data-repository-task-lifecycle :initform
                         (common-lisp:error ":lifecycle is required"))
                        (task-id :initarg :task-id :type
                         (common-lisp:or task-id common-lisp:null) :accessor
                         %data-repository-task-task-id :initform
                         (common-lisp:error ":task-id is required"))))
 (common-lisp:export
  (common-lisp:list 'data-repository-task 'make-data-repository-task))
 (common-lisp:defun make-data-repository-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-cache-id capacity-to-release report
                     status failure-details paths file-system-id tags
                     resource-arn end-time start-time creation-time type
                     lifecycle task-id)
   (common-lisp:apply #'common-lisp:make-instance 'data-repository-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-repository-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-repository-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-to-release))
      (common-lisp:list
       (common-lisp:cons "CapacityToRelease"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-repository-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-repository-task-ended
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-repository-task-ended-message)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-ended
                    'data-repository-task-ended-message)))
(common-lisp:progn
 (common-lisp:define-condition data-repository-task-executing
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-repository-task-executing-message)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-executing
                    'data-repository-task-executing-message)))
(common-lisp:progn
 (common-lisp:defclass data-repository-task-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %data-repository-task-failure-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-failure-details
                    'make-data-repository-task-failure-details))
 (common-lisp:defun make-data-repository-task-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-repository-task-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-failure-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-repository-task-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or data-repository-task-filter-values
                                         common-lisp:null)
                         :accessor %data-repository-task-filter-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or data-repository-task-filter-name
                                         common-lisp:null)
                         :accessor %data-repository-task-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-filter
                    'make-data-repository-task-filter))
 (common-lisp:defun make-data-repository-task-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'data-repository-task-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-filter))
   common-lisp:nil))
(common-lisp:deftype data-repository-task-filter-name () 'common-lisp:string)
(common-lisp:deftype data-repository-task-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-repository-task-filter-values ()
   '(trivial-types:proper-list data-repository-task-filter-value))
 (common-lisp:defun |make-data-repository-task-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-repository-task-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-repository-task-filters ()
   '(trivial-types:proper-list data-repository-task-filter))
 (common-lisp:defun |make-data-repository-task-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-repository-task-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-repository-task-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition data-repository-task-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-repository-task-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-not-found
                    'data-repository-task-not-found-message)))
(common-lisp:deftype data-repository-task-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-repository-task-paths ()
   '(trivial-types:proper-list data-repository-task-path))
 (common-lisp:defun |make-data-repository-task-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-repository-task-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-repository-task-status common-lisp:nil
                       ((released-capacity :initarg :released-capacity :type
                         (common-lisp:or released-capacity common-lisp:null)
                         :accessor
                         %data-repository-task-status-released-capacity
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor
                         %data-repository-task-status-last-updated-time
                         :initform common-lisp:nil)
                        (failed-count :initarg :failed-count :type
                         (common-lisp:or failed-count common-lisp:null)
                         :accessor %data-repository-task-status-failed-count
                         :initform common-lisp:nil)
                        (succeeded-count :initarg :succeeded-count :type
                         (common-lisp:or succeeded-count common-lisp:null)
                         :accessor %data-repository-task-status-succeeded-count
                         :initform common-lisp:nil)
                        (total-count :initarg :total-count :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor %data-repository-task-status-total-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-repository-task-status
                    'make-data-repository-task-status))
 (common-lisp:defun make-data-repository-task-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key released-capacity last-updated-time
                     failed-count succeeded-count total-count)
   (common-lisp:apply #'common-lisp:make-instance 'data-repository-task-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded-count))
      (common-lisp:list
       (common-lisp:cons "SucceededCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'released-capacity))
      (common-lisp:list
       (common-lisp:cons "ReleasedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-repository-task-status))
   common-lisp:nil))
(common-lisp:deftype data-repository-task-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-repository-tasks ()
   '(trivial-types:proper-list data-repository-task))
 (common-lisp:defun |make-data-repository-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-repository-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-backup-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %delete-backup-request-client-request-token
                         :initform common-lisp:nil)
                        (backup-id :initarg :backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-backup-request-backup-id :initform
                         (common-lisp:error ":backup-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backup-request 'make-delete-backup-request))
 (common-lisp:defun make-delete-backup-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token backup-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backup-response common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or backup-lifecycle common-lisp:null)
                         :accessor %delete-backup-response-lifecycle :initform
                         common-lisp:nil)
                        (backup-id :initarg :backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-backup-response-backup-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backup-response 'make-delete-backup-response))
 (common-lisp:defun make-delete-backup-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle backup-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backup-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-id))
      (common-lisp:list
       (common-lisp:cons "BackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backup-response))
   common-lisp:nil))
(common-lisp:deftype delete-data-in-file-system () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-data-repository-association-request
                       common-lisp:nil
                       ((delete-data-in-file-system :initarg
                         :delete-data-in-file-system :type
                         (common-lisp:or delete-data-in-file-system
                                         common-lisp:null)
                         :accessor
                         %delete-data-repository-association-request-delete-data-in-file-system
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %delete-data-repository-association-request-client-request-token
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or data-repository-association-id
                                         common-lisp:null)
                         :accessor
                         %delete-data-repository-association-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-data-repository-association-request
                    'make-delete-data-repository-association-request))
 (common-lisp:defun make-delete-data-repository-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-data-in-file-system
                     client-request-token association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-repository-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-data-in-file-system))
      (common-lisp:list
       (common-lisp:cons "DeleteDataInFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-repository-association-response
                       common-lisp:nil
                       ((delete-data-in-file-system :initarg
                         :delete-data-in-file-system :type
                         (common-lisp:or delete-data-in-file-system
                                         common-lisp:null)
                         :accessor
                         %delete-data-repository-association-response-delete-data-in-file-system
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or data-repository-lifecycle
                                         common-lisp:null)
                         :accessor
                         %delete-data-repository-association-response-lifecycle
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or data-repository-association-id
                                         common-lisp:null)
                         :accessor
                         %delete-data-repository-association-response-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-data-repository-association-response
                    'make-delete-data-repository-association-response))
 (common-lisp:defun make-delete-data-repository-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-data-in-file-system lifecycle
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-repository-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-data-in-file-system))
      (common-lisp:list
       (common-lisp:cons "DeleteDataInFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-repository-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-cache-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %delete-file-cache-request-client-request-token
                         :initform common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %delete-file-cache-request-file-cache-id
                         :initform
                         (common-lisp:error ":file-cache-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-file-cache-request
                    'make-delete-file-cache-request))
 (common-lisp:defun make-delete-file-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token file-cache-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-file-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-cache-response common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or file-cache-lifecycle common-lisp:null)
                         :accessor %delete-file-cache-response-lifecycle
                         :initform common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %delete-file-cache-response-file-cache-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-cache-response
                    'make-delete-file-cache-response))
 (common-lisp:defun make-delete-file-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle file-cache-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-file-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-lustre-configuration common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-lustre-configuration-final-backup-tags
                         :initform common-lisp:nil)
                        (skip-final-backup :initarg :skip-final-backup :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %delete-file-system-lustre-configuration-skip-final-backup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-lustre-configuration
                    'make-delete-file-system-lustre-configuration))
 (common-lisp:defun make-delete-file-system-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags skip-final-backup)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-backup))
      (common-lisp:list
       (common-lisp:cons "SkipFinalBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-lustre-response common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-lustre-response-final-backup-tags
                         :initform common-lisp:nil)
                        (final-backup-id :initarg :final-backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-file-system-lustre-response-final-backup-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-lustre-response
                    'make-delete-file-system-lustre-response))
 (common-lisp:defun make-delete-file-system-lustre-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags final-backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-lustre-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-id))
      (common-lisp:list
       (common-lisp:cons "FinalBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-lustre-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-open-zfsconfiguration common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or delete-file-system-open-zfsoptions
                                         common-lisp:null)
                         :accessor
                         %delete-file-system-open-zfsconfiguration-options
                         :initform common-lisp:nil)
                        (final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-open-zfsconfiguration-final-backup-tags
                         :initform common-lisp:nil)
                        (skip-final-backup :initarg :skip-final-backup :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %delete-file-system-open-zfsconfiguration-skip-final-backup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-open-zfsconfiguration
                    'make-delete-file-system-open-zfsconfiguration))
 (common-lisp:defun make-delete-file-system-open-zfsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options final-backup-tags
                     skip-final-backup)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-open-zfsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-backup))
      (common-lisp:list
       (common-lisp:cons "SkipFinalBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsconfiguration))
   common-lisp:nil))
(common-lisp:deftype delete-file-system-open-zfsoption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-file-system-open-zfsoptions ()
   '(trivial-types:proper-list delete-file-system-open-zfsoption))
 (common-lisp:defun |make-delete-file-system-open-zfsoptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            delete-file-system-open-zfsoption))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-open-zfsresponse common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-open-zfsresponse-final-backup-tags
                         :initform common-lisp:nil)
                        (final-backup-id :initarg :final-backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-file-system-open-zfsresponse-final-backup-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-open-zfsresponse
                    'make-delete-file-system-open-zfsresponse))
 (common-lisp:defun make-delete-file-system-open-zfsresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags final-backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-open-zfsresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-id))
      (common-lisp:list
       (common-lisp:cons "FinalBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-open-zfsresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or
                          delete-file-system-open-zfsconfiguration
                          common-lisp:null)
                         :accessor
                         %delete-file-system-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or
                          delete-file-system-lustre-configuration
                          common-lisp:null)
                         :accessor
                         %delete-file-system-request-lustre-configuration
                         :initform common-lisp:nil)
                        (windows-configuration :initarg :windows-configuration
                         :type
                         (common-lisp:or
                          delete-file-system-windows-configuration
                          common-lisp:null)
                         :accessor
                         %delete-file-system-request-windows-configuration
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %delete-file-system-request-client-request-token
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %delete-file-system-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-request
                    'make-delete-file-system-request))
 (common-lisp:defun make-delete-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration
                     lustre-configuration windows-configuration
                     client-request-token file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'windows-configuration))
      (common-lisp:list
       (common-lisp:cons "WindowsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-response common-lisp:nil
                       ((open-zfsresponse :initarg :open-zfsresponse :type
                         (common-lisp:or delete-file-system-open-zfsresponse
                                         common-lisp:null)
                         :accessor
                         %delete-file-system-response-open-zfsresponse
                         :initform common-lisp:nil)
                        (lustre-response :initarg :lustre-response :type
                         (common-lisp:or delete-file-system-lustre-response
                                         common-lisp:null)
                         :accessor %delete-file-system-response-lustre-response
                         :initform common-lisp:nil)
                        (windows-response :initarg :windows-response :type
                         (common-lisp:or delete-file-system-windows-response
                                         common-lisp:null)
                         :accessor
                         %delete-file-system-response-windows-response
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or file-system-lifecycle
                                         common-lisp:null)
                         :accessor %delete-file-system-response-lifecycle
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %delete-file-system-response-file-system-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-response
                    'make-delete-file-system-response))
 (common-lisp:defun make-delete-file-system-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsresponse lustre-response
                     windows-response lifecycle file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-file-system-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows-response))
      (common-lisp:list
       (common-lisp:cons "WindowsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lustre-response))
      (common-lisp:list
       (common-lisp:cons "LustreResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-zfsresponse))
      (common-lisp:list
       (common-lisp:cons "OpenZFSResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-windows-configuration common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-windows-configuration-final-backup-tags
                         :initform common-lisp:nil)
                        (skip-final-backup :initarg :skip-final-backup :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %delete-file-system-windows-configuration-skip-final-backup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-windows-configuration
                    'make-delete-file-system-windows-configuration))
 (common-lisp:defun make-delete-file-system-windows-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags skip-final-backup)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-windows-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-backup))
      (common-lisp:list
       (common-lisp:cons "SkipFinalBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-file-system-windows-response common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-file-system-windows-response-final-backup-tags
                         :initform common-lisp:nil)
                        (final-backup-id :initarg :final-backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-file-system-windows-response-final-backup-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-file-system-windows-response
                    'make-delete-file-system-windows-response))
 (common-lisp:defun make-delete-file-system-windows-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags final-backup-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-file-system-windows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-id))
      (common-lisp:list
       (common-lisp:cons "FinalBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-file-system-windows-response))
   common-lisp:nil))
(common-lisp:deftype delete-open-zfsvolume-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-open-zfsvolume-options ()
   '(trivial-types:proper-list delete-open-zfsvolume-option))
 (common-lisp:defun |make-delete-open-zfsvolume-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            delete-open-zfsvolume-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-request common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %delete-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %delete-snapshot-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defun make-delete-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-snapshot-response common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or snapshot-lifecycle common-lisp:null)
                         :accessor %delete-snapshot-response-lifecycle
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %delete-snapshot-response-snapshot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-response 'make-delete-snapshot-response))
 (common-lisp:defun make-delete-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-storage-virtual-machine-request common-lisp:nil
                       ((storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %delete-storage-virtual-machine-request-storage-virtual-machine-id
                         :initform
                         (common-lisp:error
                          ":storage-virtual-machine-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %delete-storage-virtual-machine-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-storage-virtual-machine-request
                    'make-delete-storage-virtual-machine-request))
 (common-lisp:defun make-delete-storage-virtual-machine-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-virtual-machine-id
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-storage-virtual-machine-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-storage-virtual-machine-response common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or storage-virtual-machine-lifecycle
                                         common-lisp:null)
                         :accessor
                         %delete-storage-virtual-machine-response-lifecycle
                         :initform common-lisp:nil)
                        (storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %delete-storage-virtual-machine-response-storage-virtual-machine-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-storage-virtual-machine-response
                    'make-delete-storage-virtual-machine-response))
 (common-lisp:defun make-delete-storage-virtual-machine-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle storage-virtual-machine-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-storage-virtual-machine-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-storage-virtual-machine-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-volume-ontap-configuration common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-volume-ontap-configuration-final-backup-tags
                         :initform common-lisp:nil)
                        (skip-final-backup :initarg :skip-final-backup :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %delete-volume-ontap-configuration-skip-final-backup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-ontap-configuration
                    'make-delete-volume-ontap-configuration))
 (common-lisp:defun make-delete-volume-ontap-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags skip-final-backup)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-volume-ontap-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-backup))
      (common-lisp:list
       (common-lisp:cons "SkipFinalBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-volume-ontap-response common-lisp:nil
                       ((final-backup-tags :initarg :final-backup-tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-volume-ontap-response-final-backup-tags
                         :initform common-lisp:nil)
                        (final-backup-id :initarg :final-backup-id :type
                         (common-lisp:or backup-id common-lisp:null) :accessor
                         %delete-volume-ontap-response-final-backup-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-ontap-response
                    'make-delete-volume-ontap-response))
 (common-lisp:defun make-delete-volume-ontap-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-backup-tags final-backup-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-volume-ontap-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-id))
      (common-lisp:list
       (common-lisp:cons "FinalBackupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-backup-tags))
      (common-lisp:list
       (common-lisp:cons "FinalBackupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-ontap-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-volume-open-zfsconfiguration common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or delete-open-zfsvolume-options
                                         common-lisp:null)
                         :accessor %delete-volume-open-zfsconfiguration-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-open-zfsconfiguration
                    'make-delete-volume-open-zfsconfiguration))
 (common-lisp:defun make-delete-volume-open-zfsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-volume-open-zfsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-open-zfsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-open-zfsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-open-zfsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-volume-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or delete-volume-open-zfsconfiguration
                                         common-lisp:null)
                         :accessor %delete-volume-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or delete-volume-ontap-configuration
                                         common-lisp:null)
                         :accessor %delete-volume-request-ontap-configuration
                         :initform common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %delete-volume-request-volume-id :initform
                         (common-lisp:error ":volume-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %delete-volume-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-request 'make-delete-volume-request))
 (common-lisp:defun make-delete-volume-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration ontap-configuration
                     volume-id client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'delete-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-volume-response common-lisp:nil
                       ((ontap-response :initarg :ontap-response :type
                         (common-lisp:or delete-volume-ontap-response
                                         common-lisp:null)
                         :accessor %delete-volume-response-ontap-response
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or volume-lifecycle common-lisp:null)
                         :accessor %delete-volume-response-lifecycle :initform
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %delete-volume-response-volume-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-volume-response 'make-delete-volume-response))
 (common-lisp:defun make-delete-volume-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ontap-response lifecycle volume-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-response))
      (common-lisp:list
       (common-lisp:cons "OntapResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-volume-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-backups-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-backups-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %describe-backups-request-filters :initform
                         common-lisp:nil)
                        (backup-ids :initarg :backup-ids :type
                         (common-lisp:or backup-ids common-lisp:null) :accessor
                         %describe-backups-request-backup-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-backups-request 'make-describe-backups-request))
 (common-lisp:defun make-describe-backups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     backup-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-ids))
      (common-lisp:list
       (common-lisp:cons "BackupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-backups-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-backups-response-next-token :initform
                         common-lisp:nil)
                        (backups :initarg :backups :type
                         (common-lisp:or backups common-lisp:null) :accessor
                         %describe-backups-response-backups :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-backups-response
                    'make-describe-backups-response))
 (common-lisp:defun make-describe-backups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token backups)
   (common-lisp:apply #'common-lisp:make-instance 'describe-backups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backups))
      (common-lisp:list
       (common-lisp:cons "Backups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-backups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-repository-associations-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-data-repository-associations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or limited-max-results common-lisp:null)
                         :accessor
                         %describe-data-repository-associations-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %describe-data-repository-associations-request-filters
                         :initform common-lisp:nil)
                        (association-ids :initarg :association-ids :type
                         (common-lisp:or data-repository-association-ids
                                         common-lisp:null)
                         :accessor
                         %describe-data-repository-associations-request-association-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-repository-associations-request
                    'make-describe-data-repository-associations-request))
 (common-lisp:defun make-describe-data-repository-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     association-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-repository-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-ids))
      (common-lisp:list
       (common-lisp:cons "AssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-repository-associations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-data-repository-associations-response-next-token
                         :initform common-lisp:nil)
                        (associations :initarg :associations :type
                         (common-lisp:or data-repository-associations
                                         common-lisp:null)
                         :accessor
                         %describe-data-repository-associations-response-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-repository-associations-response
                    'make-describe-data-repository-associations-response))
 (common-lisp:defun make-describe-data-repository-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-repository-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-repository-tasks-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-data-repository-tasks-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-data-repository-tasks-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or data-repository-task-filters
                                         common-lisp:null)
                         :accessor
                         %describe-data-repository-tasks-request-filters
                         :initform common-lisp:nil)
                        (task-ids :initarg :task-ids :type
                         (common-lisp:or task-ids common-lisp:null) :accessor
                         %describe-data-repository-tasks-request-task-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-repository-tasks-request
                    'make-describe-data-repository-tasks-request))
 (common-lisp:defun make-describe-data-repository-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters task-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-repository-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-ids))
      (common-lisp:list
       (common-lisp:cons "TaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-repository-tasks-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-data-repository-tasks-response-next-token
                         :initform common-lisp:nil)
                        (data-repository-tasks :initarg :data-repository-tasks
                         :type
                         (common-lisp:or data-repository-tasks
                                         common-lisp:null)
                         :accessor
                         %describe-data-repository-tasks-response-data-repository-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-data-repository-tasks-response
                    'make-describe-data-repository-tasks-response))
 (common-lisp:defun make-describe-data-repository-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token data-repository-tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-repository-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-tasks))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-repository-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-caches-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-caches-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-file-caches-request-max-results
                         :initform common-lisp:nil)
                        (file-cache-ids :initarg :file-cache-ids :type
                         (common-lisp:or file-cache-ids common-lisp:null)
                         :accessor %describe-file-caches-request-file-cache-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-caches-request
                    'make-describe-file-caches-request))
 (common-lisp:defun make-describe-file-caches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results file-cache-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-file-caches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-ids))
      (common-lisp:list
       (common-lisp:cons "FileCacheIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-caches-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-caches-response-next-token :initform
                         common-lisp:nil)
                        (file-caches :initarg :file-caches :type
                         (common-lisp:or file-caches common-lisp:null)
                         :accessor %describe-file-caches-response-file-caches
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-caches-response
                    'make-describe-file-caches-response))
 (common-lisp:defun make-describe-file-caches-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token file-caches)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-caches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-caches))
      (common-lisp:list
       (common-lisp:cons "FileCaches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-caches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-system-aliases-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-system-aliases-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-file-system-aliases-request-max-results
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %describe-file-system-aliases-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-file-system-aliases-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-system-aliases-request
                    'make-describe-file-system-aliases-request))
 (common-lisp:defun make-describe-file-system-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results file-system-id
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-system-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-system-aliases-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-system-aliases-response-next-token
                         :initform common-lisp:nil)
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %describe-file-system-aliases-response-aliases
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-system-aliases-response
                    'make-describe-file-system-aliases-response))
 (common-lisp:defun make-describe-file-system-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token aliases)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-system-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-system-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-systems-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-systems-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-file-systems-request-max-results
                         :initform common-lisp:nil)
                        (file-system-ids :initarg :file-system-ids :type
                         (common-lisp:or file-system-ids common-lisp:null)
                         :accessor
                         %describe-file-systems-request-file-system-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-systems-request
                    'make-describe-file-systems-request))
 (common-lisp:defun make-describe-file-systems-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results file-system-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-systems-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-ids))
      (common-lisp:list
       (common-lisp:cons "FileSystemIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-file-systems-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-file-systems-response-next-token :initform
                         common-lisp:nil)
                        (file-systems :initarg :file-systems :type
                         (common-lisp:or file-systems common-lisp:null)
                         :accessor %describe-file-systems-response-file-systems
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-file-systems-response
                    'make-describe-file-systems-response))
 (common-lisp:defun make-describe-file-systems-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token file-systems)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-file-systems-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-systems))
      (common-lisp:list
       (common-lisp:cons "FileSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-file-systems-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-snapshots-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-snapshots-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or snapshot-filters common-lisp:null)
                         :accessor %describe-snapshots-request-filters
                         :initform common-lisp:nil)
                        (snapshot-ids :initarg :snapshot-ids :type
                         (common-lisp:or snapshot-ids common-lisp:null)
                         :accessor %describe-snapshots-request-snapshot-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-request
                    'make-describe-snapshots-request))
 (common-lisp:defun make-describe-snapshots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     snapshot-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-ids))
      (common-lisp:list
       (common-lisp:cons "SnapshotIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snapshots-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-snapshots-response-next-token :initform
                         common-lisp:nil)
                        (snapshots :initarg :snapshots :type
                         (common-lisp:or snapshots common-lisp:null) :accessor
                         %describe-snapshots-response-snapshots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-snapshots-response
                    'make-describe-snapshots-response))
 (common-lisp:defun make-describe-snapshots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token snapshots)
   (common-lisp:apply #'common-lisp:make-instance 'describe-snapshots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "Snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-storage-virtual-machines-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-storage-virtual-machines-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-storage-virtual-machines-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or storage-virtual-machine-filters
                                         common-lisp:null)
                         :accessor
                         %describe-storage-virtual-machines-request-filters
                         :initform common-lisp:nil)
                        (storage-virtual-machine-ids :initarg
                         :storage-virtual-machine-ids :type
                         (common-lisp:or storage-virtual-machine-ids
                                         common-lisp:null)
                         :accessor
                         %describe-storage-virtual-machines-request-storage-virtual-machine-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-storage-virtual-machines-request
                    'make-describe-storage-virtual-machines-request))
 (common-lisp:defun make-describe-storage-virtual-machines-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     storage-virtual-machine-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-storage-virtual-machines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-ids))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-storage-virtual-machines-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-storage-virtual-machines-response-next-token
                         :initform common-lisp:nil)
                        (storage-virtual-machines :initarg
                         :storage-virtual-machines :type
                         (common-lisp:or storage-virtual-machines
                                         common-lisp:null)
                         :accessor
                         %describe-storage-virtual-machines-response-storage-virtual-machines
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-storage-virtual-machines-response
                    'make-describe-storage-virtual-machines-response))
 (common-lisp:defun make-describe-storage-virtual-machines-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token storage-virtual-machines)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-storage-virtual-machines-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machines))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-virtual-machines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-volumes-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-volumes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-volumes-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or volume-filters common-lisp:null)
                         :accessor %describe-volumes-request-filters :initform
                         common-lisp:nil)
                        (volume-ids :initarg :volume-ids :type
                         (common-lisp:or volume-ids common-lisp:null) :accessor
                         %describe-volumes-request-volume-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-request 'make-describe-volumes-request))
 (common-lisp:defun make-describe-volumes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     volume-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-volumes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-ids))
      (common-lisp:list
       (common-lisp:cons "VolumeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-volumes-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-volumes-response-next-token :initform
                         common-lisp:nil)
                        (volumes :initarg :volumes :type
                         (common-lisp:or volumes common-lisp:null) :accessor
                         %describe-volumes-response-volumes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-response
                    'make-describe-volumes-response))
 (common-lisp:defun make-describe-volumes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token volumes)
   (common-lisp:apply #'common-lisp:make-instance 'describe-volumes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-response))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype directory-password () 'common-lisp:string)
(common-lisp:deftype directory-user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-file-system-aliases-request common-lisp:nil
                       ((aliases :initarg :aliases :type
                         (common-lisp:or alternate-dnsnames common-lisp:null)
                         :accessor
                         %disassociate-file-system-aliases-request-aliases
                         :initform (common-lisp:error ":aliases is required"))
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %disassociate-file-system-aliases-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %disassociate-file-system-aliases-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-file-system-aliases-request
                    'make-disassociate-file-system-aliases-request))
 (common-lisp:defun make-disassociate-file-system-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aliases file-system-id
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-file-system-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-file-system-aliases-response
                       common-lisp:nil
                       ((aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %disassociate-file-system-aliases-response-aliases
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-file-system-aliases-response
                    'make-disassociate-file-system-aliases-response))
 (common-lisp:defun make-disassociate-file-system-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aliases)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-file-system-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-file-system-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disk-iops-configuration common-lisp:nil
                       ((iops :initarg :iops :type
                         (common-lisp:or iops common-lisp:null) :accessor
                         %disk-iops-configuration-iops :initform
                         common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or disk-iops-configuration-mode
                                         common-lisp:null)
                         :accessor %disk-iops-configuration-mode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disk-iops-configuration 'make-disk-iops-configuration))
 (common-lisp:defun make-disk-iops-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iops mode)
   (common-lisp:apply #'common-lisp:make-instance 'disk-iops-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disk-iops-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disk-iops-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disk-iops-configuration))
   common-lisp:nil))
(common-lisp:deftype disk-iops-configuration-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dns-ips () '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-dns-ips|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype drive-cache-type () 'common-lisp:string)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-types () '(trivial-types:proper-list event-type))
 (common-lisp:defun |make-event-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failed-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass file-cache common-lisp:nil
                       ((data-repository-association-ids :initarg
                         :data-repository-association-ids :type
                         (common-lisp:or data-repository-association-ids
                                         common-lisp:null)
                         :accessor %file-cache-data-repository-association-ids
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or file-cache-lustre-configuration
                                         common-lisp:null)
                         :accessor %file-cache-lustre-configuration :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %file-cache-resource-arn :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %file-cache-kms-key-id :initform common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %file-cache-dnsname :initform common-lisp:nil)
                        (network-interface-ids :initarg :network-interface-ids
                         :type
                         (common-lisp:or network-interface-ids
                                         common-lisp:null)
                         :accessor %file-cache-network-interface-ids :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %file-cache-subnet-ids :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %file-cache-vpc-id :initform common-lisp:nil)
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %file-cache-storage-capacity :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or file-cache-failure-details
                                         common-lisp:null)
                         :accessor %file-cache-failure-details :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or file-cache-lifecycle common-lisp:null)
                         :accessor %file-cache-lifecycle :initform
                         common-lisp:nil)
                        (file-cache-type-version :initarg
                         :file-cache-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor %file-cache-file-cache-type-version
                         :initform common-lisp:nil)
                        (file-cache-type :initarg :file-cache-type :type
                         (common-lisp:or file-cache-type common-lisp:null)
                         :accessor %file-cache-file-cache-type :initform
                         common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %file-cache-file-cache-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %file-cache-creation-time :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %file-cache-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'file-cache 'make-file-cache))
 (common-lisp:defun make-file-cache
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-repository-association-ids
                     lustre-configuration resource-arn kms-key-id dnsname
                     network-interface-ids subnet-ids vpc-id storage-capacity
                     failure-details lifecycle file-cache-type-version
                     file-cache-type file-cache-id creation-time owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'file-cache
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-cache))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-cache))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-type))
      (common-lisp:list
       (common-lisp:cons "FileCacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-cache-type-version))
      (common-lisp:list
       (common-lisp:cons "FileCacheTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-association-ids))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryAssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-cache))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-cache-creating common-lisp:nil
                       ((data-repository-association-ids :initarg
                         :data-repository-association-ids :type
                         (common-lisp:or data-repository-association-ids
                                         common-lisp:null)
                         :accessor
                         %file-cache-creating-data-repository-association-ids
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or file-cache-lustre-configuration
                                         common-lisp:null)
                         :accessor %file-cache-creating-lustre-configuration
                         :initform common-lisp:nil)
                        (copy-tags-to-data-repository-associations :initarg
                         :copy-tags-to-data-repository-associations :type
                         (common-lisp:or
                          copy-tags-to-data-repository-associations
                          common-lisp:null)
                         :accessor
                         %file-cache-creating-copy-tags-to-data-repository-associations
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %file-cache-creating-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %file-cache-creating-resource-arn :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %file-cache-creating-kms-key-id :initform
                         common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %file-cache-creating-dnsname :initform
                         common-lisp:nil)
                        (network-interface-ids :initarg :network-interface-ids
                         :type
                         (common-lisp:or network-interface-ids
                                         common-lisp:null)
                         :accessor %file-cache-creating-network-interface-ids
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %file-cache-creating-subnet-ids :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %file-cache-creating-vpc-id :initform common-lisp:nil)
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %file-cache-creating-storage-capacity
                         :initform common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or file-cache-failure-details
                                         common-lisp:null)
                         :accessor %file-cache-creating-failure-details
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or file-cache-lifecycle common-lisp:null)
                         :accessor %file-cache-creating-lifecycle :initform
                         common-lisp:nil)
                        (file-cache-type-version :initarg
                         :file-cache-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor %file-cache-creating-file-cache-type-version
                         :initform common-lisp:nil)
                        (file-cache-type :initarg :file-cache-type :type
                         (common-lisp:or file-cache-type common-lisp:null)
                         :accessor %file-cache-creating-file-cache-type
                         :initform common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %file-cache-creating-file-cache-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %file-cache-creating-creation-time :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %file-cache-creating-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-cache-creating 'make-file-cache-creating))
 (common-lisp:defun make-file-cache-creating
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-repository-association-ids
                     lustre-configuration
                     copy-tags-to-data-repository-associations tags
                     resource-arn kms-key-id dnsname network-interface-ids
                     subnet-ids vpc-id storage-capacity failure-details
                     lifecycle file-cache-type-version file-cache-type
                     file-cache-id creation-time owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'file-cache-creating
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-cache-creating))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-cache-creating))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-type))
      (common-lisp:list
       (common-lisp:cons "FileCacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-cache-type-version))
      (common-lisp:list
       (common-lisp:cons "FileCacheTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-data-repository-associations))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToDataRepositoryAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-association-ids))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryAssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-cache-creating))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-cache-data-repository-association common-lisp:nil
                       ((nfs :initarg :nfs :type
                         (common-lisp:or file-cache-nfsconfiguration
                                         common-lisp:null)
                         :accessor %file-cache-data-repository-association-nfs
                         :initform common-lisp:nil)
                        (data-repository-subdirectories :initarg
                         :data-repository-subdirectories :type
                         (common-lisp:or sub-directories-paths
                                         common-lisp:null)
                         :accessor
                         %file-cache-data-repository-association-data-repository-subdirectories
                         :initform common-lisp:nil)
                        (data-repository-path :initarg :data-repository-path
                         :type (common-lisp:or archive-path common-lisp:null)
                         :accessor
                         %file-cache-data-repository-association-data-repository-path
                         :initform
                         (common-lisp:error
                          ":data-repository-path is required"))
                        (file-cache-path :initarg :file-cache-path :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %file-cache-data-repository-association-file-cache-path
                         :initform
                         (common-lisp:error ":file-cache-path is required"))))
 (common-lisp:export
  (common-lisp:list 'file-cache-data-repository-association
                    'make-file-cache-data-repository-association))
 (common-lisp:defun make-file-cache-data-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nfs data-repository-subdirectories
                     data-repository-path file-cache-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'file-cache-data-repository-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-data-repository-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-data-repository-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-path))
      (common-lisp:list
       (common-lisp:cons "FileCachePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-path))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-subdirectories))
      (common-lisp:list
       (common-lisp:cons "DataRepositorySubdirectories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs))
      (common-lisp:list
       (common-lisp:cons "NFS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-data-repository-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-cache-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %file-cache-failure-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-cache-failure-details
                    'make-file-cache-failure-details))
 (common-lisp:defun make-file-cache-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'file-cache-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-failure-details))
   common-lisp:nil))
(common-lisp:deftype file-cache-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-cache-ids ()
   '(trivial-types:proper-list file-cache-id))
 (common-lisp:defun |make-file-cache-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-cache-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-cache-lifecycle () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-cache-lustre-configuration common-lisp:nil
                       ((log-configuration :initarg :log-configuration :type
                         (common-lisp:or lustre-log-configuration
                                         common-lisp:null)
                         :accessor
                         %file-cache-lustre-configuration-log-configuration
                         :initform common-lisp:nil)
                        (metadata-configuration :initarg
                         :metadata-configuration :type
                         (common-lisp:or
                          file-cache-lustre-metadata-configuration
                          common-lisp:null)
                         :accessor
                         %file-cache-lustre-configuration-metadata-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %file-cache-lustre-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (mount-name :initarg :mount-name :type
                         (common-lisp:or lustre-file-system-mount-name
                                         common-lisp:null)
                         :accessor %file-cache-lustre-configuration-mount-name
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or file-cache-lustre-deployment-type
                                         common-lisp:null)
                         :accessor
                         %file-cache-lustre-configuration-deployment-type
                         :initform common-lisp:nil)
                        (per-unit-storage-throughput :initarg
                         :per-unit-storage-throughput :type
                         (common-lisp:or per-unit-storage-throughput
                                         common-lisp:null)
                         :accessor
                         %file-cache-lustre-configuration-per-unit-storage-throughput
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-cache-lustre-configuration
                    'make-file-cache-lustre-configuration))
 (common-lisp:defun make-file-cache-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration metadata-configuration
                     weekly-maintenance-start-time mount-name deployment-type
                     per-unit-storage-throughput)
   (common-lisp:apply #'common-lisp:make-instance
                      'file-cache-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'per-unit-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "PerUnitStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-name))
      (common-lisp:list
       (common-lisp:cons "MountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-configuration))
      (common-lisp:list
       (common-lisp:cons "MetadataConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-configuration))
   common-lisp:nil))
(common-lisp:deftype file-cache-lustre-deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-cache-lustre-metadata-configuration common-lisp:nil
                       ((storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or metadata-storage-capacity
                                         common-lisp:null)
                         :accessor
                         %file-cache-lustre-metadata-configuration-storage-capacity
                         :initform
                         (common-lisp:error ":storage-capacity is required"))))
 (common-lisp:export
  (common-lisp:list 'file-cache-lustre-metadata-configuration
                    'make-file-cache-lustre-metadata-configuration))
 (common-lisp:defun make-file-cache-lustre-metadata-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-capacity)
   (common-lisp:apply #'common-lisp:make-instance
                      'file-cache-lustre-metadata-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-metadata-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-metadata-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-lustre-metadata-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-cache-nfsconfiguration common-lisp:nil
                       ((dns-ips :initarg :dns-ips :type
                         (common-lisp:or repository-dns-ips common-lisp:null)
                         :accessor %file-cache-nfsconfiguration-dns-ips
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or nfs-version common-lisp:null)
                         :accessor %file-cache-nfsconfiguration-version
                         :initform
                         (common-lisp:error ":version is required"))))
 (common-lisp:export
  (common-lisp:list 'file-cache-nfsconfiguration
                    'make-file-cache-nfsconfiguration))
 (common-lisp:defun make-file-cache-nfsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ips version)
   (common-lisp:apply #'common-lisp:make-instance 'file-cache-nfsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-nfsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-nfsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-cache-nfsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition file-cache-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       file-cache-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'file-cache-not-found 'file-cache-not-found-message)))
(common-lisp:deftype file-cache-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-caches () '(trivial-types:proper-list file-cache))
 (common-lisp:defun |make-file-caches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-cache))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass file-system common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or open-zfsfile-system-configuration
                                         common-lisp:null)
                         :accessor %file-system-open-zfsconfiguration :initform
                         common-lisp:nil)
                        (file-system-type-version :initarg
                         :file-system-type-version :type
                         (common-lisp:or file-system-type-version
                                         common-lisp:null)
                         :accessor %file-system-file-system-type-version
                         :initform common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or ontap-file-system-configuration
                                         common-lisp:null)
                         :accessor %file-system-ontap-configuration :initform
                         common-lisp:nil)
                        (administrative-actions :initarg
                         :administrative-actions :type
                         (common-lisp:or administrative-actions
                                         common-lisp:null)
                         :accessor %file-system-administrative-actions
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or lustre-file-system-configuration
                                         common-lisp:null)
                         :accessor %file-system-lustre-configuration :initform
                         common-lisp:nil)
                        (windows-configuration :initarg :windows-configuration
                         :type
                         (common-lisp:or windows-file-system-configuration
                                         common-lisp:null)
                         :accessor %file-system-windows-configuration :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %file-system-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %file-system-resource-arn :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %file-system-kms-key-id :initform common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %file-system-dnsname :initform common-lisp:nil)
                        (network-interface-ids :initarg :network-interface-ids
                         :type
                         (common-lisp:or network-interface-ids
                                         common-lisp:null)
                         :accessor %file-system-network-interface-ids :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %file-system-subnet-ids :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %file-system-vpc-id :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or storage-type common-lisp:null)
                         :accessor %file-system-storage-type :initform
                         common-lisp:nil)
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %file-system-storage-capacity :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or file-system-failure-details
                                         common-lisp:null)
                         :accessor %file-system-failure-details :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or file-system-lifecycle
                                         common-lisp:null)
                         :accessor %file-system-lifecycle :initform
                         common-lisp:nil)
                        (file-system-type :initarg :file-system-type :type
                         (common-lisp:or file-system-type common-lisp:null)
                         :accessor %file-system-file-system-type :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %file-system-file-system-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %file-system-creation-time :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor %file-system-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'file-system 'make-file-system))
 (common-lisp:defun make-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration
                     file-system-type-version ontap-configuration
                     administrative-actions lustre-configuration
                     windows-configuration tags resource-arn kms-key-id dnsname
                     network-interface-ids subnet-ids vpc-id storage-type
                     storage-capacity failure-details lifecycle
                     file-system-type file-system-id creation-time owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'file-system
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-system))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-system))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "FileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'windows-configuration))
      (common-lisp:list
       (common-lisp:cons "WindowsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrative-actions))
      (common-lisp:list
       (common-lisp:cons "AdministrativeActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-type-version))
      (common-lisp:list
       (common-lisp:cons "FileSystemTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-system))
   common-lisp:nil))
(common-lisp:deftype file-system-administrators-group-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-system-endpoint common-lisp:nil
                       ((ip-addresses :initarg :ip-addresses :type
                         (common-lisp:or ontap-endpoint-ip-addresses
                                         common-lisp:null)
                         :accessor %file-system-endpoint-ip-addresses :initform
                         common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %file-system-endpoint-dnsname :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-system-endpoint 'make-file-system-endpoint))
 (common-lisp:defun make-file-system-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-addresses dnsname)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-system-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-system-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-system-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-system-endpoints common-lisp:nil
                       ((management :initarg :management :type
                         (common-lisp:or file-system-endpoint common-lisp:null)
                         :accessor %file-system-endpoints-management :initform
                         common-lisp:nil)
                        (intercluster :initarg :intercluster :type
                         (common-lisp:or file-system-endpoint common-lisp:null)
                         :accessor %file-system-endpoints-intercluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-system-endpoints 'make-file-system-endpoints))
 (common-lisp:defun make-file-system-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key management intercluster)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-endpoints
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-system-endpoints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-system-endpoints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intercluster))
      (common-lisp:list
       (common-lisp:cons "Intercluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'management))
      (common-lisp:list
       (common-lisp:cons "Management"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-system-endpoints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-system-failure-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %file-system-failure-details-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-system-failure-details
                    'make-file-system-failure-details))
 (common-lisp:defun make-file-system-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'file-system-failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-system-failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-system-failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-system-failure-details))
   common-lisp:nil))
(common-lisp:deftype file-system-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-system-ids ()
   '(trivial-types:proper-list file-system-id))
 (common-lisp:defun |make-file-system-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-system-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-system-lifecycle () 'common-lisp:string)
(common-lisp:deftype file-system-maintenance-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-system-maintenance-operations ()
   '(trivial-types:proper-list file-system-maintenance-operation))
 (common-lisp:defun |make-file-system-maintenance-operations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            file-system-maintenance-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition file-system-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       file-system-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'file-system-not-found 'file-system-not-found-message)))
(common-lisp:deftype file-system-type () 'common-lisp:string)
(common-lisp:deftype file-system-type-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-systems () '(trivial-types:proper-list file-system))
 (common-lisp:defun |make-file-systems|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-system))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flag () 'common-lisp:boolean)
(common-lisp:deftype flex-cache-endpoint-type () 'common-lisp:string)
(common-lisp:deftype general-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incompatible-parameter-error
     (fsx-error)
     ((parameter :initarg :parameter :initform common-lisp:nil :reader
       incompatible-parameter-error-parameter)
      (message :initarg :message :initform common-lisp:nil :reader
       incompatible-parameter-error-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-parameter-error
                    'incompatible-parameter-error-parameter
                    'incompatible-parameter-error-message)))
(common-lisp:progn
 (common-lisp:define-condition incompatible-region-for-multi-az
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incompatible-region-for-multi-az-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-region-for-multi-az
                    'incompatible-region-for-multi-az-message)))
(common-lisp:deftype input-ontap-volume-type () 'common-lisp:string)
(common-lisp:deftype integer-no-max () 'common-lisp:integer)
(common-lisp:deftype integer-no-max-from-negative-one () 'common-lisp:integer)
(common-lisp:deftype integer-record-size-ki-b () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-data-repository-type
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-data-repository-type-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-data-repository-type
                    'invalid-data-repository-type-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-destination-kms-key
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-destination-kms-key-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-destination-kms-key
                    'invalid-destination-kms-key-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-path
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-export-path-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-export-path 'invalid-export-path-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-import-path
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-import-path-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-import-path 'invalid-import-path-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-network-settings
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-network-settings-message)
      (invalid-subnet-id :initarg :invalid-subnet-id :initform common-lisp:nil
       :reader invalid-network-settings-invalid-subnet-id)
      (invalid-security-group-id :initarg :invalid-security-group-id :initform
       common-lisp:nil :reader
       invalid-network-settings-invalid-security-group-id)
      (invalid-route-table-id :initarg :invalid-route-table-id :initform
       common-lisp:nil :reader
       invalid-network-settings-invalid-route-table-id)))
 (common-lisp:export
  (common-lisp:list 'invalid-network-settings 'invalid-network-settings-message
                    'invalid-network-settings-invalid-subnet-id
                    'invalid-network-settings-invalid-security-group-id
                    'invalid-network-settings-invalid-route-table-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-per-unit-storage-throughput
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-per-unit-storage-throughput-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-per-unit-storage-throughput
                    'invalid-per-unit-storage-throughput-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-region
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-region-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-region 'invalid-region-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-source-kms-key
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-source-kms-key-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-source-kms-key 'invalid-source-kms-key-message)))
(common-lisp:deftype iops () 'common-lisp:integer)
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-range () 'common-lisp:string)
(common-lisp:deftype junction-path () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-transition-reason common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %lifecycle-transition-reason-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-transition-reason
                    'make-lifecycle-transition-reason))
 (common-lisp:defun make-lifecycle-transition-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-transition-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-transition-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-transition-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-transition-reason))
   common-lisp:nil))
(common-lisp:deftype limited-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-response-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype lustre-access-audit-log-level () 'common-lisp:string)
(common-lisp:deftype lustre-deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lustre-file-system-configuration common-lisp:nil
                       ((root-squash-configuration :initarg
                         :root-squash-configuration :type
                         (common-lisp:or lustre-root-squash-configuration
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-root-squash-configuration
                         :initform common-lisp:nil)
                        (log-configuration :initarg :log-configuration :type
                         (common-lisp:or lustre-log-configuration
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-log-configuration
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or data-compression-type
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (drive-cache-type :initarg :drive-cache-type :type
                         (common-lisp:or drive-cache-type common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-drive-cache-type
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %lustre-file-system-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %lustre-file-system-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (mount-name :initarg :mount-name :type
                         (common-lisp:or lustre-file-system-mount-name
                                         common-lisp:null)
                         :accessor %lustre-file-system-configuration-mount-name
                         :initform common-lisp:nil)
                        (per-unit-storage-throughput :initarg
                         :per-unit-storage-throughput :type
                         (common-lisp:or per-unit-storage-throughput
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-per-unit-storage-throughput
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or lustre-deployment-type
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-deployment-type
                         :initform common-lisp:nil)
                        (data-repository-configuration :initarg
                         :data-repository-configuration :type
                         (common-lisp:or data-repository-configuration
                                         common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-data-repository-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %lustre-file-system-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lustre-file-system-configuration
                    'make-lustre-file-system-configuration))
 (common-lisp:defun make-lustre-file-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-squash-configuration
                     log-configuration data-compression-type drive-cache-type
                     copy-tags-to-backups automatic-backup-retention-days
                     daily-automatic-backup-start-time mount-name
                     per-unit-storage-throughput deployment-type
                     data-repository-configuration
                     weekly-maintenance-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'lustre-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lustre-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lustre-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-repository-configuration))
      (common-lisp:list
       (common-lisp:cons "DataRepositoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'per-unit-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "PerUnitStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-name))
      (common-lisp:list
       (common-lisp:cons "MountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drive-cache-type))
      (common-lisp:list
       (common-lisp:cons "DriveCacheType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-squash-configuration))
      (common-lisp:list
       (common-lisp:cons "RootSquashConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lustre-file-system-configuration))
   common-lisp:nil))
(common-lisp:deftype lustre-file-system-mount-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lustre-log-configuration common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or general-arn common-lisp:null)
                         :accessor %lustre-log-configuration-destination
                         :initform common-lisp:nil)
                        (level :initarg :level :type
                         (common-lisp:or lustre-access-audit-log-level
                                         common-lisp:null)
                         :accessor %lustre-log-configuration-level :initform
                         (common-lisp:error ":level is required"))))
 (common-lisp:export
  (common-lisp:list 'lustre-log-configuration 'make-lustre-log-configuration))
 (common-lisp:defun make-lustre-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination level)
   (common-lisp:apply #'common-lisp:make-instance 'lustre-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lustre-log-create-configuration common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or general-arn common-lisp:null)
                         :accessor %lustre-log-create-configuration-destination
                         :initform common-lisp:nil)
                        (level :initarg :level :type
                         (common-lisp:or lustre-access-audit-log-level
                                         common-lisp:null)
                         :accessor %lustre-log-create-configuration-level
                         :initform (common-lisp:error ":level is required"))))
 (common-lisp:export
  (common-lisp:list 'lustre-log-create-configuration
                    'make-lustre-log-create-configuration))
 (common-lisp:defun make-lustre-log-create-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination level)
   (common-lisp:apply #'common-lisp:make-instance
                      'lustre-log-create-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-create-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-create-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lustre-log-create-configuration))
   common-lisp:nil))
(common-lisp:deftype lustre-no-squash-nid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lustre-no-squash-nids ()
   '(trivial-types:proper-list lustre-no-squash-nid))
 (common-lisp:defun |make-lustre-no-squash-nids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lustre-no-squash-nid))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lustre-root-squash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lustre-root-squash-configuration common-lisp:nil
                       ((no-squash-nids :initarg :no-squash-nids :type
                         (common-lisp:or lustre-no-squash-nids
                                         common-lisp:null)
                         :accessor
                         %lustre-root-squash-configuration-no-squash-nids
                         :initform common-lisp:nil)
                        (root-squash :initarg :root-squash :type
                         (common-lisp:or lustre-root-squash common-lisp:null)
                         :accessor
                         %lustre-root-squash-configuration-root-squash
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lustre-root-squash-configuration
                    'make-lustre-root-squash-configuration))
 (common-lisp:defun make-lustre-root-squash-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key no-squash-nids root-squash)
   (common-lisp:apply #'common-lisp:make-instance
                      'lustre-root-squash-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lustre-root-squash-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lustre-root-squash-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-squash))
      (common-lisp:list
       (common-lisp:cons "RootSquash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-squash-nids))
      (common-lisp:list
       (common-lisp:cons "NoSquashNids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lustre-root-squash-configuration))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype megabytes () 'common-lisp:integer)
(common-lisp:deftype megabytes-per-second () 'common-lisp:integer)
(common-lisp:deftype metadata-storage-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-file-cache-configuration
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-file-cache-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'missing-file-cache-configuration
                    'missing-file-cache-configuration-message)))
(common-lisp:progn
 (common-lisp:define-condition missing-file-system-configuration
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-file-system-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'missing-file-system-configuration
                    'missing-file-system-configuration-message)))
(common-lisp:progn
 (common-lisp:define-condition missing-volume-configuration
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-volume-configuration-message)))
 (common-lisp:export
  (common-lisp:list 'missing-volume-configuration
                    'missing-volume-configuration-message)))
(common-lisp:progn
 (common-lisp:defclass nfsdata-repository-configuration common-lisp:nil
                       ((auto-export-policy :initarg :auto-export-policy :type
                         (common-lisp:or auto-export-policy common-lisp:null)
                         :accessor
                         %nfsdata-repository-configuration-auto-export-policy
                         :initform common-lisp:nil)
                        (dns-ips :initarg :dns-ips :type
                         (common-lisp:or repository-dns-ips common-lisp:null)
                         :accessor %nfsdata-repository-configuration-dns-ips
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or nfs-version common-lisp:null)
                         :accessor %nfsdata-repository-configuration-version
                         :initform
                         (common-lisp:error ":version is required"))))
 (common-lisp:export
  (common-lisp:list 'nfsdata-repository-configuration
                    'make-nfsdata-repository-configuration))
 (common-lisp:defun make-nfsdata-repository-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-export-policy dns-ips version)
   (common-lisp:apply #'common-lisp:make-instance
                      'nfsdata-repository-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nfsdata-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nfsdata-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-export-policy))
      (common-lisp:list
       (common-lisp:cons "AutoExportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nfsdata-repository-configuration))
   common-lisp:nil))
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:deftype net-bios-alias () 'common-lisp:string)
(common-lisp:deftype network-interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-interface-ids ()
   '(trivial-types:proper-list network-interface-id))
 (common-lisp:defun |make-network-interface-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nfs-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-service-resource-error
     (fsx-error)
     ((resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       not-service-resource-error-resource-arn)
      (message :initarg :message :initform common-lisp:nil :reader
       not-service-resource-error-message)))
 (common-lisp:export
  (common-lisp:list 'not-service-resource-error
                    'not-service-resource-error-resource-arn
                    'not-service-resource-error-message)))
(common-lisp:deftype ontap-deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ontap-endpoint-ip-addresses ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-ontap-endpoint-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ontap-file-system-configuration common-lisp:nil
                       ((weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-throughput-capacity
                         :initform common-lisp:nil)
                        (route-table-ids :initarg :route-table-ids :type
                         (common-lisp:or route-table-ids common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-route-table-ids
                         :initform common-lisp:nil)
                        (preferred-subnet-id :initarg :preferred-subnet-id
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-preferred-subnet-id
                         :initform common-lisp:nil)
                        (disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or file-system-endpoints
                                         common-lisp:null)
                         :accessor %ontap-file-system-configuration-endpoints
                         :initform common-lisp:nil)
                        (endpoint-ip-address-range :initarg
                         :endpoint-ip-address-range :type
                         (common-lisp:or ip-address-range common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-endpoint-ip-address-range
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or ontap-deployment-type
                                         common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-deployment-type
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %ontap-file-system-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %ontap-file-system-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ontap-file-system-configuration
                    'make-ontap-file-system-configuration))
 (common-lisp:defun make-ontap-file-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weekly-maintenance-start-time
                     throughput-capacity route-table-ids preferred-subnet-id
                     disk-iops-configuration endpoints
                     endpoint-ip-address-range deployment-type
                     daily-automatic-backup-start-time
                     automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'ontap-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ontap-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ontap-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-ip-address-range))
      (common-lisp:list
       (common-lisp:cons "EndpointIpAddressRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-subnet-id))
      (common-lisp:list
       (common-lisp:cons "PreferredSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ontap-file-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ontap-volume-configuration common-lisp:nil
                       ((copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %ontap-volume-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (snapshot-policy :initarg :snapshot-policy :type
                         (common-lisp:or snapshot-policy common-lisp:null)
                         :accessor %ontap-volume-configuration-snapshot-policy
                         :initform common-lisp:nil)
                        (ontap-volume-type :initarg :ontap-volume-type :type
                         (common-lisp:or ontap-volume-type common-lisp:null)
                         :accessor
                         %ontap-volume-configuration-ontap-volume-type
                         :initform common-lisp:nil)
                        (uuid :initarg :uuid :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %ontap-volume-configuration-uuid :initform
                         common-lisp:nil)
                        (tiering-policy :initarg :tiering-policy :type
                         (common-lisp:or tiering-policy common-lisp:null)
                         :accessor %ontap-volume-configuration-tiering-policy
                         :initform common-lisp:nil)
                        (storage-virtual-machine-root :initarg
                         :storage-virtual-machine-root :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %ontap-volume-configuration-storage-virtual-machine-root
                         :initform common-lisp:nil)
                        (storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %ontap-volume-configuration-storage-virtual-machine-id
                         :initform common-lisp:nil)
                        (storage-efficiency-enabled :initarg
                         :storage-efficiency-enabled :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %ontap-volume-configuration-storage-efficiency-enabled
                         :initform common-lisp:nil)
                        (size-in-megabytes :initarg :size-in-megabytes :type
                         (common-lisp:or volume-capacity common-lisp:null)
                         :accessor
                         %ontap-volume-configuration-size-in-megabytes
                         :initform common-lisp:nil)
                        (security-style :initarg :security-style :type
                         (common-lisp:or security-style common-lisp:null)
                         :accessor %ontap-volume-configuration-security-style
                         :initform common-lisp:nil)
                        (junction-path :initarg :junction-path :type
                         (common-lisp:or junction-path common-lisp:null)
                         :accessor %ontap-volume-configuration-junction-path
                         :initform common-lisp:nil)
                        (flex-cache-endpoint-type :initarg
                         :flex-cache-endpoint-type :type
                         (common-lisp:or flex-cache-endpoint-type
                                         common-lisp:null)
                         :accessor
                         %ontap-volume-configuration-flex-cache-endpoint-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ontap-volume-configuration
                    'make-ontap-volume-configuration))
 (common-lisp:defun make-ontap-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-tags-to-backups snapshot-policy
                     ontap-volume-type uuid tiering-policy
                     storage-virtual-machine-root storage-virtual-machine-id
                     storage-efficiency-enabled size-in-megabytes
                     security-style junction-path flex-cache-endpoint-type)
   (common-lisp:apply #'common-lisp:make-instance 'ontap-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ontap-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ontap-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flex-cache-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "FlexCacheEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'junction-path))
      (common-lisp:list
       (common-lisp:cons "JunctionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-style))
      (common-lisp:list
       (common-lisp:cons "SecurityStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-megabytes))
      (common-lisp:list
       (common-lisp:cons "SizeInMegabytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-efficiency-enabled))
      (common-lisp:list
       (common-lisp:cons "StorageEfficiencyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-root))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineRoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tiering-policy))
      (common-lisp:list
       (common-lisp:cons "TieringPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "UUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-volume-type))
      (common-lisp:list
       (common-lisp:cons "OntapVolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-policy))
      (common-lisp:list
       (common-lisp:cons "SnapshotPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ontap-volume-configuration))
   common-lisp:nil))
(common-lisp:deftype ontap-volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass open-zfsclient-configuration common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or open-zfsnfs-export-options
                                         common-lisp:null)
                         :accessor %open-zfsclient-configuration-options
                         :initform (common-lisp:error ":options is required"))
                        (clients :initarg :clients :type
                         (common-lisp:or open-zfsclients common-lisp:null)
                         :accessor %open-zfsclient-configuration-clients
                         :initform
                         (common-lisp:error ":clients is required"))))
 (common-lisp:export
  (common-lisp:list 'open-zfsclient-configuration
                    'make-open-zfsclient-configuration))
 (common-lisp:defun make-open-zfsclient-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options clients)
   (common-lisp:apply #'common-lisp:make-instance 'open-zfsclient-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsclient-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsclient-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clients))
      (common-lisp:list
       (common-lisp:cons "Clients"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsclient-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype open-zfsclient-configurations ()
   '(trivial-types:proper-list open-zfsclient-configuration))
 (common-lisp:defun |make-open-zfsclient-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-zfsclient-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype open-zfsclients () 'common-lisp:string)
(common-lisp:deftype open-zfscopy-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass open-zfscreate-root-volume-configuration common-lisp:nil
                       ((read-only :initarg :read-only :type
                         (common-lisp:or read-only common-lisp:null) :accessor
                         %open-zfscreate-root-volume-configuration-read-only
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshots :initarg
                         :copy-tags-to-snapshots :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfscreate-root-volume-configuration-copy-tags-to-snapshots
                         :initform common-lisp:nil)
                        (user-and-group-quotas :initarg :user-and-group-quotas
                         :type
                         (common-lisp:or open-zfsuser-and-group-quotas
                                         common-lisp:null)
                         :accessor
                         %open-zfscreate-root-volume-configuration-user-and-group-quotas
                         :initform common-lisp:nil)
                        (nfs-exports :initarg :nfs-exports :type
                         (common-lisp:or open-zfsnfs-exports common-lisp:null)
                         :accessor
                         %open-zfscreate-root-volume-configuration-nfs-exports
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or open-zfsdata-compression-type
                                         common-lisp:null)
                         :accessor
                         %open-zfscreate-root-volume-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (record-size-ki-b :initarg :record-size-ki-b :type
                         (common-lisp:or integer-record-size-ki-b
                                         common-lisp:null)
                         :accessor
                         %open-zfscreate-root-volume-configuration-record-size-ki-b
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'open-zfscreate-root-volume-configuration
                    'make-open-zfscreate-root-volume-configuration))
 (common-lisp:defun make-open-zfscreate-root-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-only copy-tags-to-snapshots
                     user-and-group-quotas nfs-exports data-compression-type
                     record-size-ki-b)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-zfscreate-root-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfscreate-root-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfscreate-root-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-size-ki-b))
      (common-lisp:list
       (common-lisp:cons "RecordSizeKiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs-exports))
      (common-lisp:list
       (common-lisp:cons "NfsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-and-group-quotas))
      (common-lisp:list
       (common-lisp:cons "UserAndGroupQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshots))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfscreate-root-volume-configuration))
   common-lisp:nil))
(common-lisp:deftype open-zfsdata-compression-type () 'common-lisp:string)
(common-lisp:deftype open-zfsdeployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass open-zfsfile-system-configuration common-lisp:nil
                       ((root-volume-id :initarg :root-volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %open-zfsfile-system-configuration-root-volume-id
                         :initform common-lisp:nil)
                        (disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %open-zfsfile-system-configuration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %open-zfsfile-system-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %open-zfsfile-system-configuration-throughput-capacity
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or open-zfsdeployment-type
                                         common-lisp:null)
                         :accessor
                         %open-zfsfile-system-configuration-deployment-type
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %open-zfsfile-system-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (copy-tags-to-volumes :initarg :copy-tags-to-volumes
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfsfile-system-configuration-copy-tags-to-volumes
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfsfile-system-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %open-zfsfile-system-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'open-zfsfile-system-configuration
                    'make-open-zfsfile-system-configuration))
 (common-lisp:defun make-open-zfsfile-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-volume-id disk-iops-configuration
                     weekly-maintenance-start-time throughput-capacity
                     deployment-type daily-automatic-backup-start-time
                     copy-tags-to-volumes copy-tags-to-backups
                     automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-zfsfile-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsfile-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsfile-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-volumes))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-volume-id))
      (common-lisp:list
       (common-lisp:cons "RootVolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsfile-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-zfsnfs-export common-lisp:nil
                       ((client-configurations :initarg :client-configurations
                         :type
                         (common-lisp:or open-zfsclient-configurations
                                         common-lisp:null)
                         :accessor %open-zfsnfs-export-client-configurations
                         :initform
                         (common-lisp:error
                          ":client-configurations is required"))))
 (common-lisp:export
  (common-lisp:list 'open-zfsnfs-export 'make-open-zfsnfs-export))
 (common-lisp:defun make-open-zfsnfs-export
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-configurations)
   (common-lisp:apply #'common-lisp:make-instance 'open-zfsnfs-export
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-zfsnfs-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-zfsnfs-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-configurations))
      (common-lisp:list
       (common-lisp:cons "ClientConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-zfsnfs-export))
   common-lisp:nil))
(common-lisp:deftype open-zfsnfs-export-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype open-zfsnfs-export-options ()
   '(trivial-types:proper-list open-zfsnfs-export-option))
 (common-lisp:defun |make-open-zfsnfs-export-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-zfsnfs-export-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype open-zfsnfs-exports ()
   '(trivial-types:proper-list open-zfsnfs-export))
 (common-lisp:defun |make-open-zfsnfs-exports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list open-zfsnfs-export))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass open-zfsorigin-snapshot-configuration common-lisp:nil
                       ((copy-strategy :initarg :copy-strategy :type
                         (common-lisp:or open-zfscopy-strategy
                                         common-lisp:null)
                         :accessor
                         %open-zfsorigin-snapshot-configuration-copy-strategy
                         :initform common-lisp:nil)
                        (snapshot-arn :initarg :snapshot-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %open-zfsorigin-snapshot-configuration-snapshot-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'open-zfsorigin-snapshot-configuration
                    'make-open-zfsorigin-snapshot-configuration))
 (common-lisp:defun make-open-zfsorigin-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-strategy snapshot-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-zfsorigin-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsorigin-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsorigin-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SnapshotARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-strategy))
      (common-lisp:list
       (common-lisp:cons "CopyStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsorigin-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype open-zfsquota-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype open-zfsuser-and-group-quotas ()
   '(trivial-types:proper-list open-zfsuser-or-group-quota))
 (common-lisp:defun |make-open-zfsuser-and-group-quotas|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-zfsuser-or-group-quota))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass open-zfsuser-or-group-quota common-lisp:nil
                       ((storage-capacity-quota-gi-b :initarg
                         :storage-capacity-quota-gi-b :type
                         (common-lisp:or integer-no-max common-lisp:null)
                         :accessor
                         %open-zfsuser-or-group-quota-storage-capacity-quota-gi-b
                         :initform
                         (common-lisp:error
                          ":storage-capacity-quota-gi-b is required"))
                        (id :initarg :id :type
                         (common-lisp:or integer-no-max common-lisp:null)
                         :accessor %open-zfsuser-or-group-quota-id :initform
                         (common-lisp:error ":id is required"))
                        (type :initarg :type :type
                         (common-lisp:or open-zfsquota-type common-lisp:null)
                         :accessor %open-zfsuser-or-group-quota-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'open-zfsuser-or-group-quota
                    'make-open-zfsuser-or-group-quota))
 (common-lisp:defun make-open-zfsuser-or-group-quota
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-capacity-quota-gi-b id type)
   (common-lisp:apply #'common-lisp:make-instance 'open-zfsuser-or-group-quota
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsuser-or-group-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsuser-or-group-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-quota-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityQuotaGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsuser-or-group-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-zfsvolume-configuration common-lisp:nil
                       ((delete-cloned-volumes :initarg :delete-cloned-volumes
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfsvolume-configuration-delete-cloned-volumes
                         :initform common-lisp:nil)
                        (delete-intermediate-snaphots :initarg
                         :delete-intermediate-snaphots :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfsvolume-configuration-delete-intermediate-snaphots
                         :initform common-lisp:nil)
                        (restore-to-snapshot :initarg :restore-to-snapshot
                         :type (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-restore-to-snapshot
                         :initform common-lisp:nil)
                        (user-and-group-quotas :initarg :user-and-group-quotas
                         :type
                         (common-lisp:or open-zfsuser-and-group-quotas
                                         common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-user-and-group-quotas
                         :initform common-lisp:nil)
                        (nfs-exports :initarg :nfs-exports :type
                         (common-lisp:or open-zfsnfs-exports common-lisp:null)
                         :accessor %open-zfsvolume-configuration-nfs-exports
                         :initform common-lisp:nil)
                        (read-only :initarg :read-only :type
                         (common-lisp:or read-only common-lisp:null) :accessor
                         %open-zfsvolume-configuration-read-only :initform
                         common-lisp:nil)
                        (origin-snapshot :initarg :origin-snapshot :type
                         (common-lisp:or open-zfsorigin-snapshot-configuration
                                         common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-origin-snapshot
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshots :initarg
                         :copy-tags-to-snapshots :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %open-zfsvolume-configuration-copy-tags-to-snapshots
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or open-zfsdata-compression-type
                                         common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (record-size-ki-b :initarg :record-size-ki-b :type
                         (common-lisp:or integer-record-size-ki-b
                                         common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-record-size-ki-b
                         :initform common-lisp:nil)
                        (storage-capacity-quota-gi-b :initarg
                         :storage-capacity-quota-gi-b :type
                         (common-lisp:or integer-no-max common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-storage-capacity-quota-gi-b
                         :initform common-lisp:nil)
                        (storage-capacity-reservation-gi-b :initarg
                         :storage-capacity-reservation-gi-b :type
                         (common-lisp:or integer-no-max common-lisp:null)
                         :accessor
                         %open-zfsvolume-configuration-storage-capacity-reservation-gi-b
                         :initform common-lisp:nil)
                        (volume-path :initarg :volume-path :type
                         (common-lisp:or volume-path common-lisp:null)
                         :accessor %open-zfsvolume-configuration-volume-path
                         :initform common-lisp:nil)
                        (parent-volume-id :initarg :parent-volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %open-zfsvolume-configuration-parent-volume-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'open-zfsvolume-configuration
                    'make-open-zfsvolume-configuration))
 (common-lisp:defun make-open-zfsvolume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-cloned-volumes
                     delete-intermediate-snaphots restore-to-snapshot
                     user-and-group-quotas nfs-exports read-only
                     origin-snapshot copy-tags-to-snapshots
                     data-compression-type record-size-ki-b
                     storage-capacity-quota-gi-b
                     storage-capacity-reservation-gi-b volume-path
                     parent-volume-id)
   (common-lisp:apply #'common-lisp:make-instance 'open-zfsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-volume-id))
      (common-lisp:list
       (common-lisp:cons "ParentVolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-path))
      (common-lisp:list
       (common-lisp:cons "VolumePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-reservation-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityReservationGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-quota-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityQuotaGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-size-ki-b))
      (common-lisp:list
       (common-lisp:cons "RecordSizeKiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshots))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-snapshot))
      (common-lisp:list
       (common-lisp:cons "OriginSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs-exports))
      (common-lisp:list
       (common-lisp:cons "NfsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-and-group-quotas))
      (common-lisp:list
       (common-lisp:cons "UserAndGroupQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "RestoreToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-intermediate-snaphots))
      (common-lisp:list
       (common-lisp:cons "DeleteIntermediateSnaphots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-cloned-volumes))
      (common-lisp:list
       (common-lisp:cons "DeleteClonedVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-zfsvolume-configuration))
   common-lisp:nil))
(common-lisp:deftype organizational-unit-distinguished-name ()
  'common-lisp:string)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:deftype per-unit-storage-throughput () 'common-lisp:integer)
(common-lisp:deftype progress-percent () 'common-lisp:integer)
(common-lisp:deftype read-only () 'common-lisp:boolean)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass release-file-system-nfs-v3locks-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %release-file-system-nfs-v3locks-request-client-request-token
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor
                         %release-file-system-nfs-v3locks-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'release-file-system-nfs-v3locks-request
                    'make-release-file-system-nfs-v3locks-request))
 (common-lisp:defun make-release-file-system-nfs-v3locks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'release-file-system-nfs-v3locks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass release-file-system-nfs-v3locks-response common-lisp:nil
                       ((file-system :initarg :file-system :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor
                         %release-file-system-nfs-v3locks-response-file-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'release-file-system-nfs-v3locks-response
                    'make-release-file-system-nfs-v3locks-response))
 (common-lisp:defun make-release-file-system-nfs-v3locks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system)
   (common-lisp:apply #'common-lisp:make-instance
                      'release-file-system-nfs-v3locks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system))
      (common-lisp:list
       (common-lisp:cons "FileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-file-system-nfs-v3locks-response))
   common-lisp:nil))
(common-lisp:deftype released-capacity () 'common-lisp:integer)
(common-lisp:deftype report-format () 'common-lisp:string)
(common-lisp:deftype report-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-dns-ips ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-repository-dns-ips|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-time () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-does-not-support-tagging
     (fsx-error)
     ((resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-does-not-support-tagging-resource-arn)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-does-not-support-tagging-message)))
 (common-lisp:export
  (common-lisp:list 'resource-does-not-support-tagging
                    'resource-does-not-support-tagging-resource-arn
                    'resource-does-not-support-tagging-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found
     (fsx-error)
     ((resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-not-found-resource-arn)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'resource-not-found-resource-arn
                    'resource-not-found-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype restore-open-zfsvolume-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype restore-open-zfsvolume-options ()
   '(trivial-types:proper-list restore-open-zfsvolume-option))
 (common-lisp:defun |make-restore-open-zfsvolume-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            restore-open-zfsvolume-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass restore-volume-from-snapshot-request common-lisp:nil
                       ((options :initarg :options :type
                         (common-lisp:or restore-open-zfsvolume-options
                                         common-lisp:null)
                         :accessor
                         %restore-volume-from-snapshot-request-options
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %restore-volume-from-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %restore-volume-from-snapshot-request-volume-id
                         :initform
                         (common-lisp:error ":volume-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %restore-volume-from-snapshot-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-volume-from-snapshot-request
                    'make-restore-volume-from-snapshot-request))
 (common-lisp:defun make-restore-volume-from-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options snapshot-id volume-id
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-volume-from-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-volume-from-snapshot-response common-lisp:nil
                       ((administrative-actions :initarg
                         :administrative-actions :type
                         (common-lisp:or administrative-actions
                                         common-lisp:null)
                         :accessor
                         %restore-volume-from-snapshot-response-administrative-actions
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or volume-lifecycle common-lisp:null)
                         :accessor
                         %restore-volume-from-snapshot-response-lifecycle
                         :initform common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %restore-volume-from-snapshot-response-volume-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-volume-from-snapshot-response
                    'make-restore-volume-from-snapshot-response))
 (common-lisp:defun make-restore-volume-from-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key administrative-actions lifecycle
                     volume-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-volume-from-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrative-actions))
      (common-lisp:list
       (common-lisp:cons "AdministrativeActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-volume-from-snapshot-response))
   common-lisp:nil))
(common-lisp:deftype route-table-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-table-ids ()
   '(trivial-types:proper-list route-table-id))
 (common-lisp:defun |make-route-table-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-table-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3data-repository-configuration common-lisp:nil
                       ((auto-export-policy :initarg :auto-export-policy :type
                         (common-lisp:or auto-export-policy common-lisp:null)
                         :accessor
                         %s3data-repository-configuration-auto-export-policy
                         :initform common-lisp:nil)
                        (auto-import-policy :initarg :auto-import-policy :type
                         (common-lisp:or auto-import-policy common-lisp:null)
                         :accessor
                         %s3data-repository-configuration-auto-import-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3data-repository-configuration
                    'make-s3data-repository-configuration))
 (common-lisp:defun make-s3data-repository-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-export-policy auto-import-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      's3data-repository-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3data-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3data-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-import-policy))
      (common-lisp:list
       (common-lisp:cons "AutoImportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-export-policy))
      (common-lisp:list
       (common-lisp:cons "AutoExportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3data-repository-configuration))
   common-lisp:nil))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass self-managed-active-directory-attributes common-lisp:nil
                       ((dns-ips :initarg :dns-ips :type
                         (common-lisp:or dns-ips common-lisp:null) :accessor
                         %self-managed-active-directory-attributes-dns-ips
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or directory-user-name common-lisp:null)
                         :accessor
                         %self-managed-active-directory-attributes-user-name
                         :initform common-lisp:nil)
                        (file-system-administrators-group :initarg
                         :file-system-administrators-group :type
                         (common-lisp:or file-system-administrators-group-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-attributes-file-system-administrators-group
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :type
                         (common-lisp:or organizational-unit-distinguished-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-attributes-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or active-directory-fully-qualified-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-attributes-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'self-managed-active-directory-attributes
                    'make-self-managed-active-directory-attributes))
 (common-lisp:defun make-self-managed-active-directory-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ips user-name
                     file-system-administrators-group
                     organizational-unit-distinguished-name domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-active-directory-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-administrators-group))
      (common-lisp:list
       (common-lisp:cons "FileSystemAdministratorsGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass self-managed-active-directory-configuration
                       common-lisp:nil
                       ((dns-ips :initarg :dns-ips :type
                         (common-lisp:or dns-ips common-lisp:null) :accessor
                         %self-managed-active-directory-configuration-dns-ips
                         :initform (common-lisp:error ":dns-ips is required"))
                        (password :initarg :password :type
                         (common-lisp:or directory-password common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-password
                         :initform (common-lisp:error ":password is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or directory-user-name common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-user-name
                         :initform
                         (common-lisp:error ":user-name is required"))
                        (file-system-administrators-group :initarg
                         :file-system-administrators-group :type
                         (common-lisp:or file-system-administrators-group-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-file-system-administrators-group
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :type
                         (common-lisp:or organizational-unit-distinguished-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or active-directory-fully-qualified-name
                                         common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'self-managed-active-directory-configuration
                    'make-self-managed-active-directory-configuration))
 (common-lisp:defun make-self-managed-active-directory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ips password user-name
                     file-system-administrators-group
                     organizational-unit-distinguished-name domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-administrators-group))
      (common-lisp:list
       (common-lisp:cons "FileSystemAdministratorsGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass self-managed-active-directory-configuration-updates
                       common-lisp:nil
                       ((dns-ips :initarg :dns-ips :type
                         (common-lisp:or dns-ips common-lisp:null) :accessor
                         %self-managed-active-directory-configuration-updates-dns-ips
                         :initform common-lisp:nil)
                        (password :initarg :password :type
                         (common-lisp:or directory-password common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-updates-password
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or directory-user-name common-lisp:null)
                         :accessor
                         %self-managed-active-directory-configuration-updates-user-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'self-managed-active-directory-configuration-updates
                    'make-self-managed-active-directory-configuration-updates))
 (common-lisp:defun make-self-managed-active-directory-configuration-updates
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-ips password user-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'self-managed-active-directory-configuration-updates
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ips))
      (common-lisp:list
       (common-lisp:cons "DnsIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          self-managed-active-directory-configuration-updates))
   common-lisp:nil))
(common-lisp:deftype service-limit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-limit-exceeded
     (fsx-error)
     ((limit :initarg :limit :initform common-lisp:nil :reader
       service-limit-exceeded-limit)
      (message :initarg :message :initform common-lisp:nil :reader
       service-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'service-limit-exceeded 'service-limit-exceeded-limit
                    'service-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((administrative-actions :initarg
                         :administrative-actions :type
                         (common-lisp:or administrative-actions
                                         common-lisp:null)
                         :accessor %snapshot-administrative-actions :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %snapshot-tags :initform common-lisp:nil)
                        (lifecycle-transition-reason :initarg
                         :lifecycle-transition-reason :type
                         (common-lisp:or lifecycle-transition-reason
                                         common-lisp:null)
                         :accessor %snapshot-lifecycle-transition-reason
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or snapshot-lifecycle common-lisp:null)
                         :accessor %snapshot-lifecycle :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %snapshot-creation-time :initform
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %snapshot-volume-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or snapshot-name common-lisp:null)
                         :accessor %snapshot-name :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %snapshot-snapshot-id :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %snapshot-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defun make-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key administrative-actions tags
                     lifecycle-transition-reason lifecycle creation-time
                     volume-id name snapshot-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition-reason))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrative-actions))
      (common-lisp:list
       (common-lisp:cons "AdministrativeActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or snapshot-filter-values
                                         common-lisp:null)
                         :accessor %snapshot-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or snapshot-filter-name common-lisp:null)
                         :accessor %snapshot-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot-filter 'make-snapshot-filter))
 (common-lisp:defun make-snapshot-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-filter))
   common-lisp:nil))
(common-lisp:deftype snapshot-filter-name () 'common-lisp:string)
(common-lisp:deftype snapshot-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshot-filter-values ()
   '(trivial-types:proper-list snapshot-filter-value))
 (common-lisp:defun |make-snapshot-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-filters ()
   '(trivial-types:proper-list snapshot-filter))
 (common-lisp:defun |make-snapshot-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshot-ids () '(trivial-types:proper-list snapshot-id))
 (common-lisp:defun |make-snapshot-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snapshot-lifecycle () 'common-lisp:string)
(common-lisp:deftype snapshot-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition snapshot-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       snapshot-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'snapshot-not-found 'snapshot-not-found-message)))
(common-lisp:deftype snapshot-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snapshots () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshots|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype source-backup-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition source-backup-unavailable
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       source-backup-unavailable-message)
      (backup-id :initarg :backup-id :initform common-lisp:nil :reader
       source-backup-unavailable-backup-id)))
 (common-lisp:export
  (common-lisp:list 'source-backup-unavailable
                    'source-backup-unavailable-message
                    'source-backup-unavailable-backup-id)))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype storage-capacity () 'common-lisp:integer)
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-virtual-machine common-lisp:nil
                       ((root-volume-security-style :initarg
                         :root-volume-security-style :type
                         (common-lisp:or
                          storage-virtual-machine-root-volume-security-style
                          common-lisp:null)
                         :accessor
                         %storage-virtual-machine-root-volume-security-style
                         :initform common-lisp:nil)
                        (lifecycle-transition-reason :initarg
                         :lifecycle-transition-reason :type
                         (common-lisp:or lifecycle-transition-reason
                                         common-lisp:null)
                         :accessor
                         %storage-virtual-machine-lifecycle-transition-reason
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %storage-virtual-machine-tags :initform
                         common-lisp:nil)
                        (uuid :initarg :uuid :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %storage-virtual-machine-uuid :initform
                         common-lisp:nil)
                        (subtype :initarg :subtype :type
                         (common-lisp:or storage-virtual-machine-subtype
                                         common-lisp:null)
                         :accessor %storage-virtual-machine-subtype :initform
                         common-lisp:nil)
                        (storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %storage-virtual-machine-storage-virtual-machine-id
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %storage-virtual-machine-resource-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or storage-virtual-machine-name
                                         common-lisp:null)
                         :accessor %storage-virtual-machine-name :initform
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or storage-virtual-machine-lifecycle
                                         common-lisp:null)
                         :accessor %storage-virtual-machine-lifecycle :initform
                         common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %storage-virtual-machine-file-system-id
                         :initform common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or svm-endpoints common-lisp:null)
                         :accessor %storage-virtual-machine-endpoints :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %storage-virtual-machine-creation-time
                         :initform common-lisp:nil)
                        (active-directory-configuration :initarg
                         :active-directory-configuration :type
                         (common-lisp:or svm-active-directory-configuration
                                         common-lisp:null)
                         :accessor
                         %storage-virtual-machine-active-directory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-virtual-machine 'make-storage-virtual-machine))
 (common-lisp:defun make-storage-virtual-machine
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-volume-security-style
                     lifecycle-transition-reason tags uuid subtype
                     storage-virtual-machine-id resource-arn name lifecycle
                     file-system-id endpoints creation-time
                     active-directory-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'storage-virtual-machine
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtype))
      (common-lisp:list
       (common-lisp:cons "Subtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uuid))
      (common-lisp:list
       (common-lisp:cons "UUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition-reason))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-security-style))
      (common-lisp:list
       (common-lisp:cons "RootVolumeSecurityStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-virtual-machine-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or storage-virtual-machine-filter-values
                                         common-lisp:null)
                         :accessor %storage-virtual-machine-filter-values
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or storage-virtual-machine-filter-name
                                         common-lisp:null)
                         :accessor %storage-virtual-machine-filter-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-virtual-machine-filter
                    'make-storage-virtual-machine-filter))
 (common-lisp:defun make-storage-virtual-machine-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance
                      'storage-virtual-machine-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-virtual-machine-filter))
   common-lisp:nil))
(common-lisp:deftype storage-virtual-machine-filter-name () 'common-lisp:string)
(common-lisp:deftype storage-virtual-machine-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-virtual-machine-filter-values ()
   '(trivial-types:proper-list storage-virtual-machine-filter-value))
 (common-lisp:defun |make-storage-virtual-machine-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            storage-virtual-machine-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype storage-virtual-machine-filters ()
   '(trivial-types:proper-list storage-virtual-machine-filter))
 (common-lisp:defun |make-storage-virtual-machine-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            storage-virtual-machine-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-virtual-machine-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-virtual-machine-ids ()
   '(trivial-types:proper-list storage-virtual-machine-id))
 (common-lisp:defun |make-storage-virtual-machine-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            storage-virtual-machine-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-virtual-machine-lifecycle () 'common-lisp:string)
(common-lisp:deftype storage-virtual-machine-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition storage-virtual-machine-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-virtual-machine-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'storage-virtual-machine-not-found
                    'storage-virtual-machine-not-found-message)))
(common-lisp:deftype storage-virtual-machine-root-volume-security-style ()
  'common-lisp:string)
(common-lisp:deftype storage-virtual-machine-subtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype storage-virtual-machines ()
   '(trivial-types:proper-list storage-virtual-machine))
 (common-lisp:defun |make-storage-virtual-machines|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-virtual-machine))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sub-directories-paths ()
   '(trivial-types:proper-list namespace))
 (common-lisp:defun |make-sub-directories-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype succeeded-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass svm-active-directory-configuration common-lisp:nil
                       ((self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-attributes
                          common-lisp:null)
                         :accessor
                         %svm-active-directory-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)
                        (net-bios-name :initarg :net-bios-name :type
                         (common-lisp:or net-bios-alias common-lisp:null)
                         :accessor
                         %svm-active-directory-configuration-net-bios-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'svm-active-directory-configuration
                    'make-svm-active-directory-configuration))
 (common-lisp:defun make-svm-active-directory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     self-managed-active-directory-configuration net-bios-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'svm-active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          svm-active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          svm-active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-bios-name))
      (common-lisp:list
       (common-lisp:cons "NetBiosName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          svm-active-directory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass svm-endpoint common-lisp:nil
                       ((ip-addresses :initarg :ip-addresses :type
                         (common-lisp:or ontap-endpoint-ip-addresses
                                         common-lisp:null)
                         :accessor %svm-endpoint-ip-addresses :initform
                         common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %svm-endpoint-dnsname :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'svm-endpoint 'make-svm-endpoint))
 (common-lisp:defun make-svm-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-addresses dnsname)
   (common-lisp:apply #'common-lisp:make-instance 'svm-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input svm-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input svm-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input svm-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass svm-endpoints common-lisp:nil
                       ((smb :initarg :smb :type
                         (common-lisp:or svm-endpoint common-lisp:null)
                         :accessor %svm-endpoints-smb :initform
                         common-lisp:nil)
                        (nfs :initarg :nfs :type
                         (common-lisp:or svm-endpoint common-lisp:null)
                         :accessor %svm-endpoints-nfs :initform
                         common-lisp:nil)
                        (management :initarg :management :type
                         (common-lisp:or svm-endpoint common-lisp:null)
                         :accessor %svm-endpoints-management :initform
                         common-lisp:nil)
                        (iscsi :initarg :iscsi :type
                         (common-lisp:or svm-endpoint common-lisp:null)
                         :accessor %svm-endpoints-iscsi :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'svm-endpoints 'make-svm-endpoints))
 (common-lisp:defun make-svm-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key smb nfs management iscsi)
   (common-lisp:apply #'common-lisp:make-instance 'svm-endpoints
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input svm-endpoints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input svm-endpoints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iscsi))
      (common-lisp:list
       (common-lisp:cons "Iscsi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'management))
      (common-lisp:list
       (common-lisp:cons "Management"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs))
      (common-lisp:list
       (common-lisp:cons "Nfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smb))
      (common-lisp:list
       (common-lisp:cons "Smb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input svm-endpoints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-ids () '(trivial-types:proper-list task-id))
 (common-lisp:defun |make-task-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tiering-policy common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or tiering-policy-name common-lisp:null)
                         :accessor %tiering-policy-name :initform
                         common-lisp:nil)
                        (cooling-period :initarg :cooling-period :type
                         (common-lisp:or cooling-period common-lisp:null)
                         :accessor %tiering-policy-cooling-period :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tiering-policy 'make-tiering-policy))
 (common-lisp:defun make-tiering-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name cooling-period)
   (common-lisp:apply #'common-lisp:make-instance 'tiering-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tiering-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tiering-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cooling-period))
      (common-lisp:list
       (common-lisp:cons "CoolingPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tiering-policy))
   common-lisp:nil))
(common-lisp:deftype tiering-policy-name () 'common-lisp:string)
(common-lisp:deftype total-count () 'common-lisp:integer)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation 'unsupported-operation-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-repository-association-request
                       common-lisp:nil
                       ((s3 :initarg :s3 :type
                         (common-lisp:or s3data-repository-configuration
                                         common-lisp:null)
                         :accessor
                         %update-data-repository-association-request-s3
                         :initform common-lisp:nil)
                        (imported-file-chunk-size :initarg
                         :imported-file-chunk-size :type
                         (common-lisp:or megabytes common-lisp:null) :accessor
                         %update-data-repository-association-request-imported-file-chunk-size
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-data-repository-association-request-client-request-token
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or data-repository-association-id
                                         common-lisp:null)
                         :accessor
                         %update-data-repository-association-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-data-repository-association-request
                    'make-update-data-repository-association-request))
 (common-lisp:defun make-update-data-repository-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3 imported-file-chunk-size
                     client-request-token association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-repository-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-file-chunk-size))
      (common-lisp:list
       (common-lisp:cons "ImportedFileChunkSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-repository-association-response
                       common-lisp:nil
                       ((association :initarg :association :type
                         (common-lisp:or data-repository-association
                                         common-lisp:null)
                         :accessor
                         %update-data-repository-association-response-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-data-repository-association-response
                    'make-update-data-repository-association-response))
 (common-lisp:defun make-update-data-repository-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-repository-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association))
      (common-lisp:list
       (common-lisp:cons "Association"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-repository-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-cache-lustre-configuration common-lisp:nil
                       ((weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %update-file-cache-lustre-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-cache-lustre-configuration
                    'make-update-file-cache-lustre-configuration))
 (common-lisp:defun make-update-file-cache-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weekly-maintenance-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-file-cache-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-lustre-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-cache-request common-lisp:nil
                       ((lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or update-file-cache-lustre-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-cache-request-lustre-configuration
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-file-cache-request-client-request-token
                         :initform common-lisp:nil)
                        (file-cache-id :initarg :file-cache-id :type
                         (common-lisp:or file-cache-id common-lisp:null)
                         :accessor %update-file-cache-request-file-cache-id
                         :initform
                         (common-lisp:error ":file-cache-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-file-cache-request
                    'make-update-file-cache-request))
 (common-lisp:defun make-update-file-cache-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lustre-configuration client-request-token
                     file-cache-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-file-cache-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache-id))
      (common-lisp:list
       (common-lisp:cons "FileCacheId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-cache-response common-lisp:nil
                       ((file-cache :initarg :file-cache :type
                         (common-lisp:or file-cache common-lisp:null) :accessor
                         %update-file-cache-response-file-cache :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-cache-response
                    'make-update-file-cache-response))
 (common-lisp:defun make-update-file-cache-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-cache)
   (common-lisp:apply #'common-lisp:make-instance 'update-file-cache-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-cache))
      (common-lisp:list
       (common-lisp:cons "FileCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-lustre-configuration common-lisp:nil
                       ((root-squash-configuration :initarg
                         :root-squash-configuration :type
                         (common-lisp:or lustre-root-squash-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-root-squash-configuration
                         :initform common-lisp:nil)
                        (log-configuration :initarg :log-configuration :type
                         (common-lisp:or lustre-log-create-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-log-configuration
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or data-compression-type
                                         common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (auto-import-policy :initarg :auto-import-policy :type
                         (common-lisp:or auto-import-policy-type
                                         common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-auto-import-policy
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %update-file-system-lustre-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %update-file-system-lustre-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-system-lustre-configuration
                    'make-update-file-system-lustre-configuration))
 (common-lisp:defun make-update-file-system-lustre-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-squash-configuration
                     log-configuration data-compression-type auto-import-policy
                     automatic-backup-retention-days
                     daily-automatic-backup-start-time
                     weekly-maintenance-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-file-system-lustre-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-lustre-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-lustre-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-import-policy))
      (common-lisp:list
       (common-lisp:cons "AutoImportPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-squash-configuration))
      (common-lisp:list
       (common-lisp:cons "RootSquashConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-lustre-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-ontap-configuration common-lisp:nil
                       ((remove-route-table-ids :initarg
                         :remove-route-table-ids :type
                         (common-lisp:or route-table-ids common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-remove-route-table-ids
                         :initform common-lisp:nil)
                        (add-route-table-ids :initarg :add-route-table-ids
                         :type
                         (common-lisp:or route-table-ids common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-add-route-table-ids
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-throughput-capacity
                         :initform common-lisp:nil)
                        (disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (fsx-admin-password :initarg :fsx-admin-password :type
                         (common-lisp:or admin-password common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-fsx-admin-password
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %update-file-system-ontap-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %update-file-system-ontap-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-system-ontap-configuration
                    'make-update-file-system-ontap-configuration))
 (common-lisp:defun make-update-file-system-ontap-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remove-route-table-ids
                     add-route-table-ids throughput-capacity
                     disk-iops-configuration weekly-maintenance-start-time
                     fsx-admin-password daily-automatic-backup-start-time
                     automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-file-system-ontap-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-ontap-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-ontap-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fsx-admin-password))
      (common-lisp:list
       (common-lisp:cons "FsxAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-route-table-ids))
      (common-lisp:list
       (common-lisp:cons "AddRouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-route-table-ids))
      (common-lisp:list
       (common-lisp:cons "RemoveRouteTableIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-ontap-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-open-zfsconfiguration common-lisp:nil
                       ((disk-iops-configuration :initarg
                         :disk-iops-configuration :type
                         (common-lisp:or disk-iops-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-open-zfsconfiguration-disk-iops-configuration
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %update-file-system-open-zfsconfiguration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %update-file-system-open-zfsconfiguration-throughput-capacity
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %update-file-system-open-zfsconfiguration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (copy-tags-to-volumes :initarg :copy-tags-to-volumes
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %update-file-system-open-zfsconfiguration-copy-tags-to-volumes
                         :initform common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %update-file-system-open-zfsconfiguration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %update-file-system-open-zfsconfiguration-automatic-backup-retention-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-system-open-zfsconfiguration
                    'make-update-file-system-open-zfsconfiguration))
 (common-lisp:defun make-update-file-system-open-zfsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disk-iops-configuration
                     weekly-maintenance-start-time throughput-capacity
                     daily-automatic-backup-start-time copy-tags-to-volumes
                     copy-tags-to-backups automatic-backup-retention-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-file-system-open-zfsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-open-zfsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-open-zfsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-volumes))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-iops-configuration))
      (common-lisp:list
       (common-lisp:cons "DiskIopsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-open-zfsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or
                          update-file-system-open-zfsconfiguration
                          common-lisp:null)
                         :accessor
                         %update-file-system-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or update-file-system-ontap-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-request-ontap-configuration
                         :initform common-lisp:nil)
                        (lustre-configuration :initarg :lustre-configuration
                         :type
                         (common-lisp:or
                          update-file-system-lustre-configuration
                          common-lisp:null)
                         :accessor
                         %update-file-system-request-lustre-configuration
                         :initform common-lisp:nil)
                        (windows-configuration :initarg :windows-configuration
                         :type
                         (common-lisp:or
                          update-file-system-windows-configuration
                          common-lisp:null)
                         :accessor
                         %update-file-system-request-windows-configuration
                         :initform common-lisp:nil)
                        (storage-capacity :initarg :storage-capacity :type
                         (common-lisp:or storage-capacity common-lisp:null)
                         :accessor %update-file-system-request-storage-capacity
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-file-system-request-client-request-token
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %update-file-system-request-file-system-id
                         :initform
                         (common-lisp:error ":file-system-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-file-system-request
                    'make-update-file-system-request))
 (common-lisp:defun make-update-file-system-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration ontap-configuration
                     lustre-configuration windows-configuration
                     storage-capacity client-request-token file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-file-system-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-capacity))
      (common-lisp:list
       (common-lisp:cons "StorageCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'windows-configuration))
      (common-lisp:list
       (common-lisp:cons "WindowsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lustre-configuration))
      (common-lisp:list
       (common-lisp:cons "LustreConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-response common-lisp:nil
                       ((file-system :initarg :file-system :type
                         (common-lisp:or file-system common-lisp:null)
                         :accessor %update-file-system-response-file-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-system-response
                    'make-update-file-system-response))
 (common-lisp:defun make-update-file-system-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system)
   (common-lisp:apply #'common-lisp:make-instance 'update-file-system-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system))
      (common-lisp:list
       (common-lisp:cons "FileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-file-system-windows-configuration common-lisp:nil
                       ((audit-log-configuration :initarg
                         :audit-log-configuration :type
                         (common-lisp:or windows-audit-log-create-configuration
                                         common-lisp:null)
                         :accessor
                         %update-file-system-windows-configuration-audit-log-configuration
                         :initform common-lisp:nil)
                        (self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-configuration-updates
                          common-lisp:null)
                         :accessor
                         %update-file-system-windows-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %update-file-system-windows-configuration-throughput-capacity
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %update-file-system-windows-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %update-file-system-windows-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %update-file-system-windows-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-file-system-windows-configuration
                    'make-update-file-system-windows-configuration))
 (common-lisp:defun make-update-file-system-windows-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-log-configuration
                     self-managed-active-directory-configuration
                     throughput-capacity automatic-backup-retention-days
                     daily-automatic-backup-start-time
                     weekly-maintenance-start-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-file-system-windows-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-windows-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-windows-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-log-configuration))
      (common-lisp:list
       (common-lisp:cons "AuditLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-file-system-windows-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ontap-volume-configuration common-lisp:nil
                       ((copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %update-ontap-volume-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (snapshot-policy :initarg :snapshot-policy :type
                         (common-lisp:or snapshot-policy common-lisp:null)
                         :accessor
                         %update-ontap-volume-configuration-snapshot-policy
                         :initform common-lisp:nil)
                        (tiering-policy :initarg :tiering-policy :type
                         (common-lisp:or tiering-policy common-lisp:null)
                         :accessor
                         %update-ontap-volume-configuration-tiering-policy
                         :initform common-lisp:nil)
                        (storage-efficiency-enabled :initarg
                         :storage-efficiency-enabled :type
                         (common-lisp:or flag common-lisp:null) :accessor
                         %update-ontap-volume-configuration-storage-efficiency-enabled
                         :initform common-lisp:nil)
                        (size-in-megabytes :initarg :size-in-megabytes :type
                         (common-lisp:or volume-capacity common-lisp:null)
                         :accessor
                         %update-ontap-volume-configuration-size-in-megabytes
                         :initform common-lisp:nil)
                        (security-style :initarg :security-style :type
                         (common-lisp:or security-style common-lisp:null)
                         :accessor
                         %update-ontap-volume-configuration-security-style
                         :initform common-lisp:nil)
                        (junction-path :initarg :junction-path :type
                         (common-lisp:or junction-path common-lisp:null)
                         :accessor
                         %update-ontap-volume-configuration-junction-path
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-ontap-volume-configuration
                    'make-update-ontap-volume-configuration))
 (common-lisp:defun make-update-ontap-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key copy-tags-to-backups snapshot-policy
                     tiering-policy storage-efficiency-enabled
                     size-in-megabytes security-style junction-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ontap-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ontap-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ontap-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'junction-path))
      (common-lisp:list
       (common-lisp:cons "JunctionPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-style))
      (common-lisp:list
       (common-lisp:cons "SecurityStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-megabytes))
      (common-lisp:list
       (common-lisp:cons "SizeInMegabytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-efficiency-enabled))
      (common-lisp:list
       (common-lisp:cons "StorageEfficiencyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tiering-policy))
      (common-lisp:list
       (common-lisp:cons "TieringPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-policy))
      (common-lisp:list
       (common-lisp:cons "SnapshotPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ontap-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-open-zfsvolume-configuration common-lisp:nil
                       ((read-only :initarg :read-only :type
                         (common-lisp:or read-only common-lisp:null) :accessor
                         %update-open-zfsvolume-configuration-read-only
                         :initform common-lisp:nil)
                        (user-and-group-quotas :initarg :user-and-group-quotas
                         :type
                         (common-lisp:or open-zfsuser-and-group-quotas
                                         common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-user-and-group-quotas
                         :initform common-lisp:nil)
                        (nfs-exports :initarg :nfs-exports :type
                         (common-lisp:or open-zfsnfs-exports common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-nfs-exports
                         :initform common-lisp:nil)
                        (data-compression-type :initarg :data-compression-type
                         :type
                         (common-lisp:or open-zfsdata-compression-type
                                         common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-data-compression-type
                         :initform common-lisp:nil)
                        (record-size-ki-b :initarg :record-size-ki-b :type
                         (common-lisp:or integer-record-size-ki-b
                                         common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-record-size-ki-b
                         :initform common-lisp:nil)
                        (storage-capacity-quota-gi-b :initarg
                         :storage-capacity-quota-gi-b :type
                         (common-lisp:or integer-no-max-from-negative-one
                                         common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-storage-capacity-quota-gi-b
                         :initform common-lisp:nil)
                        (storage-capacity-reservation-gi-b :initarg
                         :storage-capacity-reservation-gi-b :type
                         (common-lisp:or integer-no-max-from-negative-one
                                         common-lisp:null)
                         :accessor
                         %update-open-zfsvolume-configuration-storage-capacity-reservation-gi-b
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-open-zfsvolume-configuration
                    'make-update-open-zfsvolume-configuration))
 (common-lisp:defun make-update-open-zfsvolume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-only user-and-group-quotas
                     nfs-exports data-compression-type record-size-ki-b
                     storage-capacity-quota-gi-b
                     storage-capacity-reservation-gi-b)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-open-zfsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-open-zfsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-open-zfsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-reservation-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityReservationGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-capacity-quota-gi-b))
      (common-lisp:list
       (common-lisp:cons "StorageCapacityQuotaGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-size-ki-b))
      (common-lisp:list
       (common-lisp:cons "RecordSizeKiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-compression-type))
      (common-lisp:list
       (common-lisp:cons "DataCompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nfs-exports))
      (common-lisp:list
       (common-lisp:cons "NfsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-and-group-quotas))
      (common-lisp:list
       (common-lisp:cons "UserAndGroupQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-open-zfsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-snapshot-request common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %update-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or snapshot-name common-lisp:null)
                         :accessor %update-snapshot-request-name :initform
                         (common-lisp:error ":name is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-snapshot-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-request 'make-update-snapshot-request))
 (common-lisp:defun make-update-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id name client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-snapshot-response common-lisp:nil
                       ((snapshot :initarg :snapshot :type
                         (common-lisp:or snapshot common-lisp:null) :accessor
                         %update-snapshot-response-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-response 'make-update-snapshot-response))
 (common-lisp:defun make-update-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'update-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "Snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-virtual-machine-request common-lisp:nil
                       ((svm-admin-password :initarg :svm-admin-password :type
                         (common-lisp:or admin-password common-lisp:null)
                         :accessor
                         %update-storage-virtual-machine-request-svm-admin-password
                         :initform common-lisp:nil)
                        (storage-virtual-machine-id :initarg
                         :storage-virtual-machine-id :type
                         (common-lisp:or storage-virtual-machine-id
                                         common-lisp:null)
                         :accessor
                         %update-storage-virtual-machine-request-storage-virtual-machine-id
                         :initform
                         (common-lisp:error
                          ":storage-virtual-machine-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %update-storage-virtual-machine-request-client-request-token
                         :initform common-lisp:nil)
                        (active-directory-configuration :initarg
                         :active-directory-configuration :type
                         (common-lisp:or
                          update-svm-active-directory-configuration
                          common-lisp:null)
                         :accessor
                         %update-storage-virtual-machine-request-active-directory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-storage-virtual-machine-request
                    'make-update-storage-virtual-machine-request))
 (common-lisp:defun make-update-storage-virtual-machine-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key svm-admin-password
                     storage-virtual-machine-id client-request-token
                     active-directory-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-storage-virtual-machine-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine-id))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'svm-admin-password))
      (common-lisp:list
       (common-lisp:cons "SvmAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-storage-virtual-machine-response common-lisp:nil
                       ((storage-virtual-machine :initarg
                         :storage-virtual-machine :type
                         (common-lisp:or storage-virtual-machine
                                         common-lisp:null)
                         :accessor
                         %update-storage-virtual-machine-response-storage-virtual-machine
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-storage-virtual-machine-response
                    'make-update-storage-virtual-machine-response))
 (common-lisp:defun make-update-storage-virtual-machine-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-virtual-machine)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-storage-virtual-machine-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-virtual-machine))
      (common-lisp:list
       (common-lisp:cons "StorageVirtualMachine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-storage-virtual-machine-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-svm-active-directory-configuration
                       common-lisp:nil
                       ((self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-configuration-updates
                          common-lisp:null)
                         :accessor
                         %update-svm-active-directory-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-svm-active-directory-configuration
                    'make-update-svm-active-directory-configuration))
 (common-lisp:defun make-update-svm-active-directory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     self-managed-active-directory-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-svm-active-directory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-svm-active-directory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-svm-active-directory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-svm-active-directory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-volume-request common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or update-open-zfsvolume-configuration
                                         common-lisp:null)
                         :accessor %update-volume-request-open-zfsconfiguration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or volume-name common-lisp:null)
                         :accessor %update-volume-request-name :initform
                         common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or update-ontap-volume-configuration
                                         common-lisp:null)
                         :accessor %update-volume-request-ontap-configuration
                         :initform common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %update-volume-request-volume-id :initform
                         (common-lisp:error ":volume-id is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-volume-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-volume-request 'make-update-volume-request))
 (common-lisp:defun make-update-volume-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration name
                     ontap-configuration volume-id client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-volume-response common-lisp:nil
                       ((volume :initarg :volume :type
                         (common-lisp:or volume common-lisp:null) :accessor
                         %update-volume-response-volume :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-volume-response 'make-update-volume-response))
 (common-lisp:defun make-update-volume-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume)
   (common-lisp:apply #'common-lisp:make-instance 'update-volume-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume))
      (common-lisp:list
       (common-lisp:cons "Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((open-zfsconfiguration :initarg :open-zfsconfiguration
                         :type
                         (common-lisp:or open-zfsvolume-configuration
                                         common-lisp:null)
                         :accessor %volume-open-zfsconfiguration :initform
                         common-lisp:nil)
                        (administrative-actions :initarg
                         :administrative-actions :type
                         (common-lisp:or administrative-actions
                                         common-lisp:null)
                         :accessor %volume-administrative-actions :initform
                         common-lisp:nil)
                        (lifecycle-transition-reason :initarg
                         :lifecycle-transition-reason :type
                         (common-lisp:or lifecycle-transition-reason
                                         common-lisp:null)
                         :accessor %volume-lifecycle-transition-reason
                         :initform common-lisp:nil)
                        (volume-type :initarg :volume-type :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor %volume-volume-type :initform
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or volume-id common-lisp:null) :accessor
                         %volume-volume-id :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %volume-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %volume-resource-arn :initform
                         common-lisp:nil)
                        (ontap-configuration :initarg :ontap-configuration
                         :type
                         (common-lisp:or ontap-volume-configuration
                                         common-lisp:null)
                         :accessor %volume-ontap-configuration :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or volume-name common-lisp:null)
                         :accessor %volume-name :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or volume-lifecycle common-lisp:null)
                         :accessor %volume-lifecycle :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or file-system-id common-lisp:null)
                         :accessor %volume-file-system-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %volume-creation-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defun make-volume
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-zfsconfiguration
                     administrative-actions lifecycle-transition-reason
                     volume-type volume-id tags resource-arn
                     ontap-configuration name lifecycle file-system-id
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ontap-configuration))
      (common-lisp:list
       (common-lisp:cons "OntapConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-transition-reason))
      (common-lisp:list
       (common-lisp:cons "LifecycleTransitionReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrative-actions))
      (common-lisp:list
       (common-lisp:cons "AdministrativeActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-zfsconfiguration))
      (common-lisp:list
       (common-lisp:cons "OpenZFSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:deftype volume-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass volume-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or volume-filter-values common-lisp:null)
                         :accessor %volume-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or volume-filter-name common-lisp:null)
                         :accessor %volume-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'volume-filter 'make-volume-filter))
 (common-lisp:defun make-volume-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'volume-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-filter))
   common-lisp:nil))
(common-lisp:deftype volume-filter-name () 'common-lisp:string)
(common-lisp:deftype volume-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volume-filter-values ()
   '(trivial-types:proper-list volume-filter-value))
 (common-lisp:defun |make-volume-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype volume-filters ()
   '(trivial-types:proper-list volume-filter))
 (common-lisp:defun |make-volume-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volume-ids () '(trivial-types:proper-list volume-id))
 (common-lisp:defun |make-volume-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-lifecycle () 'common-lisp:string)
(common-lisp:deftype volume-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition volume-not-found
     (fsx-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       volume-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'volume-not-found 'volume-not-found-message)))
(common-lisp:deftype volume-path () 'common-lisp:string)
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volumes () '(trivial-types:proper-list volume))
 (common-lisp:defun |make-volumes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype weekly-time () 'common-lisp:string)
(common-lisp:deftype windows-access-audit-log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass windows-audit-log-configuration common-lisp:nil
                       ((audit-log-destination :initarg :audit-log-destination
                         :type (common-lisp:or general-arn common-lisp:null)
                         :accessor
                         %windows-audit-log-configuration-audit-log-destination
                         :initform common-lisp:nil)
                        (file-share-access-audit-log-level :initarg
                         :file-share-access-audit-log-level :type
                         (common-lisp:or windows-access-audit-log-level
                                         common-lisp:null)
                         :accessor
                         %windows-audit-log-configuration-file-share-access-audit-log-level
                         :initform
                         (common-lisp:error
                          ":file-share-access-audit-log-level is required"))
                        (file-access-audit-log-level :initarg
                         :file-access-audit-log-level :type
                         (common-lisp:or windows-access-audit-log-level
                                         common-lisp:null)
                         :accessor
                         %windows-audit-log-configuration-file-access-audit-log-level
                         :initform
                         (common-lisp:error
                          ":file-access-audit-log-level is required"))))
 (common-lisp:export
  (common-lisp:list 'windows-audit-log-configuration
                    'make-windows-audit-log-configuration))
 (common-lisp:defun make-windows-audit-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-log-destination
                     file-share-access-audit-log-level
                     file-access-audit-log-level)
   (common-lisp:apply #'common-lisp:make-instance
                      'windows-audit-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-access-audit-log-level))
      (common-lisp:list
       (common-lisp:cons "FileAccessAuditLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-share-access-audit-log-level))
      (common-lisp:list
       (common-lisp:cons "FileShareAccessAuditLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-log-destination))
      (common-lisp:list
       (common-lisp:cons "AuditLogDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass windows-audit-log-create-configuration common-lisp:nil
                       ((audit-log-destination :initarg :audit-log-destination
                         :type (common-lisp:or general-arn common-lisp:null)
                         :accessor
                         %windows-audit-log-create-configuration-audit-log-destination
                         :initform common-lisp:nil)
                        (file-share-access-audit-log-level :initarg
                         :file-share-access-audit-log-level :type
                         (common-lisp:or windows-access-audit-log-level
                                         common-lisp:null)
                         :accessor
                         %windows-audit-log-create-configuration-file-share-access-audit-log-level
                         :initform
                         (common-lisp:error
                          ":file-share-access-audit-log-level is required"))
                        (file-access-audit-log-level :initarg
                         :file-access-audit-log-level :type
                         (common-lisp:or windows-access-audit-log-level
                                         common-lisp:null)
                         :accessor
                         %windows-audit-log-create-configuration-file-access-audit-log-level
                         :initform
                         (common-lisp:error
                          ":file-access-audit-log-level is required"))))
 (common-lisp:export
  (common-lisp:list 'windows-audit-log-create-configuration
                    'make-windows-audit-log-create-configuration))
 (common-lisp:defun make-windows-audit-log-create-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-log-destination
                     file-share-access-audit-log-level
                     file-access-audit-log-level)
   (common-lisp:apply #'common-lisp:make-instance
                      'windows-audit-log-create-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-create-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-create-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-access-audit-log-level))
      (common-lisp:list
       (common-lisp:cons "FileAccessAuditLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-share-access-audit-log-level))
      (common-lisp:list
       (common-lisp:cons "FileShareAccessAuditLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-log-destination))
      (common-lisp:list
       (common-lisp:cons "AuditLogDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          windows-audit-log-create-configuration))
   common-lisp:nil))
(common-lisp:deftype windows-deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass windows-file-system-configuration common-lisp:nil
                       ((audit-log-configuration :initarg
                         :audit-log-configuration :type
                         (common-lisp:or windows-audit-log-configuration
                                         common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-audit-log-configuration
                         :initform common-lisp:nil)
                        (aliases :initarg :aliases :type
                         (common-lisp:or aliases common-lisp:null) :accessor
                         %windows-file-system-configuration-aliases :initform
                         common-lisp:nil)
                        (copy-tags-to-backups :initarg :copy-tags-to-backups
                         :type (common-lisp:or flag common-lisp:null) :accessor
                         %windows-file-system-configuration-copy-tags-to-backups
                         :initform common-lisp:nil)
                        (automatic-backup-retention-days :initarg
                         :automatic-backup-retention-days :type
                         (common-lisp:or automatic-backup-retention-days
                                         common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-automatic-backup-retention-days
                         :initform common-lisp:nil)
                        (daily-automatic-backup-start-time :initarg
                         :daily-automatic-backup-start-time :type
                         (common-lisp:or daily-time common-lisp:null) :accessor
                         %windows-file-system-configuration-daily-automatic-backup-start-time
                         :initform common-lisp:nil)
                        (weekly-maintenance-start-time :initarg
                         :weekly-maintenance-start-time :type
                         (common-lisp:or weekly-time common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-weekly-maintenance-start-time
                         :initform common-lisp:nil)
                        (maintenance-operations-in-progress :initarg
                         :maintenance-operations-in-progress :type
                         (common-lisp:or file-system-maintenance-operations
                                         common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-maintenance-operations-in-progress
                         :initform common-lisp:nil)
                        (throughput-capacity :initarg :throughput-capacity
                         :type
                         (common-lisp:or megabytes-per-second common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-throughput-capacity
                         :initform common-lisp:nil)
                        (preferred-file-server-ip :initarg
                         :preferred-file-server-ip :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %windows-file-system-configuration-preferred-file-server-ip
                         :initform common-lisp:nil)
                        (preferred-subnet-id :initarg :preferred-subnet-id
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-preferred-subnet-id
                         :initform common-lisp:nil)
                        (remote-administration-endpoint :initarg
                         :remote-administration-endpoint :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %windows-file-system-configuration-remote-administration-endpoint
                         :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or windows-deployment-type
                                         common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-deployment-type
                         :initform common-lisp:nil)
                        (self-managed-active-directory-configuration :initarg
                         :self-managed-active-directory-configuration :type
                         (common-lisp:or
                          self-managed-active-directory-attributes
                          common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-self-managed-active-directory-configuration
                         :initform common-lisp:nil)
                        (active-directory-id :initarg :active-directory-id
                         :type (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %windows-file-system-configuration-active-directory-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'windows-file-system-configuration
                    'make-windows-file-system-configuration))
 (common-lisp:defun make-windows-file-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-log-configuration aliases
                     copy-tags-to-backups automatic-backup-retention-days
                     daily-automatic-backup-start-time
                     weekly-maintenance-start-time
                     maintenance-operations-in-progress throughput-capacity
                     preferred-file-server-ip preferred-subnet-id
                     remote-administration-endpoint deployment-type
                     self-managed-active-directory-configuration
                     active-directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'windows-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          windows-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          windows-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-directory-id))
      (common-lisp:list
       (common-lisp:cons "ActiveDirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'self-managed-active-directory-configuration))
      (common-lisp:list
       (common-lisp:cons "SelfManagedActiveDirectoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-administration-endpoint))
      (common-lisp:list
       (common-lisp:cons "RemoteAdministrationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-subnet-id))
      (common-lisp:list
       (common-lisp:cons "PreferredSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-file-server-ip))
      (common-lisp:list
       (common-lisp:cons "PreferredFileServerIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput-capacity))
      (common-lisp:list
       (common-lisp:cons "ThroughputCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-operations-in-progress))
      (common-lisp:list
       (common-lisp:cons "MaintenanceOperationsInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'weekly-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "WeeklyMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-automatic-backup-start-time))
      (common-lisp:list
       (common-lisp:cons "DailyAutomaticBackupStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-backup-retention-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticBackupRetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-backups))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-log-configuration))
      (common-lisp:list
       (common-lisp:cons "AuditLogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          windows-file-system-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-file-system-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token file-system-id
                     aliases)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token file-system-id aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-file-system-aliases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateFileSystemAliases"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-file-system-aliases))
(common-lisp:progn
 (common-lisp:defun cancel-data-repository-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-data-repository-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelDataRepositoryTask"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-data-repository-task))
(common-lisp:progn
 (common-lisp:defun copy-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token source-backup-id
                     source-region kms-key-id copy-tags tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token source-backup-id source-region
     kms-key-id copy-tags tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-backup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CopyBackup"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-backup))
(common-lisp:progn
 (common-lisp:defun create-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id client-request-token tags
                     volume-id)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id client-request-token tags volume-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateBackup"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backup))
(common-lisp:progn
 (common-lisp:defun create-data-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id file-system-path
                     data-repository-path batch-import-meta-data-on-create
                     imported-file-chunk-size s3 client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id file-system-path data-repository-path
     batch-import-meta-data-on-create imported-file-chunk-size s3
     client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-repository-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDataRepositoryAssociation"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-repository-association))
(common-lisp:progn
 (common-lisp:defun create-data-repository-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type paths file-system-id report
                     client-request-token tags capacity-to-release)
   (common-lisp:declare
    (common-lisp:ignorable type paths file-system-id report
     client-request-token tags capacity-to-release))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-repository-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDataRepositoryTask"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-repository-task))
(common-lisp:progn
 (common-lisp:defun create-file-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token file-cache-type
                     file-cache-type-version storage-capacity subnet-ids
                     security-group-ids tags
                     copy-tags-to-data-repository-associations kms-key-id
                     lustre-configuration data-repository-associations)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token file-cache-type
     file-cache-type-version storage-capacity subnet-ids security-group-ids
     tags copy-tags-to-data-repository-associations kms-key-id
     lustre-configuration data-repository-associations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-file-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFileCache"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-file-cache))
(common-lisp:progn
 (common-lisp:defun create-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token file-system-type
                     storage-capacity storage-type subnet-ids
                     security-group-ids tags kms-key-id windows-configuration
                     lustre-configuration ontap-configuration
                     file-system-type-version open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token file-system-type
     storage-capacity storage-type subnet-ids security-group-ids tags
     kms-key-id windows-configuration lustre-configuration ontap-configuration
     file-system-type-version open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFileSystem"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-file-system))
(common-lisp:progn
 (common-lisp:defun create-file-system-from-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-request-token subnet-ids
                     security-group-ids tags windows-configuration
                     lustre-configuration storage-type kms-key-id
                     file-system-type-version open-zfsconfiguration
                     storage-capacity)
   (common-lisp:declare
    (common-lisp:ignorable backup-id client-request-token subnet-ids
     security-group-ids tags windows-configuration lustre-configuration
     storage-type kms-key-id file-system-type-version open-zfsconfiguration
     storage-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-file-system-from-backup-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFileSystemFromBackup"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-file-system-from-backup))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name volume-id tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name volume-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateSnapshot"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-storage-virtual-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key active-directory-configuration
                     client-request-token file-system-id name
                     svm-admin-password tags root-volume-security-style)
   (common-lisp:declare
    (common-lisp:ignorable active-directory-configuration client-request-token
     file-system-id name svm-admin-password tags root-volume-security-style))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-storage-virtual-machine-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateStorageVirtualMachine"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-storage-virtual-machine))
(common-lisp:progn
 (common-lisp:defun create-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token volume-type name
                     ontap-configuration tags open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token volume-type name
     ontap-configuration tags open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVolume"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-volume))
(common-lisp:progn
 (common-lisp:defun create-volume-from-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-request-token name
                     ontap-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable backup-id client-request-token name
     ontap-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-volume-from-backup-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVolumeFromBackup"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-volume-from-backup))
(common-lisp:progn
 (common-lisp:defun delete-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-id client-request-token)
   (common-lisp:declare (common-lisp:ignorable backup-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteBackup"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backup))
(common-lisp:progn
 (common-lisp:defun delete-data-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id client-request-token
                     delete-data-in-file-system)
   (common-lisp:declare
    (common-lisp:ignorable association-id client-request-token
     delete-data-in-file-system))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-repository-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDataRepositoryAssociation"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-repository-association))
(common-lisp:progn
 (common-lisp:defun delete-file-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-cache-id client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable file-cache-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-file-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFileCache"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-file-cache))
(common-lisp:progn
 (common-lisp:defun delete-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id client-request-token
                     windows-configuration lustre-configuration
                     open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id client-request-token
     windows-configuration lustre-configuration open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFileSystem"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-file-system))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token snapshot-id)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSnapshot"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-storage-virtual-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token
                     storage-virtual-machine-id)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token storage-virtual-machine-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-storage-virtual-machine-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteStorageVirtualMachine"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-storage-virtual-machine))
(common-lisp:progn
 (common-lisp:defun delete-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token volume-id
                     ontap-configuration open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token volume-id ontap-configuration
     open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVolume"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-volume))
(common-lisp:progn
 (common-lisp:defun describe-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key backup-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable backup-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-backups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeBackups"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-backups))
(common-lisp:progn
 (common-lisp:defun describe-data-repository-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-repository-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDataRepositoryAssociations"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-repository-associations))
(common-lisp:progn
 (common-lisp:defun describe-data-repository-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-ids filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable task-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-repository-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDataRepositoryTasks"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-repository-tasks))
(common-lisp:progn
 (common-lisp:defun describe-file-caches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-cache-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable file-cache-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-file-caches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFileCaches"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-file-caches))
(common-lisp:progn
 (common-lisp:defun describe-file-system-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token file-system-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token file-system-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-file-system-aliases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFileSystemAliases"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-file-system-aliases))
(common-lisp:progn
 (common-lisp:defun describe-file-systems
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable file-system-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-file-systems-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFileSystems"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-file-systems))
(common-lisp:progn
 (common-lisp:defun describe-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSnapshots"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-storage-virtual-machines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key storage-virtual-machine-ids filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable storage-virtual-machine-ids filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-storage-virtual-machines-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeStorageVirtualMachines"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-storage-virtual-machines))
(common-lisp:progn
 (common-lisp:defun describe-volumes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable volume-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-volumes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeVolumes"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-volumes))
(common-lisp:progn
 (common-lisp:defun disassociate-file-system-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token file-system-id
                     aliases)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token file-system-id aliases))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-file-system-aliases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateFileSystemAliases"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-file-system-aliases))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun release-file-system-nfs-v3locks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-release-file-system-nfs-v3locks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ReleaseFileSystemNfsV3Locks"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-file-system-nfs-v3locks))
(common-lisp:progn
 (common-lisp:defun restore-volume-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token volume-id
                     snapshot-id options)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token volume-id snapshot-id options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-volume-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RestoreVolumeFromSnapshot"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-volume-from-snapshot))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-data-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id client-request-token
                     imported-file-chunk-size s3)
   (common-lisp:declare
    (common-lisp:ignorable association-id client-request-token
     imported-file-chunk-size s3))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-repository-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDataRepositoryAssociation"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-repository-association))
(common-lisp:progn
 (common-lisp:defun update-file-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-cache-id client-request-token
                     lustre-configuration)
   (common-lisp:declare
    (common-lisp:ignorable file-cache-id client-request-token
     lustre-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-file-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFileCache"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-file-cache))
(common-lisp:progn
 (common-lisp:defun update-file-system
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key file-system-id client-request-token
                     storage-capacity windows-configuration
                     lustre-configuration ontap-configuration
                     open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable file-system-id client-request-token storage-capacity
     windows-configuration lustre-configuration ontap-configuration
     open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-file-system-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFileSystem"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-file-system))
(common-lisp:progn
 (common-lisp:defun update-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name snapshot-id)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateSnapshot"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-snapshot))
(common-lisp:progn
 (common-lisp:defun update-storage-virtual-machine
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key active-directory-configuration
                     client-request-token storage-virtual-machine-id
                     svm-admin-password)
   (common-lisp:declare
    (common-lisp:ignorable active-directory-configuration client-request-token
     storage-virtual-machine-id svm-admin-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-storage-virtual-machine-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateStorageVirtualMachine"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-storage-virtual-machine))
(common-lisp:progn
 (common-lisp:defun update-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token volume-id
                     ontap-configuration name open-zfsconfiguration)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token volume-id ontap-configuration
     name open-zfsconfiguration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'fsx-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateVolume"
                                                        "2018-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-volume))
