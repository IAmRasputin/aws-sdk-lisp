;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/verifiedpermissions/api
  (:use)
  (:nicknames #:aws/verifiedpermissions)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/verifiedpermissions/api)
(common-lisp:progn
 (common-lisp:define-condition verifiedpermissions-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'verifiedpermissions-error))
(common-lisp:progn
 (common-lisp:defclass verifiedpermissions-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "verifiedpermissions"
                        :api-version "2021-12-01" :host-prefix
                        "verifiedpermissions" :signing-name
                        "verifiedpermissions" :global-host common-lisp:nil
                        :target-prefix "VerifiedPermissions" :json-version
                        "1.0"))
 (common-lisp:export 'verifiedpermissions-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-identifier-"))
   (action-type (common-lisp:error ":actiontype is required") :type
    (common-lisp:or action-type common-lisp:null))
   (action-id (common-lisp:error ":actionid is required") :type
    (common-lisp:or action-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-identifier 'make-action-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-identifier))
   common-lisp:nil))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-value-"))
   (boolean common-lisp:nil :type
    (common-lisp:or boolean-attribute common-lisp:null))
   (entity-identifier common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (long common-lisp:nil :type
    (common-lisp:or long-attribute common-lisp:null))
   (string common-lisp:nil :type
    (common-lisp:or string-attribute common-lisp:null))
   (set common-lisp:nil :type (common-lisp:or set-attribute common-lisp:null))
   (record common-lisp:nil :type
    (common-lisp:or record-attribute common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean))
      (common-lisp:list
       (common-lisp:cons "boolean"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "entityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long))
      (common-lisp:list
       (common-lisp:cons "long"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string))
      (common-lisp:list
       (common-lisp:cons "string"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set))
      (common-lisp:list
       (common-lisp:cons "set"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record))
      (common-lisp:list
       (common-lisp:cons "record"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-is-authorized-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-is-authorized-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or entities-definition common-lisp:null))
   (requests (common-lisp:error ":requests is required") :type
    (common-lisp:or batch-is-authorized-input-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-is-authorized-input
                    'make-batch-is-authorized-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-is-authorized-input-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-is-authorized-input-item-"))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or action-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-is-authorized-input-item
                    'make-batch-is-authorized-input-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-input-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-is-authorized-input-list ()
   '(trivial-types:proper-list batch-is-authorized-input-item))
 (common-lisp:defun make-batch-is-authorized-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-is-authorized-input-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-is-authorized-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-is-authorized-output-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or batch-is-authorized-output-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-is-authorized-output
                    'make-batch-is-authorized-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-is-authorized-output-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-is-authorized-output-item-"))
   (request (common-lisp:error ":request is required") :type
    (common-lisp:or batch-is-authorized-input-item common-lisp:null))
   (decision (common-lisp:error ":decision is required") :type
    (common-lisp:or decision common-lisp:null))
   (determining-policies (common-lisp:error ":determiningpolicies is required")
    :type (common-lisp:or determining-policy-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or evaluation-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-is-authorized-output-item
                    'make-batch-is-authorized-output-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision))
      (common-lisp:list
       (common-lisp:cons "decision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'determining-policies))
      (common-lisp:list
       (common-lisp:cons "determiningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-is-authorized-output-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-is-authorized-output-list ()
   '(trivial-types:proper-list batch-is-authorized-output-item))
 (common-lisp:defun make-batch-is-authorized-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-is-authorized-output-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-attribute () 'common-lisp:boolean)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-ids () '(trivial-types:proper-list client-id))
 (common-lisp:defun make-client-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cognito-user-pool-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cognito-user-pool-configuration-"))
   (user-pool-arn (common-lisp:error ":userpoolarn is required") :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (client-ids common-lisp:nil :type
    (common-lisp:or client-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cognito-user-pool-configuration
                    'make-cognito-user-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cognito-user-pool-configuration-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-cognito-user-pool-configuration-detail-"))
   (user-pool-arn (common-lisp:error ":userpoolarn is required") :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (client-ids (common-lisp:error ":clientids is required") :type
    (common-lisp:or client-ids common-lisp:null))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or issuer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cognito-user-pool-configuration-detail
                    'make-cognito-user-pool-configuration-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cognito-user-pool-configuration-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-cognito-user-pool-configuration-item-"))
   (user-pool-arn (common-lisp:error ":userpoolarn is required") :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (client-ids (common-lisp:error ":clientids is required") :type
    (common-lisp:or client-ids common-lisp:null))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or issuer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cognito-user-pool-configuration-item
                    'make-cognito-user-pool-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-user-pool-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-"))
   (cognito-user-pool-configuration common-lisp:nil :type
    (common-lisp:or cognito-user-pool-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "cognitoUserPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-detail-"))
   (cognito-user-pool-configuration common-lisp:nil :type
    (common-lisp:or cognito-user-pool-configuration-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-detail 'make-configuration-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "cognitoUserPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-item-"))
   (cognito-user-pool-configuration common-lisp:nil :type
    (common-lisp:or cognito-user-pool-configuration-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-item 'make-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "cognitoUserPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resources :initarg :resources :initform common-lisp:nil :reader
       conflict-exception-resources)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resources)))
(common-lisp:progn
 (common-lisp:defstruct
     (context-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-context-definition-"))
   (context-map common-lisp:nil :type
    (common-lisp:or context-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'context-definition 'make-context-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-map))
      (common-lisp:list
       (common-lisp:cons "contextMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-context-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-identity-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-identity-source-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (configuration (common-lisp:error ":configuration is required") :type
    (common-lisp:or configuration common-lisp:null))
   (principal-entity-type common-lisp:nil :type
    (common-lisp:or principal-entity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-identity-source-input
                    'make-create-identity-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-entity-type))
      (common-lisp:list
       (common-lisp:cons "principalEntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-identity-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-identity-source-output-"))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-identity-source-output
                    'make-create-identity-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or policy-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-input 'make-create-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-type (common-lisp:error ":policytype is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-output 'make-create-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-store-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-store-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (validation-settings (common-lisp:error ":validationsettings is required")
    :type (common-lisp:or validation-settings common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-store-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-store-input
                    'make-create-policy-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-settings))
      (common-lisp:list
       (common-lisp:cons "validationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-store-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-store-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-store-output
                    'make-create-policy-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-template-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-template-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-template-input
                    'make-create-policy-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-template-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-template-output
                    'make-create-policy-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-template-output))
   common-lisp:nil))
(common-lisp:deftype decision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-identity-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-identity-source-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-identity-source-input
                    'make-delete-identity-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-identity-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-identity-source-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-identity-source-output
                    'make-delete-identity-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-input 'make-delete-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-policy-output 'make-delete-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-store-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-store-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-store-input
                    'make-delete-policy-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-store-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-store-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-policy-store-output
                    'make-delete-policy-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-template-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-template-input
                    'make-delete-policy-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-template-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-policy-template-output
                    'make-delete-policy-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (determining-policy-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-determining-policy-item-"))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'determining-policy-item 'make-determining-policy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          determining-policy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          determining-policy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          determining-policy-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype determining-policy-list ()
   '(trivial-types:proper-list determining-policy-item))
 (common-lisp:defun make-determining-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list determining-policy-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype discovery-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entities-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-entities-definition-"))
   (entity-list common-lisp:nil :type
    (common-lisp:or entity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entities-definition 'make-entities-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entities-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entities-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-list))
      (common-lisp:list
       (common-lisp:cons "entityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entities-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-entity-attributes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entity-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-identifier-"))
   (entity-type (common-lisp:error ":entitytype is required") :type
    (common-lisp:or entity-type common-lisp:null))
   (entity-id (common-lisp:error ":entityid is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-identifier 'make-entity-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "entityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-item-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or entity-identifier common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or entity-attributes common-lisp:null))
   (parents common-lisp:nil :type
    (common-lisp:or parent-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-item 'make-entity-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity-item))
 (common-lisp:defun make-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-reference-"))
   (unspecified common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identifier common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-reference 'make-entity-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unspecified))
      (common-lisp:list
       (common-lisp:cons "unspecified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-reference))
   common-lisp:nil))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-error-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-error-item-"))
   (error-description (common-lisp:error ":errordescription is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-error-item 'make-evaluation-error-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-error-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-error-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-description))
      (common-lisp:list
       (common-lisp:cons "errorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-error-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-error-list ()
   '(trivial-types:proper-list evaluation-error-item))
 (common-lisp:defun make-evaluation-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-error-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-identity-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-identity-source-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-identity-source-input
                    'make-get-identity-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-identity-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-identity-source-output-"))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or identity-source-details common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (principal-entity-type
    (common-lisp:error ":principalentitytype is required") :type
    (common-lisp:or principal-entity-type common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or configuration-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-identity-source-output
                    'make-get-identity-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-entity-type))
      (common-lisp:list
       (common-lisp:cons "principalEntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-input 'make-get-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-type (common-lisp:error ":policytype is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or policy-definition-detail common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-output 'make-get-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-store-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-store-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-store-input 'make-get-policy-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-store-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-store-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (validation-settings (common-lisp:error ":validationsettings is required")
    :type (common-lisp:or validation-settings common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-store-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-store-output 'make-get-policy-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-settings))
      (common-lisp:list
       (common-lisp:cons "validationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-template-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-template-input
                    'make-get-policy-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-template-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-template-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-template-output
                    'make-get-policy-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (schema (common-lisp:error ":schema is required") :type
    (common-lisp:or schema-json common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (namespaces common-lisp:nil :type
    (common-lisp:or namespace-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-output 'make-get-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-output))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (identity-source-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-source-details-"))
   (client-ids common-lisp:nil :type
    (common-lisp:or client-ids common-lisp:null))
   (user-pool-arn common-lisp:nil :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (discovery-url common-lisp:nil :type
    (common-lisp:or discovery-url common-lisp:null))
   (open-id-issuer common-lisp:nil :type
    (common-lisp:or open-id-issuer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-source-details 'make-identity-source-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-url))
      (common-lisp:list
       (common-lisp:cons "discoveryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-id-issuer))
      (common-lisp:list
       (common-lisp:cons "openIdIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-source-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-source-filter-"))
   (principal-entity-type common-lisp:nil :type
    (common-lisp:or principal-entity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-source-filter 'make-identity-source-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-entity-type))
      (common-lisp:list
       (common-lisp:cons "principalEntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-source-filters ()
   '(trivial-types:proper-list identity-source-filter))
 (common-lisp:defun make-identity-source-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-source-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-source-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (identity-source-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-source-item-"))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or identity-source-item-details common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (principal-entity-type
    (common-lisp:error ":principalentitytype is required") :type
    (common-lisp:or principal-entity-type common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or configuration-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-source-item 'make-identity-source-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-source-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-source-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-entity-type))
      (common-lisp:list
       (common-lisp:cons "principalEntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-source-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (identity-source-item-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-source-item-details-"))
   (client-ids common-lisp:nil :type
    (common-lisp:or client-ids common-lisp:null))
   (user-pool-arn common-lisp:nil :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (discovery-url common-lisp:nil :type
    (common-lisp:or discovery-url common-lisp:null))
   (open-id-issuer common-lisp:nil :type
    (common-lisp:or open-id-issuer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-source-item-details
                    'make-identity-source-item-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-item-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-item-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-url))
      (common-lisp:list
       (common-lisp:cons "discoveryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-id-issuer))
      (common-lisp:list
       (common-lisp:cons "openIdIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-source-item-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-sources ()
   '(trivial-types:proper-list identity-source-item))
 (common-lisp:defun make-identity-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-source-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (is-authorized-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-authorized-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or action-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-definition common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or entities-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-authorized-input 'make-is-authorized-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input is-authorized-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input is-authorized-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input is-authorized-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (is-authorized-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-authorized-output-"))
   (decision (common-lisp:error ":decision is required") :type
    (common-lisp:or decision common-lisp:null))
   (determining-policies (common-lisp:error ":determiningpolicies is required")
    :type (common-lisp:or determining-policy-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or evaluation-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-authorized-output 'make-is-authorized-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input is-authorized-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input is-authorized-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision))
      (common-lisp:list
       (common-lisp:cons "decision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'determining-policies))
      (common-lisp:list
       (common-lisp:cons "determiningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input is-authorized-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (is-authorized-with-token-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-authorized-with-token-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (identity-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (access-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or action-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or context-definition common-lisp:null))
   (entities common-lisp:nil :type
    (common-lisp:or entities-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-authorized-with-token-input
                    'make-is-authorized-with-token-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-token))
      (common-lisp:list
       (common-lisp:cons "identityToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (is-authorized-with-token-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-authorized-with-token-output-"))
   (decision (common-lisp:error ":decision is required") :type
    (common-lisp:or decision common-lisp:null))
   (determining-policies (common-lisp:error ":determiningpolicies is required")
    :type (common-lisp:or determining-policy-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or evaluation-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-authorized-with-token-output
                    'make-is-authorized-with-token-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decision))
      (common-lisp:list
       (common-lisp:cons "decision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'determining-policies))
      (common-lisp:list
       (common-lisp:cons "determiningPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-authorized-with-token-output))
   common-lisp:nil))
(common-lisp:deftype issuer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-sources-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-sources-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-identity-sources-max-results common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or identity-source-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-sources-input
                    'make-list-identity-sources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-input))
   common-lisp:nil))
(common-lisp:deftype list-identity-sources-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-identity-sources-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-identity-sources-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (identity-sources (common-lisp:error ":identitysources is required") :type
    (common-lisp:or identity-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-identity-sources-output
                    'make-list-identity-sources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-sources))
      (common-lisp:list
       (common-lisp:cons "identitySources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-sources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or policy-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-input 'make-list-policies-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-policies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-policies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-policies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (policies (common-lisp:error ":policies is required") :type
    (common-lisp:or policy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-output 'make-list-policies-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-policies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-policies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-policies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-stores-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-stores-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-stores-input 'make-list-policy-stores-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-stores-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-stores-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (policy-stores (common-lisp:error ":policystores is required") :type
    (common-lisp:or policy-store-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-stores-output
                    'make-list-policy-stores-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-stores))
      (common-lisp:list
       (common-lisp:cons "policyStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-stores-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-templates-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-templates-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-templates-input
                    'make-list-policy-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-templates-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-templates-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (policy-templates (common-lisp:error ":policytemplates is required") :type
    (common-lisp:or policy-templates-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-templates-output
                    'make-list-policy-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-templates))
      (common-lisp:list
       (common-lisp:cons "policyTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-templates-output))
   common-lisp:nil))
(common-lisp:deftype long-attribute () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype namespace-list () '(trivial-types:proper-list namespace))
 (common-lisp:defun make-namespace-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype open-id-issuer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parent-list ()
   '(trivial-types:proper-list entity-identifier))
 (common-lisp:defun make-parent-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-definition-"))
   (static common-lisp:nil :type
    (common-lisp:or static-policy-definition common-lisp:null))
   (template-linked common-lisp:nil :type
    (common-lisp:or template-linked-policy-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-definition 'make-policy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static))
      (common-lisp:list
       (common-lisp:cons "static"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-linked))
      (common-lisp:list
       (common-lisp:cons "templateLinked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-definition-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-definition-detail-"))
   (static common-lisp:nil :type
    (common-lisp:or static-policy-definition-detail common-lisp:null))
   (template-linked common-lisp:nil :type
    (common-lisp:or template-linked-policy-definition-detail
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-definition-detail 'make-policy-definition-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static))
      (common-lisp:list
       (common-lisp:cons "static"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-linked))
      (common-lisp:list
       (common-lisp:cons "templateLinked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-definition-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-definition-item-"))
   (static common-lisp:nil :type
    (common-lisp:or static-policy-definition-item common-lisp:null))
   (template-linked common-lisp:nil :type
    (common-lisp:or template-linked-policy-definition-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-definition-item 'make-policy-definition-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static))
      (common-lisp:list
       (common-lisp:cons "static"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-linked))
      (common-lisp:list
       (common-lisp:cons "templateLinked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-definition-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-filter-"))
   (principal common-lisp:nil :type
    (common-lisp:or entity-reference common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-reference common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or policy-type common-lisp:null))
   (policy-template-id common-lisp:nil :type
    (common-lisp:or policy-template-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-filter 'make-policy-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-filter))
   common-lisp:nil))
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-item-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-type (common-lisp:error ":policytype is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or policy-definition-item common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-item 'make-policy-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-list () '(trivial-types:proper-list policy-item))
 (common-lisp:defun make-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-statement () 'common-lisp:string)
(common-lisp:deftype policy-store-description () 'common-lisp:string)
(common-lisp:deftype policy-store-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-store-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-store-item-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or timestamp-format common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-store-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-store-item 'make-policy-store-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-store-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-store-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-store-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-store-list ()
   '(trivial-types:proper-list policy-store-item))
 (common-lisp:defun make-policy-store-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-store-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-template-description () 'common-lisp:string)
(common-lisp:deftype policy-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-template-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-template-item-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-template-description common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-template-item 'make-policy-template-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-template-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-template-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-template-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-templates-list ()
   '(trivial-types:proper-list policy-template-item))
 (common-lisp:defun make-policy-templates-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-template-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:deftype principal-entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or schema-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-input 'make-put-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (namespaces (common-lisp:error ":namespaces is required") :type
    (common-lisp:or namespace-list common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-output 'make-put-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-schema-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-attribute () 'common-lisp:hash-table)
 (common-lisp:defun make-record-attribute (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-conflict (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-conflict-"))
   (resource-id (common-lisp:error ":resourceid is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict 'make-resource-conflict))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-conflict))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-conflict-list ()
   '(trivial-types:proper-list resource-conflict))
 (common-lisp:defun make-resource-conflict-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-conflict))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-definition-"))
   (cedar-json common-lisp:nil :type
    (common-lisp:or schema-json common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-definition 'make-schema-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cedar-json))
      (common-lisp:list
       (common-lisp:cons "cedarJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-definition))
   common-lisp:nil))
(common-lisp:deftype schema-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code
                    'service-quota-exceeded-exception-quota-code)))
(common-lisp:progn
 (common-lisp:deftype set-attribute ()
   '(trivial-types:proper-list attribute-value))
 (common-lisp:defun make-set-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (static-policy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-policy-definition-"))
   (description common-lisp:nil :type
    (common-lisp:or static-policy-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-policy-definition 'make-static-policy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-policy-definition-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-policy-definition-detail-"))
   (description common-lisp:nil :type
    (common-lisp:or static-policy-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-policy-definition-detail
                    'make-static-policy-definition-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-policy-definition-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-policy-definition-item-"))
   (description common-lisp:nil :type
    (common-lisp:or static-policy-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-policy-definition-item
                    'make-static-policy-definition-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-policy-definition-item))
   common-lisp:nil))
(common-lisp:deftype static-policy-description () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-linked-policy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-linked-policy-definition-"))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-linked-policy-definition
                    'make-template-linked-policy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-linked-policy-definition-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-linked-policy-definition-detail-"))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-linked-policy-definition-detail
                    'make-template-linked-policy-definition-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-linked-policy-definition-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-linked-policy-definition-item-"))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-linked-policy-definition-item
                    'make-template-linked-policy-definition-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-linked-policy-definition-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-service-code
                    'throttling-exception-quota-code)))
(common-lisp:deftype timestamp-format () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-cognito-user-pool-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cognito-user-pool-configuration-"))
   (user-pool-arn (common-lisp:error ":userpoolarn is required") :type
    (common-lisp:or user-pool-arn common-lisp:null))
   (client-ids common-lisp:nil :type
    (common-lisp:or client-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cognito-user-pool-configuration
                    'make-update-cognito-user-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cognito-user-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cognito-user-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "userPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ids))
      (common-lisp:list
       (common-lisp:cons "clientIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cognito-user-pool-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configuration-"))
   (cognito-user-pool-configuration common-lisp:nil :type
    (common-lisp:or update-cognito-user-pool-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configuration 'make-update-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "cognitoUserPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-identity-source-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-identity-source-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null))
   (update-configuration (common-lisp:error ":updateconfiguration is required")
    :type (common-lisp:or update-configuration common-lisp:null))
   (principal-entity-type common-lisp:nil :type
    (common-lisp:or principal-entity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-identity-source-input
                    'make-update-identity-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-configuration))
      (common-lisp:list
       (common-lisp:cons "updateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'principal-entity-type))
      (common-lisp:list
       (common-lisp:cons "principalEntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-identity-source-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-identity-source-output-"))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (identity-source-id (common-lisp:error ":identitysourceid is required")
    :type (common-lisp:or identity-source-id common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-identity-source-output
                    'make-update-identity-source-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-source-id))
      (common-lisp:list
       (common-lisp:cons "identitySourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-identity-source-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-definition-"))
   (static common-lisp:nil :type
    (common-lisp:or update-static-policy-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-definition 'make-update-policy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static))
      (common-lisp:list
       (common-lisp:cons "static"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or update-policy-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-input 'make-update-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-id (common-lisp:error ":policyid is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (policy-type (common-lisp:error ":policytype is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or entity-identifier common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-output 'make-update-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-store-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-store-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (validation-settings (common-lisp:error ":validationsettings is required")
    :type (common-lisp:or validation-settings common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-store-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-store-input
                    'make-update-policy-store-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-settings))
      (common-lisp:list
       (common-lisp:cons "validationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-store-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-store-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-store-output
                    'make-update-policy-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-template-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-template-input-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-template-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-template-input
                    'make-update-policy-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-policy-template-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-policy-template-output-"))
   (policy-store-id (common-lisp:error ":policystoreid is required") :type
    (common-lisp:or policy-store-id common-lisp:null))
   (policy-template-id (common-lisp:error ":policytemplateid is required")
    :type (common-lisp:or policy-template-id common-lisp:null))
   (created-date (common-lisp:error ":createddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null))
   (last-updated-date (common-lisp:error ":lastupdateddate is required") :type
    (common-lisp:or timestamp-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-policy-template-output
                    'make-update-policy-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-store-id))
      (common-lisp:list
       (common-lisp:cons "policyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-template-id))
      (common-lisp:list
       (common-lisp:cons "policyTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-static-policy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-static-policy-definition-"))
   (description common-lisp:nil :type
    (common-lisp:or static-policy-description common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or policy-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-static-policy-definition
                    'make-update-static-policy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-static-policy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-static-policy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-static-policy-definition))
   common-lisp:nil))
(common-lisp:deftype user-pool-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (verifiedpermissions-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validation-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-settings-"))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or validation-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-settings 'make-validation-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-is-authorized
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id entities requests)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id entities requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-is-authorized-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "BatchIsAuthorized"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-is-authorized))
(common-lisp:progn
 (common-lisp:defun create-identity-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token policy-store-id
                     configuration principal-entity-type)
   (common-lisp:declare
    (common-lisp:ignorable client-token policy-store-id configuration
     principal-entity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-identity-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "CreateIdentitySource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-identity-source))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token policy-store-id definition)
   (common-lisp:declare
    (common-lisp:ignorable client-token policy-store-id definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "CreatePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token validation-settings
                     description)
   (common-lisp:declare
    (common-lisp:ignorable client-token validation-settings description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "CreatePolicyStore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy-store))
(common-lisp:progn
 (common-lisp:defun create-policy-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token policy-store-id description
                     statement)
   (common-lisp:declare
    (common-lisp:ignorable client-token policy-store-id description statement))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "CreatePolicyTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy-template))
(common-lisp:progn
 (common-lisp:defun delete-identity-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id identity-source-id)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id identity-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteIdentitySource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-identity-source))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-store-id policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "DeletePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id)
   (common-lisp:declare (common-lisp:ignorable policy-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "DeletePolicyStore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy-store))
(common-lisp:progn
 (common-lisp:defun delete-policy-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-template-id)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id policy-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "DeletePolicyTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy-template))
(common-lisp:progn
 (common-lisp:defun get-identity-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id identity-source-id)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id identity-source-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-identity-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "GetIdentitySource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-identity-source))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-store-id policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id)
   (common-lisp:declare (common-lisp:ignorable policy-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "GetPolicyStore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy-store))
(common-lisp:progn
 (common-lisp:defun get-policy-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-template-id)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id policy-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "GetPolicyTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy-template))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id)
   (common-lisp:declare (common-lisp:ignorable policy-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "GetSchema"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun is-authorized
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id principal action resource
                     context entities)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id principal action resource context
     entities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-is-authorized-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "IsAuthorized"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'is-authorized))
(common-lisp:progn
 (common-lisp:defun is-authorized-with-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id identity-token
                     access-token action resource context entities)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id identity-token access-token action
     resource context entities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-is-authorized-with-token-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "IsAuthorizedWithToken"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'is-authorized-with-token))
(common-lisp:progn
 (common-lisp:defun list-identity-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-sources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "ListIdentitySources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-sources))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id next-token max-results
                     filter)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "ListPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-stores-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "ListPolicyStores"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-stores))
(common-lisp:progn
 (common-lisp:defun list-policy-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "ListPolicyTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-templates))
(common-lisp:progn
 (common-lisp:defun put-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id definition)
   (common-lisp:declare (common-lisp:ignorable policy-store-id definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "PutSchema"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-schema))
(common-lisp:progn
 (common-lisp:defun update-identity-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id identity-source-id
                     update-configuration principal-entity-type)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id identity-source-id
     update-configuration principal-entity-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-identity-source-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateIdentitySource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-identity-source))
(common-lisp:progn
 (common-lisp:defun update-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-id definition)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id policy-id definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "UpdatePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-policy))
(common-lisp:progn
 (common-lisp:defun update-policy-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id validation-settings
                     description)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id validation-settings description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-policy-store-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "UpdatePolicyStore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-policy-store))
(common-lisp:progn
 (common-lisp:defun update-policy-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-store-id policy-template-id
                     description statement)
   (common-lisp:declare
    (common-lisp:ignorable policy-store-id policy-template-id description
     statement))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-policy-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'verifiedpermissions-request aws-sdk/generator/operation::input "POST"
        "/" "UpdatePolicyTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-policy-template))
