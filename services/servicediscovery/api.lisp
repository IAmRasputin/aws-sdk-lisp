;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/servicediscovery/api
  (:use)
  (:nicknames #:aws/servicediscovery)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/servicediscovery/api)
(common-lisp:progn
 (common-lisp:defclass servicediscovery-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "servicediscovery" :protocol
                        :json))
 (common-lisp:export 'servicediscovery-request))
(common-lisp:progn
 (common-lisp:define-condition servicediscovery-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'servicediscovery-error))
(common-lisp:defvar *error-map*
  '(("CustomHealthNotFound" . custom-health-not-found)
    ("DuplicateRequest" . duplicate-request)
    ("InstanceNotFound" . instance-not-found) ("InvalidInput" . invalid-input)
    ("NamespaceAlreadyExists" . namespace-already-exists)
    ("NamespaceNotFound" . namespace-not-found)
    ("OperationNotFound" . operation-not-found)
    ("RequestLimitExceeded" . request-limit-exceeded)
    ("ResourceInUse" . resource-in-use)
    ("ResourceLimitExceeded" . resource-limit-exceeded)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceAlreadyExists" . service-already-exists)
    ("ServiceNotFound" . service-not-found)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype attr-key () 'common-lisp:string)
(common-lisp:deftype attr-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-http-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-http-namespace-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or namespace-name-http common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-http-namespace-request
                    'make-create-http-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-http-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-http-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-http-namespace-response
                    'make-create-http-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-http-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-private-dns-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-private-dns-namespace-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or namespace-name-private common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (vpc (common-lisp:error ":vpc is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or private-dns-namespace-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-private-dns-namespace-request
                    'make-create-private-dns-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-private-dns-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-private-dns-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-private-dns-namespace-response
                    'make-create-private-dns-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-private-dns-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-public-dns-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-public-dns-namespace-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or namespace-name-public common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or public-dns-namespace-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-public-dns-namespace-request
                    'make-create-public-dns-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-public-dns-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-public-dns-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-public-dns-namespace-response
                    'make-create-public-dns-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-public-dns-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (dns-config common-lisp:nil :type
    (common-lisp:or dns-config common-lisp:null))
   (health-check-config common-lisp:nil :type
    (common-lisp:or health-check-config common-lisp:null))
   (health-check-custom-config common-lisp:nil :type
    (common-lisp:or health-check-custom-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or service-type-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-request 'make-create-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "NamespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-config))
      (common-lisp:list
       (common-lisp:cons "DnsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-custom-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckCustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-response-"))
   (service common-lisp:nil :type (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-response 'make-create-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-health-not-found
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-health-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'custom-health-not-found 'custom-health-not-found-message)))
(common-lisp:deftype custom-health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-request 'make-delete-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-response
                    'make-delete-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-request 'make-delete-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-service-response 'make-delete-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-instance-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-instance-request
                    'make-deregister-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-instance-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-instance-response
                    'make-deregister-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-instances-request-"))
   (namespace-name (common-lisp:error ":namespace-name is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or discover-max-results common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (optional-parameters common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or health-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-instances-request
                    'make-discover-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "NamespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-parameters))
      (common-lisp:list
       (common-lisp:cons "OptionalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-instances-response-"))
   (instances common-lisp:nil :type
    (common-lisp:or http-instance-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-instances-response
                    'make-discover-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-instances-response))
   common-lisp:nil))
(common-lisp:deftype discover-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (dns-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-config-"))
   (namespace-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (routing-policy common-lisp:nil :type
    (common-lisp:or routing-policy common-lisp:null))
   (dns-records (common-lisp:error ":dns-records is required") :type
    (common-lisp:or dns-record-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dns-config 'make-dns-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "NamespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-policy))
      (common-lisp:list
       (common-lisp:cons "RoutingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-records))
      (common-lisp:list
       (common-lisp:cons "DnsRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-config-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-config-change-"))
   (dns-records (common-lisp:error ":dns-records is required") :type
    (common-lisp:or dns-record-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-config-change 'make-dns-config-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-config-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-config-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-records))
      (common-lisp:list
       (common-lisp:cons "DnsRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-config-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-properties-"))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (soa common-lisp:nil :type (common-lisp:or soa common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dns-properties 'make-dns-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soa))
      (common-lisp:list
       (common-lisp:cons "SOA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-record-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or record-type common-lisp:null))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or record-ttl common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dns-record 'make-dns-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-record-list ()
   '(trivial-types:proper-list dns-record))
 (common-lisp:defun |make-dns-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dns-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition duplicate-request
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-request-message)
      (duplicate-operation-id :initarg :duplicate-operation-id :initform
       common-lisp:nil :reader duplicate-request-duplicate-operation-id)))
 (common-lisp:export
  (common-lisp:list 'duplicate-request 'duplicate-request-message
                    'duplicate-request-duplicate-operation-id)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype failure-threshold () 'common-lisp:integer)
(common-lisp:deftype filter-condition () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-request 'make-get-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-response-"))
   (instance common-lisp:nil :type (common-lisp:or instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-response 'make-get-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instances-health-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instances-health-status-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instance-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instances-health-status-request
                    'make-get-instances-health-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instances-health-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instances-health-status-response-"))
   (status common-lisp:nil :type
    (common-lisp:or instance-health-status-map common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instances-health-status-response
                    'make-get-instances-health-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-health-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-namespace-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-namespace-request 'make-get-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-namespace-response-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-namespace-response 'make-get-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operation-request-"))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operation-request 'make-get-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operation-response-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operation-response 'make-get-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-request 'make-get-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-response-"))
   (service common-lisp:nil :type (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-response 'make-get-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-config-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or health-check-type common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-config 'make-health-check-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-path))
      (common-lisp:list
       (common-lisp:cons "ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-threshold))
      (common-lisp:list
       (common-lisp:cons "FailureThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-custom-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-custom-config-"))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-custom-config
                    'make-health-check-custom-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          health-check-custom-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          health-check-custom-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-threshold))
      (common-lisp:list
       (common-lisp:cons "FailureThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          health-check-custom-config))
   common-lisp:nil))
(common-lisp:deftype health-check-type () 'common-lisp:string)
(common-lisp:deftype health-status () 'common-lisp:string)
(common-lisp:deftype health-status-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-instance-summary-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name-http common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or health-status common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-instance-summary 'make-http-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "NamespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "HealthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-instance-summary-list ()
   '(trivial-types:proper-list http-instance-summary))
 (common-lisp:defun |make-http-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (http-namespace-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-namespace-change-"))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-namespace-change 'make-http-namespace-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-namespace-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-namespace-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-namespace-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-properties-"))
   (http-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-properties 'make-http-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-name))
      (common-lisp:list
       (common-lisp:cons "HttpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-status-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-instance-health-status-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-instance-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-not-found
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       instance-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'instance-not-found 'instance-not-found-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-summary-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun |make-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-input
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-message)))
 (common-lisp:export (common-lisp:list 'invalid-input 'invalid-input-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instances-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instances-request 'make-list-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instances-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instances-response-"))
   (instances common-lisp:nil :type
    (common-lisp:or instance-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instances-response 'make-list-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or namespace-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-request 'make-list-namespaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-response-"))
   (namespaces common-lisp:nil :type
    (common-lisp:or namespace-summaries-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-response 'make-list-namespaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "Namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-operations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-operations-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or operation-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-operations-request 'make-list-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-operations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-operations-response-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-operations-response 'make-list-operations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or service-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-request 'make-list-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-response-"))
   (services common-lisp:nil :type
    (common-lisp:or service-summaries-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-response 'make-list-services-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (namespace (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or namespace-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (service-count common-lisp:nil :type
    (common-lisp:or resource-count common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or namespace-properties common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'namespace 'make-namespace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-count))
      (common-lisp:list
       (common-lisp:cons "ServiceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition namespace-already-exists
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       namespace-already-exists-message)
      (creator-request-id :initarg :creator-request-id :initform
       common-lisp:nil :reader namespace-already-exists-creator-request-id)
      (namespace-id :initarg :namespace-id :initform common-lisp:nil :reader
       namespace-already-exists-namespace-id)))
 (common-lisp:export
  (common-lisp:list 'namespace-already-exists 'namespace-already-exists-message
                    'namespace-already-exists-creator-request-id
                    'namespace-already-exists-namespace-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (namespace-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or namespace-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'namespace-filter 'make-namespace-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-filter))
   common-lisp:nil))
(common-lisp:deftype namespace-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype namespace-filters ()
   '(trivial-types:proper-list namespace-filter))
 (common-lisp:defun |make-namespace-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype namespace-name () 'common-lisp:string)
(common-lisp:deftype namespace-name-http () 'common-lisp:string)
(common-lisp:deftype namespace-name-private () 'common-lisp:string)
(common-lisp:deftype namespace-name-public () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition namespace-not-found
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       namespace-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'namespace-not-found 'namespace-not-found-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (namespace-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-properties-"))
   (dns-properties common-lisp:nil :type
    (common-lisp:or dns-properties common-lisp:null))
   (http-properties common-lisp:nil :type
    (common-lisp:or http-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'namespace-properties 'make-namespace-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-properties))
      (common-lisp:list
       (common-lisp:cons "DnsProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-properties))
      (common-lisp:list
       (common-lisp:cons "HttpProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype namespace-summaries-list ()
   '(trivial-types:proper-list namespace-summary))
 (common-lisp:defun |make-namespace-summaries-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (namespace-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-summary-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or namespace-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (service-count common-lisp:nil :type
    (common-lisp:or resource-count common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or namespace-properties common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'namespace-summary 'make-namespace-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-count))
      (common-lisp:list
       (common-lisp:cons "ServiceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace-summary))
   common-lisp:nil))
(common-lisp:deftype namespace-type () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-"))
   (id common-lisp:nil :type (common-lisp:or operation-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or operation-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (error-code common-lisp:nil :type (common-lisp:or code common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or operation-targets-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'operation 'make-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (operation-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or operation-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'operation-filter 'make-operation-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation-filter))
   common-lisp:nil))
(common-lisp:deftype operation-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-filters ()
   '(trivial-types:proper-list operation-filter))
 (common-lisp:defun |make-operation-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-found
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-found 'operation-not-found-message)))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (operation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-summary-"))
   (id common-lisp:nil :type (common-lisp:or operation-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or operation-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'operation-summary 'make-operation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operation-summary-list ()
   '(trivial-types:proper-list operation-summary))
 (common-lisp:defun |make-operation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-targets-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-operation-targets-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (private-dns-namespace-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-dns-namespace-change-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or private-dns-namespace-properties-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-dns-namespace-change
                    'make-private-dns-namespace-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-dns-namespace-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-dns-namespace-properties-"))
   (dns-properties (common-lisp:error ":dns-properties is required") :type
    (common-lisp:or private-dns-properties-mutable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-dns-namespace-properties
                    'make-private-dns-namespace-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-properties))
      (common-lisp:list
       (common-lisp:cons "DnsProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-dns-namespace-properties-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-dns-namespace-properties-change-"))
   (dns-properties (common-lisp:error ":dns-properties is required") :type
    (common-lisp:or private-dns-properties-mutable-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-dns-namespace-properties-change
                    'make-private-dns-namespace-properties-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-properties))
      (common-lisp:list
       (common-lisp:cons "DnsProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-namespace-properties-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-dns-properties-mutable (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-dns-properties-mutable-"))
   (soa (common-lisp:error ":soa is required") :type
    (common-lisp:or soa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-dns-properties-mutable
                    'make-private-dns-properties-mutable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soa))
      (common-lisp:list
       (common-lisp:cons "SOA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-dns-properties-mutable-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-dns-properties-mutable-change-"))
   (soa (common-lisp:error ":soa is required") :type
    (common-lisp:or soachange common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-dns-properties-mutable-change
                    'make-private-dns-properties-mutable-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soa))
      (common-lisp:list
       (common-lisp:cons "SOA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-dns-properties-mutable-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-dns-namespace-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-dns-namespace-change-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or public-dns-namespace-properties-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-dns-namespace-change
                    'make-public-dns-namespace-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-dns-namespace-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-dns-namespace-properties-"))
   (dns-properties (common-lisp:error ":dns-properties is required") :type
    (common-lisp:or public-dns-properties-mutable common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-dns-namespace-properties
                    'make-public-dns-namespace-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-properties))
      (common-lisp:list
       (common-lisp:cons "DnsProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-dns-namespace-properties-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-dns-namespace-properties-change-"))
   (dns-properties (common-lisp:error ":dns-properties is required") :type
    (common-lisp:or public-dns-properties-mutable-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-dns-namespace-properties-change
                    'make-public-dns-namespace-properties-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-properties))
      (common-lisp:list
       (common-lisp:cons "DnsProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-namespace-properties-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-dns-properties-mutable (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-dns-properties-mutable-"))
   (soa (common-lisp:error ":soa is required") :type
    (common-lisp:or soa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-dns-properties-mutable
                    'make-public-dns-properties-mutable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soa))
      (common-lisp:list
       (common-lisp:cons "SOA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (public-dns-properties-mutable-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-dns-properties-mutable-change-"))
   (soa (common-lisp:error ":soa is required") :type
    (common-lisp:or soachange common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-dns-properties-mutable-change
                    'make-public-dns-properties-mutable-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soa))
      (common-lisp:list
       (common-lisp:cons "SOA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-dns-properties-mutable-change))
   common-lisp:nil))
(common-lisp:deftype record-ttl () 'common-lisp:integer)
(common-lisp:deftype record-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-instance-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-instance-request
                    'make-register-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-instance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-instance-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-instance-response
                    'make-register-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-limit-exceeded
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'request-limit-exceeded 'request-limit-exceeded-message)))
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use 'resource-in-use-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded 'resource-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-path () 'common-lisp:string)
(common-lisp:deftype routing-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (soa (:copier common-lisp:nil) (:conc-name "struct-shape-soa-"))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or record-ttl common-lisp:null)))
 (common-lisp:export (common-lisp:list 'soa 'make-soa))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input soa))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input soa))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input soa))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (soachange (:copier common-lisp:nil)
      (:conc-name "struct-shape-soachange-"))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or record-ttl common-lisp:null)))
 (common-lisp:export (common-lisp:list 'soachange 'make-soachange))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input soachange))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input soachange))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "TTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input soachange))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service (:copier common-lisp:nil) (:conc-name "struct-shape-service-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or service-name common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or resource-count common-lisp:null))
   (dns-config common-lisp:nil :type
    (common-lisp:or dns-config common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or service-type common-lisp:null))
   (health-check-config common-lisp:nil :type
    (common-lisp:or health-check-config common-lisp:null))
   (health-check-custom-config common-lisp:nil :type
    (common-lisp:or health-check-custom-config common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "NamespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-config))
      (common-lisp:list
       (common-lisp:cons "DnsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-custom-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckCustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-already-exists
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-already-exists-message)
      (creator-request-id :initarg :creator-request-id :initform
       common-lisp:nil :reader service-already-exists-creator-request-id)
      (service-id :initarg :service-id :initform common-lisp:nil :reader
       service-already-exists-service-id)))
 (common-lisp:export
  (common-lisp:list 'service-already-exists 'service-already-exists-message
                    'service-already-exists-creator-request-id
                    'service-already-exists-service-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-change-"))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (dns-config common-lisp:nil :type
    (common-lisp:or dns-config-change common-lisp:null))
   (health-check-config common-lisp:nil :type
    (common-lisp:or health-check-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-change 'make-service-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-config))
      (common-lisp:list
       (common-lisp:cons "DnsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or service-filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or filter-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-filter 'make-service-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-filter))
   common-lisp:nil))
(common-lisp:deftype service-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-filters ()
   '(trivial-types:proper-list service-filter))
 (common-lisp:defun |make-service-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-not-found
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'service-not-found 'service-not-found-message)))
(common-lisp:progn
 (common-lisp:deftype service-summaries-list ()
   '(trivial-types:proper-list service-summary))
 (common-lisp:defun |make-service-summaries-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-summary-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or service-name common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or service-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or resource-count common-lisp:null))
   (dns-config common-lisp:nil :type
    (common-lisp:or dns-config common-lisp:null))
   (health-check-config common-lisp:nil :type
    (common-lisp:or health-check-config common-lisp:null))
   (health-check-custom-config common-lisp:nil :type
    (common-lisp:or health-check-custom-config common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-summary 'make-service-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-config))
      (common-lisp:list
       (common-lisp:cons "DnsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-custom-config))
      (common-lisp:list
       (common-lisp:cons "HealthCheckCustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-summary))
   common-lisp:nil))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:deftype service-type-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (servicediscovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-http-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-http-namespace-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (updater-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or http-namespace-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-http-namespace-request
                    'make-update-http-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updater-request-id))
      (common-lisp:list
       (common-lisp:cons "UpdaterRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-http-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-http-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-http-namespace-response
                    'make-update-http-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-http-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-instance-custom-health-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-instance-custom-health-status-request-"))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (instance-id (common-lisp:error ":instance-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or custom-health-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-instance-custom-health-status-request
                    'make-update-instance-custom-health-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-custom-health-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-custom-health-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-custom-health-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-private-dns-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-private-dns-namespace-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (updater-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or private-dns-namespace-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-private-dns-namespace-request
                    'make-update-private-dns-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updater-request-id))
      (common-lisp:list
       (common-lisp:cons "UpdaterRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-private-dns-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-private-dns-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-private-dns-namespace-response
                    'make-update-private-dns-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-private-dns-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-public-dns-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-public-dns-namespace-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (updater-request-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or public-dns-namespace-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-public-dns-namespace-request
                    'make-update-public-dns-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updater-request-id))
      (common-lisp:list
       (common-lisp:cons "UpdaterRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-public-dns-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-public-dns-namespace-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-public-dns-namespace-response
                    'make-update-public-dns-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-public-dns-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service-change common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-request 'make-update-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-response-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or operation-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-response 'make-update-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-http-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name creator-request-id description tags)
   (common-lisp:declare
    (common-lisp:ignorable name creator-request-id description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-http-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateHttpNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-http-namespace))
(common-lisp:progn
 (common-lisp:defun create-private-dns-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name creator-request-id description vpc
                     tags properties)
   (common-lisp:declare
    (common-lisp:ignorable name creator-request-id description vpc tags
     properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-private-dns-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreatePrivateDnsNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-private-dns-namespace))
(common-lisp:progn
 (common-lisp:defun create-public-dns-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name creator-request-id description tags
                     properties)
   (common-lisp:declare
    (common-lisp:ignorable name creator-request-id description tags
     properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-public-dns-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreatePublicDnsNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-public-dns-namespace))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name namespace-id creator-request-id
                     description dns-config health-check-config
                     health-check-custom-config tags type)
   (common-lisp:declare
    (common-lisp:ignorable name namespace-id creator-request-id description
     dns-config health-check-config health-check-custom-config tags type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateService" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun delete-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-namespace))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteService" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun deregister-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id instance-id)
   (common-lisp:declare (common-lisp:ignorable service-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeregisterInstance" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-instance))
(common-lisp:progn
 (common-lisp:defun discover-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace-name service-name max-results
                     query-parameters optional-parameters health-status)
   (common-lisp:declare
    (common-lisp:ignorable namespace-name service-name max-results
     query-parameters optional-parameters health-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "DiscoverInstances" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'discover-instances))
(common-lisp:progn
 (common-lisp:defun get-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id instance-id)
   (common-lisp:declare (common-lisp:ignorable service-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetInstance" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance))
(common-lisp:progn
 (common-lisp:defun get-instances-health-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id instances max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable service-id instances max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-instances-health-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetInstancesHealthStatus" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instances-health-status))
(common-lisp:progn
 (common-lisp:defun get-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-namespace))
(common-lisp:progn
 (common-lisp:defun get-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-id)
   (common-lisp:declare (common-lisp:ignorable operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetOperation" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-operation))
(common-lisp:progn
 (common-lisp:defun get-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetService" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service))
(common-lisp:progn
 (common-lisp:defun list-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListInstances" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-instances))
(common-lisp:progn
 (common-lisp:defun list-namespaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-namespaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListNamespaces" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-namespaces))
(common-lisp:progn
 (common-lisp:defun list-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListOperations" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-operations))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListServices" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id instance-id creator-request-id
                     attributes)
   (common-lisp:declare
    (common-lisp:ignorable service-id instance-id creator-request-id
     attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "RegisterInstance" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-instance))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-http-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id updater-request-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable id updater-request-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-http-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateHttpNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-http-namespace))
(common-lisp:progn
 (common-lisp:defun update-instance-custom-health-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-id instance-id status)
   (common-lisp:declare (common-lisp:ignorable service-id instance-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-instance-custom-health-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateInstanceCustomHealthStatus" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-instance-custom-health-status))
(common-lisp:progn
 (common-lisp:defun update-private-dns-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id updater-request-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable id updater-request-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-private-dns-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdatePrivateDnsNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-private-dns-namespace))
(common-lisp:progn
 (common-lisp:defun update-public-dns-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id updater-request-id namespace)
   (common-lisp:declare
    (common-lisp:ignorable id updater-request-id namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-public-dns-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdatePublicDnsNamespace" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-public-dns-namespace))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id service)
   (common-lisp:declare (common-lisp:ignorable id service))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'servicediscovery-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateService" "2017-03-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service))
