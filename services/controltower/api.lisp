;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/controltower/api
  (:use)
  (:nicknames #:aws/controltower)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/controltower/api)
(common-lisp:progn
 (common-lisp:defclass controltower-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "controltower" :protocol
                        :rest-json))
 (common-lisp:export 'controltower-request))
(common-lisp:progn
 (common-lisp:define-condition controltower-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'controltower-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype control-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass control-operation common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %control-operation-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or control-operation-status
                                         common-lisp:null)
                         :accessor %control-operation-status :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %control-operation-start-time :initform
                         common-lisp:nil)
                        (operation-type :initarg :|operationType| :type
                         (common-lisp:or control-operation-type
                                         common-lisp:null)
                         :accessor %control-operation-operation-type :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %control-operation-end-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'control-operation 'make-control-operation))
 (common-lisp:defun make-control-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status start-time
                     operation-type end-time)
   (common-lisp:apply #'common-lisp:make-instance 'control-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input control-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input control-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input control-operation))
   common-lisp:nil))
(common-lisp:deftype control-operation-status () 'common-lisp:string)
(common-lisp:deftype control-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-control-input common-lisp:nil
                       ((target-identifier :initarg :|targetIdentifier| :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor %disable-control-input-target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required"))
                        (control-identifier :initarg :|controlIdentifier| :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor %disable-control-input-control-identifier
                         :initform
                         (common-lisp:error
                          ":controlidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-control-input 'make-disable-control-input))
 (common-lisp:defun make-disable-control-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-identifier control-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'disable-control-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-control-output common-lisp:nil
                       ((operation-identifier :initarg :|operationIdentifier|
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor %disable-control-output-operation-identifier
                         :initform
                         (common-lisp:error
                          ":operationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-control-output 'make-disable-control-output))
 (common-lisp:defun make-disable-control-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'disable-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-control-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-control-input common-lisp:nil
                       ((target-identifier :initarg :|targetIdentifier| :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor %enable-control-input-target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required"))
                        (control-identifier :initarg :|controlIdentifier| :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor %enable-control-input-control-identifier
                         :initform
                         (common-lisp:error
                          ":controlidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-control-input 'make-enable-control-input))
 (common-lisp:defun make-enable-control-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-identifier control-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'enable-control-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-control-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-control-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-control-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-control-output common-lisp:nil
                       ((operation-identifier :initarg :|operationIdentifier|
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor %enable-control-output-operation-identifier
                         :initform
                         (common-lisp:error
                          ":operationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-control-output 'make-enable-control-output))
 (common-lisp:defun make-enable-control-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'enable-control-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-control-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-control-summary common-lisp:nil
                       ((control-identifier :initarg :|controlIdentifier| :type
                         (common-lisp:or control-identifier common-lisp:null)
                         :accessor %enabled-control-summary-control-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enabled-control-summary 'make-enabled-control-summary))
 (common-lisp:defun make-enabled-control-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-control-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-identifier))
      (common-lisp:list
       (common-lisp:cons "controlIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-control-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-controls ()
   '(trivial-types:proper-list enabled-control-summary))
 (common-lisp:defun |make-enabled-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enabled-control-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-control-operation-input common-lisp:nil
                       ((operation-identifier :initarg :|operationIdentifier|
                         :type
                         (common-lisp:or operation-identifier common-lisp:null)
                         :accessor
                         %get-control-operation-input-operation-identifier
                         :initform
                         (common-lisp:error
                          ":operationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-control-operation-input
                    'make-get-control-operation-input))
 (common-lisp:defun make-get-control-operation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-identifier))
      (common-lisp:list
       (common-lisp:cons "operationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-control-operation-output common-lisp:nil
                       ((control-operation :initarg :|controlOperation| :type
                         (common-lisp:or control-operation common-lisp:null)
                         :accessor
                         %get-control-operation-output-control-operation
                         :initform
                         (common-lisp:error ":controloperation is required"))))
 (common-lisp:export
  (common-lisp:list 'get-control-operation-output
                    'make-get-control-operation-output))
 (common-lisp:defun make-get-control-operation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-operation)
   (common-lisp:apply #'common-lisp:make-instance 'get-control-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-operation))
      (common-lisp:list
       (common-lisp:cons "controlOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-control-operation-output))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-enabled-controls-input common-lisp:nil
                       ((target-identifier :initarg :|targetIdentifier| :type
                         (common-lisp:or target-identifier common-lisp:null)
                         :accessor
                         %list-enabled-controls-input-target-identifier
                         :initform
                         (common-lisp:error ":targetidentifier is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-enabled-controls-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-enabled-controls-input-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-enabled-controls-input
                    'make-list-enabled-controls-input))
 (common-lisp:defun make-list-enabled-controls-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-identifier next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-enabled-controls-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-identifier))
      (common-lisp:list
       (common-lisp:cons "targetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enabled-controls-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-enabled-controls-output-next-token :initform
                         common-lisp:nil)
                        (enabled-controls :initarg :|enabledControls| :type
                         (common-lisp:or enabled-controls common-lisp:null)
                         :accessor
                         %list-enabled-controls-output-enabled-controls
                         :initform
                         (common-lisp:error ":enabledcontrols is required"))))
 (common-lisp:export
  (common-lisp:list 'list-enabled-controls-output
                    'make-list-enabled-controls-output))
 (common-lisp:defun make-list-enabled-controls-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token enabled-controls)
   (common-lisp:apply #'common-lisp:make-instance 'list-enabled-controls-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-controls))
      (common-lisp:list
       (common-lisp:cons "enabledControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-controls-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype operation-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype target-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (controltower-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun disable-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-identifier target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable control-identifier target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-control-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/disable-control"
                                                        "DisableControl"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-control))
(common-lisp:progn
 (common-lisp:defun enable-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key control-identifier target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable control-identifier target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-control-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/enable-control"
                                                        "EnableControl"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-control))
(common-lisp:progn
 (common-lisp:defun get-control-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-identifier)
   (common-lisp:declare (common-lisp:ignorable operation-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-control-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/get-control-operation"
                                                        "GetControlOperation"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-control-operation))
(common-lisp:progn
 (common-lisp:defun list-enabled-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token target-identifier)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token target-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-enabled-controls-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'controltower-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/list-enabled-controls"
                                                        "ListEnabledControls"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-enabled-controls))
