;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/wafv2/api
  (:use)
  (:nicknames #:aws/wafv2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/wafv2/api)
(common-lisp:progn
 (common-lisp:define-condition wafv2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'wafv2-error))
(common-lisp:progn
 (common-lisp:defclass wafv2-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "wafv2" :api-version
                        "2019-07-29" :host-prefix "wafv2" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSWAF_20190729" :json-version "1.1"))
 (common-lisp:export 'wafv2-request))
(common-lisp:defvar *error-map*
  '(("WAFAssociatedItemException" . wafassociated-item-exception)
    ("WAFConfigurationWarningException" . wafconfiguration-warning-exception)
    ("WAFDuplicateItemException" . wafduplicate-item-exception)
    ("WAFExpiredManagedRuleGroupVersionException"
     . wafexpired-managed-rule-group-version-exception)
    ("WAFInternalErrorException" . wafinternal-error-exception)
    ("WAFInvalidOperationException" . wafinvalid-operation-exception)
    ("WAFInvalidParameterException" . wafinvalid-parameter-exception)
    ("WAFInvalidPermissionPolicyException"
     . wafinvalid-permission-policy-exception)
    ("WAFInvalidResourceException" . wafinvalid-resource-exception)
    ("WAFLimitsExceededException" . waflimits-exceeded-exception)
    ("WAFLogDestinationPermissionIssueException"
     . waflog-destination-permission-issue-exception)
    ("WAFNonexistentItemException" . wafnonexistent-item-exception)
    ("WAFOptimisticLockException" . wafoptimistic-lock-exception)
    ("WAFServiceLinkedRoleErrorException"
     . wafservice-linked-role-error-exception)
    ("WAFSubscriptionNotFoundException" . wafsubscription-not-found-exception)
    ("WAFTagOperationException" . waftag-operation-exception)
    ("WAFTagOperationInternalErrorException"
     . waftag-operation-internal-error-exception)
    ("WAFUnavailableEntityException" . wafunavailable-entity-exception)
    ("WAFUnsupportedAggregateKeyTypeException"
     . wafunsupported-aggregate-key-type-exception)))
(common-lisp:deftype apikey () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype apikey-summaries ()
   '(trivial-types:proper-list apikey-summary))
 (common-lisp:defun make-apikey-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list apikey-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (apikey-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-apikey-summary-"))
   (token-domains common-lisp:nil :type
    (common-lisp:or token-domains common-lisp:null))
   (apikey common-lisp:nil :type (common-lisp:or apikey common-lisp:null))
   (creation-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or apikey-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'apikey-summary 'make-apikey-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apikey-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apikey-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apikey))
      (common-lisp:list
       (common-lisp:cons "APIKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apikey-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype apikey-token-domains ()
   '(trivial-types:proper-list token-domain))
 (common-lisp:defun make-apikey-token-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype apikey-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (awsmanaged-rules-acfprule-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-awsmanaged-rules-acfprule-set-"))
   (creation-path (common-lisp:error ":creation-path is required") :type
    (common-lisp:or creation-path-string common-lisp:null))
   (registration-page-path
    (common-lisp:error ":registration-page-path is required") :type
    (common-lisp:or registration-page-path-string common-lisp:null))
   (request-inspection (common-lisp:error ":request-inspection is required")
    :type (common-lisp:or request-inspection-acfp common-lisp:null))
   (response-inspection common-lisp:nil :type
    (common-lisp:or response-inspection common-lisp:null))
   (enable-regex-in-path common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'awsmanaged-rules-acfprule-set
                    'make-awsmanaged-rules-acfprule-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-acfprule-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-acfprule-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-path))
      (common-lisp:list
       (common-lisp:cons "CreationPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-page-path))
      (common-lisp:list
       (common-lisp:cons "RegistrationPagePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-inspection))
      (common-lisp:list
       (common-lisp:cons "RequestInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-inspection))
      (common-lisp:list
       (common-lisp:cons "ResponseInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-regex-in-path))
      (common-lisp:list
       (common-lisp:cons "EnableRegexInPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-acfprule-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (awsmanaged-rules-atprule-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-awsmanaged-rules-atprule-set-"))
   (login-path (common-lisp:error ":login-path is required") :type
    (common-lisp:or string common-lisp:null))
   (request-inspection common-lisp:nil :type
    (common-lisp:or request-inspection common-lisp:null))
   (response-inspection common-lisp:nil :type
    (common-lisp:or response-inspection common-lisp:null))
   (enable-regex-in-path common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'awsmanaged-rules-atprule-set
                    'make-awsmanaged-rules-atprule-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-atprule-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-atprule-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-path))
      (common-lisp:list
       (common-lisp:cons "LoginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-inspection))
      (common-lisp:list
       (common-lisp:cons "RequestInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-inspection))
      (common-lisp:list
       (common-lisp:cons "ResponseInspection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-regex-in-path))
      (common-lisp:list
       (common-lisp:cons "EnableRegexInPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-atprule-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (awsmanaged-rules-bot-control-rule-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-awsmanaged-rules-bot-control-rule-set-"))
   (inspection-level (common-lisp:error ":inspection-level is required") :type
    (common-lisp:or inspection-level common-lisp:null))
   (enable-machine-learning common-lisp:nil :type
    (common-lisp:or enable-machine-learning common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'awsmanaged-rules-bot-control-rule-set
                    'make-awsmanaged-rules-bot-control-rule-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-bot-control-rule-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-bot-control-rule-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inspection-level))
      (common-lisp:list
       (common-lisp:cons "InspectionLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-machine-learning))
      (common-lisp:list
       (common-lisp:cons "EnableMachineLearning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awsmanaged-rules-bot-control-rule-set))
   common-lisp:nil))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-condition-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or action-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-condition 'make-action-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-condition))
   common-lisp:nil))
(common-lisp:deftype action-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (address-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-address-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'address-field 'make-address-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype address-fields ()
   '(trivial-types:proper-list address-field))
 (common-lisp:defun make-address-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (all (:copier common-lisp:nil) (:conc-name "struct-shape-all-")))
 (common-lisp:export (common-lisp:list 'all 'make-all))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input all))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input all))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input all))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (all-query-arguments (:copier common-lisp:nil)
      (:conc-name "struct-shape-all-query-arguments-")))
 (common-lisp:export
  (common-lisp:list 'all-query-arguments 'make-all-query-arguments))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input all-query-arguments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input all-query-arguments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input all-query-arguments))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allow-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-allow-action-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or custom-request-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'allow-action 'make-allow-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input allow-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input allow-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input allow-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (and-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-and-statement-"))
   (statements (common-lisp:error ":statements is required") :type
    (common-lisp:or statements common-lisp:null)))
 (common-lisp:export (common-lisp:list 'and-statement 'make-and-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input and-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input and-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input and-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-web-aclrequest-"))
   (web-aclarn (common-lisp:error ":web-aclarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-web-aclrequest 'make-associate-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclarn))
      (common-lisp:list
       (common-lisp:cons "WebACLArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-web-aclresponse-")))
 (common-lisp:export
  (common-lisp:list 'associate-web-aclresponse
                    'make-associate-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-web-aclresponse))
   common-lisp:nil))
(common-lisp:deftype associated-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (association-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-association-config-"))
   (request-body common-lisp:nil :type
    (common-lisp:or request-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'association-config 'make-association-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-body))
      (common-lisp:list
       (common-lisp:cons "RequestBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (block-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-block-action-"))
   (custom-response common-lisp:nil :type
    (common-lisp:or custom-response common-lisp:null)))
 (common-lisp:export (common-lisp:list 'block-action 'make-block-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-response))
      (common-lisp:list
       (common-lisp:cons "CustomResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (body (:copier common-lisp:nil) (:conc-name "struct-shape-body-"))
   (oversize-handling common-lisp:nil :type
    (common-lisp:or oversize-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'body 'make-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oversize-handling))
      (common-lisp:list
       (common-lisp:cons "OversizeHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input body))
   common-lisp:nil))
(common-lisp:deftype body-parsing-fallback-behavior () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (byte-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-byte-match-statement-"))
   (search-string (common-lisp:error ":search-string is required") :type
    (common-lisp:or search-string common-lisp:null))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null))
   (positional-constraint
    (common-lisp:error ":positional-constraint is required") :type
    (common-lisp:or positional-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'byte-match-statement 'make-byte-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byte-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byte-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'positional-constraint))
      (common-lisp:list
       (common-lisp:cons "PositionalConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byte-match-statement))
   common-lisp:nil))
(common-lisp:deftype capacity-unit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (captcha-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-captcha-action-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or custom-request-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'captcha-action 'make-captcha-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input captcha-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input captcha-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input captcha-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (captcha-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-captcha-config-"))
   (immunity-time-property common-lisp:nil :type
    (common-lisp:or immunity-time-property common-lisp:null)))
 (common-lisp:export (common-lisp:list 'captcha-config 'make-captcha-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input captcha-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input captcha-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immunity-time-property))
      (common-lisp:list
       (common-lisp:cons "ImmunityTimeProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input captcha-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (captcha-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-captcha-response-"))
   (response-code common-lisp:nil :type
    (common-lisp:or response-code common-lisp:null))
   (solve-timestamp common-lisp:nil :type
    (common-lisp:or solve-timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'captcha-response 'make-captcha-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input captcha-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input captcha-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solve-timestamp))
      (common-lisp:list
       (common-lisp:cons "SolveTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input captcha-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (challenge-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-challenge-action-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or custom-request-handling common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'challenge-action 'make-challenge-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input challenge-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input challenge-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input challenge-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (challenge-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-challenge-config-"))
   (immunity-time-property common-lisp:nil :type
    (common-lisp:or immunity-time-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'challenge-config 'make-challenge-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input challenge-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input challenge-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immunity-time-property))
      (common-lisp:list
       (common-lisp:cons "ImmunityTimeProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input challenge-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (challenge-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-challenge-response-"))
   (response-code common-lisp:nil :type
    (common-lisp:or response-code common-lisp:null))
   (solve-timestamp common-lisp:nil :type
    (common-lisp:or solve-timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'challenge-response 'make-challenge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input challenge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input challenge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solve-timestamp))
      (common-lisp:list
       (common-lisp:cons "SolveTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input challenge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (check-capacity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-capacity-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-capacity-request 'make-check-capacity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (check-capacity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-capacity-response-"))
   (capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-capacity-response 'make-check-capacity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-capacity-response))
   common-lisp:nil))
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-"))
   (action-condition common-lisp:nil :type
    (common-lisp:or action-condition common-lisp:null))
   (label-name-condition common-lisp:nil :type
    (common-lisp:or label-name-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-condition))
      (common-lisp:list
       (common-lisp:cons "ActionCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-name-condition))
      (common-lisp:list
       (common-lisp:cons "LabelNameCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conditions () '(trivial-types:proper-list condition))
 (common-lisp:defun make-conditions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype consumed-capacity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (cookie-match-pattern (:copier common-lisp:nil)
      (:conc-name "struct-shape-cookie-match-pattern-"))
   (all common-lisp:nil :type (common-lisp:or all common-lisp:null))
   (included-cookies common-lisp:nil :type
    (common-lisp:or cookie-names common-lisp:null))
   (excluded-cookies common-lisp:nil :type
    (common-lisp:or cookie-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cookie-match-pattern 'make-cookie-match-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-match-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-match-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "All"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-cookies))
      (common-lisp:list
       (common-lisp:cons "IncludedCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-cookies))
      (common-lisp:list
       (common-lisp:cons "ExcludedCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-match-pattern))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cookie-names ()
   '(trivial-types:proper-list single-cookie-name))
 (common-lisp:defun make-cookie-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list single-cookie-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cookies (:copier common-lisp:nil) (:conc-name "struct-shape-cookies-"))
   (match-pattern (common-lisp:error ":match-pattern is required") :type
    (common-lisp:or cookie-match-pattern common-lisp:null))
   (match-scope (common-lisp:error ":match-scope is required") :type
    (common-lisp:or map-match-scope common-lisp:null))
   (oversize-handling (common-lisp:error ":oversize-handling is required")
    :type (common-lisp:or oversize-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cookies 'make-cookies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-pattern))
      (common-lisp:list
       (common-lisp:cons "MatchPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-scope))
      (common-lisp:list
       (common-lisp:cons "MatchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oversize-handling))
      (common-lisp:list
       (common-lisp:cons "OversizeHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (count-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-action-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or custom-request-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'count-action 'make-count-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input count-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input count-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input count-action))
   common-lisp:nil))
(common-lisp:deftype country () 'common-lisp:string)
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype country-codes ()
   '(trivial-types:proper-list country-code))
 (common-lisp:defun make-country-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list country-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-apikey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-apikey-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (token-domains (common-lisp:error ":token-domains is required") :type
    (common-lisp:or apikey-token-domains common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-apikey-request 'make-create-apikey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-apikey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-apikey-response-"))
   (apikey common-lisp:nil :type (common-lisp:or apikey common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-apikey-response 'make-create-apikey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apikey))
      (common-lisp:list
       (common-lisp:cons "APIKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-apikey-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ipset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (ipaddress-version (common-lisp:error ":ipaddress-version is required")
    :type (common-lisp:or ipaddress-version common-lisp:null))
   (addresses (common-lisp:error ":addresses is required") :type
    (common-lisp:or ipaddresses common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ipset-request 'make-create-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress-version))
      (common-lisp:list
       (common-lisp:cons "IPAddressVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ipset-response-"))
   (summary common-lisp:nil :type
    (common-lisp:or ipset-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ipset-response 'make-create-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-pattern-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (regular-expression-list
    (common-lisp:error ":regular-expression-list is required") :type
    (common-lisp:or regular-expression-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-pattern-set-request
                    'make-create-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regular-expression-list))
      (common-lisp:list
       (common-lisp:cons "RegularExpressionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-pattern-set-response-"))
   (summary common-lisp:nil :type
    (common-lisp:or regex-pattern-set-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-pattern-set-response
                    'make-create-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (capacity (common-lisp:error ":capacity is required") :type
    (common-lisp:or capacity-unit common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-group-request
                    'make-create-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-group-response-"))
   (summary common-lisp:nil :type
    (common-lisp:or rule-group-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-group-response
                    'make-create-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (default-action (common-lisp:error ":default-action is required") :type
    (common-lisp:or default-action common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null))
   (captcha-config common-lisp:nil :type
    (common-lisp:or captcha-config common-lisp:null))
   (challenge-config common-lisp:nil :type
    (common-lisp:or challenge-config common-lisp:null))
   (token-domains common-lisp:nil :type
    (common-lisp:or token-domains common-lisp:null))
   (association-config common-lisp:nil :type
    (common-lisp:or association-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclrequest 'make-create-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-config))
      (common-lisp:list
       (common-lisp:cons "ChallengeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-config))
      (common-lisp:list
       (common-lisp:cons "AssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclresponse-"))
   (summary common-lisp:nil :type
    (common-lisp:or web-aclsummary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclresponse 'make-create-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   common-lisp:nil))
(common-lisp:deftype creation-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-httpheader (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-httpheader-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or custom-httpheader-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or custom-httpheader-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-httpheader 'make-custom-httpheader))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-httpheader))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-httpheader))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-httpheader))
   common-lisp:nil))
(common-lisp:deftype custom-httpheader-name () 'common-lisp:string)
(common-lisp:deftype custom-httpheader-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-httpheaders ()
   '(trivial-types:proper-list custom-httpheader))
 (common-lisp:defun make-custom-httpheaders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-httpheader))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-request-handling (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-request-handling-"))
   (insert-headers (common-lisp:error ":insert-headers is required") :type
    (common-lisp:or custom-httpheaders common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-request-handling 'make-custom-request-handling))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-request-handling))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-request-handling))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insert-headers))
      (common-lisp:list
       (common-lisp:cons "InsertHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-request-handling))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-response-"))
   (response-code (common-lisp:error ":response-code is required") :type
    (common-lisp:or response-status-code common-lisp:null))
   (custom-response-body-key common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (response-headers common-lisp:nil :type
    (common-lisp:or custom-httpheaders common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-response 'make-custom-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-body-key))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodyKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-headers))
      (common-lisp:list
       (common-lisp:cons "ResponseHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-response-bodies () 'common-lisp:hash-table)
 (common-lisp:defun make-custom-response-bodies
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-response-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-response-body-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or response-content-type common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or response-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-response-body 'make-custom-response-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-response-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-response-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-response-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-action-"))
   (block common-lisp:nil :type (common-lisp:or block-action common-lisp:null))
   (allow common-lisp:nil :type
    (common-lisp:or allow-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'default-action 'make-default-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apikey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apikey-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (apikey (common-lisp:error ":apikey is required") :type
    (common-lisp:or apikey common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apikey-request 'make-delete-apikey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apikey))
      (common-lisp:list
       (common-lisp:cons "APIKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apikey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apikey-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-apikey-response 'make-delete-apikey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apikey-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-manager-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-manager-rule-groups-request-"))
   (web-aclarn (common-lisp:error ":web-aclarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (web-acllock-token (common-lisp:error ":web-acllock-token is required")
    :type (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-manager-rule-groups-request
                    'make-delete-firewall-manager-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclarn))
      (common-lisp:list
       (common-lisp:cons "WebACLArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acllock-token))
      (common-lisp:list
       (common-lisp:cons "WebACLLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-manager-rule-groups-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-firewall-manager-rule-groups-response-"))
   (next-web-acllock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-manager-rule-groups-response
                    'make-delete-firewall-manager-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-web-acllock-token))
      (common-lisp:list
       (common-lisp:cons "NextWebACLLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-manager-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ipset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-request 'make-delete-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ipset-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-response 'make-delete-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-logging-configuration-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-logging-configuration-request
                    'make-delete-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-logging-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-logging-configuration-response
                    'make-delete-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-permission-policy-request
                    'make-delete-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-permission-policy-response
                    'make-delete-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-pattern-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-regex-pattern-set-request
                    'make-delete-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-pattern-set-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-regex-pattern-set-response
                    'make-delete-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-group-request
                    'make-delete-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-rule-group-response
                    'make-delete-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-aclrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-web-aclrequest 'make-delete-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-aclresponse-")))
 (common-lisp:export
  (common-lisp:list 'delete-web-aclresponse 'make-delete-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-all-managed-products-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-all-managed-products-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-all-managed-products-request
                    'make-describe-all-managed-products-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-all-managed-products-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-all-managed-products-response-"))
   (managed-products common-lisp:nil :type
    (common-lisp:or managed-product-descriptors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-all-managed-products-response
                    'make-describe-all-managed-products-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-products))
      (common-lisp:list
       (common-lisp:cons "ManagedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-all-managed-products-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-products-by-vendor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-managed-products-by-vendor-request-"))
   (vendor-name (common-lisp:error ":vendor-name is required") :type
    (common-lisp:or vendor-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-products-by-vendor-request
                    'make-describe-managed-products-by-vendor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-products-by-vendor-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-managed-products-by-vendor-response-"))
   (managed-products common-lisp:nil :type
    (common-lisp:or managed-product-descriptors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-products-by-vendor-response
                    'make-describe-managed-products-by-vendor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-products))
      (common-lisp:list
       (common-lisp:cons "ManagedProducts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-products-by-vendor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-managed-rule-group-request-"))
   (vendor-name (common-lisp:error ":vendor-name is required") :type
    (common-lisp:or vendor-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (version-name common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-rule-group-request
                    'make-describe-managed-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-managed-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-managed-rule-group-response-"))
   (version-name common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (capacity common-lisp:nil :type
    (common-lisp:or capacity-unit common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or rule-summaries common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or label-name common-lisp:null))
   (available-labels common-lisp:nil :type
    (common-lisp:or label-summaries common-lisp:null))
   (consumed-labels common-lisp:nil :type
    (common-lisp:or label-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-managed-rule-group-response
                    'make-describe-managed-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-labels))
      (common-lisp:list
       (common-lisp:cons "AvailableLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-labels))
      (common-lisp:list
       (common-lisp:cons "ConsumedLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-managed-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-web-aclrequest-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-web-aclrequest
                    'make-disassociate-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-web-aclresponse-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-web-aclresponse
                    'make-disassociate-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-web-aclresponse))
   common-lisp:nil))
(common-lisp:deftype download-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (email-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'email-field 'make-email-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-field))
   common-lisp:nil))
(common-lisp:deftype enable-machine-learning () 'common-lisp:boolean)
(common-lisp:deftype entity-description () 'common-lisp:string)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-reason () 'common-lisp:string)
(common-lisp:deftype evaluation-window-sec () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (excluded-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-excluded-rule-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'excluded-rule 'make-excluded-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input excluded-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input excluded-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input excluded-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype excluded-rules ()
   '(trivial-types:proper-list excluded-rule))
 (common-lisp:defun make-excluded-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list excluded-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-code () 'common-lisp:integer)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:deftype failure-value () 'common-lisp:string)
(common-lisp:deftype fallback-behavior () 'common-lisp:string)
(common-lisp:deftype field-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (field-to-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-to-match-"))
   (single-header common-lisp:nil :type
    (common-lisp:or single-header common-lisp:null))
   (single-query-argument common-lisp:nil :type
    (common-lisp:or single-query-argument common-lisp:null))
   (all-query-arguments common-lisp:nil :type
    (common-lisp:or all-query-arguments common-lisp:null))
   (uri-path common-lisp:nil :type (common-lisp:or uri-path common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-string common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or body common-lisp:null))
   (method common-lisp:nil :type (common-lisp:or method common-lisp:null))
   (json-body common-lisp:nil :type
    (common-lisp:or json-body common-lisp:null))
   (headers common-lisp:nil :type (common-lisp:or headers common-lisp:null))
   (cookies common-lisp:nil :type (common-lisp:or cookies common-lisp:null))
   (header-order common-lisp:nil :type
    (common-lisp:or header-order common-lisp:null))
   (ja3fingerprint common-lisp:nil :type
    (common-lisp:or ja3fingerprint common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-to-match 'make-field-to-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-to-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-to-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'single-header))
      (common-lisp:list
       (common-lisp:cons "SingleHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-query-argument))
      (common-lisp:list
       (common-lisp:cons "SingleQueryArgument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-query-arguments))
      (common-lisp:list
       (common-lisp:cons "AllQueryArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri-path))
      (common-lisp:list
       (common-lisp:cons "UriPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-body))
      (common-lisp:list
       (common-lisp:cons "JsonBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies))
      (common-lisp:list
       (common-lisp:cons "Cookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-order))
      (common-lisp:list
       (common-lisp:cons "HeaderOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ja3fingerprint))
      (common-lisp:list
       (common-lisp:cons "JA3Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-to-match))
   common-lisp:nil))
(common-lisp:deftype field-to-match-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (behavior (common-lisp:error ":behavior is required") :type
    (common-lisp:or filter-behavior common-lisp:null))
   (requirement (common-lisp:error ":requirement is required") :type
    (common-lisp:or filter-requirement common-lisp:null))
   (conditions (common-lisp:error ":conditions is required") :type
    (common-lisp:or conditions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requirement))
      (common-lisp:list
       (common-lisp:cons "Requirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-behavior () 'common-lisp:string)
(common-lisp:deftype filter-requirement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-manager-rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-manager-rule-group-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or rule-priority common-lisp:null))
   (firewall-manager-statement
    (common-lisp:error ":firewall-manager-statement is required") :type
    (common-lisp:or firewall-manager-statement common-lisp:null))
   (override-action (common-lisp:error ":override-action is required") :type
    (common-lisp:or override-action common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-manager-rule-group
                    'make-firewall-manager-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-manager-statement))
      (common-lisp:list
       (common-lisp:cons "FirewallManagerStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-manager-rule-groups ()
   '(trivial-types:proper-list firewall-manager-rule-group))
 (common-lisp:defun make-firewall-manager-rule-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-manager-rule-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-manager-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-manager-statement-"))
   (managed-rule-group-statement common-lisp:nil :type
    (common-lisp:or managed-rule-group-statement common-lisp:null))
   (rule-group-reference-statement common-lisp:nil :type
    (common-lisp:or rule-group-reference-statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-manager-statement
                    'make-firewall-manager-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-rule-group-statement))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleGroupStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-group-reference-statement))
      (common-lisp:list
       (common-lisp:cons "RuleGroupReferenceStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-manager-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (forwarded-ipconfig (:copier common-lisp:nil)
      (:conc-name "struct-shape-forwarded-ipconfig-"))
   (header-name (common-lisp:error ":header-name is required") :type
    (common-lisp:or forwarded-ipheader-name common-lisp:null))
   (fallback-behavior (common-lisp:error ":fallback-behavior is required")
    :type (common-lisp:or fallback-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'forwarded-ipconfig 'make-forwarded-ipconfig))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forwarded-ipconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forwarded-ipconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-name))
      (common-lisp:list
       (common-lisp:cons "HeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-behavior))
      (common-lisp:list
       (common-lisp:cons "FallbackBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forwarded-ipconfig))
   common-lisp:nil))
(common-lisp:deftype forwarded-ipheader-name () 'common-lisp:string)
(common-lisp:deftype forwarded-ipposition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generate-mobile-sdk-release-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-mobile-sdk-release-url-request-"))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (release-version (common-lisp:error ":release-version is required") :type
    (common-lisp:or version-key-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-mobile-sdk-release-url-request
                    'make-generate-mobile-sdk-release-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "ReleaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-mobile-sdk-release-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-mobile-sdk-release-url-response-"))
   (url common-lisp:nil :type (common-lisp:or download-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-mobile-sdk-release-url-response
                    'make-generate-mobile-sdk-release-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-mobile-sdk-release-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-match-statement-"))
   (country-codes common-lisp:nil :type
    (common-lisp:or country-codes common-lisp:null))
   (forwarded-ipconfig common-lisp:nil :type
    (common-lisp:or forwarded-ipconfig common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-match-statement 'make-geo-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-codes))
      (common-lisp:list
       (common-lisp:cons "CountryCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-ipconfig))
      (common-lisp:list
       (common-lisp:cons "ForwardedIPConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-match-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-decrypted-apikey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-decrypted-apikey-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (apikey (common-lisp:error ":apikey is required") :type
    (common-lisp:or apikey common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-decrypted-apikey-request
                    'make-get-decrypted-apikey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apikey))
      (common-lisp:list
       (common-lisp:cons "APIKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-decrypted-apikey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-decrypted-apikey-response-"))
   (token-domains common-lisp:nil :type
    (common-lisp:or token-domains common-lisp:null))
   (creation-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-decrypted-apikey-response
                    'make-get-decrypted-apikey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-decrypted-apikey-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ipset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ipset-request 'make-get-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ipset-response-"))
   (ipset common-lisp:nil :type (common-lisp:or ipset common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ipset-response 'make-get-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset))
      (common-lisp:list
       (common-lisp:cons "IPSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-configuration-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-configuration-request
                    'make-get-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-configuration-response-"))
   (logging-configuration common-lisp:nil :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-configuration-response
                    'make-get-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-managed-rule-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-managed-rule-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-managed-rule-set-request
                    'make-get-managed-rule-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-managed-rule-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-managed-rule-set-response-"))
   (managed-rule-set common-lisp:nil :type
    (common-lisp:or managed-rule-set common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-managed-rule-set-response
                    'make-get-managed-rule-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-rule-set))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-rule-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-sdk-release-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-sdk-release-request-"))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (release-version (common-lisp:error ":release-version is required") :type
    (common-lisp:or version-key-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-sdk-release-request
                    'make-get-mobile-sdk-release-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "ReleaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mobile-sdk-release-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mobile-sdk-release-response-"))
   (mobile-sdk-release common-lisp:nil :type
    (common-lisp:or mobile-sdk-release common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mobile-sdk-release-response
                    'make-get-mobile-sdk-release-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mobile-sdk-release))
      (common-lisp:list
       (common-lisp:cons "MobileSdkRelease"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mobile-sdk-release-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-policy-request
                    'make-get-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-policy-response-"))
   (policy common-lisp:nil :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-policy-response
                    'make-get-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-statement-managed-keys-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-rate-based-statement-managed-keys-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (web-aclname (common-lisp:error ":web-aclname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (rule-group-rule-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (rule-name (common-lisp:error ":rule-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-statement-managed-keys-request
                    'make-get-rate-based-statement-managed-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclname))
      (common-lisp:list
       (common-lisp:cons "WebACLName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-group-rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-statement-managed-keys-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-rate-based-statement-managed-keys-response-"))
   (managed-keys-ipv4 common-lisp:nil :type
    (common-lisp:or rate-based-statement-managed-keys-ipset common-lisp:null))
   (managed-keys-ipv6 common-lisp:nil :type
    (common-lisp:or rate-based-statement-managed-keys-ipset common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-statement-managed-keys-response
                    'make-get-rate-based-statement-managed-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-keys-ipv4))
      (common-lisp:list
       (common-lisp:cons "ManagedKeysIPV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-keys-ipv6))
      (common-lisp:list
       (common-lisp:cons "ManagedKeysIPV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-statement-managed-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-pattern-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-pattern-set-request
                    'make-get-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-pattern-set-response-"))
   (regex-pattern-set common-lisp:nil :type
    (common-lisp:or regex-pattern-set common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-pattern-set-response
                    'make-get-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-pattern-set))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-group-request-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (scope common-lisp:nil :type (common-lisp:or scope common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-group-request 'make-get-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-group-response-"))
   (rule-group common-lisp:nil :type
    (common-lisp:or rule-group common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-group-response 'make-get-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sampled-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sampled-requests-request-"))
   (web-acl-arn (common-lisp:error ":web-acl-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (rule-metric-name (common-lisp:error ":rule-metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (time-window (common-lisp:error ":time-window is required") :type
    (common-lisp:or time-window common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or list-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sampled-requests-request
                    'make-get-sampled-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-arn))
      (common-lisp:list
       (common-lisp:cons "WebAclArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-metric-name))
      (common-lisp:list
       (common-lisp:cons "RuleMetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-window))
      (common-lisp:list
       (common-lisp:cons "TimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sampled-requests-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sampled-requests-response-"))
   (sampled-requests common-lisp:nil :type
    (common-lisp:or sampled-httprequests common-lisp:null))
   (population-size common-lisp:nil :type
    (common-lisp:or population-size common-lisp:null))
   (time-window common-lisp:nil :type
    (common-lisp:or time-window common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sampled-requests-response
                    'make-get-sampled-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampled-requests))
      (common-lisp:list
       (common-lisp:cons "SampledRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'population-size))
      (common-lisp:list
       (common-lisp:cons "PopulationSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-window))
      (common-lisp:list
       (common-lisp:cons "TimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclfor-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclfor-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclfor-resource-request
                    'make-get-web-aclfor-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclfor-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclfor-resource-response-"))
   (web-acl common-lisp:nil :type (common-lisp:or web-acl common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclfor-resource-response
                    'make-get-web-aclfor-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl))
      (common-lisp:list
       (common-lisp:cons "WebACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-web-aclfor-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclrequest 'make-get-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclresponse-"))
   (web-acl common-lisp:nil :type (common-lisp:or web-acl common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (application-integration-url common-lisp:nil :type
    (common-lisp:or output-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclresponse 'make-get-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl))
      (common-lisp:list
       (common-lisp:cons "WebACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-integration-url))
      (common-lisp:list
       (common-lisp:cons "ApplicationIntegrationURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (httpheader (:copier common-lisp:nil)
      (:conc-name "struct-shape-httpheader-"))
   (name common-lisp:nil :type (common-lisp:or header-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or header-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'httpheader 'make-httpheader))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input httpheader))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input httpheader))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input httpheader))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype httpheaders () '(trivial-types:proper-list httpheader))
 (common-lisp:defun make-httpheaders
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list httpheader))
   aws-sdk/generator/shape::members))
(common-lisp:deftype httpmethod () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (httprequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-httprequest-"))
   (client-ip common-lisp:nil :type (common-lisp:or ipstring common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or country common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uristring common-lisp:null))
   (method common-lisp:nil :type (common-lisp:or httpmethod common-lisp:null))
   (httpversion common-lisp:nil :type
    (common-lisp:or httpversion common-lisp:null))
   (headers common-lisp:nil :type
    (common-lisp:or httpheaders common-lisp:null)))
 (common-lisp:export (common-lisp:list 'httprequest 'make-httprequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input httprequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input httprequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ip))
      (common-lisp:list
       (common-lisp:cons "ClientIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpversion))
      (common-lisp:list
       (common-lisp:cons "HTTPVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input httprequest))
   common-lisp:nil))
(common-lisp:deftype httpversion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (header-match-pattern (:copier common-lisp:nil)
      (:conc-name "struct-shape-header-match-pattern-"))
   (all common-lisp:nil :type (common-lisp:or all common-lisp:null))
   (included-headers common-lisp:nil :type
    (common-lisp:or header-names common-lisp:null))
   (excluded-headers common-lisp:nil :type
    (common-lisp:or header-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'header-match-pattern 'make-header-match-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-match-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-match-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "All"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-headers))
      (common-lisp:list
       (common-lisp:cons "IncludedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-headers))
      (common-lisp:list
       (common-lisp:cons "ExcludedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-match-pattern))
   common-lisp:nil))
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-names ()
   '(trivial-types:proper-list field-to-match-data))
 (common-lisp:defun make-header-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-to-match-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (header-order (:copier common-lisp:nil)
      (:conc-name "struct-shape-header-order-"))
   (oversize-handling (common-lisp:error ":oversize-handling is required")
    :type (common-lisp:or oversize-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'header-order 'make-header-order))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oversize-handling))
      (common-lisp:list
       (common-lisp:cons "OversizeHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-order))
   common-lisp:nil))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (headers (:copier common-lisp:nil) (:conc-name "struct-shape-headers-"))
   (match-pattern (common-lisp:error ":match-pattern is required") :type
    (common-lisp:or header-match-pattern common-lisp:null))
   (match-scope (common-lisp:error ":match-scope is required") :type
    (common-lisp:or map-match-scope common-lisp:null))
   (oversize-handling (common-lisp:error ":oversize-handling is required")
    :type (common-lisp:or oversize-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'headers 'make-headers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input headers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input headers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-pattern))
      (common-lisp:list
       (common-lisp:cons "MatchPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-scope))
      (common-lisp:list
       (common-lisp:cons "MatchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oversize-handling))
      (common-lisp:list
       (common-lisp:cons "OversizeHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input headers))
   common-lisp:nil))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype ipaddress-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipaddresses () '(trivial-types:proper-list ipaddress))
 (common-lisp:defun make-ipaddresses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipaddress))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset (:copier common-lisp:nil) (:conc-name "struct-shape-ipset-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (ipaddress-version (common-lisp:error ":ipaddress-version is required")
    :type (common-lisp:or ipaddress-version common-lisp:null))
   (addresses (common-lisp:error ":addresses is required") :type
    (common-lisp:or ipaddresses common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipset 'make-ipset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress-version))
      (common-lisp:list
       (common-lisp:cons "IPAddressVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-forwarded-ipconfig (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-forwarded-ipconfig-"))
   (header-name (common-lisp:error ":header-name is required") :type
    (common-lisp:or forwarded-ipheader-name common-lisp:null))
   (fallback-behavior (common-lisp:error ":fallback-behavior is required")
    :type (common-lisp:or fallback-behavior common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or forwarded-ipposition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ipset-forwarded-ipconfig 'make-ipset-forwarded-ipconfig))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipset-forwarded-ipconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipset-forwarded-ipconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-name))
      (common-lisp:list
       (common-lisp:cons "HeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-behavior))
      (common-lisp:list
       (common-lisp:cons "FallbackBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipset-forwarded-ipconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-reference-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-reference-statement-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (ipset-forwarded-ipconfig common-lisp:nil :type
    (common-lisp:or ipset-forwarded-ipconfig common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ipset-reference-statement
                    'make-ipset-reference-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipset-reference-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipset-reference-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipset-forwarded-ipconfig))
      (common-lisp:list
       (common-lisp:cons "IPSetForwardedIPConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipset-reference-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipset-summaries ()
   '(trivial-types:proper-list ipset-summary))
 (common-lisp:defun make-ipset-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-summary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipset-summary 'make-ipset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset-summary))
   common-lisp:nil))
(common-lisp:deftype ipstring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (immunity-time-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-immunity-time-property-"))
   (immunity-time (common-lisp:error ":immunity-time is required") :type
    (common-lisp:or time-window-second common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'immunity-time-property 'make-immunity-time-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          immunity-time-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          immunity-time-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'immunity-time))
      (common-lisp:list
       (common-lisp:cons "ImmunityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          immunity-time-property))
   common-lisp:nil))
(common-lisp:deftype inspection-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ja3fingerprint (:copier common-lisp:nil)
      (:conc-name "struct-shape-ja3fingerprint-"))
   (fallback-behavior (common-lisp:error ":fallback-behavior is required")
    :type (common-lisp:or fallback-behavior common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ja3fingerprint 'make-ja3fingerprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ja3fingerprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ja3fingerprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-behavior))
      (common-lisp:list
       (common-lisp:cons "FallbackBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ja3fingerprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (json-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-json-body-"))
   (match-pattern (common-lisp:error ":match-pattern is required") :type
    (common-lisp:or json-match-pattern common-lisp:null))
   (match-scope (common-lisp:error ":match-scope is required") :type
    (common-lisp:or json-match-scope common-lisp:null))
   (invalid-fallback-behavior common-lisp:nil :type
    (common-lisp:or body-parsing-fallback-behavior common-lisp:null))
   (oversize-handling common-lisp:nil :type
    (common-lisp:or oversize-handling common-lisp:null)))
 (common-lisp:export (common-lisp:list 'json-body 'make-json-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-pattern))
      (common-lisp:list
       (common-lisp:cons "MatchPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-scope))
      (common-lisp:list
       (common-lisp:cons "MatchScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-fallback-behavior))
      (common-lisp:list
       (common-lisp:cons "InvalidFallbackBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oversize-handling))
      (common-lisp:list
       (common-lisp:cons "OversizeHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (json-match-pattern (:copier common-lisp:nil)
      (:conc-name "struct-shape-json-match-pattern-"))
   (all common-lisp:nil :type (common-lisp:or all common-lisp:null))
   (included-paths common-lisp:nil :type
    (common-lisp:or json-pointer-paths common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'json-match-pattern 'make-json-match-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-match-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-match-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all))
      (common-lisp:list
       (common-lisp:cons "All"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-paths))
      (common-lisp:list
       (common-lisp:cons "IncludedPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-match-pattern))
   common-lisp:nil))
(common-lisp:deftype json-match-scope () 'common-lisp:string)
(common-lisp:deftype json-pointer-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype json-pointer-paths ()
   '(trivial-types:proper-list json-pointer-path))
 (common-lisp:defun make-json-pointer-paths
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list json-pointer-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (label (:copier common-lisp:nil) (:conc-name "struct-shape-label-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or label-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label 'make-label))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label))
   common-lisp:nil))
(common-lisp:deftype label-match-key () 'common-lisp:string)
(common-lisp:deftype label-match-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (label-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-match-statement-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or label-match-scope common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or label-match-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'label-match-statement 'make-label-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          label-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          label-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          label-match-statement))
   common-lisp:nil))
(common-lisp:deftype label-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (label-name-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-name-condition-"))
   (label-name (common-lisp:error ":label-name is required") :type
    (common-lisp:or label-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'label-name-condition 'make-label-name-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-name-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-name-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-name))
      (common-lisp:list
       (common-lisp:cons "LabelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-name-condition))
   common-lisp:nil))
(common-lisp:deftype label-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype label-summaries ()
   '(trivial-types:proper-list label-summary))
 (common-lisp:defun make-label-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (label-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-summary-"))
   (name common-lisp:nil :type (common-lisp:or label-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label-summary 'make-label-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype labels () '(trivial-types:proper-list label))
 (common-lisp:defun make-labels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apikeys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apikeys-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apikeys-request 'make-list-apikeys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apikeys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apikeys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apikeys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apikeys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apikeys-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (apikey-summaries common-lisp:nil :type
    (common-lisp:or apikey-summaries common-lisp:null))
   (application-integration-url common-lisp:nil :type
    (common-lisp:or output-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apikeys-response 'make-list-apikeys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-apikeys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-apikeys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apikey-summaries))
      (common-lisp:list
       (common-lisp:cons "APIKeySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-integration-url))
      (common-lisp:list
       (common-lisp:cons "ApplicationIntegrationURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-apikeys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-available-managed-rule-group-versions-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-available-managed-rule-group-versions-request-"))
   (vendor-name (common-lisp:error ":vendor-name is required") :type
    (common-lisp:or vendor-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-available-managed-rule-group-versions-request
                    'make-list-available-managed-rule-group-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-available-managed-rule-group-versions-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-available-managed-rule-group-versions-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or managed-rule-group-versions common-lisp:null))
   (current-default-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-available-managed-rule-group-versions-response
                    'make-list-available-managed-rule-group-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-default-version))
      (common-lisp:list
       (common-lisp:cons "CurrentDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-group-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-available-managed-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-available-managed-rule-groups-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-available-managed-rule-groups-request
                    'make-list-available-managed-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-available-managed-rule-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-available-managed-rule-groups-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (managed-rule-groups common-lisp:nil :type
    (common-lisp:or managed-rule-group-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-available-managed-rule-groups-response
                    'make-list-available-managed-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-rule-groups))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-managed-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ipsets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ipsets-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-request 'make-list-ipsets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ipsets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ipsets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (ipsets common-lisp:nil :type
    (common-lisp:or ipset-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-response 'make-list-ipsets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipsets))
      (common-lisp:list
       (common-lisp:cons "IPSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-logging-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-logging-configurations-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-logging-configurations-request
                    'make-list-logging-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-logging-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-logging-configurations-response-"))
   (logging-configurations common-lisp:nil :type
    (common-lisp:or logging-configurations common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-logging-configurations-response
                    'make-list-logging-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configurations))
      (common-lisp:list
       (common-lisp:cons "LoggingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-rule-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-rule-sets-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-rule-sets-request
                    'make-list-managed-rule-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-rule-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-rule-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (managed-rule-sets common-lisp:nil :type
    (common-lisp:or managed-rule-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-rule-sets-response
                    'make-list-managed-rule-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-rule-sets))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-rule-sets-response))
   common-lisp:nil))
(common-lisp:deftype list-max-items () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-sdk-releases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mobile-sdk-releases-request-"))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-sdk-releases-request
                    'make-list-mobile-sdk-releases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mobile-sdk-releases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mobile-sdk-releases-response-"))
   (release-summaries common-lisp:nil :type
    (common-lisp:or release-summaries common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mobile-sdk-releases-response
                    'make-list-mobile-sdk-releases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-summaries))
      (common-lisp:list
       (common-lisp:cons "ReleaseSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mobile-sdk-releases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-pattern-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-pattern-sets-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-pattern-sets-request
                    'make-list-regex-pattern-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-pattern-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-pattern-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (regex-pattern-sets common-lisp:nil :type
    (common-lisp:or regex-pattern-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-pattern-sets-response
                    'make-list-regex-pattern-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-pattern-sets))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-for-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-for-web-aclrequest-"))
   (web-aclarn (common-lisp:error ":web-aclarn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-for-web-aclrequest
                    'make-list-resources-for-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclarn))
      (common-lisp:list
       (common-lisp:cons "WebACLArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resources-for-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resources-for-web-aclresponse-"))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resources-for-web-aclresponse
                    'make-list-resources-for-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-for-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-groups-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-request 'make-list-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-groups-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (rule-groups common-lisp:nil :type
    (common-lisp:or rule-group-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-response
                    'make-list-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-groups))
      (common-lisp:list
       (common-lisp:cons "RuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (tag-info-for-resource common-lisp:nil :type
    (common-lisp:or tag-info-for-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-info-for-resource))
      (common-lisp:list
       (common-lisp:cons "TagInfoForResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-acls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-acls-request-"))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-acls-request 'make-list-web-acls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-acls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-acls-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (web-acls common-lisp:nil :type
    (common-lisp:or web-aclsummaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-acls-response 'make-list-web-acls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acls))
      (common-lisp:list
       (common-lisp:cons "WebACLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   common-lisp:nil))
(common-lisp:deftype lock-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-destination-configs ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun make-log-destination-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (logging-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-configuration-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (log-destination-configs
    (common-lisp:error ":log-destination-configs is required") :type
    (common-lisp:or log-destination-configs common-lisp:null))
   (redacted-fields common-lisp:nil :type
    (common-lisp:or redacted-fields common-lisp:null))
   (managed-by-firewall-manager common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (logging-filter common-lisp:nil :type
    (common-lisp:or logging-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-destination-configs))
      (common-lisp:list
       (common-lisp:cons "LogDestinationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redacted-fields))
      (common-lisp:list
       (common-lisp:cons "RedactedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-by-firewall-manager))
      (common-lisp:list
       (common-lisp:cons "ManagedByFirewallManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-filter))
      (common-lisp:list
       (common-lisp:cons "LoggingFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logging-configurations ()
   '(trivial-types:proper-list logging-configuration))
 (common-lisp:defun make-logging-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logging-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (logging-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-filter-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filters common-lisp:null))
   (default-behavior (common-lisp:error ":default-behavior is required") :type
    (common-lisp:or filter-behavior common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging-filter 'make-logging-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-behavior))
      (common-lisp:list
       (common-lisp:cons "DefaultBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-filter))
   common-lisp:nil))
(common-lisp:deftype login-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (managed-product-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-product-descriptor-"))
   (vendor-name common-lisp:nil :type
    (common-lisp:or vendor-name common-lisp:null))
   (managed-rule-set-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or product-id common-lisp:null))
   (product-link common-lisp:nil :type
    (common-lisp:or product-link common-lisp:null))
   (product-title common-lisp:nil :type
    (common-lisp:or product-title common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or product-description common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (is-versioning-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-advanced-managed-rule-set common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-product-descriptor
                    'make-managed-product-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-product-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-product-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-rule-set-name))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-link))
      (common-lisp:list
       (common-lisp:cons "ProductLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-versioning-supported))
      (common-lisp:list
       (common-lisp:cons "IsVersioningSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-advanced-managed-rule-set))
      (common-lisp:list
       (common-lisp:cons "IsAdvancedManagedRuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-product-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-product-descriptors ()
   '(trivial-types:proper-list managed-product-descriptor))
 (common-lisp:defun make-managed-product-descriptors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-product-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-group-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-group-config-"))
   (login-path common-lisp:nil :type
    (common-lisp:or login-path-string common-lisp:null))
   (payload-type common-lisp:nil :type
    (common-lisp:or payload-type common-lisp:null))
   (username-field common-lisp:nil :type
    (common-lisp:or username-field common-lisp:null))
   (password-field common-lisp:nil :type
    (common-lisp:or password-field common-lisp:null))
   (awsmanaged-rules-bot-control-rule-set common-lisp:nil :type
    (common-lisp:or awsmanaged-rules-bot-control-rule-set common-lisp:null))
   (awsmanaged-rules-atprule-set common-lisp:nil :type
    (common-lisp:or awsmanaged-rules-atprule-set common-lisp:null))
   (awsmanaged-rules-acfprule-set common-lisp:nil :type
    (common-lisp:or awsmanaged-rules-acfprule-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-group-config
                    'make-managed-rule-group-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-path))
      (common-lisp:list
       (common-lisp:cons "LoginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-type))
      (common-lisp:list
       (common-lisp:cons "PayloadType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-field))
      (common-lisp:list
       (common-lisp:cons "UsernameField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-field))
      (common-lisp:list
       (common-lisp:cons "PasswordField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsmanaged-rules-bot-control-rule-set))
      (common-lisp:list
       (common-lisp:cons "AWSManagedRulesBotControlRuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsmanaged-rules-atprule-set))
      (common-lisp:list
       (common-lisp:cons "AWSManagedRulesATPRuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsmanaged-rules-acfprule-set))
      (common-lisp:list
       (common-lisp:cons "AWSManagedRulesACFPRuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-rule-group-configs ()
   '(trivial-types:proper-list managed-rule-group-config))
 (common-lisp:defun make-managed-rule-group-configs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-rule-group-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-group-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-group-statement-"))
   (vendor-name (common-lisp:error ":vendor-name is required") :type
    (common-lisp:or vendor-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (excluded-rules common-lisp:nil :type
    (common-lisp:or excluded-rules common-lisp:null))
   (scope-down-statement common-lisp:nil :type
    (common-lisp:or statement common-lisp:null))
   (managed-rule-group-configs common-lisp:nil :type
    (common-lisp:or managed-rule-group-configs common-lisp:null))
   (rule-action-overrides common-lisp:nil :type
    (common-lisp:or rule-action-overrides common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-group-statement
                    'make-managed-rule-group-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-rules))
      (common-lisp:list
       (common-lisp:cons "ExcludedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scope-down-statement))
      (common-lisp:list
       (common-lisp:cons "ScopeDownStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-rule-group-configs))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleGroupConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-action-overrides))
      (common-lisp:list
       (common-lisp:cons "RuleActionOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-rule-group-summaries ()
   '(trivial-types:proper-list managed-rule-group-summary))
 (common-lisp:defun make-managed-rule-group-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-rule-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-group-summary-"))
   (vendor-name common-lisp:nil :type
    (common-lisp:or vendor-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (versioning-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-group-summary
                    'make-managed-rule-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-supported))
      (common-lisp:list
       (common-lisp:cons "VersioningSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-group-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-group-version-"))
   (name common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (last-update-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-group-version
                    'make-managed-rule-group-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-group-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-rule-group-versions ()
   '(trivial-types:proper-list managed-rule-group-version))
 (common-lisp:defun make-managed-rule-group-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-rule-group-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-set-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (published-versions common-lisp:nil :type
    (common-lisp:or published-versions common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or label-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-set 'make-managed-rule-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-rule-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-rule-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'published-versions))
      (common-lisp:list
       (common-lisp:cons "PublishedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "RecommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-rule-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-rule-set-summaries ()
   '(trivial-types:proper-list managed-rule-set-summary))
 (common-lisp:defun make-managed-rule-set-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-rule-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-set-summary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or label-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-set-summary 'make-managed-rule-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-rule-set-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-rule-set-version-"))
   (associated-rule-group-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (capacity common-lisp:nil :type
    (common-lisp:or capacity-unit common-lisp:null))
   (forecasted-lifetime common-lisp:nil :type
    (common-lisp:or time-window-day common-lisp:null))
   (publish-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (expiry-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-rule-set-version 'make-managed-rule-set-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-rule-group-arn))
      (common-lisp:list
       (common-lisp:cons "AssociatedRuleGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecasted-lifetime))
      (common-lisp:list
       (common-lisp:cons "ForecastedLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish-timestamp))
      (common-lisp:list
       (common-lisp:cons "PublishTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-timestamp))
      (common-lisp:list
       (common-lisp:cons "ExpiryTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-rule-set-version))
   common-lisp:nil))
(common-lisp:deftype map-match-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (method (:copier common-lisp:nil) (:conc-name "struct-shape-method-")))
 (common-lisp:export (common-lisp:list 'method 'make-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input method))
   common-lisp:nil))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mobile-sdk-release (:copier common-lisp:nil)
      (:conc-name "struct-shape-mobile-sdk-release-"))
   (release-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (release-notes common-lisp:nil :type
    (common-lisp:or release-notes common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mobile-sdk-release 'make-mobile-sdk-release))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mobile-sdk-release))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mobile-sdk-release))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "ReleaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-notes))
      (common-lisp:list
       (common-lisp:cons "ReleaseNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mobile-sdk-release))
   common-lisp:nil))
(common-lisp:deftype next-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (none-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-none-action-")))
 (common-lisp:export (common-lisp:list 'none-action 'make-none-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input none-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input none-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input none-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (not-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-not-statement-"))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or statement common-lisp:null)))
 (common-lisp:export (common-lisp:list 'not-statement 'make-not-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input not-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input not-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input not-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (or-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-or-statement-"))
   (statements (common-lisp:error ":statements is required") :type
    (common-lisp:or statements common-lisp:null)))
 (common-lisp:export (common-lisp:list 'or-statement 'make-or-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input or-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input or-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input or-statement))
   common-lisp:nil))
(common-lisp:deftype output-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (override-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-override-action-"))
   (count common-lisp:nil :type (common-lisp:or count-action common-lisp:null))
   (none common-lisp:nil :type (common-lisp:or none-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'override-action 'make-override-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input override-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input override-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'none))
      (common-lisp:list
       (common-lisp:cons "None"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input override-action))
   common-lisp:nil))
(common-lisp:deftype oversize-handling () 'common-lisp:string)
(common-lisp:deftype pagination-limit () 'common-lisp:integer)
(common-lisp:deftype parameter-exception-field () 'common-lisp:string)
(common-lisp:deftype parameter-exception-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (password-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-password-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'password-field 'make-password-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-field))
   common-lisp:nil))
(common-lisp:deftype payload-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-field 'make-phone-number-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phone-number-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phone-number-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phone-number-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phone-number-fields ()
   '(trivial-types:proper-list phone-number-field))
 (common-lisp:defun make-phone-number-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phone-number-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:deftype policy-string () 'common-lisp:string)
(common-lisp:deftype population-size () 'common-lisp:integer)
(common-lisp:deftype positional-constraint () 'common-lisp:string)
(common-lisp:deftype product-description () 'common-lisp:string)
(common-lisp:deftype product-id () 'common-lisp:string)
(common-lisp:deftype product-link () 'common-lisp:string)
(common-lisp:deftype product-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype published-versions () 'common-lisp:hash-table)
 (common-lisp:defun make-published-versions
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-configuration-request-"))
   (logging-configuration
    (common-lisp:error ":logging-configuration is required") :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-logging-configuration-request
                    'make-put-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-configuration-response-"))
   (logging-configuration common-lisp:nil :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-logging-configuration-response
                    'make-put-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-managed-rule-set-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-managed-rule-set-versions-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null))
   (recommended-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (versions-to-publish common-lisp:nil :type
    (common-lisp:or versions-to-publish common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-managed-rule-set-versions-request
                    'make-put-managed-rule-set-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "RecommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions-to-publish))
      (common-lisp:list
       (common-lisp:cons "VersionsToPublish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-managed-rule-set-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-managed-rule-set-versions-response-"))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-managed-rule-set-versions-response
                    'make-put-managed-rule-set-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-managed-rule-set-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-permission-policy-request
                    'make-put-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-permission-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'put-permission-policy-response
                    'make-put-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-string (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-string-")))
 (common-lisp:export (common-lisp:list 'query-string 'make-query-string))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-string))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-string))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-string))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-based-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-based-statement-"))
   (limit (common-lisp:error ":limit is required") :type
    (common-lisp:or rate-limit common-lisp:null))
   (evaluation-window-sec common-lisp:nil :type
    (common-lisp:or evaluation-window-sec common-lisp:null))
   (aggregate-key-type (common-lisp:error ":aggregate-key-type is required")
    :type
    (common-lisp:or rate-based-statement-aggregate-key-type common-lisp:null))
   (scope-down-statement common-lisp:nil :type
    (common-lisp:or statement common-lisp:null))
   (forwarded-ipconfig common-lisp:nil :type
    (common-lisp:or forwarded-ipconfig common-lisp:null))
   (custom-keys common-lisp:nil :type
    (common-lisp:or rate-based-statement-custom-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-based-statement 'make-rate-based-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-based-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-based-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-window-sec))
      (common-lisp:list
       (common-lisp:cons "EvaluationWindowSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-key-type))
      (common-lisp:list
       (common-lisp:cons "AggregateKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scope-down-statement))
      (common-lisp:list
       (common-lisp:cons "ScopeDownStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-ipconfig))
      (common-lisp:list
       (common-lisp:cons "ForwardedIPConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-keys))
      (common-lisp:list
       (common-lisp:cons "CustomKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-based-statement))
   common-lisp:nil))
(common-lisp:deftype rate-based-statement-aggregate-key-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rate-based-statement-custom-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-based-statement-custom-key-"))
   (header common-lisp:nil :type
    (common-lisp:or rate-limit-header common-lisp:null))
   (cookie common-lisp:nil :type
    (common-lisp:or rate-limit-cookie common-lisp:null))
   (query-argument common-lisp:nil :type
    (common-lisp:or rate-limit-query-argument common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or rate-limit-query-string common-lisp:null))
   (httpmethod common-lisp:nil :type
    (common-lisp:or rate-limit-httpmethod common-lisp:null))
   (forwarded-ip common-lisp:nil :type
    (common-lisp:or rate-limit-forwarded-ip common-lisp:null))
   (ip common-lisp:nil :type (common-lisp:or rate-limit-ip common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or rate-limit-label-namespace common-lisp:null))
   (uri-path common-lisp:nil :type
    (common-lisp:or rate-limit-uri-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-based-statement-custom-key
                    'make-rate-based-statement-custom-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-custom-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-custom-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie))
      (common-lisp:list
       (common-lisp:cons "Cookie"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-argument))
      (common-lisp:list
       (common-lisp:cons "QueryArgument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpmethod))
      (common-lisp:list
       (common-lisp:cons "HTTPMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-ip))
      (common-lisp:list
       (common-lisp:cons "ForwardedIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "IP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri-path))
      (common-lisp:list
       (common-lisp:cons "UriPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-custom-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rate-based-statement-custom-keys ()
   '(trivial-types:proper-list rate-based-statement-custom-key))
 (common-lisp:defun make-rate-based-statement-custom-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rate-based-statement-custom-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-based-statement-managed-keys-ipset (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-based-statement-managed-keys-ipset-"))
   (ipaddress-version common-lisp:nil :type
    (common-lisp:or ipaddress-version common-lisp:null))
   (addresses common-lisp:nil :type
    (common-lisp:or ipaddresses common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-based-statement-managed-keys-ipset
                    'make-rate-based-statement-managed-keys-ipset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-managed-keys-ipset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-managed-keys-ipset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress-version))
      (common-lisp:list
       (common-lisp:cons "IPAddressVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-based-statement-managed-keys-ipset))
   common-lisp:nil))
(common-lisp:deftype rate-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-cookie (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-cookie-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or field-to-match-data common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-cookie 'make-rate-limit-cookie))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-limit-cookie))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-limit-cookie))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-limit-cookie))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-forwarded-ip (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-forwarded-ip-")))
 (common-lisp:export
  (common-lisp:list 'rate-limit-forwarded-ip 'make-rate-limit-forwarded-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-forwarded-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-forwarded-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-forwarded-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-httpmethod (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-httpmethod-")))
 (common-lisp:export
  (common-lisp:list 'rate-limit-httpmethod 'make-rate-limit-httpmethod))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-httpmethod))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-httpmethod))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-httpmethod))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-header-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or field-to-match-data common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-header 'make-rate-limit-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-limit-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-limit-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-limit-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-ip (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-ip-")))
 (common-lisp:export (common-lisp:list 'rate-limit-ip 'make-rate-limit-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-limit-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-limit-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-limit-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-label-namespace (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-label-namespace-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or label-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-label-namespace
                    'make-rate-limit-label-namespace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-label-namespace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-label-namespace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-label-namespace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-query-argument (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-query-argument-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or field-to-match-data common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-query-argument
                    'make-rate-limit-query-argument))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-argument))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-query-string (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-query-string-"))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-query-string 'make-rate-limit-query-string))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-string))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-string))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rate-limit-query-string))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-limit-uri-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-limit-uri-path-"))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rate-limit-uri-path 'make-rate-limit-uri-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-limit-uri-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-limit-uri-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-limit-uri-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype redacted-fields ()
   '(trivial-types:proper-list field-to-match))
 (common-lisp:defun make-redacted-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-to-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex (:copier common-lisp:nil) (:conc-name "struct-shape-regex-"))
   (regex-string common-lisp:nil :type
    (common-lisp:or regex-pattern-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'regex 'make-regex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-match-statement-"))
   (regex-string (common-lisp:error ":regex-string is required") :type
    (common-lisp:or regex-pattern-string common-lisp:null))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-match-statement 'make-regex-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (regular-expression-list common-lisp:nil :type
    (common-lisp:or regular-expression-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set 'make-regex-pattern-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regular-expression-list))
      (common-lisp:list
       (common-lisp:cons "RegularExpressionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set-reference-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-reference-statement-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set-reference-statement
                    'make-regex-pattern-set-reference-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-reference-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-reference-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-reference-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-pattern-set-summaries ()
   '(trivial-types:proper-list regex-pattern-set-summary))
 (common-lisp:defun make-regex-pattern-set-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            regex-pattern-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-summary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set-summary
                    'make-regex-pattern-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   common-lisp:nil))
(common-lisp:deftype regex-pattern-string () 'common-lisp:string)
(common-lisp:deftype registration-page-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regular-expression-list ()
   '(trivial-types:proper-list regex))
 (common-lisp:defun make-regular-expression-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regex))
   aws-sdk/generator/shape::members))
(common-lisp:deftype release-notes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype release-summaries ()
   '(trivial-types:proper-list release-summary))
 (common-lisp:defun make-release-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list release-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (release-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-summary-"))
   (release-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'release-summary 'make-release-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input release-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input release-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-version))
      (common-lisp:list
       (common-lisp:cons "ReleaseVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input release-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype request-body () 'common-lisp:hash-table)
 (common-lisp:defun make-request-body (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (request-body-associated-resource-type-config (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-request-body-associated-resource-type-config-"))
   (default-size-inspection-limit
    (common-lisp:error ":default-size-inspection-limit is required") :type
    (common-lisp:or size-inspection-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-body-associated-resource-type-config
                    'make-request-body-associated-resource-type-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-body-associated-resource-type-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-body-associated-resource-type-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-size-inspection-limit))
      (common-lisp:list
       (common-lisp:cons "DefaultSizeInspectionLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-body-associated-resource-type-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-inspection (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-inspection-"))
   (payload-type (common-lisp:error ":payload-type is required") :type
    (common-lisp:or payload-type common-lisp:null))
   (username-field (common-lisp:error ":username-field is required") :type
    (common-lisp:or username-field common-lisp:null))
   (password-field (common-lisp:error ":password-field is required") :type
    (common-lisp:or password-field common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-inspection 'make-request-inspection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-inspection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-inspection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-type))
      (common-lisp:list
       (common-lisp:cons "PayloadType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-field))
      (common-lisp:list
       (common-lisp:cons "UsernameField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-field))
      (common-lisp:list
       (common-lisp:cons "PasswordField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-inspection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-inspection-acfp (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-inspection-acfp-"))
   (payload-type (common-lisp:error ":payload-type is required") :type
    (common-lisp:or payload-type common-lisp:null))
   (username-field common-lisp:nil :type
    (common-lisp:or username-field common-lisp:null))
   (password-field common-lisp:nil :type
    (common-lisp:or password-field common-lisp:null))
   (email-field common-lisp:nil :type
    (common-lisp:or email-field common-lisp:null))
   (phone-number-fields common-lisp:nil :type
    (common-lisp:or phone-number-fields common-lisp:null))
   (address-fields common-lisp:nil :type
    (common-lisp:or address-fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-inspection-acfp 'make-request-inspection-acfp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-inspection-acfp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-inspection-acfp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-type))
      (common-lisp:list
       (common-lisp:cons "PayloadType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username-field))
      (common-lisp:list
       (common-lisp:cons "UsernameField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-field))
      (common-lisp:list
       (common-lisp:cons "PasswordField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-field))
      (common-lisp:list
       (common-lisp:cons "EmailField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number-fields))
      (common-lisp:list
       (common-lisp:cons "PhoneNumberFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-fields))
      (common-lisp:list
       (common-lisp:cons "AddressFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-inspection-acfp))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arns ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun make-resource-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response-code () 'common-lisp:integer)
(common-lisp:deftype response-content () 'common-lisp:string)
(common-lisp:deftype response-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (response-inspection (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-inspection-"))
   (status-code common-lisp:nil :type
    (common-lisp:or response-inspection-status-code common-lisp:null))
   (header common-lisp:nil :type
    (common-lisp:or response-inspection-header common-lisp:null))
   (body-contains common-lisp:nil :type
    (common-lisp:or response-inspection-body-contains common-lisp:null))
   (json common-lisp:nil :type
    (common-lisp:or response-inspection-json common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'response-inspection 'make-response-inspection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-inspection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-inspection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-contains))
      (common-lisp:list
       (common-lisp:cons "BodyContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "Json"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-inspection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (response-inspection-body-contains (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-inspection-body-contains-"))
   (success-strings (common-lisp:error ":success-strings is required") :type
    (common-lisp:or response-inspection-body-contains-success-strings
                    common-lisp:null))
   (failure-strings (common-lisp:error ":failure-strings is required") :type
    (common-lisp:or response-inspection-body-contains-failure-strings
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'response-inspection-body-contains
                    'make-response-inspection-body-contains))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-body-contains))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-body-contains))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-strings))
      (common-lisp:list
       (common-lisp:cons "SuccessStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-strings))
      (common-lisp:list
       (common-lisp:cons "FailureStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-body-contains))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-inspection-body-contains-failure-strings ()
   '(trivial-types:proper-list failure-value))
 (common-lisp:defun make-response-inspection-body-contains-failure-strings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype response-inspection-body-contains-success-strings ()
   '(trivial-types:proper-list success-value))
 (common-lisp:defun make-response-inspection-body-contains-success-strings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list success-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (response-inspection-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-inspection-header-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or response-inspection-header-name common-lisp:null))
   (success-values (common-lisp:error ":success-values is required") :type
    (common-lisp:or response-inspection-header-success-values
                    common-lisp:null))
   (failure-values (common-lisp:error ":failure-values is required") :type
    (common-lisp:or response-inspection-header-failure-values
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'response-inspection-header
                    'make-response-inspection-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-values))
      (common-lisp:list
       (common-lisp:cons "SuccessValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-values))
      (common-lisp:list
       (common-lisp:cons "FailureValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-inspection-header-failure-values ()
   '(trivial-types:proper-list failure-value))
 (common-lisp:defun make-response-inspection-header-failure-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype response-inspection-header-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-inspection-header-success-values ()
   '(trivial-types:proper-list success-value))
 (common-lisp:defun make-response-inspection-header-success-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list success-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (response-inspection-json (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-inspection-json-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null))
   (success-values (common-lisp:error ":success-values is required") :type
    (common-lisp:or response-inspection-json-success-values common-lisp:null))
   (failure-values (common-lisp:error ":failure-values is required") :type
    (common-lisp:or response-inspection-json-failure-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'response-inspection-json 'make-response-inspection-json))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-json))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-json))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-values))
      (common-lisp:list
       (common-lisp:cons "SuccessValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-values))
      (common-lisp:list
       (common-lisp:cons "FailureValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-json))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-inspection-json-failure-values ()
   '(trivial-types:proper-list failure-value))
 (common-lisp:defun make-response-inspection-json-failure-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype response-inspection-json-success-values ()
   '(trivial-types:proper-list success-value))
 (common-lisp:defun make-response-inspection-json-success-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list success-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (response-inspection-status-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-response-inspection-status-code-"))
   (success-codes (common-lisp:error ":success-codes is required") :type
    (common-lisp:or response-inspection-status-code-success-codes
                    common-lisp:null))
   (failure-codes (common-lisp:error ":failure-codes is required") :type
    (common-lisp:or response-inspection-status-code-failure-codes
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'response-inspection-status-code
                    'make-response-inspection-status-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-status-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-status-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-codes))
      (common-lisp:list
       (common-lisp:cons "SuccessCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-codes))
      (common-lisp:list
       (common-lisp:cons "FailureCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-inspection-status-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-inspection-status-code-failure-codes ()
   '(trivial-types:proper-list failure-code))
 (common-lisp:defun make-response-inspection-status-code-failure-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype response-inspection-status-code-success-codes ()
   '(trivial-types:proper-list success-code))
 (common-lisp:defun make-response-inspection-status-code-success-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list success-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype response-status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or rule-priority common-lisp:null))
   (statement (common-lisp:error ":statement is required") :type
    (common-lisp:or statement common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or rule-action common-lisp:null))
   (override-action common-lisp:nil :type
    (common-lisp:or override-action common-lisp:null))
   (rule-labels common-lisp:nil :type (common-lisp:or labels common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (captcha-config common-lisp:nil :type
    (common-lisp:or captcha-config common-lisp:null))
   (challenge-config common-lisp:nil :type
    (common-lisp:or challenge-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-labels))
      (common-lisp:list
       (common-lisp:cons "RuleLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-config))
      (common-lisp:list
       (common-lisp:cons "ChallengeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-action-"))
   (block common-lisp:nil :type (common-lisp:or block-action common-lisp:null))
   (allow common-lisp:nil :type (common-lisp:or allow-action common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or count-action common-lisp:null))
   (captcha common-lisp:nil :type
    (common-lisp:or captcha-action common-lisp:null))
   (challenge common-lisp:nil :type
    (common-lisp:or challenge-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-action 'make-rule-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha))
      (common-lisp:list
       (common-lisp:cons "Captcha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge))
      (common-lisp:list
       (common-lisp:cons "Challenge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-action-override (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-action-override-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (action-to-use (common-lisp:error ":action-to-use is required") :type
    (common-lisp:or rule-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-action-override 'make-rule-action-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-action-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-action-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-to-use))
      (common-lisp:list
       (common-lisp:cons "ActionToUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-action-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-action-overrides ()
   '(trivial-types:proper-list rule-action-override))
 (common-lisp:defun make-rule-action-overrides
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-action-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (capacity (common-lisp:error ":capacity is required") :type
    (common-lisp:or capacity-unit common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or label-name common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null))
   (available-labels common-lisp:nil :type
    (common-lisp:or label-summaries common-lisp:null))
   (consumed-labels common-lisp:nil :type
    (common-lisp:or label-summaries common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-group 'make-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-labels))
      (common-lisp:list
       (common-lisp:cons "AvailableLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-labels))
      (common-lisp:list
       (common-lisp:cons "ConsumedLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-reference-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-reference-statement-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (excluded-rules common-lisp:nil :type
    (common-lisp:or excluded-rules common-lisp:null))
   (rule-action-overrides common-lisp:nil :type
    (common-lisp:or rule-action-overrides common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-reference-statement
                    'make-rule-group-reference-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-reference-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-reference-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-rules))
      (common-lisp:list
       (common-lisp:cons "ExcludedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-action-overrides))
      (common-lisp:list
       (common-lisp:cons "RuleActionOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-reference-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-summaries ()
   '(trivial-types:proper-list rule-group-summary))
 (common-lisp:defun make-rule-group-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-summary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-summary 'make-rule-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-summary))
   common-lisp:nil))
(common-lisp:deftype rule-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype rule-summaries ()
   '(trivial-types:proper-list rule-summary))
 (common-lisp:defun make-rule-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-summary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or rule-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-summary 'make-rule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sample-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (sampled-httprequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-sampled-httprequest-"))
   (request (common-lisp:error ":request is required") :type
    (common-lisp:or httprequest common-lisp:null))
   (weight (common-lisp:error ":weight is required") :type
    (common-lisp:or sample-weight common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (rule-name-within-rule-group common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (request-headers-inserted common-lisp:nil :type
    (common-lisp:or httpheaders common-lisp:null))
   (response-code-sent common-lisp:nil :type
    (common-lisp:or response-status-code common-lisp:null))
   (labels common-lisp:nil :type (common-lisp:or labels common-lisp:null))
   (captcha-response common-lisp:nil :type
    (common-lisp:or captcha-response common-lisp:null))
   (challenge-response common-lisp:nil :type
    (common-lisp:or challenge-response common-lisp:null))
   (overridden-action common-lisp:nil :type
    (common-lisp:or action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sampled-httprequest 'make-sampled-httprequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "Request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-name-within-rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleNameWithinRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-headers-inserted))
      (common-lisp:list
       (common-lisp:cons "RequestHeadersInserted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code-sent))
      (common-lisp:list
       (common-lisp:cons "ResponseCodeSent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-response))
      (common-lisp:list
       (common-lisp:cons "CaptchaResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-response))
      (common-lisp:list
       (common-lisp:cons "ChallengeResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overridden-action))
      (common-lisp:list
       (common-lisp:cons "OverriddenAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampled-httprequests ()
   '(trivial-types:proper-list sampled-httprequest))
 (common-lisp:defun make-sampled-httprequests
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sampled-httprequest))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:deftype search-string ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype sensitivity-level () 'common-lisp:string)
(common-lisp:deftype single-cookie-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (single-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-single-header-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or field-to-match-data common-lisp:null)))
 (common-lisp:export (common-lisp:list 'single-header 'make-single-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input single-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input single-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input single-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (single-query-argument (:copier common-lisp:nil)
      (:conc-name "struct-shape-single-query-argument-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or field-to-match-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'single-query-argument 'make-single-query-argument))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          single-query-argument))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          single-query-argument))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          single-query-argument))
   common-lisp:nil))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (size-constraint-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-size-constraint-statement-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or comparison-operator common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or size common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'size-constraint-statement
                    'make-size-constraint-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-statement))
   common-lisp:nil))
(common-lisp:deftype size-inspection-limit () 'common-lisp:string)
(common-lisp:deftype solve-timestamp () 'common-lisp:integer)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sqli-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-sqli-match-statement-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null))
   (sensitivity-level common-lisp:nil :type
    (common-lisp:or sensitivity-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sqli-match-statement 'make-sqli-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqli-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqli-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitivity-level))
      (common-lisp:list
       (common-lisp:cons "SensitivityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqli-match-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-"))
   (byte-match-statement common-lisp:nil :type
    (common-lisp:or byte-match-statement common-lisp:null))
   (sqli-match-statement common-lisp:nil :type
    (common-lisp:or sqli-match-statement common-lisp:null))
   (xss-match-statement common-lisp:nil :type
    (common-lisp:or xss-match-statement common-lisp:null))
   (size-constraint-statement common-lisp:nil :type
    (common-lisp:or size-constraint-statement common-lisp:null))
   (geo-match-statement common-lisp:nil :type
    (common-lisp:or geo-match-statement common-lisp:null))
   (rule-group-reference-statement common-lisp:nil :type
    (common-lisp:or rule-group-reference-statement common-lisp:null))
   (ipset-reference-statement common-lisp:nil :type
    (common-lisp:or ipset-reference-statement common-lisp:null))
   (regex-pattern-set-reference-statement common-lisp:nil :type
    (common-lisp:or regex-pattern-set-reference-statement common-lisp:null))
   (rate-based-statement common-lisp:nil :type
    (common-lisp:or rate-based-statement common-lisp:null))
   (and-statement common-lisp:nil :type
    (common-lisp:or and-statement common-lisp:null))
   (or-statement common-lisp:nil :type
    (common-lisp:or or-statement common-lisp:null))
   (not-statement common-lisp:nil :type
    (common-lisp:or not-statement common-lisp:null))
   (managed-rule-group-statement common-lisp:nil :type
    (common-lisp:or managed-rule-group-statement common-lisp:null))
   (label-match-statement common-lisp:nil :type
    (common-lisp:or label-match-statement common-lisp:null))
   (regex-match-statement common-lisp:nil :type
    (common-lisp:or regex-match-statement common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'byte-match-statement))
      (common-lisp:list
       (common-lisp:cons "ByteMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqli-match-statement))
      (common-lisp:list
       (common-lisp:cons "SqliMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-statement))
      (common-lisp:list
       (common-lisp:cons "XssMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-statement))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-statement))
      (common-lisp:list
       (common-lisp:cons "GeoMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-group-reference-statement))
      (common-lisp:list
       (common-lisp:cons "RuleGroupReferenceStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipset-reference-statement))
      (common-lisp:list
       (common-lisp:cons "IPSetReferenceStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-reference-statement))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetReferenceStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rate-based-statement))
      (common-lisp:list
       (common-lisp:cons "RateBasedStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and-statement))
      (common-lisp:list
       (common-lisp:cons "AndStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or-statement))
      (common-lisp:list
       (common-lisp:cons "OrStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-statement))
      (common-lisp:list
       (common-lisp:cons "NotStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-rule-group-statement))
      (common-lisp:list
       (common-lisp:cons "ManagedRuleGroupStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-match-statement))
      (common-lisp:list
       (common-lisp:cons "LabelMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-match-statement))
      (common-lisp:list
       (common-lisp:cons "RegexMatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statements () '(trivial-types:proper-list statement))
 (common-lisp:defun make-statements
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype success-code () 'common-lisp:integer)
(common-lisp:deftype success-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-info-for-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-info-for-resource-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-info-for-resource 'make-tag-info-for-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-transformation (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-transformation-"))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or text-transformation-priority common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or text-transformation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-transformation 'make-text-transformation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-transformation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-transformation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-transformation))
   common-lisp:nil))
(common-lisp:deftype text-transformation-priority () 'common-lisp:integer)
(common-lisp:deftype text-transformation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype text-transformations ()
   '(trivial-types:proper-list text-transformation))
 (common-lisp:defun make-text-transformations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text-transformation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (time-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-window-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-window 'make-time-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-window))
   common-lisp:nil))
(common-lisp:deftype time-window-day () 'common-lisp:integer)
(common-lisp:deftype time-window-second () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype token-domains ()
   '(trivial-types:proper-list token-domain))
 (common-lisp:defun make-token-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uristring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ipset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (addresses (common-lisp:error ":addresses is required") :type
    (common-lisp:or ipaddresses common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ipset-request 'make-update-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ipset-response-"))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ipset-response 'make-update-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-managed-rule-set-version-expiry-date-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-managed-rule-set-version-expiry-date-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null))
   (version-to-expire (common-lisp:error ":version-to-expire is required")
    :type (common-lisp:or version-key-string common-lisp:null))
   (expiry-timestamp (common-lisp:error ":expiry-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-managed-rule-set-version-expiry-date-request
                    'make-update-managed-rule-set-version-expiry-date-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-to-expire))
      (common-lisp:list
       (common-lisp:cons "VersionToExpire"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-timestamp))
      (common-lisp:list
       (common-lisp:cons "ExpiryTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-managed-rule-set-version-expiry-date-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-managed-rule-set-version-expiry-date-response-"))
   (expiring-version common-lisp:nil :type
    (common-lisp:or version-key-string common-lisp:null))
   (expiry-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-managed-rule-set-version-expiry-date-response
                    'make-update-managed-rule-set-version-expiry-date-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiring-version))
      (common-lisp:list
       (common-lisp:cons "ExpiringVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-timestamp))
      (common-lisp:list
       (common-lisp:cons "ExpiryTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-rule-set-version-expiry-date-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-pattern-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (regular-expression-list
    (common-lisp:error ":regular-expression-list is required") :type
    (common-lisp:or regular-expression-list common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-pattern-set-request
                    'make-update-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regular-expression-list))
      (common-lisp:list
       (common-lisp:cons "RegularExpressionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-pattern-set-response-"))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-pattern-set-response
                    'make-update-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-group-request
                    'make-update-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-group-response-"))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-group-response
                    'make-update-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-aclrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (scope (common-lisp:error ":scope is required") :type
    (common-lisp:or scope common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (default-action (common-lisp:error ":default-action is required") :type
    (common-lisp:or default-action common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (lock-token (common-lisp:error ":lock-token is required") :type
    (common-lisp:or lock-token common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null))
   (captcha-config common-lisp:nil :type
    (common-lisp:or captcha-config common-lisp:null))
   (challenge-config common-lisp:nil :type
    (common-lisp:or challenge-config common-lisp:null))
   (token-domains common-lisp:nil :type
    (common-lisp:or token-domains common-lisp:null))
   (association-config common-lisp:nil :type
    (common-lisp:or association-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-web-aclrequest 'make-update-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-config))
      (common-lisp:list
       (common-lisp:cons "ChallengeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-config))
      (common-lisp:list
       (common-lisp:cons "AssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-aclresponse-"))
   (next-lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-web-aclresponse 'make-update-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-lock-token))
      (common-lisp:list
       (common-lisp:cons "NextLockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (uri-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-uri-path-")))
 (common-lisp:export (common-lisp:list 'uri-path 'make-uri-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uri-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uri-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uri-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (username-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-username-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or field-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'username-field 'make-username-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input username-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input username-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input username-field))
   common-lisp:nil))
(common-lisp:deftype vendor-name () 'common-lisp:string)
(common-lisp:deftype version-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (version-to-publish (:copier common-lisp:nil)
      (:conc-name "struct-shape-version-to-publish-"))
   (associated-rule-group-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (forecasted-lifetime common-lisp:nil :type
    (common-lisp:or time-window-day common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-to-publish 'make-version-to-publish))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-to-publish))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-to-publish))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-rule-group-arn))
      (common-lisp:list
       (common-lisp:cons "AssociatedRuleGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecasted-lifetime))
      (common-lisp:list
       (common-lisp:cons "ForecastedLifetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-to-publish))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype versions-to-publish () 'common-lisp:hash-table)
 (common-lisp:defun make-versions-to-publish
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (visibility-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-visibility-config-"))
   (sampled-requests-enabled
    (common-lisp:error ":sampled-requests-enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-metrics-enabled
    (common-lisp:error ":cloud-watch-metrics-enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visibility-config 'make-visibility-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visibility-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visibility-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampled-requests-enabled))
      (common-lisp:list
       (common-lisp:cons "SampledRequestsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visibility-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition wafassociated-item-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafassociated-item-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafassociated-item-exception
                    'wafassociated-item-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafconfiguration-warning-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafconfiguration-warning-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafconfiguration-warning-exception
                    'wafconfiguration-warning-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafduplicate-item-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafduplicate-item-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafduplicate-item-exception
                    'wafduplicate-item-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafexpired-managed-rule-group-version-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafexpired-managed-rule-group-version-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafexpired-managed-rule-group-version-exception
                    'wafexpired-managed-rule-group-version-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinternal-error-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinternal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinternal-error-exception
                    'wafinternal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-operation-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-operation-exception
                    'wafinvalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-parameter-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-message)
      (field :initarg :field :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-field)
      (parameter :initarg :parameter :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-parameter)
      (reason :initarg :reason :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-parameter-exception
                    'wafinvalid-parameter-exception-message
                    'wafinvalid-parameter-exception-field
                    'wafinvalid-parameter-exception-parameter
                    'wafinvalid-parameter-exception-reason)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-permission-policy-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-permission-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-permission-policy-exception
                    'wafinvalid-permission-policy-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-resource-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-resource-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-resource-exception
                    'wafinvalid-resource-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waflimits-exceeded-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waflimits-exceeded-exception-message)
      (source-type :initarg :source-type :initform common-lisp:nil :reader
       waflimits-exceeded-exception-source-type)))
 (common-lisp:export
  (common-lisp:list 'waflimits-exceeded-exception
                    'waflimits-exceeded-exception-message
                    'waflimits-exceeded-exception-source-type)))
(common-lisp:progn
 (common-lisp:define-condition waflog-destination-permission-issue-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waflog-destination-permission-issue-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waflog-destination-permission-issue-exception
                    'waflog-destination-permission-issue-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafnonexistent-item-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafnonexistent-item-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafnonexistent-item-exception
                    'wafnonexistent-item-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafoptimistic-lock-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafoptimistic-lock-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafoptimistic-lock-exception
                    'wafoptimistic-lock-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafservice-linked-role-error-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafservice-linked-role-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafservice-linked-role-error-exception
                    'wafservice-linked-role-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafsubscription-not-found-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafsubscription-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafsubscription-not-found-exception
                    'wafsubscription-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waftag-operation-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waftag-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waftag-operation-exception
                    'waftag-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waftag-operation-internal-error-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waftag-operation-internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waftag-operation-internal-error-exception
                    'waftag-operation-internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafunavailable-entity-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafunavailable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafunavailable-entity-exception
                    'wafunavailable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafunsupported-aggregate-key-type-exception
     (wafv2-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafunsupported-aggregate-key-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafunsupported-aggregate-key-type-exception
                    'wafunsupported-aggregate-key-type-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (web-acl (:copier common-lisp:nil) (:conc-name "struct-shape-web-acl-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or entity-id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (default-action (common-lisp:error ":default-action is required") :type
    (common-lisp:or default-action common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null))
   (visibility-config (common-lisp:error ":visibility-config is required")
    :type (common-lisp:or visibility-config common-lisp:null))
   (capacity common-lisp:nil :type
    (common-lisp:or consumed-capacity common-lisp:null))
   (pre-process-firewall-manager-rule-groups common-lisp:nil :type
    (common-lisp:or firewall-manager-rule-groups common-lisp:null))
   (post-process-firewall-manager-rule-groups common-lisp:nil :type
    (common-lisp:or firewall-manager-rule-groups common-lisp:null))
   (managed-by-firewall-manager common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (label-namespace common-lisp:nil :type
    (common-lisp:or label-name common-lisp:null))
   (custom-response-bodies common-lisp:nil :type
    (common-lisp:or custom-response-bodies common-lisp:null))
   (captcha-config common-lisp:nil :type
    (common-lisp:or captcha-config common-lisp:null))
   (challenge-config common-lisp:nil :type
    (common-lisp:or challenge-config common-lisp:null))
   (token-domains common-lisp:nil :type
    (common-lisp:or token-domains common-lisp:null))
   (association-config common-lisp:nil :type
    (common-lisp:or association-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-acl 'make-web-acl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-acl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-acl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-process-firewall-manager-rule-groups))
      (common-lisp:list
       (common-lisp:cons "PreProcessFirewallManagerRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-process-firewall-manager-rule-groups))
      (common-lisp:list
       (common-lisp:cons "PostProcessFirewallManagerRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-by-firewall-manager))
      (common-lisp:list
       (common-lisp:cons "ManagedByFirewallManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-namespace))
      (common-lisp:list
       (common-lisp:cons "LabelNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-bodies))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-config))
      (common-lisp:list
       (common-lisp:cons "ChallengeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-domains))
      (common-lisp:list
       (common-lisp:cons "TokenDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-config))
      (common-lisp:list
       (common-lisp:cons "AssociationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-acl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype web-aclsummaries ()
   '(trivial-types:proper-list web-aclsummary))
 (common-lisp:defun make-web-aclsummaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list web-aclsummary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (web-aclsummary (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-aclsummary-"))
   (name common-lisp:nil :type (common-lisp:or entity-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or entity-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (lock-token common-lisp:nil :type
    (common-lisp:or lock-token common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-aclsummary 'make-web-aclsummary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-aclsummary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-aclsummary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lock-token))
      (common-lisp:list
       (common-lisp:cons "LockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-aclsummary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (xss-match-statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-xss-match-statement-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformations
    (common-lisp:error ":text-transformations is required") :type
    (common-lisp:or text-transformations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'xss-match-statement 'make-xss-match-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xss-match-statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xss-match-statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-transformations))
      (common-lisp:list
       (common-lisp:cons "TextTransformations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xss-match-statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclarn resource-arn)
   (common-lisp:declare (common-lisp:ignorable web-aclarn resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-web-acl))
(common-lisp:progn
 (common-lisp:defun check-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope rules)
   (common-lisp:declare (common-lisp:ignorable scope rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-capacity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CheckCapacity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-capacity))
(common-lisp:progn
 (common-lisp:defun create-apikey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope token-domains)
   (common-lisp:declare (common-lisp:ignorable scope token-domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-apikey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAPIKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-apikey))
(common-lisp:progn
 (common-lisp:defun create-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope description ipaddress-version
                     addresses tags)
   (common-lisp:declare
    (common-lisp:ignorable name scope description ipaddress-version addresses
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateIPSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ipset))
(common-lisp:progn
 (common-lisp:defun create-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope description
                     regular-expression-list tags)
   (common-lisp:declare
    (common-lisp:ignorable name scope description regular-expression-list
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRegexPatternSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun create-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope capacity description rules
                     visibility-config tags custom-response-bodies)
   (common-lisp:declare
    (common-lisp:ignorable name scope capacity description rules
     visibility-config tags custom-response-bodies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule-group))
(common-lisp:progn
 (common-lisp:defun create-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope default-action description
                     rules visibility-config tags custom-response-bodies
                     captcha-config challenge-config token-domains
                     association-config)
   (common-lisp:declare
    (common-lisp:ignorable name scope default-action description rules
     visibility-config tags custom-response-bodies captcha-config
     challenge-config token-domains association-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-web-acl))
(common-lisp:progn
 (common-lisp:defun delete-apikey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope apikey)
   (common-lisp:declare (common-lisp:ignorable scope apikey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-apikey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAPIKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apikey))
(common-lisp:progn
 (common-lisp:defun delete-firewall-manager-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclarn web-acllock-token)
   (common-lisp:declare (common-lisp:ignorable web-aclarn web-acllock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-firewall-manager-rule-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFirewallManagerRuleGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-firewall-manager-rule-groups))
(common-lisp:progn
 (common-lisp:defun delete-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token)
   (common-lisp:declare (common-lisp:ignorable name scope id lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIPSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ipset))
(common-lisp:progn
 (common-lisp:defun delete-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-logging-configuration))
(common-lisp:progn
 (common-lisp:defun delete-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePermissionPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-permission-policy))
(common-lisp:progn
 (common-lisp:defun delete-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token)
   (common-lisp:declare (common-lisp:ignorable name scope id lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRegexPatternSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun delete-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token)
   (common-lisp:declare (common-lisp:ignorable name scope id lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule-group))
(common-lisp:progn
 (common-lisp:defun delete-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token)
   (common-lisp:declare (common-lisp:ignorable name scope id lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-web-acl))
(common-lisp:progn
 (common-lisp:defun describe-all-managed-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope)
   (common-lisp:declare (common-lisp:ignorable scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-all-managed-products-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAllManagedProducts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-all-managed-products))
(common-lisp:progn
 (common-lisp:defun describe-managed-products-by-vendor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vendor-name scope)
   (common-lisp:declare (common-lisp:ignorable vendor-name scope))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-managed-products-by-vendor-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeManagedProductsByVendor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-managed-products-by-vendor))
(common-lisp:progn
 (common-lisp:defun describe-managed-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vendor-name name scope version-name)
   (common-lisp:declare
    (common-lisp:ignorable vendor-name name scope version-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-managed-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeManagedRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-managed-rule-group))
(common-lisp:progn
 (common-lisp:defun disassociate-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-web-acl))
(common-lisp:progn
 (common-lisp:defun generate-mobile-sdk-release-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform release-version)
   (common-lisp:declare (common-lisp:ignorable platform release-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-mobile-sdk-release-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateMobileSdkReleaseUrl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-mobile-sdk-release-url))
(common-lisp:progn
 (common-lisp:defun get-decrypted-apikey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope apikey)
   (common-lisp:declare (common-lisp:ignorable scope apikey))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-decrypted-apikey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDecryptedAPIKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-decrypted-apikey))
(common-lisp:progn
 (common-lisp:defun get-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id)
   (common-lisp:declare (common-lisp:ignorable name scope id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetIPSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ipset))
(common-lisp:progn
 (common-lisp:defun get-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-logging-configuration))
(common-lisp:progn
 (common-lisp:defun get-managed-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id)
   (common-lisp:declare (common-lisp:ignorable name scope id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-managed-rule-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetManagedRuleSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-managed-rule-set))
(common-lisp:progn
 (common-lisp:defun get-mobile-sdk-release
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform release-version)
   (common-lisp:declare (common-lisp:ignorable platform release-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mobile-sdk-release-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMobileSdkRelease"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mobile-sdk-release))
(common-lisp:progn
 (common-lisp:defun get-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPermissionPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-permission-policy))
(common-lisp:progn
 (common-lisp:defun get-rate-based-statement-managed-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope web-aclname web-aclid
                     rule-group-rule-name rule-name)
   (common-lisp:declare
    (common-lisp:ignorable scope web-aclname web-aclid rule-group-rule-name
     rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-rate-based-statement-managed-keys-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRateBasedStatementManagedKeys"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rate-based-statement-managed-keys))
(common-lisp:progn
 (common-lisp:defun get-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id)
   (common-lisp:declare (common-lisp:ignorable name scope id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegexPatternSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun get-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id arn)
   (common-lisp:declare (common-lisp:ignorable name scope id arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rule-group))
(common-lisp:progn
 (common-lisp:defun get-sampled-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-acl-arn rule-metric-name scope
                     time-window max-items)
   (common-lisp:declare
    (common-lisp:ignorable web-acl-arn rule-metric-name scope time-window
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sampled-requests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSampledRequests"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sampled-requests))
(common-lisp:progn
 (common-lisp:defun get-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id)
   (common-lisp:declare (common-lisp:ignorable name scope id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-web-acl))
(common-lisp:progn
 (common-lisp:defun get-web-aclfor-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-web-aclfor-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWebACLForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-web-aclfor-resource))
(common-lisp:progn
 (common-lisp:defun list-apikeys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apikeys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAPIKeys"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apikeys))
(common-lisp:progn
 (common-lisp:defun list-available-managed-rule-group-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vendor-name name scope next-marker limit)
   (common-lisp:declare
    (common-lisp:ignorable vendor-name name scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-available-managed-rule-group-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAvailableManagedRuleGroupVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-available-managed-rule-group-versions))
(common-lisp:progn
 (common-lisp:defun list-available-managed-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-available-managed-rule-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAvailableManagedRuleGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-available-managed-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-ipsets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ipsets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListIPSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ipsets))
(common-lisp:progn
 (common-lisp:defun list-logging-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-logging-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLoggingConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-logging-configurations))
(common-lisp:progn
 (common-lisp:defun list-managed-rule-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-managed-rule-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListManagedRuleSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-rule-sets))
(common-lisp:progn
 (common-lisp:defun list-mobile-sdk-releases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key platform next-marker limit)
   (common-lisp:declare (common-lisp:ignorable platform next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mobile-sdk-releases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMobileSdkReleases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mobile-sdk-releases))
(common-lisp:progn
 (common-lisp:defun list-regex-pattern-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regex-pattern-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRegexPatternSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-regex-pattern-sets))
(common-lisp:progn
 (common-lisp:defun list-resources-for-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclarn resource-type)
   (common-lisp:declare (common-lisp:ignorable web-aclarn resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resources-for-web-aclrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourcesForWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resources-for-web-acl))
(common-lisp:progn
 (common-lisp:defun list-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rule-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRuleGroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit resource-arn)
   (common-lisp:declare (common-lisp:ignorable next-marker limit resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-web-acls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope next-marker limit)
   (common-lisp:declare (common-lisp:ignorable scope next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-web-acls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWebACLs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-web-acls))
(common-lisp:progn
 (common-lisp:defun put-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-configuration)
   (common-lisp:declare (common-lisp:ignorable logging-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLoggingConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-logging-configuration))
(common-lisp:progn
 (common-lisp:defun put-managed-rule-set-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token
                     recommended-version versions-to-publish)
   (common-lisp:declare
    (common-lisp:ignorable name scope id lock-token recommended-version
     versions-to-publish))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-managed-rule-set-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutManagedRuleSetVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-managed-rule-set-versions))
(common-lisp:progn
 (common-lisp:defun put-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutPermissionPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-permission-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id description addresses
                     lock-token)
   (common-lisp:declare
    (common-lisp:ignorable name scope id description addresses lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateIPSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ipset))
(common-lisp:progn
 (common-lisp:defun update-managed-rule-set-version-expiry-date
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id lock-token
                     version-to-expire expiry-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable name scope id lock-token version-to-expire
     expiry-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-managed-rule-set-version-expiry-date-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateManagedRuleSetVersionExpiryDate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-managed-rule-set-version-expiry-date))
(common-lisp:progn
 (common-lisp:defun update-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id description
                     regular-expression-list lock-token)
   (common-lisp:declare
    (common-lisp:ignorable name scope id description regular-expression-list
     lock-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRegexPatternSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun update-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id description rules
                     visibility-config lock-token custom-response-bodies)
   (common-lisp:declare
    (common-lisp:ignorable name scope id description rules visibility-config
     lock-token custom-response-bodies))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRuleGroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-group))
(common-lisp:progn
 (common-lisp:defun update-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name scope id default-action description
                     rules visibility-config lock-token custom-response-bodies
                     captcha-config challenge-config token-domains
                     association-config)
   (common-lisp:declare
    (common-lisp:ignorable name scope id default-action description rules
     visibility-config lock-token custom-response-bodies captcha-config
     challenge-config token-domains association-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'wafv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWebACL"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-web-acl))
