;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codedeploy/api
  (:use)
  (:nicknames #:aws/codedeploy)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codedeploy/api)
(common-lisp:progn
 (common-lisp:defclass codedeploy-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codedeploy" :protocol
                        :json))
 (common-lisp:export 'codedeploy-request))
(common-lisp:progn
 (common-lisp:define-condition codedeploy-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codedeploy-error))
(common-lisp:defvar *error-map*
  '(("AlarmsLimitExceededException" . alarms-limit-exceeded-exception)
    ("ApplicationAlreadyExistsException"
     . application-already-exists-exception)
    ("ApplicationDoesNotExistException" . application-does-not-exist-exception)
    ("ApplicationLimitExceededException"
     . application-limit-exceeded-exception)
    ("ApplicationNameRequiredException" . application-name-required-exception)
    ("ArnNotSupportedException" . arn-not-supported-exception)
    ("BatchLimitExceededException" . batch-limit-exceeded-exception)
    ("BucketNameFilterRequiredException"
     . bucket-name-filter-required-exception)
    ("DeploymentAlreadyCompletedException"
     . deployment-already-completed-exception)
    ("DeploymentAlreadyStartedException"
     . deployment-already-started-exception)
    ("DeploymentConfigAlreadyExistsException"
     . deployment-config-already-exists-exception)
    ("DeploymentConfigDoesNotExistException"
     . deployment-config-does-not-exist-exception)
    ("DeploymentConfigInUseException" . deployment-config-in-use-exception)
    ("DeploymentConfigLimitExceededException"
     . deployment-config-limit-exceeded-exception)
    ("DeploymentConfigNameRequiredException"
     . deployment-config-name-required-exception)
    ("DeploymentDoesNotExistException" . deployment-does-not-exist-exception)
    ("DeploymentGroupAlreadyExistsException"
     . deployment-group-already-exists-exception)
    ("DeploymentGroupDoesNotExistException"
     . deployment-group-does-not-exist-exception)
    ("DeploymentGroupLimitExceededException"
     . deployment-group-limit-exceeded-exception)
    ("DeploymentGroupNameRequiredException"
     . deployment-group-name-required-exception)
    ("DeploymentIdRequiredException" . deployment-id-required-exception)
    ("DeploymentIsNotInReadyStateException"
     . deployment-is-not-in-ready-state-exception)
    ("DeploymentLimitExceededException" . deployment-limit-exceeded-exception)
    ("DeploymentNotStartedException" . deployment-not-started-exception)
    ("DeploymentTargetDoesNotExistException"
     . deployment-target-does-not-exist-exception)
    ("DeploymentTargetIdRequiredException"
     . deployment-target-id-required-exception)
    ("DeploymentTargetListSizeExceededException"
     . deployment-target-list-size-exceeded-exception)
    ("DescriptionTooLongException" . description-too-long-exception)
    ("ECSServiceMappingLimitExceededException"
     . ecsservice-mapping-limit-exceeded-exception)
    ("GitHubAccountTokenDoesNotExistException"
     . git-hub-account-token-does-not-exist-exception)
    ("GitHubAccountTokenNameRequiredException"
     . git-hub-account-token-name-required-exception)
    ("IamArnRequiredException" . iam-arn-required-exception)
    ("IamSessionArnAlreadyRegisteredException"
     . iam-session-arn-already-registered-exception)
    ("IamUserArnAlreadyRegisteredException"
     . iam-user-arn-already-registered-exception)
    ("IamUserArnRequiredException" . iam-user-arn-required-exception)
    ("InstanceDoesNotExistException" . instance-does-not-exist-exception)
    ("InstanceIdRequiredException" . instance-id-required-exception)
    ("InstanceLimitExceededException" . instance-limit-exceeded-exception)
    ("InstanceNameAlreadyRegisteredException"
     . instance-name-already-registered-exception)
    ("InstanceNameRequiredException" . instance-name-required-exception)
    ("InstanceNotRegisteredException" . instance-not-registered-exception)
    ("InvalidAlarmConfigException" . invalid-alarm-config-exception)
    ("InvalidApplicationNameException" . invalid-application-name-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidAutoRollbackConfigException"
     . invalid-auto-rollback-config-exception)
    ("InvalidAutoScalingGroupException" . invalid-auto-scaling-group-exception)
    ("InvalidBlueGreenDeploymentConfigurationException"
     . invalid-blue-green-deployment-configuration-exception)
    ("InvalidBucketNameFilterException" . invalid-bucket-name-filter-exception)
    ("InvalidComputePlatformException" . invalid-compute-platform-exception)
    ("InvalidDeployedStateFilterException"
     . invalid-deployed-state-filter-exception)
    ("InvalidDeploymentConfigNameException"
     . invalid-deployment-config-name-exception)
    ("InvalidDeploymentGroupNameException"
     . invalid-deployment-group-name-exception)
    ("InvalidDeploymentIdException" . invalid-deployment-id-exception)
    ("InvalidDeploymentInstanceTypeException"
     . invalid-deployment-instance-type-exception)
    ("InvalidDeploymentStatusException" . invalid-deployment-status-exception)
    ("InvalidDeploymentStyleException" . invalid-deployment-style-exception)
    ("InvalidDeploymentTargetIdException"
     . invalid-deployment-target-id-exception)
    ("InvalidDeploymentWaitTypeException"
     . invalid-deployment-wait-type-exception)
    ("InvalidEC2TagCombinationException"
     . invalid-ec2tag-combination-exception)
    ("InvalidEC2TagException" . invalid-ec2tag-exception)
    ("InvalidECSServiceException" . invalid-ecsservice-exception)
    ("InvalidExternalIdException" . invalid-external-id-exception)
    ("InvalidFileExistsBehaviorException"
     . invalid-file-exists-behavior-exception)
    ("InvalidGitHubAccountTokenException"
     . invalid-git-hub-account-token-exception)
    ("InvalidGitHubAccountTokenNameException"
     . invalid-git-hub-account-token-name-exception)
    ("InvalidIamSessionArnException" . invalid-iam-session-arn-exception)
    ("InvalidIamUserArnException" . invalid-iam-user-arn-exception)
    ("InvalidIgnoreApplicationStopFailuresValueException"
     . invalid-ignore-application-stop-failures-value-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidInstanceIdException" . invalid-instance-id-exception)
    ("InvalidInstanceNameException" . invalid-instance-name-exception)
    ("InvalidInstanceStatusException" . invalid-instance-status-exception)
    ("InvalidInstanceTypeException" . invalid-instance-type-exception)
    ("InvalidKeyPrefixFilterException" . invalid-key-prefix-filter-exception)
    ("InvalidLifecycleEventHookExecutionIdException"
     . invalid-lifecycle-event-hook-execution-id-exception)
    ("InvalidLifecycleEventHookExecutionStatusException"
     . invalid-lifecycle-event-hook-execution-status-exception)
    ("InvalidLoadBalancerInfoException" . invalid-load-balancer-info-exception)
    ("InvalidMinimumHealthyHostValueException"
     . invalid-minimum-healthy-host-value-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidOnPremisesTagCombinationException"
     . invalid-on-premises-tag-combination-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidRegistrationStatusException"
     . invalid-registration-status-exception)
    ("InvalidRevisionException" . invalid-revision-exception)
    ("InvalidRoleException" . invalid-role-exception)
    ("InvalidSortByException" . invalid-sort-by-exception)
    ("InvalidSortOrderException" . invalid-sort-order-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("InvalidTagFilterException" . invalid-tag-filter-exception)
    ("InvalidTagsToAddException" . invalid-tags-to-add-exception)
    ("InvalidTargetException" . invalid-target-exception)
    ("InvalidTargetFilterNameException" . invalid-target-filter-name-exception)
    ("InvalidTargetGroupPairException" . invalid-target-group-pair-exception)
    ("InvalidTargetInstancesException" . invalid-target-instances-exception)
    ("InvalidTimeRangeException" . invalid-time-range-exception)
    ("InvalidTrafficRoutingConfigurationException"
     . invalid-traffic-routing-configuration-exception)
    ("InvalidTriggerConfigException" . invalid-trigger-config-exception)
    ("InvalidUpdateOutdatedInstancesOnlyValueException"
     . invalid-update-outdated-instances-only-value-exception)
    ("LifecycleEventAlreadyCompletedException"
     . lifecycle-event-already-completed-exception)
    ("LifecycleHookLimitExceededException"
     . lifecycle-hook-limit-exceeded-exception)
    ("MultipleIamArnsProvidedException" . multiple-iam-arns-provided-exception)
    ("OperationNotSupportedException" . operation-not-supported-exception)
    ("ResourceArnRequiredException" . resource-arn-required-exception)
    ("ResourceValidationException" . resource-validation-exception)
    ("RevisionDoesNotExistException" . revision-does-not-exist-exception)
    ("RevisionRequiredException" . revision-required-exception)
    ("RoleRequiredException" . role-required-exception)
    ("TagLimitExceededException" . tag-limit-exceeded-exception)
    ("TagRequiredException" . tag-required-exception)
    ("TagSetListLimitExceededException"
     . tag-set-list-limit-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TriggerTargetsLimitExceededException"
     . trigger-targets-limit-exceeded-exception)
    ("UnsupportedActionForDeploymentTypeException"
     . unsupported-action-for-deployment-type-exception)))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-on-premises-instances-input common-lisp:nil
                       ((instance-names :initarg :|instanceNames| :type
                         (common-lisp:or instance-name-list common-lisp:null)
                         :accessor
                         %add-tags-to-on-premises-instances-input-instance-names
                         :initform
                         (common-lisp:error ":instancenames is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-to-on-premises-instances-input-tags
                         :initform (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-on-premises-instances-input
                    'make-add-tags-to-on-premises-instances-input))
 (common-lisp:defun make-add-tags-to-on-premises-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-names tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-tags-to-on-premises-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:deftype additional-deployment-status-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alarm common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or alarm-name common-lisp:null) :accessor
                         %alarm-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defun make-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'alarm
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass alarm-configuration common-lisp:nil
                       ((alarms :initarg :|alarms| :type
                         (common-lisp:or alarm-list common-lisp:null) :accessor
                         %alarm-configuration-alarms :initform common-lisp:nil)
                        (ignore-poll-alarm-failure :initarg
                         :|ignorePollAlarmFailure| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %alarm-configuration-ignore-poll-alarm-failure
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %alarm-configuration-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'alarm-configuration 'make-alarm-configuration))
 (common-lisp:defun make-alarm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarms ignore-poll-alarm-failure enabled)
   (common-lisp:apply #'common-lisp:make-instance 'alarm-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-poll-alarm-failure))
      (common-lisp:list
       (common-lisp:cons "ignorePollAlarmFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition alarms-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'alarms-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass app-spec-content common-lisp:nil
                       ((sha256 :initarg :|sha256| :type
                         (common-lisp:or raw-string-sha256 common-lisp:null)
                         :accessor %app-spec-content-sha256 :initform
                         common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or raw-string-content common-lisp:null)
                         :accessor %app-spec-content-content :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-spec-content 'make-app-spec-content))
 (common-lisp:defun make-app-spec-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sha256 content)
   (common-lisp:apply #'common-lisp:make-instance 'app-spec-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-spec-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-spec-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha256))
      (common-lisp:list
       (common-lisp:cons "sha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-spec-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition application-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition application-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-does-not-exist-exception)))
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-info common-lisp:nil
                       ((compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor %application-info-compute-platform :initform
                         common-lisp:nil)
                        (git-hub-account-name :initarg :|gitHubAccountName|
                         :type
                         (common-lisp:or git-hub-account-token-name
                                         common-lisp:null)
                         :accessor %application-info-git-hub-account-name
                         :initform common-lisp:nil)
                        (linked-to-git-hub :initarg :|linkedToGitHub| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-info-linked-to-git-hub :initform
                         common-lisp:nil)
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %application-info-create-time :initform
                         common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %application-info-application-name :initform
                         common-lisp:nil)
                        (application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %application-info-application-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-info 'make-application-info))
 (common-lisp:defun make-application-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-platform git-hub-account-name
                     linked-to-git-hub create-time application-name
                     application-id)
   (common-lisp:apply #'common-lisp:make-instance 'application-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-to-git-hub))
      (common-lisp:list
       (common-lisp:cons "linkedToGitHub"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-account-name))
      (common-lisp:list
       (common-lisp:cons "gitHubAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition application-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-limit-exceeded-exception)))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition application-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-name-required-exception)))
(common-lisp:deftype application-revision-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications-info-list ()
   '(trivial-types:proper-list application-info))
 (common-lisp:defun |make-applications-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype applications-list ()
   '(trivial-types:proper-list application-name))
 (common-lisp:defun |make-applications-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition arn-not-supported-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'arn-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defclass auto-rollback-configuration common-lisp:nil
                       ((events :initarg :|events| :type
                         (common-lisp:or auto-rollback-events-list
                                         common-lisp:null)
                         :accessor %auto-rollback-configuration-events
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %auto-rollback-configuration-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-rollback-configuration
                    'make-auto-rollback-configuration))
 (common-lisp:defun make-auto-rollback-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events enabled)
   (common-lisp:apply #'common-lisp:make-instance 'auto-rollback-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   common-lisp:nil))
(common-lisp:deftype auto-rollback-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-rollback-events-list ()
   '(trivial-types:proper-list auto-rollback-event))
 (common-lisp:defun |make-auto-rollback-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-rollback-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group common-lisp:nil
                       ((hook :initarg :|hook| :type
                         (common-lisp:or auto-scaling-group-hook
                                         common-lisp:null)
                         :accessor %auto-scaling-group-hook :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or auto-scaling-group-name
                                         common-lisp:null)
                         :accessor %auto-scaling-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defun make-auto-scaling-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hook name)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook))
      (common-lisp:list
       (common-lisp:cons "hook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-hook () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-scaling-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-name-list ()
   '(trivial-types:proper-list auto-scaling-group-name))
 (common-lisp:defun |make-auto-scaling-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-application-revisions-input common-lisp:nil
                       ((revisions :initarg :|revisions| :type
                         (common-lisp:or revision-location-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-application-revisions-input-revisions
                         :initform
                         (common-lisp:error ":revisions is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %batch-get-application-revisions-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-application-revisions-input
                    'make-batch-get-application-revisions-input))
 (common-lisp:defun make-batch-get-application-revisions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revisions application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-application-revisions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-application-revisions-output common-lisp:nil
                       ((revisions :initarg :|revisions| :type
                         (common-lisp:or revision-info-list common-lisp:null)
                         :accessor
                         %batch-get-application-revisions-output-revisions
                         :initform common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %batch-get-application-revisions-output-error-message
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %batch-get-application-revisions-output-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-application-revisions-output
                    'make-batch-get-application-revisions-output))
 (common-lisp:defun make-batch-get-application-revisions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revisions error-message application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-application-revisions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-applications-input common-lisp:nil
                       ((application-names :initarg :|applicationNames| :type
                         (common-lisp:or applications-list common-lisp:null)
                         :accessor
                         %batch-get-applications-input-application-names
                         :initform
                         (common-lisp:error ":applicationnames is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-applications-input
                    'make-batch-get-applications-input))
 (common-lisp:defun make-batch-get-applications-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-names)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-applications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-names))
      (common-lisp:list
       (common-lisp:cons "applicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-applications-output common-lisp:nil
                       ((applications-info :initarg :|applicationsInfo| :type
                         (common-lisp:or applications-info-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-applications-output-applications-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-applications-output
                    'make-batch-get-applications-output))
 (common-lisp:defun make-batch-get-applications-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applications-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-applications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications-info))
      (common-lisp:list
       (common-lisp:cons "applicationsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-groups-input common-lisp:nil
                       ((deployment-group-names :initarg
                         :|deploymentGroupNames| :type
                         (common-lisp:or deployment-groups-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-deployment-groups-input-deployment-group-names
                         :initform
                         (common-lisp:error
                          ":deploymentgroupnames is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %batch-get-deployment-groups-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-groups-input
                    'make-batch-get-deployment-groups-input))
 (common-lisp:defun make-batch-get-deployment-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-group-names application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-names))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-groups-output common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %batch-get-deployment-groups-output-error-message
                         :initform common-lisp:nil)
                        (deployment-groups-info :initarg
                         :|deploymentGroupsInfo| :type
                         (common-lisp:or deployment-group-info-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-deployment-groups-output-deployment-groups-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-groups-output
                    'make-batch-get-deployment-groups-output))
 (common-lisp:defun make-batch-get-deployment-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message deployment-groups-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-groups-info))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-instances-input common-lisp:nil
                       ((instance-ids :initarg :|instanceIds| :type
                         (common-lisp:or instances-list common-lisp:null)
                         :accessor
                         %batch-get-deployment-instances-input-instance-ids
                         :initform
                         (common-lisp:error ":instanceids is required"))
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %batch-get-deployment-instances-input-deployment-id
                         :initform
                         (common-lisp:error ":deploymentid is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-instances-input
                    'make-batch-get-deployment-instances-input))
 (common-lisp:defun make-batch-get-deployment-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-ids deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "instanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-instances-output common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %batch-get-deployment-instances-output-error-message
                         :initform common-lisp:nil)
                        (instances-summary :initarg :|instancesSummary| :type
                         (common-lisp:or instance-summary-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-deployment-instances-output-instances-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-instances-output
                    'make-batch-get-deployment-instances-output))
 (common-lisp:defun make-batch-get-deployment-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message instances-summary)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-summary))
      (common-lisp:list
       (common-lisp:cons "instancesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-targets-input common-lisp:nil
                       ((target-ids :initarg :|targetIds| :type
                         (common-lisp:or target-id-list common-lisp:null)
                         :accessor
                         %batch-get-deployment-targets-input-target-ids
                         :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %batch-get-deployment-targets-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-targets-input
                    'make-batch-get-deployment-targets-input))
 (common-lisp:defun make-batch-get-deployment-targets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-ids deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ids))
      (common-lisp:list
       (common-lisp:cons "targetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployment-targets-output common-lisp:nil
                       ((deployment-targets :initarg :|deploymentTargets| :type
                         (common-lisp:or deployment-target-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-deployment-targets-output-deployment-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-targets-output
                    'make-batch-get-deployment-targets-output))
 (common-lisp:defun make-batch-get-deployment-targets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-deployment-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "deploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployments-input common-lisp:nil
                       ((deployment-ids :initarg :|deploymentIds| :type
                         (common-lisp:or deployments-list common-lisp:null)
                         :accessor %batch-get-deployments-input-deployment-ids
                         :initform
                         (common-lisp:error ":deploymentids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployments-input
                    'make-batch-get-deployments-input))
 (common-lisp:defun make-batch-get-deployments-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-deployments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-ids))
      (common-lisp:list
       (common-lisp:cons "deploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-deployments-output common-lisp:nil
                       ((deployments-info :initarg :|deploymentsInfo| :type
                         (common-lisp:or deployments-info-list
                                         common-lisp:null)
                         :accessor
                         %batch-get-deployments-output-deployments-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployments-output
                    'make-batch-get-deployments-output))
 (common-lisp:defun make-batch-get-deployments-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployments-info)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-deployments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments-info))
      (common-lisp:list
       (common-lisp:cons "deploymentsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-on-premises-instances-input common-lisp:nil
                       ((instance-names :initarg :|instanceNames| :type
                         (common-lisp:or instance-name-list common-lisp:null)
                         :accessor
                         %batch-get-on-premises-instances-input-instance-names
                         :initform
                         (common-lisp:error ":instancenames is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-on-premises-instances-input
                    'make-batch-get-on-premises-instances-input))
 (common-lisp:defun make-batch-get-on-premises-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-on-premises-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-on-premises-instances-output common-lisp:nil
                       ((instance-infos :initarg :|instanceInfos| :type
                         (common-lisp:or instance-info-list common-lisp:null)
                         :accessor
                         %batch-get-on-premises-instances-output-instance-infos
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-on-premises-instances-output
                    'make-batch-get-on-premises-instances-output))
 (common-lisp:defun make-batch-get-on-premises-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-infos)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-on-premises-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-infos))
      (common-lisp:list
       (common-lisp:cons "instanceInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition batch-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'batch-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass blue-green-deployment-configuration common-lisp:nil
                       ((green-fleet-provisioning-option :initarg
                         :|greenFleetProvisioningOption| :type
                         (common-lisp:or green-fleet-provisioning-option
                                         common-lisp:null)
                         :accessor
                         %blue-green-deployment-configuration-green-fleet-provisioning-option
                         :initform common-lisp:nil)
                        (deployment-ready-option :initarg
                         :|deploymentReadyOption| :type
                         (common-lisp:or deployment-ready-option
                                         common-lisp:null)
                         :accessor
                         %blue-green-deployment-configuration-deployment-ready-option
                         :initform common-lisp:nil)
                        (terminate-blue-instances-on-deployment-success
                         :initarg :|terminateBlueInstancesOnDeploymentSuccess|
                         :type
                         (common-lisp:or blue-instance-termination-option
                                         common-lisp:null)
                         :accessor
                         %blue-green-deployment-configuration-terminate-blue-instances-on-deployment-success
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-configuration
                    'make-blue-green-deployment-configuration))
 (common-lisp:defun make-blue-green-deployment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key green-fleet-provisioning-option
                     deployment-ready-option
                     terminate-blue-instances-on-deployment-success)
   (common-lisp:apply #'common-lisp:make-instance
                      'blue-green-deployment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-blue-instances-on-deployment-success))
      (common-lisp:list
       (common-lisp:cons "terminateBlueInstancesOnDeploymentSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-ready-option))
      (common-lisp:list
       (common-lisp:cons "deploymentReadyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'green-fleet-provisioning-option))
      (common-lisp:list
       (common-lisp:cons "greenFleetProvisioningOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass blue-instance-termination-option common-lisp:nil
                       ((termination-wait-time-in-minutes :initarg
                         :|terminationWaitTimeInMinutes| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %blue-instance-termination-option-termination-wait-time-in-minutes
                         :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or instance-action common-lisp:null)
                         :accessor %blue-instance-termination-option-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'blue-instance-termination-option
                    'make-blue-instance-termination-option))
 (common-lisp:defun make-blue-instance-termination-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key termination-wait-time-in-minutes action)
   (common-lisp:apply #'common-lisp:make-instance
                      'blue-instance-termination-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-wait-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "terminationWaitTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-name-filter-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-name-filter-required-exception)))
(common-lisp:deftype bundle-type () 'common-lisp:string)
(common-lisp:deftype cloud-formation-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-formation-target common-lisp:nil
                       ((target-version-weight :initarg :|targetVersionWeight|
                         :type (common-lisp:or traffic-weight common-lisp:null)
                         :accessor
                         %cloud-formation-target-target-version-weight
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or cloud-formation-resource-type
                                         common-lisp:null)
                         :accessor %cloud-formation-target-resource-type
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or target-status common-lisp:null)
                         :accessor %cloud-formation-target-status :initform
                         common-lisp:nil)
                        (lifecycle-events :initarg :|lifecycleEvents| :type
                         (common-lisp:or lifecycle-event-list common-lisp:null)
                         :accessor %cloud-formation-target-lifecycle-events
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %cloud-formation-target-last-updated-at :initform
                         common-lisp:nil)
                        (target-id :initarg :|targetId| :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %cloud-formation-target-target-id :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %cloud-formation-target-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-target 'make-cloud-formation-target))
 (common-lisp:defun make-cloud-formation-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-version-weight resource-type
                     status lifecycle-events last-updated-at target-id
                     deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-formation-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-version-weight))
      (common-lisp:list
       (common-lisp:cons "targetVersionWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   common-lisp:nil))
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:deftype compute-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass continue-deployment-input common-lisp:nil
                       ((deployment-wait-type :initarg :|deploymentWaitType|
                         :type
                         (common-lisp:or deployment-wait-type common-lisp:null)
                         :accessor
                         %continue-deployment-input-deployment-wait-type
                         :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %continue-deployment-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'continue-deployment-input
                    'make-continue-deployment-input))
 (common-lisp:defun make-continue-deployment-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-wait-type deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'continue-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-wait-type))
      (common-lisp:list
       (common-lisp:cons "deploymentWaitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-application-input-tags :initform
                         common-lisp:nil)
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor %create-application-input-compute-platform
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-application-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-input 'make-create-application-input))
 (common-lisp:defun make-create-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags compute-platform application-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-output common-lisp:nil
                       ((application-id :initarg :|applicationId| :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor %create-application-output-application-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-output
                    'make-create-application-output))
 (common-lisp:defun make-create-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-config-input common-lisp:nil
                       ((compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor
                         %create-deployment-config-input-compute-platform
                         :initform common-lisp:nil)
                        (traffic-routing-config :initarg
                         :|trafficRoutingConfig| :type
                         (common-lisp:or traffic-routing-config
                                         common-lisp:null)
                         :accessor
                         %create-deployment-config-input-traffic-routing-config
                         :initform common-lisp:nil)
                        (minimum-healthy-hosts :initarg :|minimumHealthyHosts|
                         :type
                         (common-lisp:or minimum-healthy-hosts
                                         common-lisp:null)
                         :accessor
                         %create-deployment-config-input-minimum-healthy-hosts
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %create-deployment-config-input-deployment-config-name
                         :initform
                         (common-lisp:error
                          ":deploymentconfigname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-deployment-config-input
                    'make-create-deployment-config-input))
 (common-lisp:defun make-create-deployment-config-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-platform traffic-routing-config
                     minimum-healthy-hosts deployment-config-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-hosts))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-routing-config))
      (common-lisp:list
       (common-lisp:cons "trafficRoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-config-output common-lisp:nil
                       ((deployment-config-id :initarg :|deploymentConfigId|
                         :type
                         (common-lisp:or deployment-config-id common-lisp:null)
                         :accessor
                         %create-deployment-config-output-deployment-config-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-config-output
                    'make-create-deployment-config-output))
 (common-lisp:defun make-create-deployment-config-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-config-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-id))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-group-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-deployment-group-input-tags :initform
                         common-lisp:nil)
                        (on-premises-tag-set :initarg :|onPremisesTagSet| :type
                         (common-lisp:or on-premises-tag-set common-lisp:null)
                         :accessor
                         %create-deployment-group-input-on-premises-tag-set
                         :initform common-lisp:nil)
                        (ecs-services :initarg :|ecsServices| :type
                         (common-lisp:or ecsservice-list common-lisp:null)
                         :accessor %create-deployment-group-input-ecs-services
                         :initform common-lisp:nil)
                        (ec2tag-set :initarg :|ec2TagSet| :type
                         (common-lisp:or ec2tag-set common-lisp:null) :accessor
                         %create-deployment-group-input-ec2tag-set :initform
                         common-lisp:nil)
                        (load-balancer-info :initarg :|loadBalancerInfo| :type
                         (common-lisp:or load-balancer-info common-lisp:null)
                         :accessor
                         %create-deployment-group-input-load-balancer-info
                         :initform common-lisp:nil)
                        (blue-green-deployment-configuration :initarg
                         :|blueGreenDeploymentConfiguration| :type
                         (common-lisp:or blue-green-deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-blue-green-deployment-configuration
                         :initform common-lisp:nil)
                        (deployment-style :initarg :|deploymentStyle| :type
                         (common-lisp:or deployment-style common-lisp:null)
                         :accessor
                         %create-deployment-group-input-deployment-style
                         :initform common-lisp:nil)
                        (outdated-instances-strategy :initarg
                         :|outdatedInstancesStrategy| :type
                         (common-lisp:or outdated-instances-strategy
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-outdated-instances-strategy
                         :initform common-lisp:nil)
                        (auto-rollback-configuration :initarg
                         :|autoRollbackConfiguration| :type
                         (common-lisp:or auto-rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-auto-rollback-configuration
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :|alarmConfiguration|
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %create-deployment-group-input-alarm-configuration
                         :initform common-lisp:nil)
                        (trigger-configurations :initarg
                         :|triggerConfigurations| :type
                         (common-lisp:or trigger-config-list common-lisp:null)
                         :accessor
                         %create-deployment-group-input-trigger-configurations
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-deployment-group-input-service-role-arn
                         :initform
                         (common-lisp:error ":servicerolearn is required"))
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-name-list
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-auto-scaling-groups
                         :initform common-lisp:nil)
                        (on-premises-instance-tag-filters :initarg
                         :|onPremisesInstanceTagFilters| :type
                         (common-lisp:or tag-filter-list common-lisp:null)
                         :accessor
                         %create-deployment-group-input-on-premises-instance-tag-filters
                         :initform common-lisp:nil)
                        (ec2tag-filters :initarg :|ec2TagFilters| :type
                         (common-lisp:or ec2tag-filter-list common-lisp:null)
                         :accessor
                         %create-deployment-group-input-ec2tag-filters
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-deployment-config-name
                         :initform common-lisp:nil)
                        (deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %create-deployment-group-input-deployment-group-name
                         :initform
                         (common-lisp:error
                          ":deploymentgroupname is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %create-deployment-group-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-deployment-group-input
                    'make-create-deployment-group-input))
 (common-lisp:defun make-create-deployment-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags on-premises-tag-set ecs-services
                     ec2tag-set load-balancer-info
                     blue-green-deployment-configuration deployment-style
                     outdated-instances-strategy auto-rollback-configuration
                     alarm-configuration trigger-configurations
                     service-role-arn auto-scaling-groups
                     on-premises-instance-tag-filters ec2tag-filters
                     deployment-config-name deployment-group-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-group-output common-lisp:nil
                       ((deployment-group-id :initarg :|deploymentGroupId|
                         :type
                         (common-lisp:or deployment-group-id common-lisp:null)
                         :accessor
                         %create-deployment-group-output-deployment-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-group-output
                    'make-create-deployment-group-output))
 (common-lisp:defun make-create-deployment-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-group-id))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-input common-lisp:nil
                       ((override-alarm-configuration :initarg
                         :|overrideAlarmConfiguration| :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %create-deployment-input-override-alarm-configuration
                         :initform common-lisp:nil)
                        (file-exists-behavior :initarg :|fileExistsBehavior|
                         :type
                         (common-lisp:or file-exists-behavior common-lisp:null)
                         :accessor
                         %create-deployment-input-file-exists-behavior
                         :initform common-lisp:nil)
                        (update-outdated-instances-only :initarg
                         :|updateOutdatedInstancesOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-deployment-input-update-outdated-instances-only
                         :initform common-lisp:nil)
                        (auto-rollback-configuration :initarg
                         :|autoRollbackConfiguration| :type
                         (common-lisp:or auto-rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %create-deployment-input-auto-rollback-configuration
                         :initform common-lisp:nil)
                        (target-instances :initarg :|targetInstances| :type
                         (common-lisp:or target-instances common-lisp:null)
                         :accessor %create-deployment-input-target-instances
                         :initform common-lisp:nil)
                        (ignore-application-stop-failures :initarg
                         :|ignoreApplicationStopFailures| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-deployment-input-ignore-application-stop-failures
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-deployment-input-description
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %create-deployment-input-deployment-config-name
                         :initform common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %create-deployment-input-revision :initform
                         common-lisp:nil)
                        (deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %create-deployment-input-deployment-group-name
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %create-deployment-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-deployment-input 'make-create-deployment-input))
 (common-lisp:defun make-create-deployment-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key override-alarm-configuration
                     file-exists-behavior update-outdated-instances-only
                     auto-rollback-configuration target-instances
                     ignore-application-stop-failures description
                     deployment-config-name revision deployment-group-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-application-stop-failures))
      (common-lisp:list
       (common-lisp:cons "ignoreApplicationStopFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "targetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-outdated-instances-only))
      (common-lisp:list
       (common-lisp:cons "updateOutdatedInstancesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-exists-behavior))
      (common-lisp:list
       (common-lisp:cons "fileExistsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "overrideAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-output common-lisp:nil
                       ((deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %create-deployment-output-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-output 'make-create-deployment-output))
 (common-lisp:defun make-create-deployment-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-input common-lisp:nil
                       ((application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %delete-application-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-input 'make-delete-application-input))
 (common-lisp:defun make-delete-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-config-input common-lisp:nil
                       ((deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %delete-deployment-config-input-deployment-config-name
                         :initform
                         (common-lisp:error
                          ":deploymentconfigname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-config-input
                    'make-delete-deployment-config-input))
 (common-lisp:defun make-delete-deployment-config-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-deployment-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-group-input common-lisp:nil
                       ((deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %delete-deployment-group-input-deployment-group-name
                         :initform
                         (common-lisp:error
                          ":deploymentgroupname is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %delete-deployment-group-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-group-input
                    'make-delete-deployment-group-input))
 (common-lisp:defun make-delete-deployment-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-group-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-deployment-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-group-output common-lisp:nil
                       ((hooks-not-cleaned-up :initarg :|hooksNotCleanedUp|
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor
                         %delete-deployment-group-output-hooks-not-cleaned-up
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-group-output
                    'make-delete-deployment-group-output))
 (common-lisp:defun make-delete-deployment-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hooks-not-cleaned-up)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-deployment-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hooks-not-cleaned-up))
      (common-lisp:list
       (common-lisp:cons "hooksNotCleanedUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-git-hub-account-token-input common-lisp:nil
                       ((token-name :initarg :|tokenName| :type
                         (common-lisp:or git-hub-account-token-name
                                         common-lisp:null)
                         :accessor
                         %delete-git-hub-account-token-input-token-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-git-hub-account-token-input
                    'make-delete-git-hub-account-token-input))
 (common-lisp:defun make-delete-git-hub-account-token-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-git-hub-account-token-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name))
      (common-lisp:list
       (common-lisp:cons "tokenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-git-hub-account-token-output common-lisp:nil
                       ((token-name :initarg :|tokenName| :type
                         (common-lisp:or git-hub-account-token-name
                                         common-lisp:null)
                         :accessor
                         %delete-git-hub-account-token-output-token-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-git-hub-account-token-output
                    'make-delete-git-hub-account-token-output))
 (common-lisp:defun make-delete-git-hub-account-token-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-git-hub-account-token-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name))
      (common-lisp:list
       (common-lisp:cons "tokenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resources-by-external-id-input common-lisp:nil
                       ((external-id :initarg :|externalId| :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor
                         %delete-resources-by-external-id-input-external-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-resources-by-external-id-input
                    'make-delete-resources-by-external-id-input))
 (common-lisp:defun make-delete-resources-by-external-id-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resources-by-external-id-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resources-by-external-id-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-resources-by-external-id-output
                    'make-delete-resources-by-external-id-output))
 (common-lisp:defun make-delete-resources-by-external-id-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resources-by-external-id-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-already-completed-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-already-completed-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-already-started-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-already-started-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-does-not-exist-exception)))
(common-lisp:deftype deployment-config-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-config-in-use-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-config-in-use-exception)))
(common-lisp:progn
 (common-lisp:defclass deployment-config-info common-lisp:nil
                       ((traffic-routing-config :initarg
                         :|trafficRoutingConfig| :type
                         (common-lisp:or traffic-routing-config
                                         common-lisp:null)
                         :accessor
                         %deployment-config-info-traffic-routing-config
                         :initform common-lisp:nil)
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor %deployment-config-info-compute-platform
                         :initform common-lisp:nil)
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-config-info-create-time :initform
                         common-lisp:nil)
                        (minimum-healthy-hosts :initarg :|minimumHealthyHosts|
                         :type
                         (common-lisp:or minimum-healthy-hosts
                                         common-lisp:null)
                         :accessor
                         %deployment-config-info-minimum-healthy-hosts
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %deployment-config-info-deployment-config-name
                         :initform common-lisp:nil)
                        (deployment-config-id :initarg :|deploymentConfigId|
                         :type
                         (common-lisp:or deployment-config-id common-lisp:null)
                         :accessor %deployment-config-info-deployment-config-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-config-info 'make-deployment-config-info))
 (common-lisp:defun make-deployment-config-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key traffic-routing-config compute-platform
                     create-time minimum-healthy-hosts deployment-config-name
                     deployment-config-id)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-config-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-id))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-hosts))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-routing-config))
      (common-lisp:list
       (common-lisp:cons "trafficRoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-limit-exceeded-exception)))
(common-lisp:deftype deployment-config-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-config-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-name-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-configs-list ()
   '(trivial-types:proper-list deployment-config-name))
 (common-lisp:defun |make-deployment-configs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-config-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-creator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-does-not-exist-exception)))
(common-lisp:deftype deployment-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-group-info common-lisp:nil
                       ((ecs-services :initarg :|ecsServices| :type
                         (common-lisp:or ecsservice-list common-lisp:null)
                         :accessor %deployment-group-info-ecs-services
                         :initform common-lisp:nil)
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor %deployment-group-info-compute-platform
                         :initform common-lisp:nil)
                        (on-premises-tag-set :initarg :|onPremisesTagSet| :type
                         (common-lisp:or on-premises-tag-set common-lisp:null)
                         :accessor %deployment-group-info-on-premises-tag-set
                         :initform common-lisp:nil)
                        (ec2tag-set :initarg :|ec2TagSet| :type
                         (common-lisp:or ec2tag-set common-lisp:null) :accessor
                         %deployment-group-info-ec2tag-set :initform
                         common-lisp:nil)
                        (last-attempted-deployment :initarg
                         :|lastAttemptedDeployment| :type
                         (common-lisp:or last-deployment-info common-lisp:null)
                         :accessor
                         %deployment-group-info-last-attempted-deployment
                         :initform common-lisp:nil)
                        (last-successful-deployment :initarg
                         :|lastSuccessfulDeployment| :type
                         (common-lisp:or last-deployment-info common-lisp:null)
                         :accessor
                         %deployment-group-info-last-successful-deployment
                         :initform common-lisp:nil)
                        (load-balancer-info :initarg :|loadBalancerInfo| :type
                         (common-lisp:or load-balancer-info common-lisp:null)
                         :accessor %deployment-group-info-load-balancer-info
                         :initform common-lisp:nil)
                        (blue-green-deployment-configuration :initarg
                         :|blueGreenDeploymentConfiguration| :type
                         (common-lisp:or blue-green-deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %deployment-group-info-blue-green-deployment-configuration
                         :initform common-lisp:nil)
                        (outdated-instances-strategy :initarg
                         :|outdatedInstancesStrategy| :type
                         (common-lisp:or outdated-instances-strategy
                                         common-lisp:null)
                         :accessor
                         %deployment-group-info-outdated-instances-strategy
                         :initform common-lisp:nil)
                        (deployment-style :initarg :|deploymentStyle| :type
                         (common-lisp:or deployment-style common-lisp:null)
                         :accessor %deployment-group-info-deployment-style
                         :initform common-lisp:nil)
                        (auto-rollback-configuration :initarg
                         :|autoRollbackConfiguration| :type
                         (common-lisp:or auto-rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %deployment-group-info-auto-rollback-configuration
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :|alarmConfiguration|
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %deployment-group-info-alarm-configuration
                         :initform common-lisp:nil)
                        (trigger-configurations :initarg
                         :|triggerConfigurations| :type
                         (common-lisp:or trigger-config-list common-lisp:null)
                         :accessor
                         %deployment-group-info-trigger-configurations
                         :initform common-lisp:nil)
                        (target-revision :initarg :|targetRevision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %deployment-group-info-target-revision
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %deployment-group-info-service-role-arn :initform
                         common-lisp:nil)
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor %deployment-group-info-auto-scaling-groups
                         :initform common-lisp:nil)
                        (on-premises-instance-tag-filters :initarg
                         :|onPremisesInstanceTagFilters| :type
                         (common-lisp:or tag-filter-list common-lisp:null)
                         :accessor
                         %deployment-group-info-on-premises-instance-tag-filters
                         :initform common-lisp:nil)
                        (ec2tag-filters :initarg :|ec2TagFilters| :type
                         (common-lisp:or ec2tag-filter-list common-lisp:null)
                         :accessor %deployment-group-info-ec2tag-filters
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %deployment-group-info-deployment-config-name
                         :initform common-lisp:nil)
                        (deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor %deployment-group-info-deployment-group-name
                         :initform common-lisp:nil)
                        (deployment-group-id :initarg :|deploymentGroupId|
                         :type
                         (common-lisp:or deployment-group-id common-lisp:null)
                         :accessor %deployment-group-info-deployment-group-id
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %deployment-group-info-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-group-info 'make-deployment-group-info))
 (common-lisp:defun make-deployment-group-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ecs-services compute-platform
                     on-premises-tag-set ec2tag-set last-attempted-deployment
                     last-successful-deployment load-balancer-info
                     blue-green-deployment-configuration
                     outdated-instances-strategy deployment-style
                     auto-rollback-configuration alarm-configuration
                     trigger-configurations target-revision service-role-arn
                     auto-scaling-groups on-premises-instance-tag-filters
                     ec2tag-filters deployment-config-name
                     deployment-group-name deployment-group-id
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-group-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-group-id))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-revision))
      (common-lisp:list
       (common-lisp:cons "targetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-deployment))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-group-info-list ()
   '(trivial-types:proper-list deployment-group-info))
 (common-lisp:defun |make-deployment-group-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-group-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-limit-exceeded-exception)))
(common-lisp:deftype deployment-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-group-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-name-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-groups-list ()
   '(trivial-types:proper-list deployment-group-name))
 (common-lisp:defun |make-deployment-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-id-required-exception)))
(common-lisp:progn
 (common-lisp:defclass deployment-info common-lisp:nil
                       ((override-alarm-configuration :initarg
                         :|overrideAlarmConfiguration| :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %deployment-info-override-alarm-configuration
                         :initform common-lisp:nil)
                        (related-deployments :initarg :|relatedDeployments|
                         :type
                         (common-lisp:or related-deployments common-lisp:null)
                         :accessor %deployment-info-related-deployments
                         :initform common-lisp:nil)
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %deployment-info-external-id :initform
                         common-lisp:nil)
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor %deployment-info-compute-platform :initform
                         common-lisp:nil)
                        (deployment-status-messages :initarg
                         :|deploymentStatusMessages| :type
                         (common-lisp:or deployment-status-message-list
                                         common-lisp:null)
                         :accessor %deployment-info-deployment-status-messages
                         :initform common-lisp:nil)
                        (file-exists-behavior :initarg :|fileExistsBehavior|
                         :type
                         (common-lisp:or file-exists-behavior common-lisp:null)
                         :accessor %deployment-info-file-exists-behavior
                         :initform common-lisp:nil)
                        (additional-deployment-status-info :initarg
                         :|additionalDeploymentStatusInfo| :type
                         (common-lisp:or additional-deployment-status-info
                                         common-lisp:null)
                         :accessor
                         %deployment-info-additional-deployment-status-info
                         :initform common-lisp:nil)
                        (load-balancer-info :initarg :|loadBalancerInfo| :type
                         (common-lisp:or load-balancer-info common-lisp:null)
                         :accessor %deployment-info-load-balancer-info
                         :initform common-lisp:nil)
                        (blue-green-deployment-configuration :initarg
                         :|blueGreenDeploymentConfiguration| :type
                         (common-lisp:or blue-green-deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %deployment-info-blue-green-deployment-configuration
                         :initform common-lisp:nil)
                        (instance-termination-wait-time-started :initarg
                         :|instanceTerminationWaitTimeStarted| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-info-instance-termination-wait-time-started
                         :initform common-lisp:nil)
                        (target-instances :initarg :|targetInstances| :type
                         (common-lisp:or target-instances common-lisp:null)
                         :accessor %deployment-info-target-instances :initform
                         common-lisp:nil)
                        (deployment-style :initarg :|deploymentStyle| :type
                         (common-lisp:or deployment-style common-lisp:null)
                         :accessor %deployment-info-deployment-style :initform
                         common-lisp:nil)
                        (rollback-info :initarg :|rollbackInfo| :type
                         (common-lisp:or rollback-info common-lisp:null)
                         :accessor %deployment-info-rollback-info :initform
                         common-lisp:nil)
                        (update-outdated-instances-only :initarg
                         :|updateOutdatedInstancesOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-info-update-outdated-instances-only
                         :initform common-lisp:nil)
                        (auto-rollback-configuration :initarg
                         :|autoRollbackConfiguration| :type
                         (common-lisp:or auto-rollback-configuration
                                         common-lisp:null)
                         :accessor %deployment-info-auto-rollback-configuration
                         :initform common-lisp:nil)
                        (ignore-application-stop-failures :initarg
                         :|ignoreApplicationStopFailures| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-info-ignore-application-stop-failures
                         :initform common-lisp:nil)
                        (creator :initarg :|creator| :type
                         (common-lisp:or deployment-creator common-lisp:null)
                         :accessor %deployment-info-creator :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %deployment-info-description :initform
                         common-lisp:nil)
                        (deployment-overview :initarg :|deploymentOverview|
                         :type
                         (common-lisp:or deployment-overview common-lisp:null)
                         :accessor %deployment-info-deployment-overview
                         :initform common-lisp:nil)
                        (complete-time :initarg :|completeTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-info-complete-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-info-start-time :initform common-lisp:nil)
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-info-create-time :initform
                         common-lisp:nil)
                        (error-information :initarg :|errorInformation| :type
                         (common-lisp:or error-information common-lisp:null)
                         :accessor %deployment-info-error-information :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %deployment-info-status :initform
                         common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %deployment-info-revision :initform
                         common-lisp:nil)
                        (previous-revision :initarg :|previousRevision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %deployment-info-previous-revision :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %deployment-info-deployment-id :initform
                         common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor %deployment-info-deployment-config-name
                         :initform common-lisp:nil)
                        (deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor %deployment-info-deployment-group-name
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %deployment-info-application-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deployment-info 'make-deployment-info))
 (common-lisp:defun make-deployment-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key override-alarm-configuration
                     related-deployments external-id compute-platform
                     deployment-status-messages file-exists-behavior
                     additional-deployment-status-info load-balancer-info
                     blue-green-deployment-configuration
                     instance-termination-wait-time-started target-instances
                     deployment-style rollback-info
                     update-outdated-instances-only auto-rollback-configuration
                     ignore-application-stop-failures creator description
                     deployment-overview complete-time start-time create-time
                     error-information status revision previous-revision
                     deployment-id deployment-config-name deployment-group-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-revision))
      (common-lisp:list
       (common-lisp:cons "previousRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-information))
      (common-lisp:list
       (common-lisp:cons "errorInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complete-time))
      (common-lisp:list
       (common-lisp:cons "completeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-overview))
      (common-lisp:list
       (common-lisp:cons "deploymentOverview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator))
      (common-lisp:list
       (common-lisp:cons "creator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-application-stop-failures))
      (common-lisp:list
       (common-lisp:cons "ignoreApplicationStopFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-outdated-instances-only))
      (common-lisp:list
       (common-lisp:cons "updateOutdatedInstancesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-info))
      (common-lisp:list
       (common-lisp:cons "rollbackInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "targetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-termination-wait-time-started))
      (common-lisp:list
       (common-lisp:cons "instanceTerminationWaitTimeStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-deployment-status-info))
      (common-lisp:list
       (common-lisp:cons "additionalDeploymentStatusInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-exists-behavior))
      (common-lisp:list
       (common-lisp:cons "fileExistsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-messages))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-deployments))
      (common-lisp:list
       (common-lisp:cons "relatedDeployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "overrideAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-is-not-in-ready-state-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-is-not-in-ready-state-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-not-started-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-not-started-exception)))
(common-lisp:deftype deployment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-overview common-lisp:nil
                       ((ready :initarg :ready :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-ready :initform
                         common-lisp:nil)
                        (skipped :initarg :skipped :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-skipped :initform
                         common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-failed :initform
                         common-lisp:nil)
                        (succeeded :initarg :succeeded :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-succeeded :initform
                         common-lisp:nil)
                        (in-progress :initarg :in-progress :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-in-progress :initform
                         common-lisp:nil)
                        (pending :initarg :pending :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor %deployment-overview-pending :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-overview 'make-deployment-overview))
 (common-lisp:defun make-deployment-overview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ready skipped failed succeeded
                     in-progress pending)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-overview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-overview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-overview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "InProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "Succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "Skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready))
      (common-lisp:list
       (common-lisp:cons "Ready"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-overview))
   common-lisp:nil))
(common-lisp:deftype deployment-ready-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-ready-option common-lisp:nil
                       ((wait-time-in-minutes :initarg :|waitTimeInMinutes|
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         %deployment-ready-option-wait-time-in-minutes
                         :initform common-lisp:nil)
                        (action-on-timeout :initarg :|actionOnTimeout| :type
                         (common-lisp:or deployment-ready-action
                                         common-lisp:null)
                         :accessor %deployment-ready-option-action-on-timeout
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-ready-option 'make-deployment-ready-option))
 (common-lisp:defun make-deployment-ready-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wait-time-in-minutes action-on-timeout)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-ready-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-on-timeout))
      (common-lisp:list
       (common-lisp:cons "actionOnTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "waitTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   common-lisp:nil))
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-status-list ()
   '(trivial-types:proper-list deployment-status))
 (common-lisp:defun |make-deployment-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployment-status-message-list ()
   '(trivial-types:proper-list error-message))
 (common-lisp:defun |make-deployment-status-message-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-style common-lisp:nil
                       ((deployment-option :initarg :|deploymentOption| :type
                         (common-lisp:or deployment-option common-lisp:null)
                         :accessor %deployment-style-deployment-option
                         :initform common-lisp:nil)
                        (deployment-type :initarg :|deploymentType| :type
                         (common-lisp:or deployment-type common-lisp:null)
                         :accessor %deployment-style-deployment-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-style 'make-deployment-style))
 (common-lisp:defun make-deployment-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-option deployment-type)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "deploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-target common-lisp:nil
                       ((cloud-formation-target :initarg
                         :|cloudFormationTarget| :type
                         (common-lisp:or cloud-formation-target
                                         common-lisp:null)
                         :accessor %deployment-target-cloud-formation-target
                         :initform common-lisp:nil)
                        (ecs-target :initarg :|ecsTarget| :type
                         (common-lisp:or ecstarget common-lisp:null) :accessor
                         %deployment-target-ecs-target :initform
                         common-lisp:nil)
                        (lambda-target :initarg :|lambdaTarget| :type
                         (common-lisp:or lambda-target common-lisp:null)
                         :accessor %deployment-target-lambda-target :initform
                         common-lisp:nil)
                        (instance-target :initarg :|instanceTarget| :type
                         (common-lisp:or instance-target common-lisp:null)
                         :accessor %deployment-target-instance-target :initform
                         common-lisp:nil)
                        (deployment-target-type :initarg
                         :|deploymentTargetType| :type
                         (common-lisp:or deployment-target-type
                                         common-lisp:null)
                         :accessor %deployment-target-deployment-target-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-target 'make-deployment-target))
 (common-lisp:defun make-deployment-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-formation-target ecs-target
                     lambda-target instance-target deployment-target-type)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-target-type))
      (common-lisp:list
       (common-lisp:cons "deploymentTargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-target))
      (common-lisp:list
       (common-lisp:cons "instanceTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-target))
      (common-lisp:list
       (common-lisp:cons "lambdaTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-target))
      (common-lisp:list
       (common-lisp:cons "ecsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-target))
      (common-lisp:list
       (common-lisp:cons "cloudFormationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-id-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-target-list ()
   '(trivial-types:proper-list deployment-target))
 (common-lisp:defun |make-deployment-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-list-size-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-list-size-exceeded-exception)))
(common-lisp:deftype deployment-target-type () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:deftype deployment-wait-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployments-info-list ()
   '(trivial-types:proper-list deployment-info))
 (common-lisp:defun |make-deployments-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployments-list ()
   '(trivial-types:proper-list deployment-id))
 (common-lisp:defun |make-deployments-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deregister-on-premises-instance-input common-lisp:nil
                       ((instance-name :initarg :|instanceName| :type
                         (common-lisp:or instance-name common-lisp:null)
                         :accessor
                         %deregister-on-premises-instance-input-instance-name
                         :initform
                         (common-lisp:error ":instancename is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-on-premises-instance-input
                    'make-deregister-on-premises-instance-input))
 (common-lisp:defun make-deregister-on-premises-instance-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-on-premises-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition description-too-long-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'description-too-long-exception)))
(common-lisp:progn
 (common-lisp:defclass diagnostics common-lisp:nil
                       ((log-tail :initarg :|logTail| :type
                         (common-lisp:or log-tail common-lisp:null) :accessor
                         %diagnostics-log-tail :initform common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or lifecycle-message common-lisp:null)
                         :accessor %diagnostics-message :initform
                         common-lisp:nil)
                        (script-name :initarg :|scriptName| :type
                         (common-lisp:or script-name common-lisp:null)
                         :accessor %diagnostics-script-name :initform
                         common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or lifecycle-error-code common-lisp:null)
                         :accessor %diagnostics-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'diagnostics 'make-diagnostics))
 (common-lisp:defun make-diagnostics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-tail message script-name error-code)
   (common-lisp:apply #'common-lisp:make-instance 'diagnostics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input diagnostics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input diagnostics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-name))
      (common-lisp:list
       (common-lisp:cons "scriptName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-tail))
      (common-lisp:list
       (common-lisp:cons "logTail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input diagnostics))
   common-lisp:nil))
(common-lisp:deftype duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ec2tag-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or ec2tag-filter-type common-lisp:null)
                         :accessor %ec2tag-filter-type :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %ec2tag-filter-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %ec2tag-filter-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ec2tag-filter 'make-ec2tag-filter))
 (common-lisp:defun make-ec2tag-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value key)
   (common-lisp:apply #'common-lisp:make-instance 'ec2tag-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2tag-filter-list ()
   '(trivial-types:proper-list ec2tag-filter))
 (common-lisp:defun |make-ec2tag-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ec2tag-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ec2tag-set common-lisp:nil
                       ((ec2tag-set-list :initarg :|ec2TagSetList| :type
                         (common-lisp:or ec2tag-set-list common-lisp:null)
                         :accessor %ec2tag-set-ec2tag-set-list :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ec2tag-set 'make-ec2tag-set))
 (common-lisp:defun make-ec2tag-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ec2tag-set-list)
   (common-lisp:apply #'common-lisp:make-instance 'ec2tag-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2tag-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2tag-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set-list))
      (common-lisp:list
       (common-lisp:cons "ec2TagSetList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2tag-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2tag-set-list ()
   '(trivial-types:proper-list ec2tag-filter-list))
 (common-lisp:defun |make-ec2tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2tag-filter-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ecscluster-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecsservice common-lisp:nil
                       ((cluster-name :initarg :|clusterName| :type
                         (common-lisp:or ecscluster-name common-lisp:null)
                         :accessor %ecsservice-cluster-name :initform
                         common-lisp:nil)
                        (service-name :initarg :|serviceName| :type
                         (common-lisp:or ecsservice-name common-lisp:null)
                         :accessor %ecsservice-service-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ecsservice 'make-ecsservice))
 (common-lisp:defun make-ecsservice
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-name service-name)
   (common-lisp:apply #'common-lisp:make-instance 'ecsservice
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecsservice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecsservice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecsservice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecsservice-list ()
   '(trivial-types:proper-list ecsservice))
 (common-lisp:defun |make-ecsservice-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecsservice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ecsservice-mapping-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'ecsservice-mapping-limit-exceeded-exception)))
(common-lisp:deftype ecsservice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ecstarget common-lisp:nil
                       ((task-sets-info :initarg :|taskSetsInfo| :type
                         (common-lisp:or ecstask-set-list common-lisp:null)
                         :accessor %ecstarget-task-sets-info :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or target-status common-lisp:null)
                         :accessor %ecstarget-status :initform common-lisp:nil)
                        (lifecycle-events :initarg :|lifecycleEvents| :type
                         (common-lisp:or lifecycle-event-list common-lisp:null)
                         :accessor %ecstarget-lifecycle-events :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %ecstarget-last-updated-at :initform common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         %ecstarget-target-arn :initform common-lisp:nil)
                        (target-id :initarg :|targetId| :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %ecstarget-target-id :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %ecstarget-deployment-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ecstarget 'make-ecstarget))
 (common-lisp:defun make-ecstarget
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-sets-info status lifecycle-events
                     last-updated-at target-arn target-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'ecstarget
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecstarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecstarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets-info))
      (common-lisp:list
       (common-lisp:cons "taskSetsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecstarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecstask-set common-lisp:nil
                       ((task-set-label :initarg :|taskSetLabel| :type
                         (common-lisp:or target-label common-lisp:null)
                         :accessor %ecstask-set-task-set-label :initform
                         common-lisp:nil)
                        (target-group :initarg :|targetGroup| :type
                         (common-lisp:or target-group-info common-lisp:null)
                         :accessor %ecstask-set-target-group :initform
                         common-lisp:nil)
                        (traffic-weight :initarg :|trafficWeight| :type
                         (common-lisp:or traffic-weight common-lisp:null)
                         :accessor %ecstask-set-traffic-weight :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or ecstask-set-status common-lisp:null)
                         :accessor %ecstask-set-status :initform
                         common-lisp:nil)
                        (running-count :initarg :|runningCount| :type
                         (common-lisp:or ecstask-set-count common-lisp:null)
                         :accessor %ecstask-set-running-count :initform
                         common-lisp:nil)
                        (pending-count :initarg :|pendingCount| :type
                         (common-lisp:or ecstask-set-count common-lisp:null)
                         :accessor %ecstask-set-pending-count :initform
                         common-lisp:nil)
                        (desired-count :initarg :|desiredCount| :type
                         (common-lisp:or ecstask-set-count common-lisp:null)
                         :accessor %ecstask-set-desired-count :initform
                         common-lisp:nil)
                        (identifer :initarg :|identifer| :type
                         (common-lisp:or ecstask-set-identifier
                                         common-lisp:null)
                         :accessor %ecstask-set-identifer :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ecstask-set 'make-ecstask-set))
 (common-lisp:defun make-ecstask-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-set-label target-group
                     traffic-weight status running-count pending-count
                     desired-count identifer)
   (common-lisp:apply #'common-lisp:make-instance 'ecstask-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecstask-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecstask-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifer))
      (common-lisp:list
       (common-lisp:cons "identifer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-weight))
      (common-lisp:list
       (common-lisp:cons "trafficWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group))
      (common-lisp:list
       (common-lisp:cons "targetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set-label))
      (common-lisp:list
       (common-lisp:cons "taskSetLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecstask-set))
   common-lisp:nil))
(common-lisp:deftype ecstask-set-count () 'common-lisp:integer)
(common-lisp:deftype ecstask-set-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ecstask-set-list ()
   '(trivial-types:proper-list ecstask-set))
 (common-lisp:defun |make-ecstask-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecstask-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ecstask-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass elbinfo common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or elbname common-lisp:null) :accessor
                         %elbinfo-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'elbinfo 'make-elbinfo))
 (common-lisp:defun make-elbinfo
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'elbinfo
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elbinfo))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elbinfo))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elbinfo))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elbinfo-list () '(trivial-types:proper-list elbinfo))
 (common-lisp:defun |make-elbinfo-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elbinfo))
   aws-sdk/generator/shape::members))
(common-lisp:deftype elbname () 'common-lisp:string)
(common-lisp:deftype etag () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-information common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %error-information-message :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %error-information-code :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'error-information 'make-error-information))
 (common-lisp:defun make-error-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'error-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-information))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:deftype file-exists-behavior () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generic-revision-info common-lisp:nil
                       ((register-time :initarg :|registerTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %generic-revision-info-register-time :initform
                         common-lisp:nil)
                        (last-used-time :initarg :|lastUsedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %generic-revision-info-last-used-time :initform
                         common-lisp:nil)
                        (first-used-time :initarg :|firstUsedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %generic-revision-info-first-used-time :initform
                         common-lisp:nil)
                        (deployment-groups :initarg :|deploymentGroups| :type
                         (common-lisp:or deployment-groups-list
                                         common-lisp:null)
                         :accessor %generic-revision-info-deployment-groups
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %generic-revision-info-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generic-revision-info 'make-generic-revision-info))
 (common-lisp:defun make-generic-revision-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key register-time last-used-time
                     first-used-time deployment-groups description)
   (common-lisp:apply #'common-lisp:make-instance 'generic-revision-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-groups))
      (common-lisp:list
       (common-lisp:cons "deploymentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-used-time))
      (common-lisp:list
       (common-lisp:cons "firstUsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-time))
      (common-lisp:list
       (common-lisp:cons "lastUsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-time))
      (common-lisp:list
       (common-lisp:cons "registerTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-input common-lisp:nil
                       ((application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %get-application-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-input 'make-get-application-input))
 (common-lisp:defun make-get-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-output common-lisp:nil
                       ((application :initarg :|application| :type
                         (common-lisp:or application-info common-lisp:null)
                         :accessor %get-application-output-application
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-application-output 'make-get-application-output))
 (common-lisp:defun make-get-application-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance 'get-application-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-revision-input common-lisp:nil
                       ((revision :initarg :|revision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %get-application-revision-input-revision
                         :initform (common-lisp:error ":revision is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %get-application-revision-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-application-revision-input
                    'make-get-application-revision-input))
 (common-lisp:defun make-get-application-revision-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-revision-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-application-revision-output common-lisp:nil
                       ((revision-info :initarg :|revisionInfo| :type
                         (common-lisp:or generic-revision-info
                                         common-lisp:null)
                         :accessor
                         %get-application-revision-output-revision-info
                         :initform common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %get-application-revision-output-revision
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %get-application-revision-output-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-application-revision-output
                    'make-get-application-revision-output))
 (common-lisp:defun make-get-application-revision-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-info revision application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-application-revision-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-info))
      (common-lisp:list
       (common-lisp:cons "revisionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-config-input common-lisp:nil
                       ((deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %get-deployment-config-input-deployment-config-name
                         :initform
                         (common-lisp:error
                          ":deploymentconfigname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-deployment-config-input
                    'make-get-deployment-config-input))
 (common-lisp:defun make-get-deployment-config-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-config-output common-lisp:nil
                       ((deployment-config-info :initarg
                         :|deploymentConfigInfo| :type
                         (common-lisp:or deployment-config-info
                                         common-lisp:null)
                         :accessor
                         %get-deployment-config-output-deployment-config-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-config-output
                    'make-get-deployment-config-output))
 (common-lisp:defun make-get-deployment-config-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-config-info)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-info))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-group-input common-lisp:nil
                       ((deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %get-deployment-group-input-deployment-group-name
                         :initform
                         (common-lisp:error
                          ":deploymentgroupname is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %get-deployment-group-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-deployment-group-input
                    'make-get-deployment-group-input))
 (common-lisp:defun make-get-deployment-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-group-name application-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-group-output common-lisp:nil
                       ((deployment-group-info :initarg :|deploymentGroupInfo|
                         :type
                         (common-lisp:or deployment-group-info
                                         common-lisp:null)
                         :accessor
                         %get-deployment-group-output-deployment-group-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-group-output
                    'make-get-deployment-group-output))
 (common-lisp:defun make-get-deployment-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-group-info)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-info))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-input common-lisp:nil
                       ((deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %get-deployment-input-deployment-id
                         :initform
                         (common-lisp:error ":deploymentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-deployment-input 'make-get-deployment-input))
 (common-lisp:defun make-get-deployment-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-instance-input common-lisp:nil
                       ((instance-id :initarg :|instanceId| :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %get-deployment-instance-input-instance-id
                         :initform
                         (common-lisp:error ":instanceid is required"))
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %get-deployment-instance-input-deployment-id
                         :initform
                         (common-lisp:error ":deploymentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-deployment-instance-input
                    'make-get-deployment-instance-input))
 (common-lisp:defun make-get-deployment-instance-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-deployment-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-instance-output common-lisp:nil
                       ((instance-summary :initarg :|instanceSummary| :type
                         (common-lisp:or instance-summary common-lisp:null)
                         :accessor
                         %get-deployment-instance-output-instance-summary
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-instance-output
                    'make-get-deployment-instance-output))
 (common-lisp:defun make-get-deployment-instance-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-summary)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-deployment-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-summary))
      (common-lisp:list
       (common-lisp:cons "instanceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-output common-lisp:nil
                       ((deployment-info :initarg :|deploymentInfo| :type
                         (common-lisp:or deployment-info common-lisp:null)
                         :accessor %get-deployment-output-deployment-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-output 'make-get-deployment-output))
 (common-lisp:defun make-get-deployment-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-info)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-info))
      (common-lisp:list
       (common-lisp:cons "deploymentInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-target-input common-lisp:nil
                       ((target-id :initarg :|targetId| :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %get-deployment-target-input-target-id :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %get-deployment-target-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-target-input
                    'make-get-deployment-target-input))
 (common-lisp:defun make-get-deployment-target-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-target-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-target-output common-lisp:nil
                       ((deployment-target :initarg :|deploymentTarget| :type
                         (common-lisp:or deployment-target common-lisp:null)
                         :accessor
                         %get-deployment-target-output-deployment-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-target-output
                    'make-get-deployment-target-output))
 (common-lisp:defun make-get-deployment-target-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-target)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-target-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-target))
      (common-lisp:list
       (common-lisp:cons "deploymentTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-on-premises-instance-input common-lisp:nil
                       ((instance-name :initarg :|instanceName| :type
                         (common-lisp:or instance-name common-lisp:null)
                         :accessor
                         %get-on-premises-instance-input-instance-name
                         :initform
                         (common-lisp:error ":instancename is required"))))
 (common-lisp:export
  (common-lisp:list 'get-on-premises-instance-input
                    'make-get-on-premises-instance-input))
 (common-lisp:defun make-get-on-premises-instance-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-on-premises-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-on-premises-instance-output common-lisp:nil
                       ((instance-info :initarg :|instanceInfo| :type
                         (common-lisp:or instance-info common-lisp:null)
                         :accessor
                         %get-on-premises-instance-output-instance-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-on-premises-instance-output
                    'make-get-on-premises-instance-output))
 (common-lisp:defun make-get-on-premises-instance-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-on-premises-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-info))
      (common-lisp:list
       (common-lisp:cons "instanceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition git-hub-account-token-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'git-hub-account-token-does-not-exist-exception)))
(common-lisp:deftype git-hub-account-token-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-hub-account-token-name-list ()
   '(trivial-types:proper-list git-hub-account-token-name))
 (common-lisp:defun |make-git-hub-account-token-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            git-hub-account-token-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition git-hub-account-token-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'git-hub-account-token-name-required-exception)))
(common-lisp:progn
 (common-lisp:defclass git-hub-location common-lisp:nil
                       ((commit-id :initarg :|commitId| :type
                         (common-lisp:or commit-id common-lisp:null) :accessor
                         %git-hub-location-commit-id :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         %git-hub-location-repository :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'git-hub-location 'make-git-hub-location))
 (common-lisp:defun make-git-hub-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key commit-id repository)
   (common-lisp:apply #'common-lisp:make-instance 'git-hub-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input git-hub-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input git-hub-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input git-hub-location))
   common-lisp:nil))
(common-lisp:deftype green-fleet-provisioning-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass green-fleet-provisioning-option common-lisp:nil
                       ((action :initarg :|action| :type
                         (common-lisp:or green-fleet-provisioning-action
                                         common-lisp:null)
                         :accessor %green-fleet-provisioning-option-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'green-fleet-provisioning-option
                    'make-green-fleet-provisioning-option))
 (common-lisp:defun make-green-fleet-provisioning-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action)
   (common-lisp:apply #'common-lisp:make-instance
                      'green-fleet-provisioning-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition iam-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-arn-required-exception)))
(common-lisp:deftype iam-session-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition iam-session-arn-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'iam-session-arn-already-registered-exception)))
(common-lisp:deftype iam-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition iam-user-arn-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'iam-user-arn-already-registered-exception)))
(common-lisp:progn
 (common-lisp:define-condition iam-user-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-user-arn-required-exception)))
(common-lisp:deftype instance-action () 'common-lisp:string)
(common-lisp:deftype instance-arn () 'common-lisp:string)
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition instance-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-does-not-exist-exception)))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition instance-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-id-required-exception)))
(common-lisp:progn
 (common-lisp:defclass instance-info common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %instance-info-tags :initform common-lisp:nil)
                        (deregister-time :initarg :|deregisterTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-info-deregister-time :initform
                         common-lisp:nil)
                        (register-time :initarg :|registerTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-info-register-time :initform
                         common-lisp:nil)
                        (instance-arn :initarg :|instanceArn| :type
                         (common-lisp:or instance-arn common-lisp:null)
                         :accessor %instance-info-instance-arn :initform
                         common-lisp:nil)
                        (iam-user-arn :initarg :|iamUserArn| :type
                         (common-lisp:or iam-user-arn common-lisp:null)
                         :accessor %instance-info-iam-user-arn :initform
                         common-lisp:nil)
                        (iam-session-arn :initarg :|iamSessionArn| :type
                         (common-lisp:or iam-session-arn common-lisp:null)
                         :accessor %instance-info-iam-session-arn :initform
                         common-lisp:nil)
                        (instance-name :initarg :|instanceName| :type
                         (common-lisp:or instance-name common-lisp:null)
                         :accessor %instance-info-instance-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-info 'make-instance-info))
 (common-lisp:defun make-instance-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags deregister-time register-time
                     instance-arn iam-user-arn iam-session-arn instance-name)
   (common-lisp:apply #'common-lisp:make-instance 'instance-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-session-arn))
      (common-lisp:list
       (common-lisp:cons "iamSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "iamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "instanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-time))
      (common-lisp:list
       (common-lisp:cons "registerTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deregister-time))
      (common-lisp:list
       (common-lisp:cons "deregisterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-info-list ()
   '(trivial-types:proper-list instance-info))
 (common-lisp:defun |make-instance-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-limit-exceeded-exception)))
(common-lisp:deftype instance-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition instance-name-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'instance-name-already-registered-exception)))
(common-lisp:progn
 (common-lisp:deftype instance-name-list ()
   '(trivial-types:proper-list instance-name))
 (common-lisp:defun |make-instance-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-name-required-exception)))
(common-lisp:progn
 (common-lisp:define-condition instance-not-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-not-registered-exception)))
(common-lisp:deftype instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-status-list ()
   '(trivial-types:proper-list instance-status))
 (common-lisp:defun |make-instance-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-summary common-lisp:nil
                       ((instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %instance-summary-instance-type :initform
                         common-lisp:nil)
                        (lifecycle-events :initarg :|lifecycleEvents| :type
                         (common-lisp:or lifecycle-event-list common-lisp:null)
                         :accessor %instance-summary-lifecycle-events :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-summary-last-updated-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or instance-status common-lisp:null)
                         :accessor %instance-summary-status :initform
                         common-lisp:nil)
                        (instance-id :initarg :|instanceId| :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-summary-instance-id :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %instance-summary-deployment-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defun make-instance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-type lifecycle-events
                     last-updated-at status instance-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun |make-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-target common-lisp:nil
                       ((instance-label :initarg :|instanceLabel| :type
                         (common-lisp:or target-label common-lisp:null)
                         :accessor %instance-target-instance-label :initform
                         common-lisp:nil)
                        (lifecycle-events :initarg :|lifecycleEvents| :type
                         (common-lisp:or lifecycle-event-list common-lisp:null)
                         :accessor %instance-target-lifecycle-events :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %instance-target-last-updated-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or target-status common-lisp:null)
                         :accessor %instance-target-status :initform
                         common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         %instance-target-target-arn :initform common-lisp:nil)
                        (target-id :initarg :|targetId| :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %instance-target-target-id :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %instance-target-deployment-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-target 'make-instance-target))
 (common-lisp:defun make-instance-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-label lifecycle-events
                     last-updated-at status target-arn target-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-label))
      (common-lisp:list
       (common-lisp:cons "instanceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-target))
   common-lisp:nil))
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-type-list ()
   '(trivial-types:proper-list instance-type))
 (common-lisp:defun |make-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instances-list ()
   '(trivial-types:proper-list instance-id))
 (common-lisp:defun |make-instances-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-alarm-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-alarm-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-application-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-application-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-auto-rollback-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-auto-rollback-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-auto-scaling-group-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-auto-scaling-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-blue-green-deployment-configuration-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-blue-green-deployment-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-bucket-name-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-bucket-name-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-compute-platform-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-compute-platform-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployed-state-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployed-state-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-config-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-config-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-group-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-group-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-instance-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-instance-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-style-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-style-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-target-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-target-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-wait-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-wait-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ec2tag-combination-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ec2tag-combination-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ec2tag-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ec2tag-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ecsservice-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ecsservice-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-external-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-external-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-file-exists-behavior-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-file-exists-behavior-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-git-hub-account-token-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-git-hub-account-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-git-hub-account-token-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-git-hub-account-token-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-iam-session-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-iam-session-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-iam-user-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-iam-user-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ignore-application-stop-failures-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-ignore-application-stop-failures-value-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-input-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-key-prefix-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-key-prefix-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lifecycle-event-hook-execution-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-lifecycle-event-hook-execution-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lifecycle-event-hook-execution-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-lifecycle-event-hook-execution-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-load-balancer-info-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-load-balancer-info-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-minimum-healthy-host-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-minimum-healthy-host-value-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-on-premises-tag-combination-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-on-premises-tag-combination-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-registration-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-registration-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-revision-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-revision-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-role-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-role-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sort-by-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sort-by-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sort-order-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sort-order-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tags-to-add-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tags-to-add-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-filter-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-filter-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-group-pair-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-group-pair-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-instances-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-instances-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-time-range-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-time-range-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-traffic-routing-configuration-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-traffic-routing-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-trigger-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-trigger-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-update-outdated-instances-only-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-update-outdated-instances-only-value-exception)))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype lambda-function-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function-info common-lisp:nil
                       ((target-version-weight :initarg :|targetVersionWeight|
                         :type (common-lisp:or traffic-weight common-lisp:null)
                         :accessor %lambda-function-info-target-version-weight
                         :initform common-lisp:nil)
                        (target-version :initarg :|targetVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %lambda-function-info-target-version :initform
                         common-lisp:nil)
                        (current-version :initarg :|currentVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %lambda-function-info-current-version :initform
                         common-lisp:nil)
                        (function-alias :initarg :|functionAlias| :type
                         (common-lisp:or lambda-function-alias
                                         common-lisp:null)
                         :accessor %lambda-function-info-function-alias
                         :initform common-lisp:nil)
                        (function-name :initarg :|functionName| :type
                         (common-lisp:or lambda-function-name common-lisp:null)
                         :accessor %lambda-function-info-function-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-info 'make-lambda-function-info))
 (common-lisp:defun make-lambda-function-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-version-weight target-version
                     current-version function-alias function-name)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-alias))
      (common-lisp:list
       (common-lisp:cons "functionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "currentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "targetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-version-weight))
      (common-lisp:list
       (common-lisp:cons "targetVersionWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function-info))
   common-lisp:nil))
(common-lisp:deftype lambda-function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-target common-lisp:nil
                       ((lambda-function-info :initarg :|lambdaFunctionInfo|
                         :type
                         (common-lisp:or lambda-function-info common-lisp:null)
                         :accessor %lambda-target-lambda-function-info
                         :initform common-lisp:nil)
                        (lifecycle-events :initarg :|lifecycleEvents| :type
                         (common-lisp:or lifecycle-event-list common-lisp:null)
                         :accessor %lambda-target-lifecycle-events :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %lambda-target-last-updated-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or target-status common-lisp:null)
                         :accessor %lambda-target-status :initform
                         common-lisp:nil)
                        (target-arn :initarg :|targetArn| :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         %lambda-target-target-arn :initform common-lisp:nil)
                        (target-id :initarg :|targetId| :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %lambda-target-target-id :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %lambda-target-deployment-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lambda-target 'make-lambda-target))
 (common-lisp:defun make-lambda-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda-function-info lifecycle-events
                     last-updated-at status target-arn target-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-info))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass last-deployment-info common-lisp:nil
                       ((create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %last-deployment-info-create-time :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %last-deployment-info-end-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %last-deployment-info-status :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %last-deployment-info-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'last-deployment-info 'make-last-deployment-info))
 (common-lisp:defun make-last-deployment-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-time end-time status
                     deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'last-deployment-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-deployment-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-deployment-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-deployment-info))
   common-lisp:nil))
(common-lisp:deftype lifecycle-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-event common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or lifecycle-event-status
                                         common-lisp:null)
                         :accessor %lifecycle-event-status :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %lifecycle-event-end-time :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %lifecycle-event-start-time :initform common-lisp:nil)
                        (diagnostics :initarg :|diagnostics| :type
                         (common-lisp:or diagnostics common-lisp:null)
                         :accessor %lifecycle-event-diagnostics :initform
                         common-lisp:nil)
                        (lifecycle-event-name :initarg :|lifecycleEventName|
                         :type
                         (common-lisp:or lifecycle-event-name common-lisp:null)
                         :accessor %lifecycle-event-lifecycle-event-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lifecycle-event 'make-lifecycle-event))
 (common-lisp:defun make-lifecycle-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status end-time start-time diagnostics
                     lifecycle-event-name)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-name))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics))
      (common-lisp:list
       (common-lisp:cons "diagnostics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition lifecycle-event-already-completed-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'lifecycle-event-already-completed-exception)))
(common-lisp:deftype lifecycle-event-hook-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lifecycle-event-list ()
   '(trivial-types:proper-list lifecycle-event))
 (common-lisp:defun |make-lifecycle-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lifecycle-event-name () 'common-lisp:string)
(common-lisp:deftype lifecycle-event-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition lifecycle-hook-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'lifecycle-hook-limit-exceeded-exception)))
(common-lisp:deftype lifecycle-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-application-revisions-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-revisions-input-next-token :initform
                         common-lisp:nil)
                        (deployed :initarg :|deployed| :type
                         (common-lisp:or list-state-filter-action
                                         common-lisp:null)
                         :accessor %list-application-revisions-input-deployed
                         :initform common-lisp:nil)
                        (s3key-prefix :initarg :|s3KeyPrefix| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %list-application-revisions-input-s3key-prefix
                         :initform common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %list-application-revisions-input-s3bucket :initform
                         common-lisp:nil)
                        (sort-order :initarg :|sortOrder| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-application-revisions-input-sort-order :initform
                         common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or application-revision-sort-by
                                         common-lisp:null)
                         :accessor %list-application-revisions-input-sort-by
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %list-application-revisions-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'list-application-revisions-input
                    'make-list-application-revisions-input))
 (common-lisp:defun make-list-application-revisions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token deployed s3key-prefix s3bucket
                     sort-order sort-by application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-revisions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-application-revisions-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-application-revisions-output-next-token
                         :initform common-lisp:nil)
                        (revisions :initarg :|revisions| :type
                         (common-lisp:or revision-location-list
                                         common-lisp:null)
                         :accessor %list-application-revisions-output-revisions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-application-revisions-output
                    'make-list-application-revisions-output))
 (common-lisp:defun make-list-application-revisions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token revisions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-application-revisions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-applications-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-input 'make-list-applications-input))
 (common-lisp:defun make-list-applications-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-applications-output-next-token :initform
                         common-lisp:nil)
                        (applications :initarg :|applications| :type
                         (common-lisp:or applications-list common-lisp:null)
                         :accessor %list-applications-output-applications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-output 'make-list-applications-output))
 (common-lisp:defun make-list-applications-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token applications)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-configs-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-configs-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-configs-input
                    'make-list-deployment-configs-input))
 (common-lisp:defun make-list-deployment-configs-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-configs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-configs-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-configs-output-next-token :initform
                         common-lisp:nil)
                        (deployment-configs-list :initarg
                         :|deploymentConfigsList| :type
                         (common-lisp:or deployment-configs-list
                                         common-lisp:null)
                         :accessor
                         %list-deployment-configs-output-deployment-configs-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-configs-output
                    'make-list-deployment-configs-output))
 (common-lisp:defun make-list-deployment-configs-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token deployment-configs-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-configs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configs-list))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-groups-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-groups-input-next-token :initform
                         common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %list-deployment-groups-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'list-deployment-groups-input
                    'make-list-deployment-groups-input))
 (common-lisp:defun make-list-deployment-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployment-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-groups-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-groups-output-next-token :initform
                         common-lisp:nil)
                        (deployment-groups :initarg :|deploymentGroups| :type
                         (common-lisp:or deployment-groups-list
                                         common-lisp:null)
                         :accessor
                         %list-deployment-groups-output-deployment-groups
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %list-deployment-groups-output-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-groups-output
                    'make-list-deployment-groups-output))
 (common-lisp:defun make-list-deployment-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token deployment-groups
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-groups))
      (common-lisp:list
       (common-lisp:cons "deploymentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-instances-input common-lisp:nil
                       ((instance-type-filter :initarg :|instanceTypeFilter|
                         :type
                         (common-lisp:or instance-type-list common-lisp:null)
                         :accessor
                         %list-deployment-instances-input-instance-type-filter
                         :initform common-lisp:nil)
                        (instance-status-filter :initarg
                         :|instanceStatusFilter| :type
                         (common-lisp:or instance-status-list common-lisp:null)
                         :accessor
                         %list-deployment-instances-input-instance-status-filter
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-instances-input-next-token :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %list-deployment-instances-input-deployment-id
                         :initform
                         (common-lisp:error ":deploymentid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-deployment-instances-input
                    'make-list-deployment-instances-input))
 (common-lisp:defun make-list-deployment-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-type-filter
                     instance-status-filter next-token deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-status-filter))
      (common-lisp:list
       (common-lisp:cons "instanceStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-type-filter))
      (common-lisp:list
       (common-lisp:cons "instanceTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-instances-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-instances-output-next-token :initform
                         common-lisp:nil)
                        (instances-list :initarg :|instancesList| :type
                         (common-lisp:or instances-list common-lisp:null)
                         :accessor
                         %list-deployment-instances-output-instances-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-instances-output
                    'make-list-deployment-instances-output))
 (common-lisp:defun make-list-deployment-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instances-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-list))
      (common-lisp:list
       (common-lisp:cons "instancesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-targets-input common-lisp:nil
                       ((target-filters :initarg :|targetFilters| :type
                         (common-lisp:or target-filters common-lisp:null)
                         :accessor
                         %list-deployment-targets-input-target-filters
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-targets-input-next-token :initform
                         common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %list-deployment-targets-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-targets-input
                    'make-list-deployment-targets-input))
 (common-lisp:defun make-list-deployment-targets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-filters next-token deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-filters))
      (common-lisp:list
       (common-lisp:cons "targetFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-targets-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployment-targets-output-next-token :initform
                         common-lisp:nil)
                        (target-ids :initarg :|targetIds| :type
                         (common-lisp:or target-id-list common-lisp:null)
                         :accessor %list-deployment-targets-output-target-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-targets-output
                    'make-list-deployment-targets-output))
 (common-lisp:defun make-list-deployment-targets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token target-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ids))
      (common-lisp:list
       (common-lisp:cons "targetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployments-input-next-token :initform
                         common-lisp:nil)
                        (create-time-range :initarg :|createTimeRange| :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %list-deployments-input-create-time-range :initform
                         common-lisp:nil)
                        (include-only-statuses :initarg :|includeOnlyStatuses|
                         :type
                         (common-lisp:or deployment-status-list
                                         common-lisp:null)
                         :accessor
                         %list-deployments-input-include-only-statuses
                         :initform common-lisp:nil)
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %list-deployments-input-external-id
                         :initform common-lisp:nil)
                        (deployment-group-name :initarg :|deploymentGroupName|
                         :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %list-deployments-input-deployment-group-name
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %list-deployments-input-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-input 'make-list-deployments-input))
 (common-lisp:defun make-list-deployments-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token create-time-range
                     include-only-statuses external-id deployment-group-name
                     application-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-only-statuses))
      (common-lisp:list
       (common-lisp:cons "includeOnlyStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time-range))
      (common-lisp:list
       (common-lisp:cons "createTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-deployments-output-next-token :initform
                         common-lisp:nil)
                        (deployments :initarg :|deployments| :type
                         (common-lisp:or deployments-list common-lisp:null)
                         :accessor %list-deployments-output-deployments
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-output 'make-list-deployments-output))
 (common-lisp:defun make-list-deployments-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token deployments)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-git-hub-account-token-names-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-git-hub-account-token-names-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-git-hub-account-token-names-input
                    'make-list-git-hub-account-token-names-input))
 (common-lisp:defun make-list-git-hub-account-token-names-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-git-hub-account-token-names-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-git-hub-account-token-names-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-git-hub-account-token-names-output-next-token
                         :initform common-lisp:nil)
                        (token-name-list :initarg :|tokenNameList| :type
                         (common-lisp:or git-hub-account-token-name-list
                                         common-lisp:null)
                         :accessor
                         %list-git-hub-account-token-names-output-token-name-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-git-hub-account-token-names-output
                    'make-list-git-hub-account-token-names-output))
 (common-lisp:defun make-list-git-hub-account-token-names-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token token-name-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-git-hub-account-token-names-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name-list))
      (common-lisp:list
       (common-lisp:cons "tokenNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-on-premises-instances-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-on-premises-instances-input-next-token :initform
                         common-lisp:nil)
                        (tag-filters :initarg :|tagFilters| :type
                         (common-lisp:or tag-filter-list common-lisp:null)
                         :accessor
                         %list-on-premises-instances-input-tag-filters
                         :initform common-lisp:nil)
                        (registration-status :initarg :|registrationStatus|
                         :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %list-on-premises-instances-input-registration-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-on-premises-instances-input
                    'make-list-on-premises-instances-input))
 (common-lisp:defun make-list-on-premises-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tag-filters
                     registration-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-on-premises-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filters))
      (common-lisp:list
       (common-lisp:cons "tagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-on-premises-instances-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-on-premises-instances-output-next-token
                         :initform common-lisp:nil)
                        (instance-names :initarg :|instanceNames| :type
                         (common-lisp:or instance-name-list common-lisp:null)
                         :accessor
                         %list-on-premises-instances-output-instance-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-on-premises-instances-output
                    'make-list-on-premises-instances-output))
 (common-lisp:defun make-list-on-premises-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-on-premises-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   common-lisp:nil))
(common-lisp:deftype list-state-filter-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-input-next-token :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-output-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype listener-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype listener-arn-list ()
   '(trivial-types:proper-list listener-arn))
 (common-lisp:defun |make-listener-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-info common-lisp:nil
                       ((target-group-pair-info-list :initarg
                         :|targetGroupPairInfoList| :type
                         (common-lisp:or target-group-pair-info-list
                                         common-lisp:null)
                         :accessor
                         %load-balancer-info-target-group-pair-info-list
                         :initform common-lisp:nil)
                        (target-group-info-list :initarg :|targetGroupInfoList|
                         :type
                         (common-lisp:or target-group-info-list
                                         common-lisp:null)
                         :accessor %load-balancer-info-target-group-info-list
                         :initform common-lisp:nil)
                        (elb-info-list :initarg :|elbInfoList| :type
                         (common-lisp:or elbinfo-list common-lisp:null)
                         :accessor %load-balancer-info-elb-info-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-info 'make-load-balancer-info))
 (common-lisp:defun make-load-balancer-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-pair-info-list
                     target-group-info-list elb-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elb-info-list))
      (common-lisp:list
       (common-lisp:cons "elbInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-info-list))
      (common-lisp:list
       (common-lisp:cons "targetGroupInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-pair-info-list))
      (common-lisp:list
       (common-lisp:cons "targetGroupPairInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-info))
   common-lisp:nil))
(common-lisp:deftype log-tail () 'common-lisp:string)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass minimum-healthy-hosts common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or minimum-healthy-hosts-value
                                         common-lisp:null)
                         :accessor %minimum-healthy-hosts-value :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or minimum-healthy-hosts-type
                                         common-lisp:null)
                         :accessor %minimum-healthy-hosts-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'minimum-healthy-hosts 'make-minimum-healthy-hosts))
 (common-lisp:defun make-minimum-healthy-hosts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'minimum-healthy-hosts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   common-lisp:nil))
(common-lisp:deftype minimum-healthy-hosts-type () 'common-lisp:string)
(common-lisp:deftype minimum-healthy-hosts-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition multiple-iam-arns-provided-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'multiple-iam-arns-provided-exception)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass on-premises-tag-set common-lisp:nil
                       ((on-premises-tag-set-list :initarg
                         :|onPremisesTagSetList| :type
                         (common-lisp:or on-premises-tag-set-list
                                         common-lisp:null)
                         :accessor
                         %on-premises-tag-set-on-premises-tag-set-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'on-premises-tag-set 'make-on-premises-tag-set))
 (common-lisp:defun make-on-premises-tag-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-premises-tag-set-list)
   (common-lisp:apply #'common-lisp:make-instance 'on-premises-tag-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-tag-set-list))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSetList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype on-premises-tag-set-list ()
   '(trivial-types:proper-list tag-filter-list))
 (common-lisp:defun |make-on-premises-tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition operation-not-supported-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-supported-exception)))
(common-lisp:deftype outdated-instances-strategy () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-event-hook-execution-status-input
                       common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or lifecycle-event-status
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-event-hook-execution-status-input-status
                         :initform common-lisp:nil)
                        (lifecycle-event-hook-execution-id :initarg
                         :|lifecycleEventHookExecutionId| :type
                         (common-lisp:or lifecycle-event-hook-execution-id
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-event-hook-execution-status-input-lifecycle-event-hook-execution-id
                         :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %put-lifecycle-event-hook-execution-status-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-event-hook-execution-status-input
                    'make-put-lifecycle-event-hook-execution-status-input))
 (common-lisp:defun make-put-lifecycle-event-hook-execution-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status lifecycle-event-hook-execution-id
                     deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-lifecycle-event-hook-execution-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-hook-execution-id))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventHookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-lifecycle-event-hook-execution-status-output
                       common-lisp:nil
                       ((lifecycle-event-hook-execution-id :initarg
                         :|lifecycleEventHookExecutionId| :type
                         (common-lisp:or lifecycle-event-hook-execution-id
                                         common-lisp:null)
                         :accessor
                         %put-lifecycle-event-hook-execution-status-output-lifecycle-event-hook-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-event-hook-execution-status-output
                    'make-put-lifecycle-event-hook-execution-status-output))
 (common-lisp:defun make-put-lifecycle-event-hook-execution-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle-event-hook-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-lifecycle-event-hook-execution-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-hook-execution-id))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventHookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raw-string common-lisp:nil
                       ((sha256 :initarg :|sha256| :type
                         (common-lisp:or raw-string-sha256 common-lisp:null)
                         :accessor %raw-string-sha256 :initform
                         common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or raw-string-content common-lisp:null)
                         :accessor %raw-string-content :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'raw-string 'make-raw-string))
 (common-lisp:defun make-raw-string
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sha256 content)
   (common-lisp:apply #'common-lisp:make-instance 'raw-string
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-string))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-string))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha256))
      (common-lisp:list
       (common-lisp:cons "sha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-string))
   common-lisp:nil))
(common-lisp:deftype raw-string-content () 'common-lisp:string)
(common-lisp:deftype raw-string-sha256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-application-revision-input common-lisp:nil
                       ((revision :initarg :|revision| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor
                         %register-application-revision-input-revision
                         :initform (common-lisp:error ":revision is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %register-application-revision-input-description
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %register-application-revision-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'register-application-revision-input
                    'make-register-application-revision-input))
 (common-lisp:defun make-register-application-revision-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision description application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-application-revision-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-on-premises-instance-input common-lisp:nil
                       ((iam-user-arn :initarg :|iamUserArn| :type
                         (common-lisp:or iam-user-arn common-lisp:null)
                         :accessor
                         %register-on-premises-instance-input-iam-user-arn
                         :initform common-lisp:nil)
                        (iam-session-arn :initarg :|iamSessionArn| :type
                         (common-lisp:or iam-session-arn common-lisp:null)
                         :accessor
                         %register-on-premises-instance-input-iam-session-arn
                         :initform common-lisp:nil)
                        (instance-name :initarg :|instanceName| :type
                         (common-lisp:or instance-name common-lisp:null)
                         :accessor
                         %register-on-premises-instance-input-instance-name
                         :initform
                         (common-lisp:error ":instancename is required"))))
 (common-lisp:export
  (common-lisp:list 'register-on-premises-instance-input
                    'make-register-on-premises-instance-input))
 (common-lisp:defun make-register-on-premises-instance-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-user-arn iam-session-arn
                     instance-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-on-premises-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-session-arn))
      (common-lisp:list
       (common-lisp:cons "iamSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "iamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-deployments common-lisp:nil
                       ((auto-update-outdated-instances-deployment-ids :initarg
                         :|autoUpdateOutdatedInstancesDeploymentIds| :type
                         (common-lisp:or deployments-list common-lisp:null)
                         :accessor
                         %related-deployments-auto-update-outdated-instances-deployment-ids
                         :initform common-lisp:nil)
                        (auto-update-outdated-instances-root-deployment-id
                         :initarg
                         :|autoUpdateOutdatedInstancesRootDeploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %related-deployments-auto-update-outdated-instances-root-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'related-deployments 'make-related-deployments))
 (common-lisp:defun make-related-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     auto-update-outdated-instances-deployment-ids
                     auto-update-outdated-instances-root-deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'related-deployments
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-deployments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-deployments))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-outdated-instances-root-deployment-id))
      (common-lisp:list
       (common-lisp:cons "autoUpdateOutdatedInstancesRootDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-outdated-instances-deployment-ids))
      (common-lisp:list
       (common-lisp:cons "autoUpdateOutdatedInstancesDeploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-deployments))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-on-premises-instances-input
                       common-lisp:nil
                       ((instance-names :initarg :|instanceNames| :type
                         (common-lisp:or instance-name-list common-lisp:null)
                         :accessor
                         %remove-tags-from-on-premises-instances-input-instance-names
                         :initform
                         (common-lisp:error ":instancenames is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %remove-tags-from-on-premises-instances-input-tags
                         :initform (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-on-premises-instances-input
                    'make-remove-tags-from-on-premises-instances-input))
 (common-lisp:defun make-remove-tags-from-on-premises-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-names tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-on-premises-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:deftype repository () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-arn-required-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-validation-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition revision-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'revision-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defclass revision-info common-lisp:nil
                       ((generic-revision-info :initarg :|genericRevisionInfo|
                         :type
                         (common-lisp:or generic-revision-info
                                         common-lisp:null)
                         :accessor %revision-info-generic-revision-info
                         :initform common-lisp:nil)
                        (revision-location :initarg :|revisionLocation| :type
                         (common-lisp:or revision-location common-lisp:null)
                         :accessor %revision-info-revision-location :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'revision-info 'make-revision-info))
 (common-lisp:defun make-revision-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generic-revision-info revision-location)
   (common-lisp:apply #'common-lisp:make-instance 'revision-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-location))
      (common-lisp:list
       (common-lisp:cons "revisionLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generic-revision-info))
      (common-lisp:list
       (common-lisp:cons "genericRevisionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype revision-info-list ()
   '(trivial-types:proper-list revision-info))
 (common-lisp:defun |make-revision-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass revision-location common-lisp:nil
                       ((app-spec-content :initarg :|appSpecContent| :type
                         (common-lisp:or app-spec-content common-lisp:null)
                         :accessor %revision-location-app-spec-content
                         :initform common-lisp:nil)
                        (string :initarg common-lisp:string :type
                         (common-lisp:or raw-string common-lisp:null) :accessor
                         %revision-location-string :initform common-lisp:nil)
                        (git-hub-location :initarg :|gitHubLocation| :type
                         (common-lisp:or git-hub-location common-lisp:null)
                         :accessor %revision-location-git-hub-location
                         :initform common-lisp:nil)
                        (s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %revision-location-s3location :initform
                         common-lisp:nil)
                        (revision-type :initarg :|revisionType| :type
                         (common-lisp:or revision-location-type
                                         common-lisp:null)
                         :accessor %revision-location-revision-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'revision-location 'make-revision-location))
 (common-lisp:defun make-revision-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-spec-content string git-hub-location
                     s3location revision-type)
   (common-lisp:apply #'common-lisp:make-instance 'revision-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-type))
      (common-lisp:list
       (common-lisp:cons "revisionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-hub-location))
      (common-lisp:list
       (common-lisp:cons "gitHubLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string))
      (common-lisp:list
       (common-lisp:cons "string"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-spec-content))
      (common-lisp:list
       (common-lisp:cons "appSpecContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype revision-location-list ()
   '(trivial-types:proper-list revision-location))
 (common-lisp:defun |make-revision-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revision-location-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition revision-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'revision-required-exception)))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition role-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'role-required-exception)))
(common-lisp:progn
 (common-lisp:defclass rollback-info common-lisp:nil
                       ((rollback-message :initarg :|rollbackMessage| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %rollback-info-rollback-message :initform
                         common-lisp:nil)
                        (rollback-triggering-deployment-id :initarg
                         :|rollbackTriggeringDeploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %rollback-info-rollback-triggering-deployment-id
                         :initform common-lisp:nil)
                        (rollback-deployment-id :initarg
                         :|rollbackDeploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %rollback-info-rollback-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rollback-info 'make-rollback-info))
 (common-lisp:defun make-rollback-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollback-message
                     rollback-triggering-deployment-id rollback-deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-deployment-id))
      (common-lisp:list
       (common-lisp:cons "rollbackDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-triggering-deployment-id))
      (common-lisp:list
       (common-lisp:cons "rollbackTriggeringDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-message))
      (common-lisp:list
       (common-lisp:cons "rollbackMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-info))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((e-tag :initarg :|eTag| :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %s3location-e-tag :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version-id common-lisp:null) :accessor
                         %s3location-version :initform common-lisp:nil)
                        (bundle-type :initarg :|bundleType| :type
                         (common-lisp:or bundle-type common-lisp:null)
                         :accessor %s3location-bundle-type :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3location-key :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3location-bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key e-tag version bundle-type key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-type))
      (common-lisp:list
       (common-lisp:cons "bundleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'e-tag))
      (common-lisp:list
       (common-lisp:cons "eTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype script-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass skip-wait-time-for-instance-termination-input
                       common-lisp:nil
                       ((deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         %skip-wait-time-for-instance-termination-input-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'skip-wait-time-for-instance-termination-input
                    'make-skip-wait-time-for-instance-termination-input))
 (common-lisp:defun make-skip-wait-time-for-instance-termination-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'skip-wait-time-for-instance-termination-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-deployment-input common-lisp:nil
                       ((auto-rollback-enabled :initarg :|autoRollbackEnabled|
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %stop-deployment-input-auto-rollback-enabled
                         :initform common-lisp:nil)
                        (deployment-id :initarg :|deploymentId| :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor %stop-deployment-input-deployment-id
                         :initform
                         (common-lisp:error ":deploymentid is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-deployment-input 'make-stop-deployment-input))
 (common-lisp:defun make-stop-deployment-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-rollback-enabled deployment-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-enabled))
      (common-lisp:list
       (common-lisp:cons "autoRollbackEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-deployment-output common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %stop-deployment-output-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or stop-status common-lisp:null)
                         :accessor %stop-deployment-output-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-deployment-output 'make-stop-deployment-output))
 (common-lisp:defun make-stop-deployment-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status)
   (common-lisp:apply #'common-lisp:make-instance 'stop-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   common-lisp:nil))
(common-lisp:deftype stop-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or tag-filter-type common-lisp:null)
                         :accessor %tag-filter-type :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %tag-filter-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %tag-filter-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defun make-tag-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tag-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-required-exception)))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-set-list-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-set-list-limit-exceeded-exception)))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:deftype target-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-target-filters| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass target-group-info common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or target-group-name common-lisp:null)
                         :accessor %target-group-info-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-group-info 'make-target-group-info))
 (common-lisp:defun make-target-group-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-info-list ()
   '(trivial-types:proper-list target-group-info))
 (common-lisp:defun |make-target-group-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-group-pair-info common-lisp:nil
                       ((test-traffic-route :initarg :|testTrafficRoute| :type
                         (common-lisp:or traffic-route common-lisp:null)
                         :accessor %target-group-pair-info-test-traffic-route
                         :initform common-lisp:nil)
                        (prod-traffic-route :initarg :|prodTrafficRoute| :type
                         (common-lisp:or traffic-route common-lisp:null)
                         :accessor %target-group-pair-info-prod-traffic-route
                         :initform common-lisp:nil)
                        (target-groups :initarg :|targetGroups| :type
                         (common-lisp:or target-group-info-list
                                         common-lisp:null)
                         :accessor %target-group-pair-info-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-group-pair-info 'make-target-group-pair-info))
 (common-lisp:defun make-target-group-pair-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key test-traffic-route prod-traffic-route
                     target-groups)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-pair-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "targetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prod-traffic-route))
      (common-lisp:list
       (common-lisp:cons "prodTrafficRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-traffic-route))
      (common-lisp:list
       (common-lisp:cons "testTrafficRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-pair-info-list ()
   '(trivial-types:proper-list target-group-pair-info))
 (common-lisp:defun |make-target-group-pair-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-pair-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-id-list () '(trivial-types:proper-list target-id))
 (common-lisp:defun |make-target-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-instances common-lisp:nil
                       ((ec2tag-set :initarg :|ec2TagSet| :type
                         (common-lisp:or ec2tag-set common-lisp:null) :accessor
                         %target-instances-ec2tag-set :initform
                         common-lisp:nil)
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-name-list
                                         common-lisp:null)
                         :accessor %target-instances-auto-scaling-groups
                         :initform common-lisp:nil)
                        (tag-filters :initarg :|tagFilters| :type
                         (common-lisp:or ec2tag-filter-list common-lisp:null)
                         :accessor %target-instances-tag-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-instances 'make-target-instances))
 (common-lisp:defun make-target-instances
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ec2tag-set auto-scaling-groups
                     tag-filters)
   (common-lisp:apply #'common-lisp:make-instance 'target-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filters))
      (common-lisp:list
       (common-lisp:cons "tagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-instances))
   common-lisp:nil))
(common-lisp:deftype target-label () 'common-lisp:string)
(common-lisp:deftype target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass time-based-canary common-lisp:nil
                       ((canary-interval :initarg :|canaryInterval| :type
                         (common-lisp:or wait-time-in-mins common-lisp:null)
                         :accessor %time-based-canary-canary-interval :initform
                         common-lisp:nil)
                        (canary-percentage :initarg :|canaryPercentage| :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         %time-based-canary-canary-percentage :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'time-based-canary 'make-time-based-canary))
 (common-lisp:defun make-time-based-canary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canary-interval canary-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'time-based-canary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-based-canary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-based-canary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-percentage))
      (common-lisp:list
       (common-lisp:cons "canaryPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-interval))
      (common-lisp:list
       (common-lisp:cons "canaryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-based-canary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-based-linear common-lisp:nil
                       ((linear-interval :initarg :|linearInterval| :type
                         (common-lisp:or wait-time-in-mins common-lisp:null)
                         :accessor %time-based-linear-linear-interval :initform
                         common-lisp:nil)
                        (linear-percentage :initarg :|linearPercentage| :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         %time-based-linear-linear-percentage :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'time-based-linear 'make-time-based-linear))
 (common-lisp:defun make-time-based-linear
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key linear-interval linear-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'time-based-linear
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-based-linear))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-based-linear))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear-percentage))
      (common-lisp:list
       (common-lisp:cons "linearPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear-interval))
      (common-lisp:list
       (common-lisp:cons "linearInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-based-linear))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-range common-lisp:nil
                       ((end :initarg :|end| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-end :initform common-lisp:nil)
                        (start :initarg :|start| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-start :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defun make-time-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end start)
   (common-lisp:apply #'common-lisp:make-instance 'time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass traffic-route common-lisp:nil
                       ((listener-arns :initarg :|listenerArns| :type
                         (common-lisp:or listener-arn-list common-lisp:null)
                         :accessor %traffic-route-listener-arns :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'traffic-route 'make-traffic-route))
 (common-lisp:defun make-traffic-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listener-arns)
   (common-lisp:apply #'common-lisp:make-instance 'traffic-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arns))
      (common-lisp:list
       (common-lisp:cons "listenerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass traffic-routing-config common-lisp:nil
                       ((time-based-linear :initarg :|timeBasedLinear| :type
                         (common-lisp:or time-based-linear common-lisp:null)
                         :accessor %traffic-routing-config-time-based-linear
                         :initform common-lisp:nil)
                        (time-based-canary :initarg :|timeBasedCanary| :type
                         (common-lisp:or time-based-canary common-lisp:null)
                         :accessor %traffic-routing-config-time-based-canary
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or traffic-routing-type common-lisp:null)
                         :accessor %traffic-routing-config-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'traffic-routing-config 'make-traffic-routing-config))
 (common-lisp:defun make-traffic-routing-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-based-linear time-based-canary type)
   (common-lisp:apply #'common-lisp:make-instance 'traffic-routing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-based-canary))
      (common-lisp:list
       (common-lisp:cons "timeBasedCanary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-based-linear))
      (common-lisp:list
       (common-lisp:cons "timeBasedLinear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   common-lisp:nil))
(common-lisp:deftype traffic-routing-type () 'common-lisp:string)
(common-lisp:deftype traffic-weight () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass trigger-config common-lisp:nil
                       ((trigger-events :initarg :|triggerEvents| :type
                         (common-lisp:or trigger-event-type-list
                                         common-lisp:null)
                         :accessor %trigger-config-trigger-events :initform
                         common-lisp:nil)
                        (trigger-target-arn :initarg :|triggerTargetArn| :type
                         (common-lisp:or trigger-target-arn common-lisp:null)
                         :accessor %trigger-config-trigger-target-arn :initform
                         common-lisp:nil)
                        (trigger-name :initarg :|triggerName| :type
                         (common-lisp:or trigger-name common-lisp:null)
                         :accessor %trigger-config-trigger-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'trigger-config 'make-trigger-config))
 (common-lisp:defun make-trigger-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trigger-events trigger-target-arn
                     trigger-name)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-name))
      (common-lisp:list
       (common-lisp:cons "triggerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-target-arn))
      (common-lisp:list
       (common-lisp:cons "triggerTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-events))
      (common-lisp:list
       (common-lisp:cons "triggerEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-config-list ()
   '(trivial-types:proper-list trigger-config))
 (common-lisp:defun |make-trigger-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trigger-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trigger-event-type-list ()
   '(trivial-types:proper-list trigger-event-type))
 (common-lisp:defun |make-trigger-event-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger-event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trigger-name () 'common-lisp:string)
(common-lisp:deftype trigger-target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition trigger-targets-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'trigger-targets-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-action-for-deployment-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'unsupported-action-for-deployment-type-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-input common-lisp:nil
                       ((new-application-name :initarg :|newApplicationName|
                         :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %update-application-input-new-application-name
                         :initform common-lisp:nil)
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor %update-application-input-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-application-input 'make-update-application-input))
 (common-lisp:defun make-update-application-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key new-application-name application-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-application-name))
      (common-lisp:list
       (common-lisp:cons "newApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-deployment-group-input common-lisp:nil
                       ((on-premises-tag-set :initarg :|onPremisesTagSet| :type
                         (common-lisp:or on-premises-tag-set common-lisp:null)
                         :accessor
                         %update-deployment-group-input-on-premises-tag-set
                         :initform common-lisp:nil)
                        (ecs-services :initarg :|ecsServices| :type
                         (common-lisp:or ecsservice-list common-lisp:null)
                         :accessor %update-deployment-group-input-ecs-services
                         :initform common-lisp:nil)
                        (ec2tag-set :initarg :|ec2TagSet| :type
                         (common-lisp:or ec2tag-set common-lisp:null) :accessor
                         %update-deployment-group-input-ec2tag-set :initform
                         common-lisp:nil)
                        (load-balancer-info :initarg :|loadBalancerInfo| :type
                         (common-lisp:or load-balancer-info common-lisp:null)
                         :accessor
                         %update-deployment-group-input-load-balancer-info
                         :initform common-lisp:nil)
                        (blue-green-deployment-configuration :initarg
                         :|blueGreenDeploymentConfiguration| :type
                         (common-lisp:or blue-green-deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-blue-green-deployment-configuration
                         :initform common-lisp:nil)
                        (deployment-style :initarg :|deploymentStyle| :type
                         (common-lisp:or deployment-style common-lisp:null)
                         :accessor
                         %update-deployment-group-input-deployment-style
                         :initform common-lisp:nil)
                        (outdated-instances-strategy :initarg
                         :|outdatedInstancesStrategy| :type
                         (common-lisp:or outdated-instances-strategy
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-outdated-instances-strategy
                         :initform common-lisp:nil)
                        (auto-rollback-configuration :initarg
                         :|autoRollbackConfiguration| :type
                         (common-lisp:or auto-rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-auto-rollback-configuration
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :|alarmConfiguration|
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %update-deployment-group-input-alarm-configuration
                         :initform common-lisp:nil)
                        (trigger-configurations :initarg
                         :|triggerConfigurations| :type
                         (common-lisp:or trigger-config-list common-lisp:null)
                         :accessor
                         %update-deployment-group-input-trigger-configurations
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :|serviceRoleArn| :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-deployment-group-input-service-role-arn
                         :initform common-lisp:nil)
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-name-list
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-auto-scaling-groups
                         :initform common-lisp:nil)
                        (on-premises-instance-tag-filters :initarg
                         :|onPremisesInstanceTagFilters| :type
                         (common-lisp:or tag-filter-list common-lisp:null)
                         :accessor
                         %update-deployment-group-input-on-premises-instance-tag-filters
                         :initform common-lisp:nil)
                        (ec2tag-filters :initarg :|ec2TagFilters| :type
                         (common-lisp:or ec2tag-filter-list common-lisp:null)
                         :accessor
                         %update-deployment-group-input-ec2tag-filters
                         :initform common-lisp:nil)
                        (deployment-config-name :initarg
                         :|deploymentConfigName| :type
                         (common-lisp:or deployment-config-name
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-deployment-config-name
                         :initform common-lisp:nil)
                        (new-deployment-group-name :initarg
                         :|newDeploymentGroupName| :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-new-deployment-group-name
                         :initform common-lisp:nil)
                        (current-deployment-group-name :initarg
                         :|currentDeploymentGroupName| :type
                         (common-lisp:or deployment-group-name
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-input-current-deployment-group-name
                         :initform
                         (common-lisp:error
                          ":currentdeploymentgroupname is required"))
                        (application-name :initarg :|applicationName| :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor
                         %update-deployment-group-input-application-name
                         :initform
                         (common-lisp:error ":applicationname is required"))))
 (common-lisp:export
  (common-lisp:list 'update-deployment-group-input
                    'make-update-deployment-group-input))
 (common-lisp:defun make-update-deployment-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-premises-tag-set ecs-services
                     ec2tag-set load-balancer-info
                     blue-green-deployment-configuration deployment-style
                     outdated-instances-strategy auto-rollback-configuration
                     alarm-configuration trigger-configurations
                     service-role-arn auto-scaling-groups
                     on-premises-instance-tag-filters ec2tag-filters
                     deployment-config-name new-deployment-group-name
                     current-deployment-group-name application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-deployment-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "currentDeploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "newDeploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-deployment-group-output common-lisp:nil
                       ((hooks-not-cleaned-up :initarg :|hooksNotCleanedUp|
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor
                         %update-deployment-group-output-hooks-not-cleaned-up
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-deployment-group-output
                    'make-update-deployment-group-output))
 (common-lisp:defun make-update-deployment-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hooks-not-cleaned-up)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-deployment-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hooks-not-cleaned-up))
      (common-lisp:list
       (common-lisp:cons "hooksNotCleanedUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-id () 'common-lisp:string)
(common-lisp:deftype wait-time-in-mins () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun add-tags-to-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags instance-names)
   (common-lisp:declare (common-lisp:ignorable tags instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-tags-to-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddTagsToOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun batch-get-application-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name revisions)
   (common-lisp:declare (common-lisp:ignorable application-name revisions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-application-revisions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetApplicationRevisions"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-application-revisions))
(common-lisp:progn
 (common-lisp:defun batch-get-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-names)
   (common-lisp:declare (common-lisp:ignorable application-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-applications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetApplications"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-applications))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-names)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-groups-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentGroups"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-groups))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id instance-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-id instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-instances))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id target-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-id target-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-targets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentTargets"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-targets))
(common-lisp:progn
 (common-lisp:defun batch-get-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeployments"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployments))
(common-lisp:progn
 (common-lisp:defun batch-get-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names)
   (common-lisp:declare (common-lisp:ignorable instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun continue-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id deployment-wait-type)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id deployment-wait-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-continue-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ContinueDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'continue-deployment))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name compute-platform tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name compute-platform tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     revision deployment-config-name description
                     ignore-application-stop-failures target-instances
                     auto-rollback-configuration update-outdated-instances-only
                     file-exists-behavior override-alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name revision
     deployment-config-name description ignore-application-stop-failures
     target-instances auto-rollback-configuration
     update-outdated-instances-only file-exists-behavior
     override-alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun create-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name
                     minimum-healthy-hosts traffic-routing-config
                     compute-platform)
   (common-lisp:declare
    (common-lisp:ignorable deployment-config-name minimum-healthy-hosts
     traffic-routing-config compute-platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment-config))
(common-lisp:progn
 (common-lisp:defun create-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     deployment-config-name ec2tag-filters
                     on-premises-instance-tag-filters auto-scaling-groups
                     service-role-arn trigger-configurations
                     alarm-configuration auto-rollback-configuration
                     outdated-instances-strategy deployment-style
                     blue-green-deployment-configuration load-balancer-info
                     ec2tag-set ecs-services on-premises-tag-set tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name
     deployment-config-name ec2tag-filters on-premises-instance-tag-filters
     auto-scaling-groups service-role-arn trigger-configurations
     alarm-configuration auto-rollback-configuration
     outdated-instances-strategy deployment-style
     blue-green-deployment-configuration load-balancer-info ec2tag-set
     ecs-services on-premises-tag-set tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment-group))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:declare (common-lisp:ignorable deployment-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-deployment-config))
(common-lisp:progn
 (common-lisp:defun delete-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-deployment-group))
(common-lisp:progn
 (common-lisp:defun delete-git-hub-account-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-name)
   (common-lisp:declare (common-lisp:ignorable token-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-git-hub-account-token-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGitHubAccountToken"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-git-hub-account-token))
(common-lisp:progn
 (common-lisp:defun delete-resources-by-external-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key external-id)
   (common-lisp:declare (common-lisp:ignorable external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resources-by-external-id-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourcesByExternalId"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resources-by-external-id))
(common-lisp:progn
 (common-lisp:defun deregister-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-on-premises-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-application-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name revision)
   (common-lisp:declare (common-lisp:ignorable application-name revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetApplicationRevision"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-revision))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:declare (common-lisp:ignorable deployment-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-config))
(common-lisp:progn
 (common-lisp:defun get-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-group))
(common-lisp:progn
 (common-lisp:defun get-deployment-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id instance-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-instance))
(common-lisp:progn
 (common-lisp:defun get-deployment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id target-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentTarget"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-target))
(common-lisp:progn
 (common-lisp:defun get-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-on-premises-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun list-application-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name sort-by sort-order
                     s3bucket s3key-prefix deployed next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name sort-by sort-order s3bucket
     s3key-prefix deployed next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-application-revisions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApplicationRevisions"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-revisions))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApplications"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-deployment-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-configs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentConfigs"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-configs))
(common-lisp:progn
 (common-lisp:defun list-deployment-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name next-token)
   (common-lisp:declare (common-lisp:ignorable application-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentGroups"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-groups))
(common-lisp:progn
 (common-lisp:defun list-deployment-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token
                     instance-status-filter instance-type-filter)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token instance-status-filter
     instance-type-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-instances))
(common-lisp:progn
 (common-lisp:defun list-deployment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token target-filters)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token target-filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentTargets"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-targets))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     external-id include-only-statuses create-time-range
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name external-id
     include-only-statuses create-time-range next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeployments"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-git-hub-account-token-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-git-hub-account-token-names-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGitHubAccountTokenNames"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-git-hub-account-token-names))
(common-lisp:progn
 (common-lisp:defun list-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-status tag-filters
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable registration-status tag-filters next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-on-premises-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-event-hook-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id
                     lifecycle-event-hook-execution-id status)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id lifecycle-event-hook-execution-id
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-lifecycle-event-hook-execution-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutLifecycleEventHookExecutionStatus"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-lifecycle-event-hook-execution-status))
(common-lisp:progn
 (common-lisp:defun register-application-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description revision)
   (common-lisp:declare
    (common-lisp:ignorable application-name description revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-application-revision-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterApplicationRevision"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-application-revision))
(common-lisp:progn
 (common-lisp:defun register-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name iam-session-arn
                     iam-user-arn)
   (common-lisp:declare
    (common-lisp:ignorable instance-name iam-session-arn iam-user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-on-premises-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags instance-names)
   (common-lisp:declare (common-lisp:ignorable tags instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTagsFromOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun skip-wait-time-for-instance-termination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-skip-wait-time-for-instance-termination-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SkipWaitTimeForInstanceTermination"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'skip-wait-time-for-instance-termination))
(common-lisp:progn
 (common-lisp:defun stop-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id auto-rollback-enabled)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id auto-rollback-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-deployment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name new-application-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name new-application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-deployment-group-name new-deployment-group-name
                     deployment-config-name ec2tag-filters
                     on-premises-instance-tag-filters auto-scaling-groups
                     service-role-arn trigger-configurations
                     alarm-configuration auto-rollback-configuration
                     outdated-instances-strategy deployment-style
                     blue-green-deployment-configuration load-balancer-info
                     ec2tag-set ecs-services on-premises-tag-set)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-deployment-group-name
     new-deployment-group-name deployment-config-name ec2tag-filters
     on-premises-instance-tag-filters auto-scaling-groups service-role-arn
     trigger-configurations alarm-configuration auto-rollback-configuration
     outdated-instances-strategy deployment-style
     blue-green-deployment-configuration load-balancer-info ec2tag-set
     ecs-services on-premises-tag-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-deployment-group))
