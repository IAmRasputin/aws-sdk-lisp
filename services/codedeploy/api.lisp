;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codedeploy/api
  (:use)
  (:nicknames #:aws/codedeploy)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codedeploy/api)
(common-lisp:progn
 (common-lisp:defclass codedeploy-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codedeploy" :protocol
                        :json))
 (common-lisp:export 'codedeploy-request))
(common-lisp:progn
 (common-lisp:define-condition codedeploy-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codedeploy-error))
(common-lisp:defvar *error-map*
  '(("AlarmsLimitExceededException" . alarms-limit-exceeded-exception)
    ("ApplicationAlreadyExistsException"
     . application-already-exists-exception)
    ("ApplicationDoesNotExistException" . application-does-not-exist-exception)
    ("ApplicationLimitExceededException"
     . application-limit-exceeded-exception)
    ("ApplicationNameRequiredException" . application-name-required-exception)
    ("ArnNotSupportedException" . arn-not-supported-exception)
    ("BatchLimitExceededException" . batch-limit-exceeded-exception)
    ("BucketNameFilterRequiredException"
     . bucket-name-filter-required-exception)
    ("DeploymentAlreadyCompletedException"
     . deployment-already-completed-exception)
    ("DeploymentAlreadyStartedException"
     . deployment-already-started-exception)
    ("DeploymentConfigAlreadyExistsException"
     . deployment-config-already-exists-exception)
    ("DeploymentConfigDoesNotExistException"
     . deployment-config-does-not-exist-exception)
    ("DeploymentConfigInUseException" . deployment-config-in-use-exception)
    ("DeploymentConfigLimitExceededException"
     . deployment-config-limit-exceeded-exception)
    ("DeploymentConfigNameRequiredException"
     . deployment-config-name-required-exception)
    ("DeploymentDoesNotExistException" . deployment-does-not-exist-exception)
    ("DeploymentGroupAlreadyExistsException"
     . deployment-group-already-exists-exception)
    ("DeploymentGroupDoesNotExistException"
     . deployment-group-does-not-exist-exception)
    ("DeploymentGroupLimitExceededException"
     . deployment-group-limit-exceeded-exception)
    ("DeploymentGroupNameRequiredException"
     . deployment-group-name-required-exception)
    ("DeploymentIdRequiredException" . deployment-id-required-exception)
    ("DeploymentIsNotInReadyStateException"
     . deployment-is-not-in-ready-state-exception)
    ("DeploymentLimitExceededException" . deployment-limit-exceeded-exception)
    ("DeploymentNotStartedException" . deployment-not-started-exception)
    ("DeploymentTargetDoesNotExistException"
     . deployment-target-does-not-exist-exception)
    ("DeploymentTargetIdRequiredException"
     . deployment-target-id-required-exception)
    ("DeploymentTargetListSizeExceededException"
     . deployment-target-list-size-exceeded-exception)
    ("DescriptionTooLongException" . description-too-long-exception)
    ("ECSServiceMappingLimitExceededException"
     . ecsservice-mapping-limit-exceeded-exception)
    ("GitHubAccountTokenDoesNotExistException"
     . git-hub-account-token-does-not-exist-exception)
    ("GitHubAccountTokenNameRequiredException"
     . git-hub-account-token-name-required-exception)
    ("IamArnRequiredException" . iam-arn-required-exception)
    ("IamSessionArnAlreadyRegisteredException"
     . iam-session-arn-already-registered-exception)
    ("IamUserArnAlreadyRegisteredException"
     . iam-user-arn-already-registered-exception)
    ("IamUserArnRequiredException" . iam-user-arn-required-exception)
    ("InstanceDoesNotExistException" . instance-does-not-exist-exception)
    ("InstanceIdRequiredException" . instance-id-required-exception)
    ("InstanceLimitExceededException" . instance-limit-exceeded-exception)
    ("InstanceNameAlreadyRegisteredException"
     . instance-name-already-registered-exception)
    ("InstanceNameRequiredException" . instance-name-required-exception)
    ("InstanceNotRegisteredException" . instance-not-registered-exception)
    ("InvalidAlarmConfigException" . invalid-alarm-config-exception)
    ("InvalidApplicationNameException" . invalid-application-name-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidAutoRollbackConfigException"
     . invalid-auto-rollback-config-exception)
    ("InvalidAutoScalingGroupException" . invalid-auto-scaling-group-exception)
    ("InvalidBlueGreenDeploymentConfigurationException"
     . invalid-blue-green-deployment-configuration-exception)
    ("InvalidBucketNameFilterException" . invalid-bucket-name-filter-exception)
    ("InvalidComputePlatformException" . invalid-compute-platform-exception)
    ("InvalidDeployedStateFilterException"
     . invalid-deployed-state-filter-exception)
    ("InvalidDeploymentConfigNameException"
     . invalid-deployment-config-name-exception)
    ("InvalidDeploymentGroupNameException"
     . invalid-deployment-group-name-exception)
    ("InvalidDeploymentIdException" . invalid-deployment-id-exception)
    ("InvalidDeploymentInstanceTypeException"
     . invalid-deployment-instance-type-exception)
    ("InvalidDeploymentStatusException" . invalid-deployment-status-exception)
    ("InvalidDeploymentStyleException" . invalid-deployment-style-exception)
    ("InvalidDeploymentTargetIdException"
     . invalid-deployment-target-id-exception)
    ("InvalidDeploymentWaitTypeException"
     . invalid-deployment-wait-type-exception)
    ("InvalidEC2TagCombinationException"
     . invalid-ec2tag-combination-exception)
    ("InvalidEC2TagException" . invalid-ec2tag-exception)
    ("InvalidECSServiceException" . invalid-ecsservice-exception)
    ("InvalidExternalIdException" . invalid-external-id-exception)
    ("InvalidFileExistsBehaviorException"
     . invalid-file-exists-behavior-exception)
    ("InvalidGitHubAccountTokenException"
     . invalid-git-hub-account-token-exception)
    ("InvalidGitHubAccountTokenNameException"
     . invalid-git-hub-account-token-name-exception)
    ("InvalidIamSessionArnException" . invalid-iam-session-arn-exception)
    ("InvalidIamUserArnException" . invalid-iam-user-arn-exception)
    ("InvalidIgnoreApplicationStopFailuresValueException"
     . invalid-ignore-application-stop-failures-value-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidInstanceIdException" . invalid-instance-id-exception)
    ("InvalidInstanceNameException" . invalid-instance-name-exception)
    ("InvalidInstanceStatusException" . invalid-instance-status-exception)
    ("InvalidInstanceTypeException" . invalid-instance-type-exception)
    ("InvalidKeyPrefixFilterException" . invalid-key-prefix-filter-exception)
    ("InvalidLifecycleEventHookExecutionIdException"
     . invalid-lifecycle-event-hook-execution-id-exception)
    ("InvalidLifecycleEventHookExecutionStatusException"
     . invalid-lifecycle-event-hook-execution-status-exception)
    ("InvalidLoadBalancerInfoException" . invalid-load-balancer-info-exception)
    ("InvalidMinimumHealthyHostValueException"
     . invalid-minimum-healthy-host-value-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidOnPremisesTagCombinationException"
     . invalid-on-premises-tag-combination-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidRegistrationStatusException"
     . invalid-registration-status-exception)
    ("InvalidRevisionException" . invalid-revision-exception)
    ("InvalidRoleException" . invalid-role-exception)
    ("InvalidSortByException" . invalid-sort-by-exception)
    ("InvalidSortOrderException" . invalid-sort-order-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("InvalidTagFilterException" . invalid-tag-filter-exception)
    ("InvalidTagsToAddException" . invalid-tags-to-add-exception)
    ("InvalidTargetException" . invalid-target-exception)
    ("InvalidTargetFilterNameException" . invalid-target-filter-name-exception)
    ("InvalidTargetGroupPairException" . invalid-target-group-pair-exception)
    ("InvalidTargetInstancesException" . invalid-target-instances-exception)
    ("InvalidTimeRangeException" . invalid-time-range-exception)
    ("InvalidTrafficRoutingConfigurationException"
     . invalid-traffic-routing-configuration-exception)
    ("InvalidTriggerConfigException" . invalid-trigger-config-exception)
    ("InvalidUpdateOutdatedInstancesOnlyValueException"
     . invalid-update-outdated-instances-only-value-exception)
    ("LifecycleEventAlreadyCompletedException"
     . lifecycle-event-already-completed-exception)
    ("LifecycleHookLimitExceededException"
     . lifecycle-hook-limit-exceeded-exception)
    ("MultipleIamArnsProvidedException" . multiple-iam-arns-provided-exception)
    ("OperationNotSupportedException" . operation-not-supported-exception)
    ("ResourceArnRequiredException" . resource-arn-required-exception)
    ("ResourceValidationException" . resource-validation-exception)
    ("RevisionDoesNotExistException" . revision-does-not-exist-exception)
    ("RevisionRequiredException" . revision-required-exception)
    ("RoleRequiredException" . role-required-exception)
    ("TagLimitExceededException" . tag-limit-exceeded-exception)
    ("TagRequiredException" . tag-required-exception)
    ("TagSetListLimitExceededException"
     . tag-set-list-limit-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TriggerTargetsLimitExceededException"
     . trigger-targets-limit-exceeded-exception)
    ("UnsupportedActionForDeploymentTypeException"
     . unsupported-action-for-deployment-type-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-on-premises-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-on-premises-instances-input-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or instance-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-on-premises-instances-input
                    'make-add-tags-to-on-premises-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:deftype additional-deployment-status-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (alarm (:copier common-lisp:nil) (:conc-name "struct-shape-alarm-"))
   (name common-lisp:nil :type (common-lisp:or alarm-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (alarm-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-alarm-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ignore-poll-alarm-failure common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarm-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alarm-configuration 'make-alarm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-poll-alarm-failure))
      (common-lisp:list
       (common-lisp:cons "ignorePollAlarmFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition alarms-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'alarms-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (app-spec-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-spec-content-"))
   (content common-lisp:nil :type
    (common-lisp:or raw-string-content common-lisp:null))
   (sha256 common-lisp:nil :type
    (common-lisp:or raw-string-sha256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-spec-content 'make-app-spec-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-spec-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-spec-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha256))
      (common-lisp:list
       (common-lisp:cons "sha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-spec-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition application-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition application-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-does-not-exist-exception)))
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-info-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (linked-to-git-hub common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (git-hub-account-name common-lisp:nil :type
    (common-lisp:or git-hub-account-token-name common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-info 'make-application-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-to-git-hub))
      (common-lisp:list
       (common-lisp:cons "linkedToGitHub"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-account-name))
      (common-lisp:list
       (common-lisp:cons "gitHubAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition application-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-limit-exceeded-exception)))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition application-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'application-name-required-exception)))
(common-lisp:deftype application-revision-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications-info-list ()
   '(trivial-types:proper-list application-info))
 (common-lisp:defun |make-applications-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype applications-list ()
   '(trivial-types:proper-list application-name))
 (common-lisp:defun |make-applications-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition arn-not-supported-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'arn-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-rollback-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-rollback-configuration-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or auto-rollback-events-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-rollback-configuration
                    'make-auto-rollback-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-rollback-configuration))
   common-lisp:nil))
(common-lisp:deftype auto-rollback-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-rollback-events-list ()
   '(trivial-types:proper-list auto-rollback-event))
 (common-lisp:defun |make-auto-rollback-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-rollback-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-group-"))
   (name common-lisp:nil :type
    (common-lisp:or auto-scaling-group-name common-lisp:null))
   (hook common-lisp:nil :type
    (common-lisp:or auto-scaling-group-hook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group 'make-auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook))
      (common-lisp:list
       (common-lisp:cons "hook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-scaling-group))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-hook () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-scaling-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-name-list ()
   '(trivial-types:proper-list auto-scaling-group-name))
 (common-lisp:defun |make-auto-scaling-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-application-revisions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-application-revisions-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (revisions (common-lisp:error ":revisions is required") :type
    (common-lisp:or revision-location-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-application-revisions-input
                    'make-batch-get-application-revisions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-application-revisions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-application-revisions-output-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (revisions common-lisp:nil :type
    (common-lisp:or revision-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-application-revisions-output
                    'make-batch-get-application-revisions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-application-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-applications-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-applications-input-"))
   (application-names (common-lisp:error ":applicationnames is required") :type
    (common-lisp:or applications-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-applications-input
                    'make-batch-get-applications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-names))
      (common-lisp:list
       (common-lisp:cons "applicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-applications-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-applications-output-"))
   (applications-info common-lisp:nil :type
    (common-lisp:or applications-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-applications-output
                    'make-batch-get-applications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications-info))
      (common-lisp:list
       (common-lisp:cons "applicationsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-applications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-groups-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-groups-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-names
    (common-lisp:error ":deploymentgroupnames is required") :type
    (common-lisp:or deployment-groups-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-groups-input
                    'make-batch-get-deployment-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-names))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-groups-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-groups-output-"))
   (deployment-groups-info common-lisp:nil :type
    (common-lisp:or deployment-group-info-list common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-groups-output
                    'make-batch-get-deployment-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-groups-info))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-instances-input-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or deployment-id common-lisp:null))
   (instance-ids (common-lisp:error ":instanceids is required") :type
    (common-lisp:or instances-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-instances-input
                    'make-batch-get-deployment-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "instanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-instances-output-"))
   (instances-summary common-lisp:nil :type
    (common-lisp:or instance-summary-list common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-instances-output
                    'make-batch-get-deployment-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-summary))
      (common-lisp:list
       (common-lisp:cons "instancesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-targets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-targets-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-ids common-lisp:nil :type
    (common-lisp:or target-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-targets-input
                    'make-batch-get-deployment-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ids))
      (common-lisp:list
       (common-lisp:cons "targetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployment-targets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployment-targets-output-"))
   (deployment-targets common-lisp:nil :type
    (common-lisp:or deployment-target-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployment-targets-output
                    'make-batch-get-deployment-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "deploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployment-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployments-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployments-input-"))
   (deployment-ids (common-lisp:error ":deploymentids is required") :type
    (common-lisp:or deployments-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployments-input
                    'make-batch-get-deployments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-ids))
      (common-lisp:list
       (common-lisp:cons "deploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-deployments-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-deployments-output-"))
   (deployments-info common-lisp:nil :type
    (common-lisp:or deployments-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-deployments-output
                    'make-batch-get-deployments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments-info))
      (common-lisp:list
       (common-lisp:cons "deploymentsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-on-premises-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-on-premises-instances-input-"))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or instance-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-on-premises-instances-input
                    'make-batch-get-on-premises-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-on-premises-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-on-premises-instances-output-"))
   (instance-infos common-lisp:nil :type
    (common-lisp:or instance-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-on-premises-instances-output
                    'make-batch-get-on-premises-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-infos))
      (common-lisp:list
       (common-lisp:cons "instanceInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-on-premises-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition batch-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'batch-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (blue-green-deployment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-blue-green-deployment-configuration-"))
   (terminate-blue-instances-on-deployment-success common-lisp:nil :type
    (common-lisp:or blue-instance-termination-option common-lisp:null))
   (deployment-ready-option common-lisp:nil :type
    (common-lisp:or deployment-ready-option common-lisp:null))
   (green-fleet-provisioning-option common-lisp:nil :type
    (common-lisp:or green-fleet-provisioning-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-configuration
                    'make-blue-green-deployment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-blue-instances-on-deployment-success))
      (common-lisp:list
       (common-lisp:cons "terminateBlueInstancesOnDeploymentSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-ready-option))
      (common-lisp:list
       (common-lisp:cons "deploymentReadyOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'green-fleet-provisioning-option))
      (common-lisp:list
       (common-lisp:cons "greenFleetProvisioningOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (blue-instance-termination-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-blue-instance-termination-option-"))
   (action common-lisp:nil :type
    (common-lisp:or instance-action common-lisp:null))
   (termination-wait-time-in-minutes common-lisp:nil :type
    (common-lisp:or duration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blue-instance-termination-option
                    'make-blue-instance-termination-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-wait-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "terminationWaitTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-instance-termination-option))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bucket-name-filter-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-name-filter-required-exception)))
(common-lisp:deftype bundle-type () 'common-lisp:string)
(common-lisp:deftype cloud-formation-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-target-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or time common-lisp:null))
   (lifecycle-events common-lisp:nil :type
    (common-lisp:or lifecycle-event-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or target-status common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or cloud-formation-resource-type common-lisp:null))
   (target-version-weight common-lisp:nil :type
    (common-lisp:or traffic-weight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-target 'make-cloud-formation-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-version-weight))
      (common-lisp:list
       (common-lisp:cons "targetVersionWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-target))
   common-lisp:nil))
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:deftype compute-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (continue-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-continue-deployment-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (deployment-wait-type common-lisp:nil :type
    (common-lisp:or deployment-wait-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continue-deployment-input
                    'make-continue-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-wait-type))
      (common-lisp:list
       (common-lisp:cons "deploymentWaitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-input 'make-create-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-output-"))
   (application-id common-lisp:nil :type
    (common-lisp:or application-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-output
                    'make-create-application-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-config-input-"))
   (deployment-config-name
    (common-lisp:error ":deploymentconfigname is required") :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (minimum-healthy-hosts common-lisp:nil :type
    (common-lisp:or minimum-healthy-hosts common-lisp:null))
   (traffic-routing-config common-lisp:nil :type
    (common-lisp:or traffic-routing-config common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-config-input
                    'make-create-deployment-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-hosts))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-routing-config))
      (common-lisp:list
       (common-lisp:cons "trafficRoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-config-output-"))
   (deployment-config-id common-lisp:nil :type
    (common-lisp:or deployment-config-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-config-output
                    'make-create-deployment-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-id))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-group-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name
    (common-lisp:error ":deploymentgroupname is required") :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (ec2tag-filters common-lisp:nil :type
    (common-lisp:or ec2tag-filter-list common-lisp:null))
   (on-premises-instance-tag-filters common-lisp:nil :type
    (common-lisp:or tag-filter-list common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-name-list common-lisp:null))
   (service-role-arn (common-lisp:error ":servicerolearn is required") :type
    (common-lisp:or role common-lisp:null))
   (trigger-configurations common-lisp:nil :type
    (common-lisp:or trigger-config-list common-lisp:null))
   (alarm-configuration common-lisp:nil :type
    (common-lisp:or alarm-configuration common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-configuration common-lisp:null))
   (outdated-instances-strategy common-lisp:nil :type
    (common-lisp:or outdated-instances-strategy common-lisp:null))
   (deployment-style common-lisp:nil :type
    (common-lisp:or deployment-style common-lisp:null))
   (blue-green-deployment-configuration common-lisp:nil :type
    (common-lisp:or blue-green-deployment-configuration common-lisp:null))
   (load-balancer-info common-lisp:nil :type
    (common-lisp:or load-balancer-info common-lisp:null))
   (ec2tag-set common-lisp:nil :type
    (common-lisp:or ec2tag-set common-lisp:null))
   (ecs-services common-lisp:nil :type
    (common-lisp:or ecsservice-list common-lisp:null))
   (on-premises-tag-set common-lisp:nil :type
    (common-lisp:or on-premises-tag-set common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-group-input
                    'make-create-deployment-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-group-output-"))
   (deployment-group-id common-lisp:nil :type
    (common-lisp:or deployment-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-group-output
                    'make-create-deployment-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-group-id))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name common-lisp:nil :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (ignore-application-stop-failures common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (target-instances common-lisp:nil :type
    (common-lisp:or target-instances common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-configuration common-lisp:null))
   (update-outdated-instances-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (file-exists-behavior common-lisp:nil :type
    (common-lisp:or file-exists-behavior common-lisp:null))
   (override-alarm-configuration common-lisp:nil :type
    (common-lisp:or alarm-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-input 'make-create-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-application-stop-failures))
      (common-lisp:list
       (common-lisp:cons "ignoreApplicationStopFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "targetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-outdated-instances-only))
      (common-lisp:list
       (common-lisp:cons "updateOutdatedInstancesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-exists-behavior))
      (common-lisp:list
       (common-lisp:cons "fileExistsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "overrideAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-output-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-output 'make-create-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-input 'make-delete-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-deployment-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-deployment-config-input-"))
   (deployment-config-name
    (common-lisp:error ":deploymentconfigname is required") :type
    (common-lisp:or deployment-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-config-input
                    'make-delete-deployment-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-deployment-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-deployment-group-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name
    (common-lisp:error ":deploymentgroupname is required") :type
    (common-lisp:or deployment-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-group-input
                    'make-delete-deployment-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-deployment-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-deployment-group-output-"))
   (hooks-not-cleaned-up common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-group-output
                    'make-delete-deployment-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hooks-not-cleaned-up))
      (common-lisp:list
       (common-lisp:cons "hooksNotCleanedUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-git-hub-account-token-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-git-hub-account-token-input-"))
   (token-name common-lisp:nil :type
    (common-lisp:or git-hub-account-token-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-git-hub-account-token-input
                    'make-delete-git-hub-account-token-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name))
      (common-lisp:list
       (common-lisp:cons "tokenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-git-hub-account-token-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-git-hub-account-token-output-"))
   (token-name common-lisp:nil :type
    (common-lisp:or git-hub-account-token-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-git-hub-account-token-output
                    'make-delete-git-hub-account-token-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name))
      (common-lisp:list
       (common-lisp:cons "tokenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-git-hub-account-token-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resources-by-external-id-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resources-by-external-id-input-"))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resources-by-external-id-input
                    'make-delete-resources-by-external-id-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resources-by-external-id-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resources-by-external-id-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-resources-by-external-id-output
                    'make-delete-resources-by-external-id-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resources-by-external-id-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-already-completed-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-already-completed-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-already-started-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-already-started-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-does-not-exist-exception)))
(common-lisp:deftype deployment-config-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-config-in-use-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-config-in-use-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-config-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-config-info-"))
   (deployment-config-id common-lisp:nil :type
    (common-lisp:or deployment-config-id common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (minimum-healthy-hosts common-lisp:nil :type
    (common-lisp:or minimum-healthy-hosts common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null))
   (traffic-routing-config common-lisp:nil :type
    (common-lisp:or traffic-routing-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-config-info 'make-deployment-config-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-id))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-hosts))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-routing-config))
      (common-lisp:list
       (common-lisp:cons "trafficRoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-config-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-config-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-limit-exceeded-exception)))
(common-lisp:deftype deployment-config-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-config-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-config-name-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-configs-list ()
   '(trivial-types:proper-list deployment-config-name))
 (common-lisp:defun |make-deployment-configs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-config-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-creator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-already-exists-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-does-not-exist-exception)))
(common-lisp:deftype deployment-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-group-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-group-info-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-id common-lisp:nil :type
    (common-lisp:or deployment-group-id common-lisp:null))
   (deployment-group-name common-lisp:nil :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (ec2tag-filters common-lisp:nil :type
    (common-lisp:or ec2tag-filter-list common-lisp:null))
   (on-premises-instance-tag-filters common-lisp:nil :type
    (common-lisp:or tag-filter-list common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null))
   (service-role-arn common-lisp:nil :type
    (common-lisp:or role common-lisp:null))
   (target-revision common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (trigger-configurations common-lisp:nil :type
    (common-lisp:or trigger-config-list common-lisp:null))
   (alarm-configuration common-lisp:nil :type
    (common-lisp:or alarm-configuration common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-configuration common-lisp:null))
   (deployment-style common-lisp:nil :type
    (common-lisp:or deployment-style common-lisp:null))
   (outdated-instances-strategy common-lisp:nil :type
    (common-lisp:or outdated-instances-strategy common-lisp:null))
   (blue-green-deployment-configuration common-lisp:nil :type
    (common-lisp:or blue-green-deployment-configuration common-lisp:null))
   (load-balancer-info common-lisp:nil :type
    (common-lisp:or load-balancer-info common-lisp:null))
   (last-successful-deployment common-lisp:nil :type
    (common-lisp:or last-deployment-info common-lisp:null))
   (last-attempted-deployment common-lisp:nil :type
    (common-lisp:or last-deployment-info common-lisp:null))
   (ec2tag-set common-lisp:nil :type
    (common-lisp:or ec2tag-set common-lisp:null))
   (on-premises-tag-set common-lisp:nil :type
    (common-lisp:or on-premises-tag-set common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null))
   (ecs-services common-lisp:nil :type
    (common-lisp:or ecsservice-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-group-info 'make-deployment-group-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-group-id))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-revision))
      (common-lisp:list
       (common-lisp:cons "targetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-deployment))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-group-info-list ()
   '(trivial-types:proper-list deployment-group-info))
 (common-lisp:defun |make-deployment-group-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-group-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition deployment-group-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-limit-exceeded-exception)))
(common-lisp:deftype deployment-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-group-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-group-name-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-groups-list ()
   '(trivial-types:proper-list deployment-group-name))
 (common-lisp:defun |make-deployment-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition deployment-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-id-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-info-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name common-lisp:nil :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (previous-revision common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or deployment-status common-lisp:null))
   (error-information common-lisp:nil :type
    (common-lisp:or error-information common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (complete-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deployment-overview common-lisp:nil :type
    (common-lisp:or deployment-overview common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (creator common-lisp:nil :type
    (common-lisp:or deployment-creator common-lisp:null))
   (ignore-application-stop-failures common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-configuration common-lisp:null))
   (update-outdated-instances-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (rollback-info common-lisp:nil :type
    (common-lisp:or rollback-info common-lisp:null))
   (deployment-style common-lisp:nil :type
    (common-lisp:or deployment-style common-lisp:null))
   (target-instances common-lisp:nil :type
    (common-lisp:or target-instances common-lisp:null))
   (instance-termination-wait-time-started common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (blue-green-deployment-configuration common-lisp:nil :type
    (common-lisp:or blue-green-deployment-configuration common-lisp:null))
   (load-balancer-info common-lisp:nil :type
    (common-lisp:or load-balancer-info common-lisp:null))
   (additional-deployment-status-info common-lisp:nil :type
    (common-lisp:or additional-deployment-status-info common-lisp:null))
   (file-exists-behavior common-lisp:nil :type
    (common-lisp:or file-exists-behavior common-lisp:null))
   (deployment-status-messages common-lisp:nil :type
    (common-lisp:or deployment-status-message-list common-lisp:null))
   (compute-platform common-lisp:nil :type
    (common-lisp:or compute-platform common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null))
   (related-deployments common-lisp:nil :type
    (common-lisp:or related-deployments common-lisp:null))
   (override-alarm-configuration common-lisp:nil :type
    (common-lisp:or alarm-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deployment-info 'make-deployment-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-revision))
      (common-lisp:list
       (common-lisp:cons "previousRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-information))
      (common-lisp:list
       (common-lisp:cons "errorInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complete-time))
      (common-lisp:list
       (common-lisp:cons "completeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-overview))
      (common-lisp:list
       (common-lisp:cons "deploymentOverview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator))
      (common-lisp:list
       (common-lisp:cons "creator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-application-stop-failures))
      (common-lisp:list
       (common-lisp:cons "ignoreApplicationStopFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-outdated-instances-only))
      (common-lisp:list
       (common-lisp:cons "updateOutdatedInstancesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-info))
      (common-lisp:list
       (common-lisp:cons "rollbackInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "targetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-termination-wait-time-started))
      (common-lisp:list
       (common-lisp:cons "instanceTerminationWaitTimeStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-deployment-status-info))
      (common-lisp:list
       (common-lisp:cons "additionalDeploymentStatusInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-exists-behavior))
      (common-lisp:list
       (common-lisp:cons "fileExistsBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-messages))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-deployments))
      (common-lisp:list
       (common-lisp:cons "relatedDeployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "overrideAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-is-not-in-ready-state-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-is-not-in-ready-state-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-not-started-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'deployment-not-started-exception)))
(common-lisp:deftype deployment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-overview (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-overview-"))
   (pending common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null))
   (in-progress common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null))
   (succeeded common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null))
   (failed common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null))
   (skipped common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null))
   (ready common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-overview 'make-deployment-overview))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-overview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-overview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "InProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "Succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped))
      (common-lisp:list
       (common-lisp:cons "Skipped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ready))
      (common-lisp:list
       (common-lisp:cons "Ready"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-overview))
   common-lisp:nil))
(common-lisp:deftype deployment-ready-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-ready-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-ready-option-"))
   (action-on-timeout common-lisp:nil :type
    (common-lisp:or deployment-ready-action common-lisp:null))
   (wait-time-in-minutes common-lisp:nil :type
    (common-lisp:or duration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-ready-option 'make-deployment-ready-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-on-timeout))
      (common-lisp:list
       (common-lisp:cons "actionOnTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "waitTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-ready-option))
   common-lisp:nil))
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-status-list ()
   '(trivial-types:proper-list deployment-status))
 (common-lisp:defun |make-deployment-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployment-status-message-list ()
   '(trivial-types:proper-list error-message))
 (common-lisp:defun |make-deployment-status-message-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-message))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-style-"))
   (deployment-type common-lisp:nil :type
    (common-lisp:or deployment-type common-lisp:null))
   (deployment-option common-lisp:nil :type
    (common-lisp:or deployment-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-style 'make-deployment-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "deploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-target-"))
   (deployment-target-type common-lisp:nil :type
    (common-lisp:or deployment-target-type common-lisp:null))
   (instance-target common-lisp:nil :type
    (common-lisp:or instance-target common-lisp:null))
   (lambda-target common-lisp:nil :type
    (common-lisp:or lambda-target common-lisp:null))
   (ecs-target common-lisp:nil :type
    (common-lisp:or ecstarget common-lisp:null))
   (cloud-formation-target common-lisp:nil :type
    (common-lisp:or cloud-formation-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-target 'make-deployment-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-target-type))
      (common-lisp:list
       (common-lisp:cons "deploymentTargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-target))
      (common-lisp:list
       (common-lisp:cons "instanceTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-target))
      (common-lisp:list
       (common-lisp:cons "lambdaTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-target))
      (common-lisp:list
       (common-lisp:cons "ecsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-target))
      (common-lisp:list
       (common-lisp:cons "cloudFormationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-id-required-exception)))
(common-lisp:progn
 (common-lisp:deftype deployment-target-list ()
   '(trivial-types:proper-list deployment-target))
 (common-lisp:defun |make-deployment-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition deployment-target-list-size-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deployment-target-list-size-exceeded-exception)))
(common-lisp:deftype deployment-target-type () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:deftype deployment-wait-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployments-info-list ()
   '(trivial-types:proper-list deployment-info))
 (common-lisp:defun |make-deployments-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype deployments-list ()
   '(trivial-types:proper-list deployment-id))
 (common-lisp:defun |make-deployments-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-on-premises-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-on-premises-instance-input-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-on-premises-instance-input
                    'make-deregister-on-premises-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition description-too-long-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'description-too-long-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (diagnostics (:copier common-lisp:nil)
      (:conc-name "struct-shape-diagnostics-"))
   (error-code common-lisp:nil :type
    (common-lisp:or lifecycle-error-code common-lisp:null))
   (script-name common-lisp:nil :type
    (common-lisp:or script-name common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or lifecycle-message common-lisp:null))
   (log-tail common-lisp:nil :type (common-lisp:or log-tail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'diagnostics 'make-diagnostics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input diagnostics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input diagnostics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-name))
      (common-lisp:list
       (common-lisp:cons "scriptName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-tail))
      (common-lisp:list
       (common-lisp:cons "logTail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input diagnostics))
   common-lisp:nil))
(common-lisp:deftype duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (ec2tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2tag-filter-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or ec2tag-filter-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ec2tag-filter 'make-ec2tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2tag-filter-list ()
   '(trivial-types:proper-list ec2tag-filter))
 (common-lisp:defun |make-ec2tag-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ec2tag-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ec2tag-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2tag-set-"))
   (ec2tag-set-list common-lisp:nil :type
    (common-lisp:or ec2tag-set-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ec2tag-set 'make-ec2tag-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2tag-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2tag-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set-list))
      (common-lisp:list
       (common-lisp:cons "ec2TagSetList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2tag-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2tag-set-list ()
   '(trivial-types:proper-list ec2tag-filter-list))
 (common-lisp:defun |make-ec2tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2tag-filter-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ecscluster-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecsservice (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecsservice-"))
   (service-name common-lisp:nil :type
    (common-lisp:or ecsservice-name common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or ecscluster-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ecsservice 'make-ecsservice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecsservice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecsservice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecsservice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecsservice-list ()
   '(trivial-types:proper-list ecsservice))
 (common-lisp:defun |make-ecsservice-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecsservice))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ecsservice-mapping-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'ecsservice-mapping-limit-exceeded-exception)))
(common-lisp:deftype ecsservice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ecstarget (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecstarget-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (target-arn common-lisp:nil :type
    (common-lisp:or target-arn common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or time common-lisp:null))
   (lifecycle-events common-lisp:nil :type
    (common-lisp:or lifecycle-event-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or target-status common-lisp:null))
   (task-sets-info common-lisp:nil :type
    (common-lisp:or ecstask-set-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ecstarget 'make-ecstarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecstarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecstarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets-info))
      (common-lisp:list
       (common-lisp:cons "taskSetsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecstarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecstask-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecstask-set-"))
   (identifer common-lisp:nil :type
    (common-lisp:or ecstask-set-identifier common-lisp:null))
   (desired-count common-lisp:nil :type
    (common-lisp:or ecstask-set-count common-lisp:null))
   (pending-count common-lisp:nil :type
    (common-lisp:or ecstask-set-count common-lisp:null))
   (running-count common-lisp:nil :type
    (common-lisp:or ecstask-set-count common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ecstask-set-status common-lisp:null))
   (traffic-weight common-lisp:nil :type
    (common-lisp:or traffic-weight common-lisp:null))
   (target-group common-lisp:nil :type
    (common-lisp:or target-group-info common-lisp:null))
   (task-set-label common-lisp:nil :type
    (common-lisp:or target-label common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ecstask-set 'make-ecstask-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecstask-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecstask-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifer))
      (common-lisp:list
       (common-lisp:cons "identifer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-weight))
      (common-lisp:list
       (common-lisp:cons "trafficWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group))
      (common-lisp:list
       (common-lisp:cons "targetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set-label))
      (common-lisp:list
       (common-lisp:cons "taskSetLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecstask-set))
   common-lisp:nil))
(common-lisp:deftype ecstask-set-count () 'common-lisp:integer)
(common-lisp:deftype ecstask-set-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ecstask-set-list ()
   '(trivial-types:proper-list ecstask-set))
 (common-lisp:defun |make-ecstask-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecstask-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ecstask-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (elbinfo (:copier common-lisp:nil) (:conc-name "struct-shape-elbinfo-"))
   (name common-lisp:nil :type (common-lisp:or elbname common-lisp:null)))
 (common-lisp:export (common-lisp:list 'elbinfo 'make-elbinfo))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elbinfo))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elbinfo))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elbinfo))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elbinfo-list () '(trivial-types:proper-list elbinfo))
 (common-lisp:defun |make-elbinfo-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elbinfo))
   aws-sdk/generator/shape::members))
(common-lisp:deftype elbname () 'common-lisp:string)
(common-lisp:deftype etag () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-information-"))
   (code common-lisp:nil :type (common-lisp:or error-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'error-information 'make-error-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-information))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:deftype file-exists-behavior () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-value-list ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (generic-revision-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-generic-revision-info-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (deployment-groups common-lisp:nil :type
    (common-lisp:or deployment-groups-list common-lisp:null))
   (first-used-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-used-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (register-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generic-revision-info 'make-generic-revision-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-groups))
      (common-lisp:list
       (common-lisp:cons "deploymentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-used-time))
      (common-lisp:list
       (common-lisp:cons "firstUsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-time))
      (common-lisp:list
       (common-lisp:cons "lastUsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-time))
      (common-lisp:list
       (common-lisp:cons "registerTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generic-revision-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-input 'make-get-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-output-"))
   (application common-lisp:nil :type
    (common-lisp:or application-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-output 'make-get-application-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-revision-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-revision-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-revision-input
                    'make-get-application-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-revision-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-revision-output-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (revision-info common-lisp:nil :type
    (common-lisp:or generic-revision-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-revision-output
                    'make-get-application-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-info))
      (common-lisp:list
       (common-lisp:cons "revisionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-revision-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-config-input-"))
   (deployment-config-name
    (common-lisp:error ":deploymentconfigname is required") :type
    (common-lisp:or deployment-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-config-input
                    'make-get-deployment-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-config-output-"))
   (deployment-config-info common-lisp:nil :type
    (common-lisp:or deployment-config-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-config-output
                    'make-get-deployment-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-info))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-group-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name
    (common-lisp:error ":deploymentgroupname is required") :type
    (common-lisp:or deployment-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-group-input
                    'make-get-deployment-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-group-output-"))
   (deployment-group-info common-lisp:nil :type
    (common-lisp:or deployment-group-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-group-output
                    'make-get-deployment-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-info))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-input-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or deployment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-input 'make-get-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-instance-input-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or deployment-id common-lisp:null))
   (instance-id (common-lisp:error ":instanceid is required") :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-instance-input
                    'make-get-deployment-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-instance-output-"))
   (instance-summary common-lisp:nil :type
    (common-lisp:or instance-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-instance-output
                    'make-get-deployment-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-summary))
      (common-lisp:list
       (common-lisp:cons "instanceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-output-"))
   (deployment-info common-lisp:nil :type
    (common-lisp:or deployment-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-output 'make-get-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-info))
      (common-lisp:list
       (common-lisp:cons "deploymentInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-target-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-target-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-target-input
                    'make-get-deployment-target-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-deployment-target-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-deployment-target-output-"))
   (deployment-target common-lisp:nil :type
    (common-lisp:or deployment-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-deployment-target-output
                    'make-get-deployment-target-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-target))
      (common-lisp:list
       (common-lisp:cons "deploymentTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-target-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-on-premises-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-on-premises-instance-input-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-on-premises-instance-input
                    'make-get-on-premises-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-on-premises-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-on-premises-instance-output-"))
   (instance-info common-lisp:nil :type
    (common-lisp:or instance-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-on-premises-instance-output
                    'make-get-on-premises-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-info))
      (common-lisp:list
       (common-lisp:cons "instanceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-on-premises-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition git-hub-account-token-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'git-hub-account-token-does-not-exist-exception)))
(common-lisp:deftype git-hub-account-token-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype git-hub-account-token-name-list ()
   '(trivial-types:proper-list git-hub-account-token-name))
 (common-lisp:defun |make-git-hub-account-token-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            git-hub-account-token-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition git-hub-account-token-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'git-hub-account-token-name-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (git-hub-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-git-hub-location-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository common-lisp:null))
   (commit-id common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'git-hub-location 'make-git-hub-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input git-hub-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input git-hub-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input git-hub-location))
   common-lisp:nil))
(common-lisp:deftype green-fleet-provisioning-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (green-fleet-provisioning-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-green-fleet-provisioning-option-"))
   (action common-lisp:nil :type
    (common-lisp:or green-fleet-provisioning-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'green-fleet-provisioning-option
                    'make-green-fleet-provisioning-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          green-fleet-provisioning-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition iam-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-arn-required-exception)))
(common-lisp:deftype iam-session-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition iam-session-arn-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'iam-session-arn-already-registered-exception)))
(common-lisp:deftype iam-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition iam-user-arn-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'iam-user-arn-already-registered-exception)))
(common-lisp:progn
 (common-lisp:define-condition iam-user-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-user-arn-required-exception)))
(common-lisp:deftype instance-action () 'common-lisp:string)
(common-lisp:deftype instance-arn () 'common-lisp:string)
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition instance-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-does-not-exist-exception)))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition instance-id-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-id-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-info-"))
   (instance-name common-lisp:nil :type
    (common-lisp:or instance-name common-lisp:null))
   (iam-session-arn common-lisp:nil :type
    (common-lisp:or iam-session-arn common-lisp:null))
   (iam-user-arn common-lisp:nil :type
    (common-lisp:or iam-user-arn common-lisp:null))
   (instance-arn common-lisp:nil :type
    (common-lisp:or instance-arn common-lisp:null))
   (register-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deregister-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-info 'make-instance-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-session-arn))
      (common-lisp:list
       (common-lisp:cons "iamSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "iamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-arn))
      (common-lisp:list
       (common-lisp:cons "instanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-time))
      (common-lisp:list
       (common-lisp:cons "registerTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deregister-time))
      (common-lisp:list
       (common-lisp:cons "deregisterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-info-list ()
   '(trivial-types:proper-list instance-info))
 (common-lisp:defun |make-instance-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-limit-exceeded-exception)))
(common-lisp:deftype instance-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition instance-name-already-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'instance-name-already-registered-exception)))
(common-lisp:progn
 (common-lisp:deftype instance-name-list ()
   '(trivial-types:proper-list instance-name))
 (common-lisp:defun |make-instance-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition instance-name-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-name-required-exception)))
(common-lisp:progn
 (common-lisp:define-condition instance-not-registered-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-not-registered-exception)))
(common-lisp:deftype instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-status-list ()
   '(trivial-types:proper-list instance-status))
 (common-lisp:defun |make-instance-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-summary-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or instance-status common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (lifecycle-events common-lisp:nil :type
    (common-lisp:or lifecycle-event-list common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-summary 'make-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-summary-list ()
   '(trivial-types:proper-list instance-summary))
 (common-lisp:defun |make-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-target-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (target-arn common-lisp:nil :type
    (common-lisp:or target-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or target-status common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or time common-lisp:null))
   (lifecycle-events common-lisp:nil :type
    (common-lisp:or lifecycle-event-list common-lisp:null))
   (instance-label common-lisp:nil :type
    (common-lisp:or target-label common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-target 'make-instance-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-label))
      (common-lisp:list
       (common-lisp:cons "instanceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-target))
   common-lisp:nil))
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-type-list ()
   '(trivial-types:proper-list instance-type))
 (common-lisp:defun |make-instance-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instances-list ()
   '(trivial-types:proper-list instance-id))
 (common-lisp:defun |make-instances-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-alarm-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-alarm-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-application-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-application-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-auto-rollback-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-auto-rollback-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-auto-scaling-group-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-auto-scaling-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-blue-green-deployment-configuration-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-blue-green-deployment-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-bucket-name-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-bucket-name-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-compute-platform-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-compute-platform-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployed-state-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployed-state-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-config-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-config-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-group-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-group-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-instance-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-instance-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-style-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-deployment-style-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-target-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-target-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deployment-wait-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-deployment-wait-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ec2tag-combination-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ec2tag-combination-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ec2tag-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ec2tag-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ecsservice-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-ecsservice-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-external-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-external-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-file-exists-behavior-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-file-exists-behavior-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-git-hub-account-token-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-git-hub-account-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-git-hub-account-token-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-git-hub-account-token-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-iam-session-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-iam-session-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-iam-user-arn-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-iam-user-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ignore-application-stop-failures-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-ignore-application-stop-failures-value-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-input-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-instance-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-key-prefix-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-key-prefix-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lifecycle-event-hook-execution-id-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-lifecycle-event-hook-execution-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lifecycle-event-hook-execution-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-lifecycle-event-hook-execution-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-load-balancer-info-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-load-balancer-info-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-minimum-healthy-host-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-minimum-healthy-host-value-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-on-premises-tag-combination-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-on-premises-tag-combination-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-registration-status-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-registration-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-revision-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-revision-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-role-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-role-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sort-by-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sort-by-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sort-order-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sort-order-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-filter-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-filter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tags-to-add-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tags-to-add-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-filter-name-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-filter-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-group-pair-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-group-pair-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-instances-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-instances-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-time-range-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-time-range-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-traffic-routing-configuration-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-traffic-routing-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-trigger-config-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-trigger-config-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-update-outdated-instances-only-value-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-update-outdated-instances-only-value-exception)))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype lambda-function-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-info-"))
   (function-name common-lisp:nil :type
    (common-lisp:or lambda-function-name common-lisp:null))
   (function-alias common-lisp:nil :type
    (common-lisp:or lambda-function-alias common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (target-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (target-version-weight common-lisp:nil :type
    (common-lisp:or traffic-weight common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-info 'make-lambda-function-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "functionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-alias))
      (common-lisp:list
       (common-lisp:cons "functionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "currentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "targetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-version-weight))
      (common-lisp:list
       (common-lisp:cons "targetVersionWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function-info))
   common-lisp:nil))
(common-lisp:deftype lambda-function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-target-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (target-id common-lisp:nil :type
    (common-lisp:or target-id common-lisp:null))
   (target-arn common-lisp:nil :type
    (common-lisp:or target-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or target-status common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or time common-lisp:null))
   (lifecycle-events common-lisp:nil :type
    (common-lisp:or lifecycle-event-list common-lisp:null))
   (lambda-function-info common-lisp:nil :type
    (common-lisp:or lambda-function-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-target 'make-lambda-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-events))
      (common-lisp:list
       (common-lisp:cons "lifecycleEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-info))
      (common-lisp:list
       (common-lisp:cons "lambdaFunctionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (last-deployment-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-last-deployment-info-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or deployment-status common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'last-deployment-info 'make-last-deployment-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-deployment-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-deployment-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-deployment-info))
   common-lisp:nil))
(common-lisp:deftype lifecycle-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-event-"))
   (lifecycle-event-name common-lisp:nil :type
    (common-lisp:or lifecycle-event-name common-lisp:null))
   (diagnostics common-lisp:nil :type
    (common-lisp:or diagnostics common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or lifecycle-event-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lifecycle-event 'make-lifecycle-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-name))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics))
      (common-lisp:list
       (common-lisp:cons "diagnostics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition lifecycle-event-already-completed-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'lifecycle-event-already-completed-exception)))
(common-lisp:deftype lifecycle-event-hook-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lifecycle-event-list ()
   '(trivial-types:proper-list lifecycle-event))
 (common-lisp:defun |make-lifecycle-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lifecycle-event-name () 'common-lisp:string)
(common-lisp:deftype lifecycle-event-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition lifecycle-hook-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'lifecycle-hook-limit-exceeded-exception)))
(common-lisp:deftype lifecycle-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-revisions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-revisions-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or application-revision-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (s3key-prefix common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (deployed common-lisp:nil :type
    (common-lisp:or list-state-filter-action common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-revisions-input
                    'make-list-application-revisions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed))
      (common-lisp:list
       (common-lisp:cons "deployed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-application-revisions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-application-revisions-output-"))
   (revisions common-lisp:nil :type
    (common-lisp:or revision-location-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-application-revisions-output
                    'make-list-application-revisions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revisions))
      (common-lisp:list
       (common-lisp:cons "revisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-application-revisions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-input 'make-list-applications-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-output-"))
   (applications common-lisp:nil :type
    (common-lisp:or applications-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-output 'make-list-applications-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-configs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-configs-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-configs-input
                    'make-list-deployment-configs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-configs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-configs-output-"))
   (deployment-configs-list common-lisp:nil :type
    (common-lisp:or deployment-configs-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-configs-output
                    'make-list-deployment-configs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configs-list))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-configs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-groups-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-groups-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-groups-input
                    'make-list-deployment-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-groups-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-groups-output-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-groups common-lisp:nil :type
    (common-lisp:or deployment-groups-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-groups-output
                    'make-list-deployment-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-groups))
      (common-lisp:list
       (common-lisp:cons "deploymentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-instances-input-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or deployment-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (instance-status-filter common-lisp:nil :type
    (common-lisp:or instance-status-list common-lisp:null))
   (instance-type-filter common-lisp:nil :type
    (common-lisp:or instance-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-instances-input
                    'make-list-deployment-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-status-filter))
      (common-lisp:list
       (common-lisp:cons "instanceStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-type-filter))
      (common-lisp:list
       (common-lisp:cons "instanceTypeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-instances-output-"))
   (instances-list common-lisp:nil :type
    (common-lisp:or instances-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-instances-output
                    'make-list-deployment-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-list))
      (common-lisp:list
       (common-lisp:cons "instancesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-targets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-targets-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (target-filters common-lisp:nil :type
    (common-lisp:or target-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-targets-input
                    'make-list-deployment-targets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-filters))
      (common-lisp:list
       (common-lisp:cons "targetFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployment-targets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployment-targets-output-"))
   (target-ids common-lisp:nil :type
    (common-lisp:or target-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-targets-output
                    'make-list-deployment-targets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ids))
      (common-lisp:list
       (common-lisp:cons "targetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployments-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployments-input-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (deployment-group-name common-lisp:nil :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null))
   (include-only-statuses common-lisp:nil :type
    (common-lisp:or deployment-status-list common-lisp:null))
   (create-time-range common-lisp:nil :type
    (common-lisp:or time-range common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-input 'make-list-deployments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-only-statuses))
      (common-lisp:list
       (common-lisp:cons "includeOnlyStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time-range))
      (common-lisp:list
       (common-lisp:cons "createTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-deployments-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-deployments-output-"))
   (deployments common-lisp:nil :type
    (common-lisp:or deployments-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-deployments-output 'make-list-deployments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-git-hub-account-token-names-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-git-hub-account-token-names-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-git-hub-account-token-names-input
                    'make-list-git-hub-account-token-names-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-git-hub-account-token-names-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-git-hub-account-token-names-output-"))
   (token-name-list common-lisp:nil :type
    (common-lisp:or git-hub-account-token-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-git-hub-account-token-names-output
                    'make-list-git-hub-account-token-names-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-name-list))
      (common-lisp:list
       (common-lisp:cons "tokenNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-git-hub-account-token-names-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-on-premises-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-on-premises-instances-input-"))
   (registration-status common-lisp:nil :type
    (common-lisp:or registration-status common-lisp:null))
   (tag-filters common-lisp:nil :type
    (common-lisp:or tag-filter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-on-premises-instances-input
                    'make-list-on-premises-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-status))
      (common-lisp:list
       (common-lisp:cons "registrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filters))
      (common-lisp:list
       (common-lisp:cons "tagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-on-premises-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-on-premises-instances-output-"))
   (instance-names common-lisp:nil :type
    (common-lisp:or instance-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-on-premises-instances-output
                    'make-list-on-premises-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-on-premises-instances-output))
   common-lisp:nil))
(common-lisp:deftype list-state-filter-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype listener-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype listener-arn-list ()
   '(trivial-types:proper-list listener-arn))
 (common-lisp:defun |make-listener-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-info-"))
   (elb-info-list common-lisp:nil :type
    (common-lisp:or elbinfo-list common-lisp:null))
   (target-group-info-list common-lisp:nil :type
    (common-lisp:or target-group-info-list common-lisp:null))
   (target-group-pair-info-list common-lisp:nil :type
    (common-lisp:or target-group-pair-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-info 'make-load-balancer-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elb-info-list))
      (common-lisp:list
       (common-lisp:cons "elbInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-info-list))
      (common-lisp:list
       (common-lisp:cons "targetGroupInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-pair-info-list))
      (common-lisp:list
       (common-lisp:cons "targetGroupPairInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-info))
   common-lisp:nil))
(common-lisp:deftype log-tail () 'common-lisp:string)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (minimum-healthy-hosts (:copier common-lisp:nil)
      (:conc-name "struct-shape-minimum-healthy-hosts-"))
   (type common-lisp:nil :type
    (common-lisp:or minimum-healthy-hosts-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or minimum-healthy-hosts-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'minimum-healthy-hosts 'make-minimum-healthy-hosts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          minimum-healthy-hosts))
   common-lisp:nil))
(common-lisp:deftype minimum-healthy-hosts-type () 'common-lisp:string)
(common-lisp:deftype minimum-healthy-hosts-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition multiple-iam-arns-provided-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'multiple-iam-arns-provided-exception)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (on-premises-tag-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-on-premises-tag-set-"))
   (on-premises-tag-set-list common-lisp:nil :type
    (common-lisp:or on-premises-tag-set-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'on-premises-tag-set 'make-on-premises-tag-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-tag-set-list))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSetList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input on-premises-tag-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype on-premises-tag-set-list ()
   '(trivial-types:proper-list tag-filter-list))
 (common-lisp:defun |make-on-premises-tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition operation-not-supported-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-supported-exception)))
(common-lisp:deftype outdated-instances-strategy () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (put-lifecycle-event-hook-execution-status-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-lifecycle-event-hook-execution-status-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (lifecycle-event-hook-execution-id common-lisp:nil :type
    (common-lisp:or lifecycle-event-hook-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or lifecycle-event-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-event-hook-execution-status-input
                    'make-put-lifecycle-event-hook-execution-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-hook-execution-id))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventHookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-lifecycle-event-hook-execution-status-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-lifecycle-event-hook-execution-status-output-"))
   (lifecycle-event-hook-execution-id common-lisp:nil :type
    (common-lisp:or lifecycle-event-hook-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-lifecycle-event-hook-execution-status-output
                    'make-put-lifecycle-event-hook-execution-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-hook-execution-id))
      (common-lisp:list
       (common-lisp:cons "lifecycleEventHookExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-lifecycle-event-hook-execution-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raw-string (:copier common-lisp:nil)
      (:conc-name "struct-shape-raw-string-"))
   (content common-lisp:nil :type
    (common-lisp:or raw-string-content common-lisp:null))
   (sha256 common-lisp:nil :type
    (common-lisp:or raw-string-sha256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'raw-string 'make-raw-string))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-string))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-string))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha256))
      (common-lisp:list
       (common-lisp:cons "sha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-string))
   common-lisp:nil))
(common-lisp:deftype raw-string-content () 'common-lisp:string)
(common-lisp:deftype raw-string-sha256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-application-revision-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-application-revision-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or revision-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-application-revision-input
                    'make-register-application-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-application-revision-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-on-premises-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-on-premises-instance-input-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or instance-name common-lisp:null))
   (iam-session-arn common-lisp:nil :type
    (common-lisp:or iam-session-arn common-lisp:null))
   (iam-user-arn common-lisp:nil :type
    (common-lisp:or iam-user-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-on-premises-instance-input
                    'make-register-on-premises-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-session-arn))
      (common-lisp:list
       (common-lisp:cons "iamSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "iamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-on-premises-instance-input))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (related-deployments (:copier common-lisp:nil)
      (:conc-name "struct-shape-related-deployments-"))
   (auto-update-outdated-instances-root-deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (auto-update-outdated-instances-deployment-ids common-lisp:nil :type
    (common-lisp:or deployments-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'related-deployments 'make-related-deployments))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-deployments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-deployments))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-outdated-instances-root-deployment-id))
      (common-lisp:list
       (common-lisp:cons "autoUpdateOutdatedInstancesRootDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-update-outdated-instances-deployment-ids))
      (common-lisp:list
       (common-lisp:cons "autoUpdateOutdatedInstancesDeploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-deployments))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-on-premises-instances-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-tags-from-on-premises-instances-input-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or instance-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-on-premises-instances-input
                    'make-remove-tags-from-on-premises-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-on-premises-instances-input))
   common-lisp:nil))
(common-lisp:deftype repository () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-arn-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-arn-required-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-validation-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition revision-does-not-exist-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'revision-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (revision-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-revision-info-"))
   (revision-location common-lisp:nil :type
    (common-lisp:or revision-location common-lisp:null))
   (generic-revision-info common-lisp:nil :type
    (common-lisp:or generic-revision-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'revision-info 'make-revision-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-location))
      (common-lisp:list
       (common-lisp:cons "revisionLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generic-revision-info))
      (common-lisp:list
       (common-lisp:cons "genericRevisionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype revision-info-list ()
   '(trivial-types:proper-list revision-info))
 (common-lisp:defun |make-revision-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (revision-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-revision-location-"))
   (revision-type common-lisp:nil :type
    (common-lisp:or revision-location-type common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3location common-lisp:null))
   (git-hub-location common-lisp:nil :type
    (common-lisp:or git-hub-location common-lisp:null))
   (string common-lisp:nil :type (common-lisp:or raw-string common-lisp:null))
   (app-spec-content common-lisp:nil :type
    (common-lisp:or app-spec-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revision-location 'make-revision-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-type))
      (common-lisp:list
       (common-lisp:cons "revisionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-hub-location))
      (common-lisp:list
       (common-lisp:cons "gitHubLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string))
      (common-lisp:list
       (common-lisp:cons "string"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-spec-content))
      (common-lisp:list
       (common-lisp:cons "appSpecContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype revision-location-list ()
   '(trivial-types:proper-list revision-location))
 (common-lisp:defun |make-revision-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list revision-location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revision-location-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition revision-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'revision-required-exception)))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition role-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'role-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (rollback-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-rollback-info-"))
   (rollback-deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (rollback-triggering-deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null))
   (rollback-message common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rollback-info 'make-rollback-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-deployment-id))
      (common-lisp:list
       (common-lisp:cons "rollbackDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-triggering-deployment-id))
      (common-lisp:list
       (common-lisp:cons "rollbackTriggeringDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-message))
      (common-lisp:list
       (common-lisp:cons "rollbackMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-info))
   common-lisp:nil))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (bundle-type common-lisp:nil :type
    (common-lisp:or bundle-type common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (e-tag common-lisp:nil :type (common-lisp:or etag common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-type))
      (common-lisp:list
       (common-lisp:cons "bundleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'e-tag))
      (common-lisp:list
       (common-lisp:cons "eTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype script-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (skip-wait-time-for-instance-termination-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-skip-wait-time-for-instance-termination-input-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or deployment-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'skip-wait-time-for-instance-termination-input
                    'make-skip-wait-time-for-instance-termination-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          skip-wait-time-for-instance-termination-input))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-deployment-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-deployment-input-"))
   (deployment-id (common-lisp:error ":deploymentid is required") :type
    (common-lisp:or deployment-id common-lisp:null))
   (auto-rollback-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-deployment-input 'make-stop-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-enabled))
      (common-lisp:list
       (common-lisp:cons "autoRollbackEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-deployment-output-"))
   (status common-lisp:nil :type (common-lisp:or stop-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-deployment-output 'make-stop-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-deployment-output))
   common-lisp:nil))
(common-lisp:deftype stop-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-filter-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or tag-filter-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tag-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition tag-required-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-required-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-set-list-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tag-set-list-limit-exceeded-exception)))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:deftype target-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-filters () 'common-lisp:hash-table)
 (common-lisp:defun |make-target-filters| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (target-group-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-group-info-"))
   (name common-lisp:nil :type
    (common-lisp:or target-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-group-info 'make-target-group-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-info-list ()
   '(trivial-types:proper-list target-group-info))
 (common-lisp:defun |make-target-group-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-group-pair-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-group-pair-info-"))
   (target-groups common-lisp:nil :type
    (common-lisp:or target-group-info-list common-lisp:null))
   (prod-traffic-route common-lisp:nil :type
    (common-lisp:or traffic-route common-lisp:null))
   (test-traffic-route common-lisp:nil :type
    (common-lisp:or traffic-route common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-group-pair-info 'make-target-group-pair-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "targetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prod-traffic-route))
      (common-lisp:list
       (common-lisp:cons "prodTrafficRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-traffic-route))
      (common-lisp:list
       (common-lisp:cons "testTrafficRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-pair-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-group-pair-info-list ()
   '(trivial-types:proper-list target-group-pair-info))
 (common-lisp:defun |make-target-group-pair-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-pair-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-id-list () '(trivial-types:proper-list target-id))
 (common-lisp:defun |make-target-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-instances-"))
   (tag-filters common-lisp:nil :type
    (common-lisp:or ec2tag-filter-list common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-name-list common-lisp:null))
   (ec2tag-set common-lisp:nil :type
    (common-lisp:or ec2tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-instances 'make-target-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filters))
      (common-lisp:list
       (common-lisp:cons "tagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-instances))
   common-lisp:nil))
(common-lisp:deftype target-label () 'common-lisp:string)
(common-lisp:deftype target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-based-canary (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-based-canary-"))
   (canary-percentage common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (canary-interval common-lisp:nil :type
    (common-lisp:or wait-time-in-mins common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-based-canary 'make-time-based-canary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-based-canary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-based-canary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-percentage))
      (common-lisp:list
       (common-lisp:cons "canaryPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-interval))
      (common-lisp:list
       (common-lisp:cons "canaryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-based-canary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-based-linear (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-based-linear-"))
   (linear-percentage common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (linear-interval common-lisp:nil :type
    (common-lisp:or wait-time-in-mins common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-based-linear 'make-time-based-linear))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-based-linear))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-based-linear))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear-percentage))
      (common-lisp:list
       (common-lisp:cons "linearPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear-interval))
      (common-lisp:list
       (common-lisp:cons "linearInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-based-linear))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-"))
   (start common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-route-"))
   (listener-arns common-lisp:nil :type
    (common-lisp:or listener-arn-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'traffic-route 'make-traffic-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arns))
      (common-lisp:list
       (common-lisp:cons "listenerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-routing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-routing-config-"))
   (type common-lisp:nil :type
    (common-lisp:or traffic-routing-type common-lisp:null))
   (time-based-canary common-lisp:nil :type
    (common-lisp:or time-based-canary common-lisp:null))
   (time-based-linear common-lisp:nil :type
    (common-lisp:or time-based-linear common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-routing-config 'make-traffic-routing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-based-canary))
      (common-lisp:list
       (common-lisp:cons "timeBasedCanary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-based-linear))
      (common-lisp:list
       (common-lisp:cons "timeBasedLinear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   common-lisp:nil))
(common-lisp:deftype traffic-routing-type () 'common-lisp:string)
(common-lisp:deftype traffic-weight () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-config-"))
   (trigger-name common-lisp:nil :type
    (common-lisp:or trigger-name common-lisp:null))
   (trigger-target-arn common-lisp:nil :type
    (common-lisp:or trigger-target-arn common-lisp:null))
   (trigger-events common-lisp:nil :type
    (common-lisp:or trigger-event-type-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger-config 'make-trigger-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-name))
      (common-lisp:list
       (common-lisp:cons "triggerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-target-arn))
      (common-lisp:list
       (common-lisp:cons "triggerTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-events))
      (common-lisp:list
       (common-lisp:cons "triggerEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-config-list ()
   '(trivial-types:proper-list trigger-config))
 (common-lisp:defun |make-trigger-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trigger-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trigger-event-type-list ()
   '(trivial-types:proper-list trigger-event-type))
 (common-lisp:defun |make-trigger-event-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger-event-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trigger-name () 'common-lisp:string)
(common-lisp:deftype trigger-target-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition trigger-targets-limit-exceeded-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'trigger-targets-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-action-for-deployment-type-exception
     (codedeploy-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'unsupported-action-for-deployment-type-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-input-"))
   (application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (new-application-name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-input 'make-update-application-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-application-name))
      (common-lisp:list
       (common-lisp:cons "newApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-deployment-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-deployment-group-input-"))
   (application-name (common-lisp:error ":applicationname is required") :type
    (common-lisp:or application-name common-lisp:null))
   (current-deployment-group-name
    (common-lisp:error ":currentdeploymentgroupname is required") :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (new-deployment-group-name common-lisp:nil :type
    (common-lisp:or deployment-group-name common-lisp:null))
   (deployment-config-name common-lisp:nil :type
    (common-lisp:or deployment-config-name common-lisp:null))
   (ec2tag-filters common-lisp:nil :type
    (common-lisp:or ec2tag-filter-list common-lisp:null))
   (on-premises-instance-tag-filters common-lisp:nil :type
    (common-lisp:or tag-filter-list common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-name-list common-lisp:null))
   (service-role-arn common-lisp:nil :type
    (common-lisp:or role common-lisp:null))
   (trigger-configurations common-lisp:nil :type
    (common-lisp:or trigger-config-list common-lisp:null))
   (alarm-configuration common-lisp:nil :type
    (common-lisp:or alarm-configuration common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-configuration common-lisp:null))
   (outdated-instances-strategy common-lisp:nil :type
    (common-lisp:or outdated-instances-strategy common-lisp:null))
   (deployment-style common-lisp:nil :type
    (common-lisp:or deployment-style common-lisp:null))
   (blue-green-deployment-configuration common-lisp:nil :type
    (common-lisp:or blue-green-deployment-configuration common-lisp:null))
   (load-balancer-info common-lisp:nil :type
    (common-lisp:or load-balancer-info common-lisp:null))
   (ec2tag-set common-lisp:nil :type
    (common-lisp:or ec2tag-set common-lisp:null))
   (ecs-services common-lisp:nil :type
    (common-lisp:or ecsservice-list common-lisp:null))
   (on-premises-tag-set common-lisp:nil :type
    (common-lisp:or on-premises-tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-deployment-group-input
                    'make-update-deployment-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "applicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "currentDeploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-deployment-group-name))
      (common-lisp:list
       (common-lisp:cons "newDeploymentGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-config-name))
      (common-lisp:list
       (common-lisp:cons "deploymentConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-filters))
      (common-lisp:list
       (common-lisp:cons "ec2TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-premises-instance-tag-filters))
      (common-lisp:list
       (common-lisp:cons "onPremisesInstanceTagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trigger-configurations))
      (common-lisp:list
       (common-lisp:cons "triggerConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "alarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "autoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outdated-instances-strategy))
      (common-lisp:list
       (common-lisp:cons "outdatedInstancesStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-style))
      (common-lisp:list
       (common-lisp:cons "deploymentStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "blueGreenDeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-info))
      (common-lisp:list
       (common-lisp:cons "loadBalancerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2tag-set))
      (common-lisp:list
       (common-lisp:cons "ec2TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-services))
      (common-lisp:list
       (common-lisp:cons "ecsServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-premises-tag-set))
      (common-lisp:list
       (common-lisp:cons "onPremisesTagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-deployment-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-deployment-group-output-"))
   (hooks-not-cleaned-up common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-deployment-group-output
                    'make-update-deployment-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hooks-not-cleaned-up))
      (common-lisp:list
       (common-lisp:cons "hooksNotCleanedUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deployment-group-output))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-id () 'common-lisp:string)
(common-lisp:deftype wait-time-in-mins () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun add-tags-to-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags instance-names)
   (common-lisp:declare (common-lisp:ignorable tags instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-tags-to-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddTagsToOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun batch-get-application-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name revisions)
   (common-lisp:declare (common-lisp:ignorable application-name revisions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-application-revisions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetApplicationRevisions"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-application-revisions))
(common-lisp:progn
 (common-lisp:defun batch-get-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-names)
   (common-lisp:declare (common-lisp:ignorable application-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-applications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetApplications"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-applications))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-names)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-groups-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentGroups"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-groups))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id instance-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-id instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-instances))
(common-lisp:progn
 (common-lisp:defun batch-get-deployment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id target-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-id target-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-deployment-targets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeploymentTargets"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployment-targets))
(common-lisp:progn
 (common-lisp:defun batch-get-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-ids)
   (common-lisp:declare (common-lisp:ignorable deployment-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetDeployments"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-deployments))
(common-lisp:progn
 (common-lisp:defun batch-get-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names)
   (common-lisp:declare (common-lisp:ignorable instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchGetOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun continue-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id deployment-wait-type)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id deployment-wait-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-continue-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ContinueDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'continue-deployment))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name compute-platform tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name compute-platform tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     revision deployment-config-name description
                     ignore-application-stop-failures target-instances
                     auto-rollback-configuration update-outdated-instances-only
                     file-exists-behavior override-alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name revision
     deployment-config-name description ignore-application-stop-failures
     target-instances auto-rollback-configuration
     update-outdated-instances-only file-exists-behavior
     override-alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun create-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name
                     minimum-healthy-hosts traffic-routing-config
                     compute-platform)
   (common-lisp:declare
    (common-lisp:ignorable deployment-config-name minimum-healthy-hosts
     traffic-routing-config compute-platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment-config))
(common-lisp:progn
 (common-lisp:defun create-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     deployment-config-name ec2tag-filters
                     on-premises-instance-tag-filters auto-scaling-groups
                     service-role-arn trigger-configurations
                     alarm-configuration auto-rollback-configuration
                     outdated-instances-strategy deployment-style
                     blue-green-deployment-configuration load-balancer-info
                     ec2tag-set ecs-services on-premises-tag-set tags)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name
     deployment-config-name ec2tag-filters on-premises-instance-tag-filters
     auto-scaling-groups service-role-arn trigger-configurations
     alarm-configuration auto-rollback-configuration
     outdated-instances-strategy deployment-style
     blue-green-deployment-configuration load-balancer-info ec2tag-set
     ecs-services on-premises-tag-set tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment-group))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:declare (common-lisp:ignorable deployment-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-deployment-config))
(common-lisp:progn
 (common-lisp:defun delete-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-deployment-group))
(common-lisp:progn
 (common-lisp:defun delete-git-hub-account-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key token-name)
   (common-lisp:declare (common-lisp:ignorable token-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-git-hub-account-token-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGitHubAccountToken"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-git-hub-account-token))
(common-lisp:progn
 (common-lisp:defun delete-resources-by-external-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key external-id)
   (common-lisp:declare (common-lisp:ignorable external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resources-by-external-id-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourcesByExternalId"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resources-by-external-id))
(common-lisp:progn
 (common-lisp:defun deregister-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-on-premises-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun get-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name)
   (common-lisp:declare (common-lisp:ignorable application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application))
(common-lisp:progn
 (common-lisp:defun get-application-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name revision)
   (common-lisp:declare (common-lisp:ignorable application-name revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetApplicationRevision"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-revision))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config-name)
   (common-lisp:declare (common-lisp:ignorable deployment-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentConfig"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-config))
(common-lisp:progn
 (common-lisp:defun get-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-group))
(common-lisp:progn
 (common-lisp:defun get-deployment-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id instance-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-instance))
(common-lisp:progn
 (common-lisp:defun get-deployment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id target-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-target-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeploymentTarget"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployment-target))
(common-lisp:progn
 (common-lisp:defun get-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-on-premises-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun list-application-revisions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name sort-by sort-order
                     s3bucket s3key-prefix deployed next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name sort-by sort-order s3bucket
     s3key-prefix deployed next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-application-revisions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApplicationRevisions"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-application-revisions))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApplications"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-deployment-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-configs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentConfigs"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-configs))
(common-lisp:progn
 (common-lisp:defun list-deployment-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name next-token)
   (common-lisp:declare (common-lisp:ignorable application-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentGroups"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-groups))
(common-lisp:progn
 (common-lisp:defun list-deployment-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token
                     instance-status-filter instance-type-filter)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token instance-status-filter
     instance-type-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-instances))
(common-lisp:progn
 (common-lisp:defun list-deployment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token target-filters)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token target-filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeploymentTargets"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-targets))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name deployment-group-name
                     external-id include-only-statuses create-time-range
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable application-name deployment-group-name external-id
     include-only-statuses create-time-range next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDeployments"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-git-hub-account-token-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-git-hub-account-token-names-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGitHubAccountTokenNames"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-git-hub-account-token-names))
(common-lisp:progn
 (common-lisp:defun list-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-status tag-filters
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable registration-status tag-filters next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-on-premises-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-lifecycle-event-hook-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id
                     lifecycle-event-hook-execution-id status)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id lifecycle-event-hook-execution-id
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-lifecycle-event-hook-execution-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutLifecycleEventHookExecutionStatus"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-lifecycle-event-hook-execution-status))
(common-lisp:progn
 (common-lisp:defun register-application-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name description revision)
   (common-lisp:declare
    (common-lisp:ignorable application-name description revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-application-revision-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterApplicationRevision"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-application-revision))
(common-lisp:progn
 (common-lisp:defun register-on-premises-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name iam-session-arn
                     iam-user-arn)
   (common-lisp:declare
    (common-lisp:ignorable instance-name iam-session-arn iam-user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-on-premises-instance-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterOnPremisesInstance"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-on-premises-instance))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-on-premises-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags instance-names)
   (common-lisp:declare (common-lisp:ignorable tags instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-on-premises-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTagsFromOnPremisesInstances"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-on-premises-instances))
(common-lisp:progn
 (common-lisp:defun skip-wait-time-for-instance-termination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id)
   (common-lisp:declare (common-lisp:ignorable deployment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-skip-wait-time-for-instance-termination-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SkipWaitTimeForInstanceTermination"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'skip-wait-time-for-instance-termination))
(common-lisp:progn
 (common-lisp:defun stop-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id auto-rollback-enabled)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id auto-rollback-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopDeployment"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-deployment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name new-application-name)
   (common-lisp:declare
    (common-lisp:ignorable application-name new-application-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApplication"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-deployment-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-name
                     current-deployment-group-name new-deployment-group-name
                     deployment-config-name ec2tag-filters
                     on-premises-instance-tag-filters auto-scaling-groups
                     service-role-arn trigger-configurations
                     alarm-configuration auto-rollback-configuration
                     outdated-instances-strategy deployment-style
                     blue-green-deployment-configuration load-balancer-info
                     ec2tag-set ecs-services on-premises-tag-set)
   (common-lisp:declare
    (common-lisp:ignorable application-name current-deployment-group-name
     new-deployment-group-name deployment-config-name ec2tag-filters
     on-premises-instance-tag-filters auto-scaling-groups service-role-arn
     trigger-configurations alarm-configuration auto-rollback-configuration
     outdated-instances-strategy deployment-style
     blue-green-deployment-configuration load-balancer-info ec2tag-set
     ecs-services on-premises-tag-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-deployment-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codedeploy-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDeploymentGroup"
                                                        "2014-10-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-deployment-group))
