;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/robomaker/api
  (:use)
  (:nicknames #:aws/robomaker)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/robomaker/api)
(common-lisp:progn
 (common-lisp:defclass robomaker-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "robomaker" :protocol
                        :rest-json))
 (common-lisp:export 'robomaker-request))
(common-lisp:progn
 (common-lisp:define-condition robomaker-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'robomaker-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentDeploymentException" . concurrent-deployment-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arns () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-worlds-request common-lisp:nil
                       ((worlds :initarg :|worlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %batch-delete-worlds-request-worlds :initform
                         (common-lisp:error ":worlds is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-worlds-request
                    'make-batch-delete-worlds-request))
 (common-lisp:defun make-batch-delete-worlds-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key worlds)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-worlds-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worlds))
      (common-lisp:list
       (common-lisp:cons "worlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-worlds-response common-lisp:nil
                       ((unprocessed-worlds :initarg :|unprocessedWorlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %batch-delete-worlds-response-unprocessed-worlds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-worlds-response
                    'make-batch-delete-worlds-response))
 (common-lisp:defun make-batch-delete-worlds-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-worlds)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-worlds-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-worlds))
      (common-lisp:list
       (common-lisp:cons "unprocessedWorlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-worlds-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-describe-simulation-job-request common-lisp:nil
                       ((jobs :initarg :|jobs| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %batch-describe-simulation-job-request-jobs :initform
                         (common-lisp:error ":jobs is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-describe-simulation-job-request
                    'make-batch-describe-simulation-job-request))
 (common-lisp:defun make-batch-describe-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-describe-simulation-job-response common-lisp:nil
                       ((unprocessed-jobs :initarg :|unprocessedJobs| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %batch-describe-simulation-job-response-unprocessed-jobs
                         :initform common-lisp:nil)
                        (jobs :initarg :|jobs| :type
                         (common-lisp:or simulation-jobs common-lisp:null)
                         :accessor %batch-describe-simulation-job-response-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-simulation-job-response
                    'make-batch-describe-simulation-job-response))
 (common-lisp:defun make-batch-describe-simulation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-jobs jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-simulation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-jobs))
      (common-lisp:list
       (common-lisp:cons "unprocessedJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-simulation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-policy common-lisp:nil
                       ((max-concurrency :initarg :|maxConcurrency| :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %batch-policy-max-concurrency :initform
                         common-lisp:nil)
                        (timeout-in-seconds :initarg :|timeoutInSeconds| :type
                         (common-lisp:or batch-timeout-in-seconds
                                         common-lisp:null)
                         :accessor %batch-policy-timeout-in-seconds :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'batch-policy 'make-batch-policy))
 (common-lisp:defun make-batch-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-concurrency timeout-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'batch-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "maxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-policy))
   common-lisp:nil))
(common-lisp:deftype batch-timeout-in-seconds () 'common-lisp:integer)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-deployment-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-deployment-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-deployment-job-request
                    'make-cancel-deployment-job-request))
 (common-lisp:defun make-cancel-deployment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-deployment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-deployment-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-deployment-job-response
                    'make-cancel-deployment-job-response))
 (common-lisp:defun make-cancel-deployment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-deployment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-deployment-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-simulation-job-batch-request common-lisp:nil
                       ((batch :initarg :|batch| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-simulation-job-batch-request-batch :initform
                         (common-lisp:error ":batch is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-simulation-job-batch-request
                    'make-cancel-simulation-job-batch-request))
 (common-lisp:defun make-cancel-simulation-job-batch-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-simulation-job-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch))
      (common-lisp:list
       (common-lisp:cons "batch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-simulation-job-batch-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-simulation-job-batch-response
                    'make-cancel-simulation-job-batch-response))
 (common-lisp:defun make-cancel-simulation-job-batch-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-simulation-job-batch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-batch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-simulation-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-simulation-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-simulation-job-request
                    'make-cancel-simulation-job-request))
 (common-lisp:defun make-cancel-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-simulation-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-simulation-job-response
                    'make-cancel-simulation-job-response))
 (common-lisp:defun make-cancel-simulation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-simulation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-simulation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-world-export-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-world-export-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-world-export-job-request
                    'make-cancel-world-export-job-request))
 (common-lisp:defun make-cancel-world-export-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-world-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-world-export-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-world-export-job-response
                    'make-cancel-world-export-job-response))
 (common-lisp:defun make-cancel-world-export-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-world-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-world-generation-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-world-generation-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-world-generation-job-request
                    'make-cancel-world-generation-job-request))
 (common-lisp:defun make-cancel-world-generation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-world-generation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-world-generation-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-world-generation-job-response
                    'make-cancel-world-generation-job-response))
 (common-lisp:defun make-cancel-world-generation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-world-generation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-world-generation-job-response))
   common-lisp:nil))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype command-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-command-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compute common-lisp:nil
                       ((gpu-unit-limit :initarg :|gpuUnitLimit| :type
                         (common-lisp:or gpuunit common-lisp:null) :accessor
                         %compute-gpu-unit-limit :initform common-lisp:nil)
                        (compute-type :initarg :|computeType| :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %compute-compute-type :initform
                         common-lisp:nil)
                        (simulation-unit-limit :initarg :|simulationUnitLimit|
                         :type
                         (common-lisp:or simulation-unit common-lisp:null)
                         :accessor %compute-simulation-unit-limit :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compute 'make-compute))
 (common-lisp:defun make-compute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gpu-unit-limit compute-type
                     simulation-unit-limit)
   (common-lisp:apply #'common-lisp:make-instance 'compute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-unit-limit))
      (common-lisp:list
       (common-lisp:cons "simulationUnitLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "computeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gpu-unit-limit))
      (common-lisp:list
       (common-lisp:cons "gpuUnitLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compute-response common-lisp:nil
                       ((gpu-unit-limit :initarg :|gpuUnitLimit| :type
                         (common-lisp:or gpuunit common-lisp:null) :accessor
                         %compute-response-gpu-unit-limit :initform
                         common-lisp:nil)
                        (compute-type :initarg :|computeType| :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %compute-response-compute-type :initform
                         common-lisp:nil)
                        (simulation-unit-limit :initarg :|simulationUnitLimit|
                         :type
                         (common-lisp:or simulation-unit common-lisp:null)
                         :accessor %compute-response-simulation-unit-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compute-response 'make-compute-response))
 (common-lisp:defun make-compute-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gpu-unit-limit compute-type
                     simulation-unit-limit)
   (common-lisp:apply #'common-lisp:make-instance 'compute-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-unit-limit))
      (common-lisp:list
       (common-lisp:cons "simulationUnitLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "computeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gpu-unit-limit))
      (common-lisp:list
       (common-lisp:cons "gpuUnitLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-response))
   common-lisp:nil))
(common-lisp:deftype compute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-deployment-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       concurrent-deployment-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-deployment-exception
                    'concurrent-deployment-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-deployment-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-deployment-job-request-tags :initform
                         common-lisp:nil)
                        (deployment-application-configs :initarg
                         :|deploymentApplicationConfigs| :type
                         (common-lisp:or deployment-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-deployment-job-request-deployment-application-configs
                         :initform
                         (common-lisp:error
                          ":deploymentapplicationconfigs is required"))
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-deployment-job-request-fleet :initform
                         (common-lisp:error ":fleet is required"))
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-deployment-job-request-client-request-token
                         :initform
                         (common-lisp:error ":clientrequesttoken is required"))
                        (deployment-config :initarg :|deploymentConfig| :type
                         (common-lisp:or deployment-config common-lisp:null)
                         :accessor
                         %create-deployment-job-request-deployment-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-job-request
                    'make-create-deployment-job-request))
 (common-lisp:defun make-create-deployment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags deployment-application-configs fleet
                     client-request-token deployment-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "deploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-application-configs))
      (common-lisp:list
       (common-lisp:cons "deploymentApplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-job-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-deployment-job-response-tags :initform
                         common-lisp:nil)
                        (deployment-config :initarg :|deploymentConfig| :type
                         (common-lisp:or deployment-config common-lisp:null)
                         :accessor
                         %create-deployment-job-response-deployment-config
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-deployment-job-response-created-at :initform
                         common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or deployment-job-error-code
                                         common-lisp:null)
                         :accessor %create-deployment-job-response-failure-code
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %create-deployment-job-response-failure-reason
                         :initform common-lisp:nil)
                        (deployment-application-configs :initarg
                         :|deploymentApplicationConfigs| :type
                         (common-lisp:or deployment-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-deployment-job-response-deployment-application-configs
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %create-deployment-job-response-status
                         :initform common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-deployment-job-response-fleet :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-deployment-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-job-response
                    'make-create-deployment-job-response))
 (common-lisp:defun make-create-deployment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags deployment-config created-at
                     failure-code failure-reason deployment-application-configs
                     status fleet arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-deployment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-application-configs))
      (common-lisp:list
       (common-lisp:cons "deploymentApplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "deploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-fleet-request-tags :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-fleet-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-request 'make-create-fleet-request))
 (common-lisp:defun make-create-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-fleet-response-tags :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-fleet-response-created-at :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-fleet-response-name :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-fleet-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-response 'make-create-fleet-response))
 (common-lisp:defun make-create-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags created-at name arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-application-request common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-robot-application-request-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-robot-application-request-tags :initform
                         common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-robot-application-request-robot-software-suite
                         :initform
                         (common-lisp:error ":robotsoftwaresuite is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or source-configs common-lisp:null)
                         :accessor %create-robot-application-request-sources
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-robot-application-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-robot-application-request
                    'make-create-robot-application-request))
 (common-lisp:defun make-create-robot-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment tags robot-software-suite
                     sources name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-robot-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-application-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-robot-application-response-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-robot-application-response-tags :initform
                         common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-robot-application-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %create-robot-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-robot-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %create-robot-application-response-sources :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-robot-application-response-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-robot-application-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-robot-application-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-robot-application-response
                    'make-create-robot-application-response))
 (common-lisp:defun make-create-robot-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment tags revision-id
                     last-updated-at robot-software-suite sources version name
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-robot-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-application-version-request common-lisp:nil
                       ((image-digest :initarg :|imageDigest| :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         %create-robot-application-version-request-image-digest
                         :initform common-lisp:nil)
                        (s3etags :initarg :|s3Etags| :type
                         (common-lisp:or s3etags common-lisp:null) :accessor
                         %create-robot-application-version-request-s3etags
                         :initform common-lisp:nil)
                        (current-revision-id :initarg :|currentRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-robot-application-version-request-current-revision-id
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-robot-application-version-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'create-robot-application-version-request
                    'make-create-robot-application-version-request))
 (common-lisp:defun make-create-robot-application-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-digest s3etags current-revision-id
                     application)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-robot-application-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision-id))
      (common-lisp:list
       (common-lisp:cons "currentRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3etags))
      (common-lisp:list
       (common-lisp:cons "s3Etags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-application-version-response
                       common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-robot-application-version-response-environment
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-robot-application-version-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %create-robot-application-version-response-last-updated-at
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-robot-application-version-response-robot-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %create-robot-application-version-response-sources
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-robot-application-version-response-version
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-robot-application-version-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-robot-application-version-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-robot-application-version-response
                    'make-create-robot-application-version-response))
 (common-lisp:defun make-create-robot-application-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment revision-id last-updated-at
                     robot-software-suite sources version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-robot-application-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-application-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-robot-request-tags :initform common-lisp:nil)
                        (greengrass-group-id :initarg :|greengrassGroupId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %create-robot-request-greengrass-group-id :initform
                         (common-lisp:error ":greengrassgroupid is required"))
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %create-robot-request-architecture :initform
                         (common-lisp:error ":architecture is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-robot-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-robot-request 'make-create-robot-request))
 (common-lisp:defun make-create-robot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags greengrass-group-id architecture
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-robot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-robot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-robot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass-group-id))
      (common-lisp:list
       (common-lisp:cons "greengrassGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-robot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-robot-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-robot-response-tags :initform common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %create-robot-response-architecture
                         :initform common-lisp:nil)
                        (greengrass-group-id :initarg :|greengrassGroupId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %create-robot-response-greengrass-group-id :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-robot-response-created-at :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-robot-response-name :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-robot-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-robot-response 'make-create-robot-response))
 (common-lisp:defun make-create-robot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags architecture greengrass-group-id
                     created-at name arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-robot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass-group-id))
      (common-lisp:list
       (common-lisp:cons "greengrassGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-robot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-simulation-application-request common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-simulation-application-request-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-simulation-application-request-tags :initform
                         common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %create-simulation-application-request-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-simulation-application-request-robot-software-suite
                         :initform
                         (common-lisp:error ":robotsoftwaresuite is required"))
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %create-simulation-application-request-simulation-software-suite
                         :initform
                         (common-lisp:error
                          ":simulationsoftwaresuite is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or source-configs common-lisp:null)
                         :accessor
                         %create-simulation-application-request-sources
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-simulation-application-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-simulation-application-request
                    'make-create-simulation-application-request))
 (common-lisp:defun make-create-simulation-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment tags rendering-engine
                     robot-software-suite simulation-software-suite sources
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-simulation-application-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-simulation-application-response-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-simulation-application-response-tags :initform
                         common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-simulation-application-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %create-simulation-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %create-simulation-application-response-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-simulation-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %create-simulation-application-response-simulation-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %create-simulation-application-response-sources
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-simulation-application-response-version
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-simulation-application-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-simulation-application-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-simulation-application-response
                    'make-create-simulation-application-response))
 (common-lisp:defun make-create-simulation-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment tags revision-id
                     last-updated-at rendering-engine robot-software-suite
                     simulation-software-suite sources version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-simulation-application-version-request
                       common-lisp:nil
                       ((image-digest :initarg :|imageDigest| :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         %create-simulation-application-version-request-image-digest
                         :initform common-lisp:nil)
                        (s3etags :initarg :|s3Etags| :type
                         (common-lisp:or s3etags common-lisp:null) :accessor
                         %create-simulation-application-version-request-s3etags
                         :initform common-lisp:nil)
                        (current-revision-id :initarg :|currentRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-simulation-application-version-request-current-revision-id
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-simulation-application-version-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'create-simulation-application-version-request
                    'make-create-simulation-application-version-request))
 (common-lisp:defun make-create-simulation-application-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-digest s3etags current-revision-id
                     application)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-application-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision-id))
      (common-lisp:list
       (common-lisp:cons "currentRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3etags))
      (common-lisp:list
       (common-lisp:cons "s3Etags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-simulation-application-version-response
                       common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-environment
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-last-updated-at
                         :initform common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-robot-software-suite
                         :initform common-lisp:nil)
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %create-simulation-application-version-response-simulation-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %create-simulation-application-version-response-sources
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-simulation-application-version-response-version
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-simulation-application-version-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-simulation-application-version-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-simulation-application-version-response
                    'make-create-simulation-application-version-response))
 (common-lisp:defun make-create-simulation-application-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment revision-id last-updated-at
                     rendering-engine robot-software-suite
                     simulation-software-suite sources version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-application-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-application-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-simulation-job-request common-lisp:nil
                       ((compute :initarg :|compute| :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %create-simulation-job-request-compute :initform
                         common-lisp:nil)
                        (vpc-config :initarg :|vpcConfig| :type
                         (common-lisp:or vpcconfig common-lisp:null) :accessor
                         %create-simulation-job-request-vpc-config :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-simulation-job-request-tags :initform
                         common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-source-configs common-lisp:null)
                         :accessor %create-simulation-job-request-data-sources
                         :initform common-lisp:nil)
                        (simulation-applications :initarg
                         :|simulationApplications| :type
                         (common-lisp:or simulation-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-simulation-job-request-simulation-applications
                         :initform common-lisp:nil)
                        (robot-applications :initarg :|robotApplications| :type
                         (common-lisp:or robot-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-simulation-job-request-robot-applications
                         :initform common-lisp:nil)
                        (failure-behavior :initarg :|failureBehavior| :type
                         (common-lisp:or failure-behavior common-lisp:null)
                         :accessor
                         %create-simulation-job-request-failure-behavior
                         :initform common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %create-simulation-job-request-iam-role :initform
                         (common-lisp:error ":iamrole is required"))
                        (max-job-duration-in-seconds :initarg
                         :|maxJobDurationInSeconds| :type
                         (common-lisp:or job-duration common-lisp:null)
                         :accessor
                         %create-simulation-job-request-max-job-duration-in-seconds
                         :initform
                         (common-lisp:error
                          ":maxjobdurationinseconds is required"))
                        (logging-config :initarg :|loggingConfig| :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         %create-simulation-job-request-logging-config
                         :initform common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %create-simulation-job-request-output-location
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-simulation-job-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-simulation-job-request
                    'make-create-simulation-job-request))
 (common-lisp:defun make-create-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute vpc-config tags data-sources
                     simulation-applications robot-applications
                     failure-behavior iam-role max-job-duration-in-seconds
                     logging-config output-location client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "loggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxJobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-behavior))
      (common-lisp:list
       (common-lisp:cons "failureBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot-applications))
      (common-lisp:list
       (common-lisp:cons "robotApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-applications))
      (common-lisp:list
       (common-lisp:cons "simulationApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-simulation-job-requests ()
   '(trivial-types:proper-list simulation-job-request))
 (common-lisp:defun |make-create-simulation-job-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-job-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-simulation-job-response common-lisp:nil
                       ((compute :initarg :|compute| :type
                         (common-lisp:or compute-response common-lisp:null)
                         :accessor %create-simulation-job-response-compute
                         :initform common-lisp:nil)
                        (vpc-config :initarg :|vpcConfig| :type
                         (common-lisp:or vpcconfig-response common-lisp:null)
                         :accessor %create-simulation-job-response-vpc-config
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-simulation-job-response-tags :initform
                         common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor %create-simulation-job-response-data-sources
                         :initform common-lisp:nil)
                        (simulation-applications :initarg
                         :|simulationApplications| :type
                         (common-lisp:or simulation-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-simulation-job-response-simulation-applications
                         :initform common-lisp:nil)
                        (robot-applications :initarg :|robotApplications| :type
                         (common-lisp:or robot-application-configs
                                         common-lisp:null)
                         :accessor
                         %create-simulation-job-response-robot-applications
                         :initform common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %create-simulation-job-response-iam-role :initform
                         common-lisp:nil)
                        (simulation-time-millis :initarg
                         :|simulationTimeMillis| :type
                         (common-lisp:or simulation-time-millis
                                         common-lisp:null)
                         :accessor
                         %create-simulation-job-response-simulation-time-millis
                         :initform common-lisp:nil)
                        (max-job-duration-in-seconds :initarg
                         :|maxJobDurationInSeconds| :type
                         (common-lisp:or job-duration common-lisp:null)
                         :accessor
                         %create-simulation-job-response-max-job-duration-in-seconds
                         :initform common-lisp:nil)
                        (logging-config :initarg :|loggingConfig| :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         %create-simulation-job-response-logging-config
                         :initform common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %create-simulation-job-response-output-location
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-simulation-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-error-code
                                         common-lisp:null)
                         :accessor %create-simulation-job-response-failure-code
                         :initform common-lisp:nil)
                        (failure-behavior :initarg :|failureBehavior| :type
                         (common-lisp:or failure-behavior common-lisp:null)
                         :accessor
                         %create-simulation-job-response-failure-behavior
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %create-simulation-job-response-last-updated-at
                         :initform common-lisp:nil)
                        (last-started-at :initarg :|lastStartedAt| :type
                         (common-lisp:or last-started-at common-lisp:null)
                         :accessor
                         %create-simulation-job-response-last-started-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-status
                                         common-lisp:null)
                         :accessor %create-simulation-job-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-simulation-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-simulation-job-response
                    'make-create-simulation-job-response))
 (common-lisp:defun make-create-simulation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute vpc-config tags data-sources
                     simulation-applications robot-applications iam-role
                     simulation-time-millis max-job-duration-in-seconds
                     logging-config output-location client-request-token
                     failure-code failure-behavior last-updated-at
                     last-started-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-simulation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-started-at))
      (common-lisp:list
       (common-lisp:cons "lastStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-behavior))
      (common-lisp:list
       (common-lisp:cons "failureBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "loggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxJobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-time-millis))
      (common-lisp:list
       (common-lisp:cons "simulationTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot-applications))
      (common-lisp:list
       (common-lisp:cons "robotApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-applications))
      (common-lisp:list
       (common-lisp:cons "simulationApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-simulation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-export-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-export-job-request-tags :initform
                         common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %create-world-export-job-request-iam-role :initform
                         (common-lisp:error ":iamrole is required"))
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %create-world-export-job-request-output-location
                         :initform
                         (common-lisp:error ":outputlocation is required"))
                        (worlds :initarg :|worlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %create-world-export-job-request-worlds :initform
                         (common-lisp:error ":worlds is required"))
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-export-job-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-export-job-request
                    'make-create-world-export-job-request))
 (common-lisp:defun make-create-world-export-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-role output-location worlds
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worlds))
      (common-lisp:list
       (common-lisp:cons "worlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-export-job-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-export-job-response-tags :initform
                         common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %create-world-export-job-response-iam-role :initform
                         common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %create-world-export-job-response-output-location
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-export-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or world-export-job-error-code
                                         common-lisp:null)
                         :accessor
                         %create-world-export-job-response-failure-code
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-world-export-job-response-created-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-export-job-status
                                         common-lisp:null)
                         :accessor %create-world-export-job-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-world-export-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-export-job-response
                    'make-create-world-export-job-response))
 (common-lisp:defun make-create-world-export-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-role output-location
                     client-request-token failure-code created-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-generation-job-request common-lisp:nil
                       ((world-tags :initarg :|worldTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-generation-job-request-world-tags
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-generation-job-request-tags :initform
                         common-lisp:nil)
                        (world-count :initarg :|worldCount| :type
                         (common-lisp:or world-count common-lisp:null)
                         :accessor
                         %create-world-generation-job-request-world-count
                         :initform
                         (common-lisp:error ":worldcount is required"))
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-world-generation-job-request-template
                         :initform (common-lisp:error ":template is required"))
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-generation-job-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-generation-job-request
                    'make-create-world-generation-job-request))
 (common-lisp:defun make-create-world-generation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world-tags tags world-count template
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-generation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-count))
      (common-lisp:list
       (common-lisp:cons "worldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-tags))
      (common-lisp:list
       (common-lisp:cons "worldTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-generation-job-response common-lisp:nil
                       ((world-tags :initarg :|worldTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-generation-job-response-world-tags
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-generation-job-response-tags :initform
                         common-lisp:nil)
                        (world-count :initarg :|worldCount| :type
                         (common-lisp:or world-count common-lisp:null)
                         :accessor
                         %create-world-generation-job-response-world-count
                         :initform common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-world-generation-job-response-template
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-generation-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or world-generation-job-error-code
                                         common-lisp:null)
                         :accessor
                         %create-world-generation-job-response-failure-code
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-world-generation-job-response-created-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-generation-job-status
                                         common-lisp:null)
                         :accessor %create-world-generation-job-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-world-generation-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-generation-job-response
                    'make-create-world-generation-job-response))
 (common-lisp:defun make-create-world-generation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world-tags tags world-count template
                     client-request-token failure-code created-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-generation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-count))
      (common-lisp:list
       (common-lisp:cons "worldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-tags))
      (common-lisp:list
       (common-lisp:cons "worldTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-generation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-template-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-template-request-tags :initform
                         common-lisp:nil)
                        (template-location :initarg :|templateLocation| :type
                         (common-lisp:or template-location common-lisp:null)
                         :accessor
                         %create-world-template-request-template-location
                         :initform common-lisp:nil)
                        (template-body :initarg :|templateBody| :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %create-world-template-request-template-body :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %create-world-template-request-name
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-template-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-template-request
                    'make-create-world-template-request))
 (common-lisp:defun make-create-world-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags template-location template-body name
                     client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-location))
      (common-lisp:list
       (common-lisp:cons "templateLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-world-template-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-world-template-response-tags :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %create-world-template-response-name
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %create-world-template-response-created-at :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-world-template-response-client-request-token
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-world-template-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-world-template-response
                    'make-create-world-template-response))
 (common-lisp:defun make-create-world-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name created-at client-request-token
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-world-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-world-template-response))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((destination :initarg :|destination| :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %data-source-destination :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %data-source-type :initform common-lisp:nil)
                        (s3keys :initarg :|s3Keys| :type
                         (common-lisp:or s3key-outputs common-lisp:null)
                         :accessor %data-source-s3keys :initform
                         common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %data-source-s3bucket :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %data-source-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defun make-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination type s3keys s3bucket name)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3keys))
      (common-lisp:list
       (common-lisp:cons "s3Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source-config common-lisp:nil
                       ((destination :initarg :|destination| :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %data-source-config-destination :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or data-source-type common-lisp:null)
                         :accessor %data-source-config-type :initform
                         common-lisp:nil)
                        (s3keys :initarg :|s3Keys| :type
                         (common-lisp:or s3keys-or-prefixes common-lisp:null)
                         :accessor %data-source-config-s3keys :initform
                         (common-lisp:error ":s3keys is required"))
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %data-source-config-s3bucket :initform
                         (common-lisp:error ":s3bucket is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %data-source-config-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'data-source-config 'make-data-source-config))
 (common-lisp:defun make-data-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination type s3keys s3bucket name)
   (common-lisp:apply #'common-lisp:make-instance 'data-source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3keys))
      (common-lisp:list
       (common-lisp:cons "s3Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-configs ()
   '(trivial-types:proper-list data-source-config))
 (common-lisp:defun |make-data-source-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-source-names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-data-source-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun |make-data-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-request common-lisp:nil
                       ((fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-fleet-request-fleet :initform
                         (common-lisp:error ":fleet is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-request 'make-delete-fleet-request))
 (common-lisp:defun make-delete-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-fleet-response 'make-delete-fleet-response))
 (common-lisp:defun make-delete-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-robot-application-request common-lisp:nil
                       ((application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %delete-robot-application-request-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-robot-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-robot-application-request
                    'make-delete-robot-application-request))
 (common-lisp:defun make-delete-robot-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version application)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-robot-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-robot-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-robot-application-response
                    'make-delete-robot-application-response))
 (common-lisp:defun make-delete-robot-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-robot-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-robot-request common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-robot-request-robot :initform
                         (common-lisp:error ":robot is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-robot-request 'make-delete-robot-request))
 (common-lisp:defun make-delete-robot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot)
   (common-lisp:apply #'common-lisp:make-instance 'delete-robot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-robot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-robot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-robot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-robot-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-robot-response 'make-delete-robot-response))
 (common-lisp:defun make-delete-robot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-robot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-robot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-simulation-application-request common-lisp:nil
                       ((application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %delete-simulation-application-request-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-simulation-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-simulation-application-request
                    'make-delete-simulation-application-request))
 (common-lisp:defun make-delete-simulation-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version application)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-simulation-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-simulation-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-simulation-application-response
                    'make-delete-simulation-application-response))
 (common-lisp:defun make-delete-simulation-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-simulation-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-world-template-request common-lisp:nil
                       ((template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-world-template-request-template :initform
                         (common-lisp:error ":template is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-world-template-request
                    'make-delete-world-template-request))
 (common-lisp:defun make-delete-world-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-world-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-world-template-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-world-template-response
                    'make-delete-world-template-response))
 (common-lisp:defun make-delete-world-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-world-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-world-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-application-config common-lisp:nil
                       ((launch-config :initarg :|launchConfig| :type
                         (common-lisp:or deployment-launch-config
                                         common-lisp:null)
                         :accessor %deployment-application-config-launch-config
                         :initform
                         (common-lisp:error ":launchconfig is required"))
                        (application-version :initarg :|applicationVersion|
                         :type
                         (common-lisp:or deployment-version common-lisp:null)
                         :accessor
                         %deployment-application-config-application-version
                         :initform
                         (common-lisp:error ":applicationversion is required"))
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deployment-application-config-application :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'deployment-application-config
                    'make-deployment-application-config))
 (common-lisp:defun make-deployment-application-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-config application-version
                     application)
   (common-lisp:apply #'common-lisp:make-instance
                      'deployment-application-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-application-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-application-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-config))
      (common-lisp:list
       (common-lisp:cons "launchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-application-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-application-configs ()
   '(trivial-types:proper-list deployment-application-config))
 (common-lisp:defun |make-deployment-application-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deployment-application-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-config common-lisp:nil
                       ((download-condition-file :initarg
                         :|downloadConditionFile| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %deployment-config-download-condition-file :initform
                         common-lisp:nil)
                        (robot-deployment-timeout-in-seconds :initarg
                         :|robotDeploymentTimeoutInSeconds| :type
                         (common-lisp:or deployment-timeout common-lisp:null)
                         :accessor
                         %deployment-config-robot-deployment-timeout-in-seconds
                         :initform common-lisp:nil)
                        (failure-threshold-percentage :initarg
                         :|failureThresholdPercentage| :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         %deployment-config-failure-threshold-percentage
                         :initform common-lisp:nil)
                        (concurrent-deployment-percentage :initarg
                         :|concurrentDeploymentPercentage| :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         %deployment-config-concurrent-deployment-percentage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-config 'make-deployment-config))
 (common-lisp:defun make-deployment-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key download-condition-file
                     robot-deployment-timeout-in-seconds
                     failure-threshold-percentage
                     concurrent-deployment-percentage)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'concurrent-deployment-percentage))
      (common-lisp:list
       (common-lisp:cons "concurrentDeploymentPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-threshold-percentage))
      (common-lisp:list
       (common-lisp:cons "failureThresholdPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-deployment-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "robotDeploymentTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'download-condition-file))
      (common-lisp:list
       (common-lisp:cons "downloadConditionFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-job common-lisp:nil
                       ((created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %deployment-job-created-at :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or deployment-job-error-code
                                         common-lisp:null)
                         :accessor %deployment-job-failure-code :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %deployment-job-failure-reason :initform
                         common-lisp:nil)
                        (deployment-config :initarg :|deploymentConfig| :type
                         (common-lisp:or deployment-config common-lisp:null)
                         :accessor %deployment-job-deployment-config :initform
                         common-lisp:nil)
                        (deployment-application-configs :initarg
                         :|deploymentApplicationConfigs| :type
                         (common-lisp:or deployment-application-configs
                                         common-lisp:null)
                         :accessor
                         %deployment-job-deployment-application-configs
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %deployment-job-status :initform
                         common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deployment-job-fleet :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deployment-job-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deployment-job 'make-deployment-job))
 (common-lisp:defun make-deployment-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at failure-code failure-reason
                     deployment-config deployment-application-configs status
                     fleet arn)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-application-configs))
      (common-lisp:list
       (common-lisp:cons "deploymentApplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "deploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-job))
   common-lisp:nil))
(common-lisp:deftype deployment-job-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployment-jobs ()
   '(trivial-types:proper-list deployment-job))
 (common-lisp:defun |make-deployment-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deployment-launch-config common-lisp:nil
                       ((environment-variables :initarg :|environmentVariables|
                         :type
                         (common-lisp:or environment-variable-map
                                         common-lisp:null)
                         :accessor
                         %deployment-launch-config-environment-variables
                         :initform common-lisp:nil)
                        (post-launch-file :initarg :|postLaunchFile| :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %deployment-launch-config-post-launch-file :initform
                         common-lisp:nil)
                        (launch-file :initarg :|launchFile| :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %deployment-launch-config-launch-file :initform
                         (common-lisp:error ":launchfile is required"))
                        (pre-launch-file :initarg :|preLaunchFile| :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %deployment-launch-config-pre-launch-file :initform
                         common-lisp:nil)
                        (package-name :initarg :|packageName| :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %deployment-launch-config-package-name :initform
                         (common-lisp:error ":packagename is required"))))
 (common-lisp:export
  (common-lisp:list 'deployment-launch-config 'make-deployment-launch-config))
 (common-lisp:defun make-deployment-launch-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-variables post-launch-file
                     launch-file pre-launch-file package-name)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-launch-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-launch-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-launch-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-launch-file))
      (common-lisp:list
       (common-lisp:cons "preLaunchFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-file))
      (common-lisp:list
       (common-lisp:cons "launchFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-file))
      (common-lisp:list
       (common-lisp:cons "postLaunchFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-launch-config))
   common-lisp:nil))
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-timeout () 'common-lisp:integer)
(common-lisp:deftype deployment-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deregister-robot-request common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deregister-robot-request-robot :initform
                         (common-lisp:error ":robot is required"))
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deregister-robot-request-fleet :initform
                         (common-lisp:error ":fleet is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-robot-request 'make-deregister-robot-request))
 (common-lisp:defun make-deregister-robot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot fleet)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-robot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-robot-response common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deregister-robot-response-robot :initform
                         common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %deregister-robot-response-fleet :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-robot-response
                    'make-deregister-robot-response))
 (common-lisp:defun make-deregister-robot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot fleet)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-robot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-robot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deployment-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-deployment-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-deployment-job-request
                    'make-describe-deployment-job-request))
 (common-lisp:defun make-describe-deployment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-deployment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deployment-job-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-deployment-job-response-tags :initform
                         common-lisp:nil)
                        (robot-deployment-summary :initarg
                         :|robotDeploymentSummary| :type
                         (common-lisp:or robot-deployment-summary
                                         common-lisp:null)
                         :accessor
                         %describe-deployment-job-response-robot-deployment-summary
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-deployment-job-response-created-at :initform
                         common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or deployment-job-error-code
                                         common-lisp:null)
                         :accessor
                         %describe-deployment-job-response-failure-code
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %describe-deployment-job-response-failure-reason
                         :initform common-lisp:nil)
                        (deployment-application-configs :initarg
                         :|deploymentApplicationConfigs| :type
                         (common-lisp:or deployment-application-configs
                                         common-lisp:null)
                         :accessor
                         %describe-deployment-job-response-deployment-application-configs
                         :initform common-lisp:nil)
                        (deployment-config :initarg :|deploymentConfig| :type
                         (common-lisp:or deployment-config common-lisp:null)
                         :accessor
                         %describe-deployment-job-response-deployment-config
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %describe-deployment-job-response-status
                         :initform common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-deployment-job-response-fleet :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-deployment-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-deployment-job-response
                    'make-describe-deployment-job-response))
 (common-lisp:defun make-describe-deployment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags robot-deployment-summary created-at
                     failure-code failure-reason deployment-application-configs
                     deployment-config status fleet arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-deployment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "deploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-application-configs))
      (common-lisp:list
       (common-lisp:cons "deploymentApplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-deployment-summary))
      (common-lisp:list
       (common-lisp:cons "robotDeploymentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployment-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-request common-lisp:nil
                       ((fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-fleet-request-fleet :initform
                         (common-lisp:error ":fleet is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-request 'make-describe-fleet-request))
 (common-lisp:defun make-describe-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-fleet-response-tags :initform
                         common-lisp:nil)
                        (last-deployment-time :initarg :|lastDeploymentTime|
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         %describe-fleet-response-last-deployment-time
                         :initform common-lisp:nil)
                        (last-deployment-job :initarg :|lastDeploymentJob|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-fleet-response-last-deployment-job :initform
                         common-lisp:nil)
                        (last-deployment-status :initarg
                         :|lastDeploymentStatus| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         %describe-fleet-response-last-deployment-status
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-fleet-response-created-at :initform
                         common-lisp:nil)
                        (robots :initarg :|robots| :type
                         (common-lisp:or robots common-lisp:null) :accessor
                         %describe-fleet-response-robots :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-fleet-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-fleet-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-response 'make-describe-fleet-response))
 (common-lisp:defun make-describe-fleet-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-deployment-time
                     last-deployment-job last-deployment-status created-at
                     robots arn name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleet-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robots))
      (common-lisp:list
       (common-lisp:cons "robots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-status))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment-job))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-time))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-robot-application-request common-lisp:nil
                       ((application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %describe-robot-application-request-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-robot-application-request
                    'make-describe-robot-application-request))
 (common-lisp:defun make-describe-robot-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version application)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-robot-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-robot-application-response common-lisp:nil
                       ((image-digest :initarg :|imageDigest| :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         %describe-robot-application-response-image-digest
                         :initform common-lisp:nil)
                        (environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %describe-robot-application-response-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-robot-application-response-tags :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %describe-robot-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %describe-robot-application-response-revision-id
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %describe-robot-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %describe-robot-application-response-sources :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %describe-robot-application-response-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-robot-application-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-application-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-robot-application-response
                    'make-describe-robot-application-response))
 (common-lisp:defun make-describe-robot-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-digest environment tags
                     last-updated-at revision-id robot-software-suite sources
                     version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-robot-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-robot-request common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-request-robot :initform
                         (common-lisp:error ":robot is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-robot-request 'make-describe-robot-request))
 (common-lisp:defun make-describe-robot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot)
   (common-lisp:apply #'common-lisp:make-instance 'describe-robot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-robot-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-robot-response-tags :initform
                         common-lisp:nil)
                        (last-deployment-time :initarg :|lastDeploymentTime|
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor
                         %describe-robot-response-last-deployment-time
                         :initform common-lisp:nil)
                        (last-deployment-job :initarg :|lastDeploymentJob|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-response-last-deployment-job :initform
                         common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %describe-robot-response-architecture
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-robot-response-created-at :initform
                         common-lisp:nil)
                        (greengrass-group-id :initarg :|greengrassGroupId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %describe-robot-response-greengrass-group-id :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or robot-status common-lisp:null)
                         :accessor %describe-robot-response-status :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :|fleetArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-response-fleet-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-robot-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-robot-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-robot-response 'make-describe-robot-response))
 (common-lisp:defun make-describe-robot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-deployment-time
                     last-deployment-job architecture created-at
                     greengrass-group-id status fleet-arn name arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-robot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "fleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass-group-id))
      (common-lisp:list
       (common-lisp:cons "greengrassGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment-job))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-time))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-robot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-application-request common-lisp:nil
                       ((application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %describe-simulation-application-request-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-application-request
                    'make-describe-simulation-application-request))
 (common-lisp:defun make-describe-simulation-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-version application)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-application-response common-lisp:nil
                       ((image-digest :initarg :|imageDigest| :type
                         (common-lisp:or image-digest common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-image-digest
                         :initform common-lisp:nil)
                        (environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-environment
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-simulation-application-response-tags
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-revision-id
                         :initform common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-application-response-simulation-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %describe-simulation-application-response-sources
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %describe-simulation-application-response-version
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-simulation-application-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-application-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-application-response
                    'make-describe-simulation-application-response))
 (common-lisp:defun make-describe-simulation-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-digest environment tags
                     last-updated-at revision-id rendering-engine
                     robot-software-suite simulation-software-suite sources
                     version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-job-batch-request common-lisp:nil
                       ((batch :initarg :|batch| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-job-batch-request-batch :initform
                         (common-lisp:error ":batch is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-job-batch-request
                    'make-describe-simulation-job-batch-request))
 (common-lisp:defun make-describe-simulation-job-batch-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key batch)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-job-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch))
      (common-lisp:list
       (common-lisp:cons "batch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-job-batch-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-simulation-job-batch-response-tags :initform
                         common-lisp:nil)
                        (created-requests :initarg :|createdRequests| :type
                         (common-lisp:or simulation-job-summaries
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-created-requests
                         :initform common-lisp:nil)
                        (pending-requests :initarg :|pendingRequests| :type
                         (common-lisp:or create-simulation-job-requests
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-pending-requests
                         :initform common-lisp:nil)
                        (failed-requests :initarg :|failedRequests| :type
                         (common-lisp:or failed-create-simulation-job-requests
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-failed-requests
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-batch-error-code
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-failure-code
                         :initform common-lisp:nil)
                        (batch-policy :initarg :|batchPolicy| :type
                         (common-lisp:or batch-policy common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-batch-policy
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-client-request-token
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-simulation-job-batch-response-created-at
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-last-updated-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-batch-status
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-batch-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-job-batch-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-job-batch-response
                    'make-describe-simulation-job-batch-response))
 (common-lisp:defun make-describe-simulation-job-batch-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags created-requests pending-requests
                     failed-requests failure-reason failure-code batch-policy
                     client-request-token created-at last-updated-at status
                     arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-job-batch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-policy))
      (common-lisp:list
       (common-lisp:cons "batchPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "failedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-requests))
      (common-lisp:list
       (common-lisp:cons "pendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-requests))
      (common-lisp:list
       (common-lisp:cons "createdRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-batch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-job-request
                    'make-describe-simulation-job-request))
 (common-lisp:defun make-describe-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-job-response common-lisp:nil
                       ((compute :initarg :|compute| :type
                         (common-lisp:or compute-response common-lisp:null)
                         :accessor %describe-simulation-job-response-compute
                         :initform common-lisp:nil)
                        (network-interface :initarg :|networkInterface| :type
                         (common-lisp:or network-interface common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-network-interface
                         :initform common-lisp:nil)
                        (vpc-config :initarg :|vpcConfig| :type
                         (common-lisp:or vpcconfig-response common-lisp:null)
                         :accessor %describe-simulation-job-response-vpc-config
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-simulation-job-response-tags :initform
                         common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-data-sources
                         :initform common-lisp:nil)
                        (simulation-applications :initarg
                         :|simulationApplications| :type
                         (common-lisp:or simulation-application-configs
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-simulation-applications
                         :initform common-lisp:nil)
                        (robot-applications :initarg :|robotApplications| :type
                         (common-lisp:or robot-application-configs
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-robot-applications
                         :initform common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %describe-simulation-job-response-iam-role :initform
                         common-lisp:nil)
                        (simulation-time-millis :initarg
                         :|simulationTimeMillis| :type
                         (common-lisp:or simulation-time-millis
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-simulation-time-millis
                         :initform common-lisp:nil)
                        (max-job-duration-in-seconds :initarg
                         :|maxJobDurationInSeconds| :type
                         (common-lisp:or job-duration common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-max-job-duration-in-seconds
                         :initform common-lisp:nil)
                        (logging-config :initarg :|loggingConfig| :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-logging-config
                         :initform common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-output-location
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-error-code
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-failure-code
                         :initform common-lisp:nil)
                        (failure-behavior :initarg :|failureBehavior| :type
                         (common-lisp:or failure-behavior common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-failure-behavior
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-last-updated-at
                         :initform common-lisp:nil)
                        (last-started-at :initarg :|lastStartedAt| :type
                         (common-lisp:or last-started-at common-lisp:null)
                         :accessor
                         %describe-simulation-job-response-last-started-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-status
                                         common-lisp:null)
                         :accessor %describe-simulation-job-response-status
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-simulation-job-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-simulation-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-job-response
                    'make-describe-simulation-job-response))
 (common-lisp:defun make-describe-simulation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute network-interface vpc-config tags
                     data-sources simulation-applications robot-applications
                     iam-role simulation-time-millis
                     max-job-duration-in-seconds logging-config output-location
                     client-request-token failure-reason failure-code
                     failure-behavior last-updated-at last-started-at status
                     name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-simulation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-started-at))
      (common-lisp:list
       (common-lisp:cons "lastStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-behavior))
      (common-lisp:list
       (common-lisp:cons "failureBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "loggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxJobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-time-millis))
      (common-lisp:list
       (common-lisp:cons "simulationTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot-applications))
      (common-lisp:list
       (common-lisp:cons "robotApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-applications))
      (common-lisp:list
       (common-lisp:cons "simulationApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interface))
      (common-lisp:list
       (common-lisp:cons "networkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-export-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-export-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-world-export-job-request
                    'make-describe-world-export-job-request))
 (common-lisp:defun make-describe-world-export-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-export-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-export-job-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-world-export-job-response-tags :initform
                         common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %describe-world-export-job-response-iam-role :initform
                         common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor
                         %describe-world-export-job-response-output-location
                         :initform common-lisp:nil)
                        (worlds :initarg :|worlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %describe-world-export-job-response-worlds :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-world-export-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %describe-world-export-job-response-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or world-export-job-error-code
                                         common-lisp:null)
                         :accessor
                         %describe-world-export-job-response-failure-code
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-world-export-job-response-created-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-export-job-status
                                         common-lisp:null)
                         :accessor %describe-world-export-job-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-export-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-world-export-job-response
                    'make-describe-world-export-job-response))
 (common-lisp:defun make-describe-world-export-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-role output-location worlds
                     client-request-token failure-reason failure-code
                     created-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-export-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worlds))
      (common-lisp:list
       (common-lisp:cons "worlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-generation-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-generation-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-world-generation-job-request
                    'make-describe-world-generation-job-request))
 (common-lisp:defun make-describe-world-generation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-generation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-generation-job-response common-lisp:nil
                       ((world-tags :initarg :|worldTags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-world-generation-job-response-world-tags
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-world-generation-job-response-tags :initform
                         common-lisp:nil)
                        (finished-worlds-summary :initarg
                         :|finishedWorldsSummary| :type
                         (common-lisp:or finished-worlds-summary
                                         common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-finished-worlds-summary
                         :initform common-lisp:nil)
                        (world-count :initarg :|worldCount| :type
                         (common-lisp:or world-count common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-world-count
                         :initform common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-generation-job-response-template
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-client-request-token
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or world-generation-job-error-code
                                         common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-failure-code
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-world-generation-job-response-created-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-generation-job-status
                                         common-lisp:null)
                         :accessor
                         %describe-world-generation-job-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-generation-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-world-generation-job-response
                    'make-describe-world-generation-job-response))
 (common-lisp:defun make-describe-world-generation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world-tags tags finished-worlds-summary
                     world-count template client-request-token failure-reason
                     failure-code created-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-generation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-count))
      (common-lisp:list
       (common-lisp:cons "worldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finished-worlds-summary))
      (common-lisp:list
       (common-lisp:cons "finishedWorldsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-tags))
      (common-lisp:list
       (common-lisp:cons "worldTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-generation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-request common-lisp:nil
                       ((world :initarg :|world| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-request-world :initform
                         (common-lisp:error ":world is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-world-request 'make-describe-world-request))
 (common-lisp:defun make-describe-world-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world)
   (common-lisp:apply #'common-lisp:make-instance 'describe-world-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world))
      (common-lisp:list
       (common-lisp:cons "world"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-response common-lisp:nil
                       ((world-description-body :initarg
                         :|worldDescriptionBody| :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %describe-world-response-world-description-body
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-world-response-tags :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-world-response-created-at :initform
                         common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-response-template :initform
                         common-lisp:nil)
                        (generation-job :initarg :|generationJob| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-response-generation-job :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-world-response 'make-describe-world-response))
 (common-lisp:defun make-describe-world-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world-description-body tags created-at
                     template generation-job arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-world-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-job))
      (common-lisp:list
       (common-lisp:cons "generationJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'world-description-body))
      (common-lisp:list
       (common-lisp:cons "worldDescriptionBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-template-request common-lisp:nil
                       ((template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-template-request-template :initform
                         (common-lisp:error ":template is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-world-template-request
                    'make-describe-world-template-request))
 (common-lisp:defun make-describe-world-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-world-template-response common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %describe-world-template-response-version
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-world-template-response-tags :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %describe-world-template-response-last-updated-at
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %describe-world-template-response-created-at :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %describe-world-template-response-name
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-world-template-response-client-request-token
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-world-template-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-world-template-response
                    'make-describe-world-template-response))
 (common-lisp:defun make-describe-world-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version tags last-updated-at created-at
                     name client-request-token arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-world-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-world-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((uri :initarg :|uri| :type
                         (common-lisp:or repository-url common-lisp:null)
                         :accessor %environment-uri :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defun make-environment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uri)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:deftype environment-variable-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-variable-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-environment-variable-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype environment-variable-value () 'common-lisp:string)
(common-lisp:deftype exit-behavior () 'common-lisp:string)
(common-lisp:deftype failed-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failed-create-simulation-job-request common-lisp:nil
                       ((failed-at :initarg :|failedAt| :type
                         (common-lisp:or failed-at common-lisp:null) :accessor
                         %failed-create-simulation-job-request-failed-at
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-error-code
                                         common-lisp:null)
                         :accessor
                         %failed-create-simulation-job-request-failure-code
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %failed-create-simulation-job-request-failure-reason
                         :initform common-lisp:nil)
                        (request :initarg :|request| :type
                         (common-lisp:or simulation-job-request
                                         common-lisp:null)
                         :accessor
                         %failed-create-simulation-job-request-request
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-create-simulation-job-request
                    'make-failed-create-simulation-job-request))
 (common-lisp:defun make-failed-create-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-at failure-code failure-reason
                     request)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-create-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-at))
      (common-lisp:list
       (common-lisp:cons "failedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-create-simulation-job-requests ()
   '(trivial-types:proper-list failed-create-simulation-job-request))
 (common-lisp:defun |make-failed-create-simulation-job-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-create-simulation-job-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failure-summary common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or world-failures common-lisp:null)
                         :accessor %failure-summary-failures :initform
                         common-lisp:nil)
                        (total-failure-count :initarg :|totalFailureCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %failure-summary-total-failure-count
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failure-summary 'make-failure-summary))
 (common-lisp:defun make-failure-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures total-failure-count)
   (common-lisp:apply #'common-lisp:make-instance 'failure-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-failure-count))
      (common-lisp:list
       (common-lisp:cons "totalFailureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-values () '(trivial-types:proper-list name))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finished-worlds-summary common-lisp:nil
                       ((failure-summary :initarg :|failureSummary| :type
                         (common-lisp:or failure-summary common-lisp:null)
                         :accessor %finished-worlds-summary-failure-summary
                         :initform common-lisp:nil)
                        (succeeded-worlds :initarg :|succeededWorlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %finished-worlds-summary-succeeded-worlds :initform
                         common-lisp:nil)
                        (finished-count :initarg :|finishedCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %finished-worlds-summary-finished-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finished-worlds-summary 'make-finished-worlds-summary))
 (common-lisp:defun make-finished-worlds-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-summary succeeded-worlds
                     finished-count)
   (common-lisp:apply #'common-lisp:make-instance 'finished-worlds-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finished-worlds-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finished-worlds-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finished-count))
      (common-lisp:list
       (common-lisp:cons "finishedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded-worlds))
      (common-lisp:list
       (common-lisp:cons "succeededWorlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-summary))
      (common-lisp:list
       (common-lisp:cons "failureSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finished-worlds-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fleet common-lisp:nil
                       ((last-deployment-time :initarg :|lastDeploymentTime|
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor %fleet-last-deployment-time :initform
                         common-lisp:nil)
                        (last-deployment-job :initarg :|lastDeploymentJob|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %fleet-last-deployment-job :initform common-lisp:nil)
                        (last-deployment-status :initarg
                         :|lastDeploymentStatus| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %fleet-last-deployment-status :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %fleet-created-at :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %fleet-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %fleet-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fleet 'make-fleet))
 (common-lisp:defun make-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-deployment-time last-deployment-job
                     last-deployment-status created-at arn name)
   (common-lisp:apply #'common-lisp:make-instance 'fleet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-status))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment-job))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-time))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleets () '(trivial-types:proper-list fleet))
 (common-lisp:defun |make-fleets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype floorplan-count () 'common-lisp:integer)
(common-lisp:deftype gpuunit () 'common-lisp:integer)
(common-lisp:deftype generic-integer () 'common-lisp:integer)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-world-template-body-request common-lisp:nil
                       ((generation-job :initarg :|generationJob| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-world-template-body-request-generation-job
                         :initform common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-world-template-body-request-template :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-world-template-body-request
                    'make-get-world-template-body-request))
 (common-lisp:defun make-get-world-template-body-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generation-job template)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-world-template-body-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-job))
      (common-lisp:list
       (common-lisp:cons "generationJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-world-template-body-response common-lisp:nil
                       ((template-body :initarg :|templateBody| :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %get-world-template-body-response-template-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-world-template-body-response
                    'make-get-world-template-body-response))
 (common-lisp:defun make-get-world-template-body-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-body)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-world-template-body-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-world-template-body-response))
   common-lisp:nil))
(common-lisp:deftype iam-role () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype interior-count-per-floorplan () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype job-duration () 'common-lisp:integer)
(common-lisp:deftype json () 'common-lisp:string)
(common-lisp:deftype last-started-at () 'common-lisp:string)
(common-lisp:deftype last-updated-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-config common-lisp:nil
                       ((command :initarg :|command| :type
                         (common-lisp:or command-list common-lisp:null)
                         :accessor %launch-config-command :initform
                         common-lisp:nil)
                        (stream-ui :initarg :|streamUI| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %launch-config-stream-ui :initform common-lisp:nil)
                        (port-forwarding-config :initarg
                         :|portForwardingConfig| :type
                         (common-lisp:or port-forwarding-config
                                         common-lisp:null)
                         :accessor %launch-config-port-forwarding-config
                         :initform common-lisp:nil)
                        (environment-variables :initarg :|environmentVariables|
                         :type
                         (common-lisp:or environment-variable-map
                                         common-lisp:null)
                         :accessor %launch-config-environment-variables
                         :initform common-lisp:nil)
                        (launch-file :initarg :|launchFile| :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %launch-config-launch-file :initform common-lisp:nil)
                        (package-name :initarg :|packageName| :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %launch-config-package-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-config 'make-launch-config))
 (common-lisp:defun make-launch-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key command stream-ui port-forwarding-config
                     environment-variables launch-file package-name)
   (common-lisp:apply #'common-lisp:make-instance 'launch-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-file))
      (common-lisp:list
       (common-lisp:cons "launchFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'port-forwarding-config))
      (common-lisp:list
       (common-lisp:cons "portForwardingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-ui))
      (common-lisp:list
       (common-lisp:cons "streamUI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-deployment-jobs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-deployment-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-deployment-jobs-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-deployment-jobs-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-jobs-request
                    'make-list-deployment-jobs-request))
 (common-lisp:defun make-list-deployment-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployment-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployment-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-deployment-jobs-response-next-token
                         :initform common-lisp:nil)
                        (deployment-jobs :initarg :|deploymentJobs| :type
                         (common-lisp:or deployment-jobs common-lisp:null)
                         :accessor
                         %list-deployment-jobs-response-deployment-jobs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-deployment-jobs-response
                    'make-list-deployment-jobs-response))
 (common-lisp:defun make-list-deployment-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token deployment-jobs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-deployment-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-jobs))
      (common-lisp:list
       (common-lisp:cons "deploymentJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployment-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-fleets-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-fleets-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-fleets-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-request 'make-list-fleets-request))
 (common-lisp:defun make-list-fleets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-fleets-response-next-token :initform
                         common-lisp:nil)
                        (fleet-details :initarg :|fleetDetails| :type
                         (common-lisp:or fleets common-lisp:null) :accessor
                         %list-fleets-response-fleet-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-response 'make-list-fleets-response))
 (common-lisp:defun make-list-fleets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-details)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-details))
      (common-lisp:list
       (common-lisp:cons "fleetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-robot-applications-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-robot-applications-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-robot-applications-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-robot-applications-request-next-token
                         :initform common-lisp:nil)
                        (version-qualifier :initarg :|versionQualifier| :type
                         (common-lisp:or version-qualifier common-lisp:null)
                         :accessor
                         %list-robot-applications-request-version-qualifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-robot-applications-request
                    'make-list-robot-applications-request))
 (common-lisp:defun make-list-robot-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token
                     version-qualifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-robot-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-qualifier))
      (common-lisp:list
       (common-lisp:cons "versionQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-robot-applications-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-robot-applications-response-next-token
                         :initform common-lisp:nil)
                        (robot-application-summaries :initarg
                         :|robotApplicationSummaries| :type
                         (common-lisp:or robot-application-summaries
                                         common-lisp:null)
                         :accessor
                         %list-robot-applications-response-robot-application-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-robot-applications-response
                    'make-list-robot-applications-response))
 (common-lisp:defun make-list-robot-applications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token robot-application-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-robot-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-application-summaries))
      (common-lisp:list
       (common-lisp:cons "robotApplicationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-robot-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-robots-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-robots-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-robots-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-robots-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-robots-request 'make-list-robots-request))
 (common-lisp:defun make-list-robots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-robots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-robots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-robots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-robots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-robots-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-robots-response-next-token :initform
                         common-lisp:nil)
                        (robots :initarg :|robots| :type
                         (common-lisp:or robots common-lisp:null) :accessor
                         %list-robots-response-robots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-robots-response 'make-list-robots-response))
 (common-lisp:defun make-list-robots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token robots)
   (common-lisp:apply #'common-lisp:make-instance 'list-robots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-robots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-robots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robots))
      (common-lisp:list
       (common-lisp:cons "robots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-robots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-applications-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-simulation-applications-request-filters
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-simulation-applications-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-simulation-applications-request-next-token
                         :initform common-lisp:nil)
                        (version-qualifier :initarg :|versionQualifier| :type
                         (common-lisp:or version-qualifier common-lisp:null)
                         :accessor
                         %list-simulation-applications-request-version-qualifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulation-applications-request
                    'make-list-simulation-applications-request))
 (common-lisp:defun make-list-simulation-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token
                     version-qualifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-simulation-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-qualifier))
      (common-lisp:list
       (common-lisp:cons "versionQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-applications-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-simulation-applications-response-next-token
                         :initform common-lisp:nil)
                        (simulation-application-summaries :initarg
                         :|simulationApplicationSummaries| :type
                         (common-lisp:or simulation-application-summaries
                                         common-lisp:null)
                         :accessor
                         %list-simulation-applications-response-simulation-application-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulation-applications-response
                    'make-list-simulation-applications-response))
 (common-lisp:defun make-list-simulation-applications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     simulation-application-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-simulation-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-application-summaries))
      (common-lisp:list
       (common-lisp:cons "simulationApplicationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-job-batches-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-simulation-job-batches-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-simulation-job-batches-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-simulation-job-batches-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulation-job-batches-request
                    'make-list-simulation-job-batches-request))
 (common-lisp:defun make-list-simulation-job-batches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-simulation-job-batches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-job-batches-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-simulation-job-batches-response-next-token
                         :initform common-lisp:nil)
                        (simulation-job-batch-summaries :initarg
                         :|simulationJobBatchSummaries| :type
                         (common-lisp:or simulation-job-batch-summaries
                                         common-lisp:null)
                         :accessor
                         %list-simulation-job-batches-response-simulation-job-batch-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulation-job-batches-response
                    'make-list-simulation-job-batches-response))
 (common-lisp:defun make-list-simulation-job-batches-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     simulation-job-batch-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-simulation-job-batches-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-job-batch-summaries))
      (common-lisp:list
       (common-lisp:cons "simulationJobBatchSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-job-batches-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-jobs-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-simulation-jobs-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-simulation-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-simulation-jobs-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulation-jobs-request
                    'make-list-simulation-jobs-request))
 (common-lisp:defun make-list-simulation-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-simulation-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulation-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-simulation-jobs-response-next-token
                         :initform common-lisp:nil)
                        (simulation-job-summaries :initarg
                         :|simulationJobSummaries| :type
                         (common-lisp:or simulation-job-summaries
                                         common-lisp:null)
                         :accessor
                         %list-simulation-jobs-response-simulation-job-summaries
                         :initform
                         (common-lisp:error
                          ":simulationjobsummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-simulation-jobs-response
                    'make-list-simulation-jobs-response))
 (common-lisp:defun make-list-simulation-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token simulation-job-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-simulation-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-job-summaries))
      (common-lisp:list
       (common-lisp:cons "simulationJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulation-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-export-jobs-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-world-export-jobs-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-world-export-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-world-export-jobs-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-world-export-jobs-request
                    'make-list-world-export-jobs-request))
 (common-lisp:defun make-list-world-export-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-world-export-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-export-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-world-export-jobs-response-next-token
                         :initform common-lisp:nil)
                        (world-export-job-summaries :initarg
                         :|worldExportJobSummaries| :type
                         (common-lisp:or world-export-job-summaries
                                         common-lisp:null)
                         :accessor
                         %list-world-export-jobs-response-world-export-job-summaries
                         :initform
                         (common-lisp:error
                          ":worldexportjobsummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-world-export-jobs-response
                    'make-list-world-export-jobs-response))
 (common-lisp:defun make-list-world-export-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token world-export-job-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-world-export-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'world-export-job-summaries))
      (common-lisp:list
       (common-lisp:cons "worldExportJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-generation-jobs-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-world-generation-jobs-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-world-generation-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-world-generation-jobs-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-world-generation-jobs-request
                    'make-list-world-generation-jobs-request))
 (common-lisp:defun make-list-world-generation-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-world-generation-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-generation-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-world-generation-jobs-response-next-token
                         :initform common-lisp:nil)
                        (world-generation-job-summaries :initarg
                         :|worldGenerationJobSummaries| :type
                         (common-lisp:or world-generation-job-summaries
                                         common-lisp:null)
                         :accessor
                         %list-world-generation-jobs-response-world-generation-job-summaries
                         :initform
                         (common-lisp:error
                          ":worldgenerationjobsummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-world-generation-jobs-response
                    'make-list-world-generation-jobs-response))
 (common-lisp:defun make-list-world-generation-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     world-generation-job-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-world-generation-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'world-generation-job-summaries))
      (common-lisp:list
       (common-lisp:cons "worldGenerationJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-generation-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-templates-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-world-templates-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-world-templates-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-world-templates-request
                    'make-list-world-templates-request))
 (common-lisp:defun make-list-world-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-world-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-world-templates-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-world-templates-response-next-token
                         :initform common-lisp:nil)
                        (template-summaries :initarg :|templateSummaries| :type
                         (common-lisp:or template-summaries common-lisp:null)
                         :accessor
                         %list-world-templates-response-template-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-world-templates-response
                    'make-list-world-templates-response))
 (common-lisp:defun make-list-world-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token template-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-world-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-summaries))
      (common-lisp:list
       (common-lisp:cons "templateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-world-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-worlds-request common-lisp:nil
                       ((filters :initarg :|filters| :type
                         (common-lisp:or filters common-lisp:null) :accessor
                         %list-worlds-request-filters :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-worlds-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-worlds-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-worlds-request 'make-list-worlds-request))
 (common-lisp:defun make-list-worlds-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-worlds-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-worlds-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-worlds-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-worlds-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-worlds-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-worlds-response-next-token :initform
                         common-lisp:nil)
                        (world-summaries :initarg :|worldSummaries| :type
                         (common-lisp:or world-summaries common-lisp:null)
                         :accessor %list-worlds-response-world-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-worlds-response 'make-list-worlds-response))
 (common-lisp:defun make-list-worlds-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token world-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-worlds-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-worlds-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-worlds-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-summaries))
      (common-lisp:list
       (common-lisp:cons "worldSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-worlds-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-config common-lisp:nil
                       ((record-all-ros-topics :initarg :|recordAllRosTopics|
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %logging-config-record-all-ros-topics
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'logging-config 'make-logging-config))
 (common-lisp:defun make-logging-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-all-ros-topics)
   (common-lisp:apply #'common-lisp:make-instance 'logging-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-all-ros-topics))
      (common-lisp:list
       (common-lisp:cons "recordAllRosTopics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-config))
   common-lisp:nil))
(common-lisp:deftype max-concurrency () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((public-ip-address :initarg :|publicIpAddress| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %network-interface-public-ip-address
                         :initform common-lisp:nil)
                        (private-ip-address :initarg :|privateIpAddress| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %network-interface-private-ip-address
                         :initform common-lisp:nil)
                        (network-interface-id :initarg :|networkInterfaceId|
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor %network-interface-network-interface-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defun make-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-ip-address private-ip-address
                     network-interface-id)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "networkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "publicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype non-system-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass output-location common-lisp:nil
                       ((s3prefix :initarg :|s3Prefix| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %output-location-s3prefix :initform common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %output-location-s3bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-location 'make-output-location))
 (common-lisp:defun make-output-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3prefix s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "s3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location))
   common-lisp:nil))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:deftype percent-done () 'common-lisp:single-float)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-forwarding-config common-lisp:nil
                       ((port-mappings :initarg :|portMappings| :type
                         (common-lisp:or port-mapping-list common-lisp:null)
                         :accessor %port-forwarding-config-port-mappings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'port-forwarding-config 'make-port-forwarding-config))
 (common-lisp:defun make-port-forwarding-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-mappings)
   (common-lisp:apply #'common-lisp:make-instance 'port-forwarding-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          port-forwarding-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          port-forwarding-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "portMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          port-forwarding-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((enable-on-public-ip :initarg :|enableOnPublicIp| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %port-mapping-enable-on-public-ip :initform
                         common-lisp:nil)
                        (application-port :initarg :|applicationPort| :type
                         (common-lisp:or non-system-port common-lisp:null)
                         :accessor %port-mapping-application-port :initform
                         (common-lisp:error ":applicationport is required"))
                        (job-port :initarg :|jobPort| :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %port-mapping-job-port :initform
                         (common-lisp:error ":jobport is required"))))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defun make-port-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-on-public-ip application-port
                     job-port)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-port))
      (common-lisp:list
       (common-lisp:cons "jobPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-port))
      (common-lisp:list
       (common-lisp:cons "applicationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-on-public-ip))
      (common-lisp:list
       (common-lisp:cons "enableOnPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-mapping-list ()
   '(trivial-types:proper-list port-mapping))
 (common-lisp:defun |make-port-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass progress-detail common-lisp:nil
                       ((target-resource :initarg :|targetResource| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %progress-detail-target-resource :initform
                         common-lisp:nil)
                        (estimated-time-remaining-seconds :initarg
                         :|estimatedTimeRemainingSeconds| :type
                         (common-lisp:or generic-integer common-lisp:null)
                         :accessor
                         %progress-detail-estimated-time-remaining-seconds
                         :initform common-lisp:nil)
                        (percent-done :initarg :|percentDone| :type
                         (common-lisp:or percent-done common-lisp:null)
                         :accessor %progress-detail-percent-done :initform
                         common-lisp:nil)
                        (current-progress :initarg :|currentProgress| :type
                         (common-lisp:or robot-deployment-step
                                         common-lisp:null)
                         :accessor %progress-detail-current-progress :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'progress-detail 'make-progress-detail))
 (common-lisp:defun make-progress-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-resource
                     estimated-time-remaining-seconds percent-done
                     current-progress)
   (common-lisp:apply #'common-lisp:make-instance 'progress-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-progress))
      (common-lisp:list
       (common-lisp:cons "currentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-done))
      (common-lisp:list
       (common-lisp:cons "percentDone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-remaining-seconds))
      (common-lisp:list
       (common-lisp:cons "estimatedTimeRemainingSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-resource))
      (common-lisp:list
       (common-lisp:cons "targetResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-robot-request common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %register-robot-request-robot :initform
                         (common-lisp:error ":robot is required"))
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %register-robot-request-fleet :initform
                         (common-lisp:error ":fleet is required"))))
 (common-lisp:export
  (common-lisp:list 'register-robot-request 'make-register-robot-request))
 (common-lisp:defun make-register-robot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot fleet)
   (common-lisp:apply #'common-lisp:make-instance 'register-robot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-robot-response common-lisp:nil
                       ((robot :initarg :|robot| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %register-robot-response-robot :initform
                         common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %register-robot-response-fleet :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-robot-response 'make-register-robot-response))
 (common-lisp:defun make-register-robot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot fleet)
   (common-lisp:apply #'common-lisp:make-instance 'register-robot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot))
      (common-lisp:list
       (common-lisp:cons "robot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-robot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rendering-engine common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or rendering-engine-version-type
                                         common-lisp:null)
                         :accessor %rendering-engine-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or rendering-engine-type
                                         common-lisp:null)
                         :accessor %rendering-engine-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rendering-engine 'make-rendering-engine))
 (common-lisp:defun make-rendering-engine
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'rendering-engine
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rendering-engine))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rendering-engine))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rendering-engine))
   common-lisp:nil))
(common-lisp:deftype rendering-engine-type () 'common-lisp:string)
(common-lisp:deftype rendering-engine-version-type () 'common-lisp:string)
(common-lisp:deftype repository-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass restart-simulation-job-request common-lisp:nil
                       ((job :initarg :|job| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %restart-simulation-job-request-job :initform
                         (common-lisp:error ":job is required"))))
 (common-lisp:export
  (common-lisp:list 'restart-simulation-job-request
                    'make-restart-simulation-job-request))
 (common-lisp:defun make-restart-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance
                      'restart-simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restart-simulation-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'restart-simulation-job-response
                    'make-restart-simulation-job-response))
 (common-lisp:defun make-restart-simulation-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'restart-simulation-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restart-simulation-job-response))
   common-lisp:nil))
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass robot common-lisp:nil
                       ((last-deployment-time :initarg :|lastDeploymentTime|
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor %robot-last-deployment-time :initform
                         common-lisp:nil)
                        (last-deployment-job :initarg :|lastDeploymentJob|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %robot-last-deployment-job :initform common-lisp:nil)
                        (architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %robot-architecture :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %robot-created-at :initform common-lisp:nil)
                        (green-grass-group-id :initarg :|greenGrassGroupId|
                         :type (common-lisp:or id common-lisp:null) :accessor
                         %robot-green-grass-group-id :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or robot-status common-lisp:null)
                         :accessor %robot-status :initform common-lisp:nil)
                        (fleet-arn :initarg :|fleetArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %robot-fleet-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %robot-name :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %robot-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'robot 'make-robot))
 (common-lisp:defun make-robot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-deployment-time last-deployment-job
                     architecture created-at green-grass-group-id status
                     fleet-arn name arn)
   (common-lisp:apply #'common-lisp:make-instance 'robot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input robot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input robot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "fleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'green-grass-group-id))
      (common-lisp:list
       (common-lisp:cons "greenGrassGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deployment-job))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-time))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input robot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass robot-application-config common-lisp:nil
                       ((use-default-tools :initarg :|useDefaultTools| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %robot-application-config-use-default-tools
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools common-lisp:null) :accessor
                         %robot-application-config-tools :initform
                         common-lisp:nil)
                        (use-default-upload-configurations :initarg
                         :|useDefaultUploadConfigurations| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %robot-application-config-use-default-upload-configurations
                         :initform common-lisp:nil)
                        (upload-configurations :initarg :|uploadConfigurations|
                         :type
                         (common-lisp:or upload-configurations
                                         common-lisp:null)
                         :accessor
                         %robot-application-config-upload-configurations
                         :initform common-lisp:nil)
                        (launch-config :initarg :|launchConfig| :type
                         (common-lisp:or launch-config common-lisp:null)
                         :accessor %robot-application-config-launch-config
                         :initform
                         (common-lisp:error ":launchconfig is required"))
                        (application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %robot-application-config-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %robot-application-config-application :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'robot-application-config 'make-robot-application-config))
 (common-lisp:defun make-robot-application-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-default-tools tools
                     use-default-upload-configurations upload-configurations
                     launch-config application-version application)
   (common-lisp:apply #'common-lisp:make-instance 'robot-application-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-config))
      (common-lisp:list
       (common-lisp:cons "launchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upload-configurations))
      (common-lisp:list
       (common-lisp:cons "uploadConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-upload-configurations))
      (common-lisp:list
       (common-lisp:cons "useDefaultUploadConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-default-tools))
      (common-lisp:list
       (common-lisp:cons "useDefaultTools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype robot-application-configs ()
   '(trivial-types:proper-list robot-application-config))
 (common-lisp:defun |make-robot-application-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            robot-application-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype robot-application-names ()
   '(trivial-types:proper-list name))
 (common-lisp:defun |make-robot-application-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype robot-application-summaries ()
   '(trivial-types:proper-list robot-application-summary))
 (common-lisp:defun |make-robot-application-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            robot-application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass robot-application-summary common-lisp:nil
                       ((robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %robot-application-summary-robot-software-suite
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor %robot-application-summary-last-updated-at
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %robot-application-summary-version :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %robot-application-summary-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %robot-application-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'robot-application-summary
                    'make-robot-application-summary))
 (common-lisp:defun make-robot-application-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key robot-software-suite last-updated-at
                     version arn name)
   (common-lisp:apply #'common-lisp:make-instance 'robot-application-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          robot-application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass robot-deployment common-lisp:nil
                       ((failure-code :initarg :|failureCode| :type
                         (common-lisp:or deployment-job-error-code
                                         common-lisp:null)
                         :accessor %robot-deployment-failure-code :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %robot-deployment-failure-reason :initform
                         common-lisp:nil)
                        (progress-detail :initarg :|progressDetail| :type
                         (common-lisp:or progress-detail common-lisp:null)
                         :accessor %robot-deployment-progress-detail :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or robot-status common-lisp:null)
                         :accessor %robot-deployment-status :initform
                         common-lisp:nil)
                        (deployment-finish-time :initarg
                         :|deploymentFinishTime| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %robot-deployment-deployment-finish-time :initform
                         common-lisp:nil)
                        (deployment-start-time :initarg :|deploymentStartTime|
                         :type (common-lisp:or created-at common-lisp:null)
                         :accessor %robot-deployment-deployment-start-time
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %robot-deployment-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'robot-deployment 'make-robot-deployment))
 (common-lisp:defun make-robot-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-code failure-reason
                     progress-detail status deployment-finish-time
                     deployment-start-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'robot-deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input robot-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input robot-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-start-time))
      (common-lisp:list
       (common-lisp:cons "deploymentStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-finish-time))
      (common-lisp:list
       (common-lisp:cons "deploymentFinishTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-detail))
      (common-lisp:list
       (common-lisp:cons "progressDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input robot-deployment))
   common-lisp:nil))
(common-lisp:deftype robot-deployment-step () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype robot-deployment-summary ()
   '(trivial-types:proper-list robot-deployment))
 (common-lisp:defun |make-robot-deployment-summary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list robot-deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass robot-software-suite common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or robot-software-suite-version-type
                                         common-lisp:null)
                         :accessor %robot-software-suite-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or robot-software-suite-type
                                         common-lisp:null)
                         :accessor %robot-software-suite-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'robot-software-suite 'make-robot-software-suite))
 (common-lisp:defun make-robot-software-suite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'robot-software-suite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input robot-software-suite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input robot-software-suite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input robot-software-suite))
   common-lisp:nil))
(common-lisp:deftype robot-software-suite-type () 'common-lisp:string)
(common-lisp:deftype robot-software-suite-version-type () 'common-lisp:string)
(common-lisp:deftype robot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype robots () '(trivial-types:proper-list robot))
 (common-lisp:defun |make-robots|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list robot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3etag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3etags () '(trivial-types:proper-list s3etag))
 (common-lisp:defun |make-s3etags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3etag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3key-or-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3key-output common-lisp:nil
                       ((etag :initarg :|etag| :type
                         (common-lisp:or s3etag common-lisp:null) :accessor
                         %s3key-output-etag :initform common-lisp:nil)
                        (s3key :initarg :|s3Key| :type
                         (common-lisp:or s3key-or-prefix common-lisp:null)
                         :accessor %s3key-output-s3key :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3key-output 'make-s3key-output))
 (common-lisp:defun make-s3key-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag s3key)
   (common-lisp:apply #'common-lisp:make-instance 's3key-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3key-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3key-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "etag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3key-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3key-outputs ()
   '(trivial-types:proper-list s3key-output))
 (common-lisp:defun |make-s3key-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3key-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype s3keys-or-prefixes ()
   '(trivial-types:proper-list s3key-or-prefix))
 (common-lisp:defun |make-s3keys-or-prefixes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3key-or-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3object common-lisp:nil
                       ((etag :initarg :|etag| :type
                         (common-lisp:or s3etag common-lisp:null) :accessor
                         %s3object-etag :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3object-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3object-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defun make-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "etag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass simulation-application-config common-lisp:nil
                       ((use-default-tools :initarg :|useDefaultTools| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %simulation-application-config-use-default-tools
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools common-lisp:null) :accessor
                         %simulation-application-config-tools :initform
                         common-lisp:nil)
                        (use-default-upload-configurations :initarg
                         :|useDefaultUploadConfigurations| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %simulation-application-config-use-default-upload-configurations
                         :initform common-lisp:nil)
                        (world-configs :initarg :|worldConfigs| :type
                         (common-lisp:or world-configs common-lisp:null)
                         :accessor %simulation-application-config-world-configs
                         :initform common-lisp:nil)
                        (upload-configurations :initarg :|uploadConfigurations|
                         :type
                         (common-lisp:or upload-configurations
                                         common-lisp:null)
                         :accessor
                         %simulation-application-config-upload-configurations
                         :initform common-lisp:nil)
                        (launch-config :initarg :|launchConfig| :type
                         (common-lisp:or launch-config common-lisp:null)
                         :accessor %simulation-application-config-launch-config
                         :initform
                         (common-lisp:error ":launchconfig is required"))
                        (application-version :initarg :|applicationVersion|
                         :type (common-lisp:or version common-lisp:null)
                         :accessor
                         %simulation-application-config-application-version
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %simulation-application-config-application :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'simulation-application-config
                    'make-simulation-application-config))
 (common-lisp:defun make-simulation-application-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-default-tools tools
                     use-default-upload-configurations world-configs
                     upload-configurations launch-config application-version
                     application)
   (common-lisp:apply #'common-lisp:make-instance
                      'simulation-application-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-version))
      (common-lisp:list
       (common-lisp:cons "applicationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-config))
      (common-lisp:list
       (common-lisp:cons "launchConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upload-configurations))
      (common-lisp:list
       (common-lisp:cons "uploadConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-configs))
      (common-lisp:list
       (common-lisp:cons "worldConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-upload-configurations))
      (common-lisp:list
       (common-lisp:cons "useDefaultUploadConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-default-tools))
      (common-lisp:list
       (common-lisp:cons "useDefaultTools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-application-configs ()
   '(trivial-types:proper-list simulation-application-config))
 (common-lisp:defun |make-simulation-application-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            simulation-application-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype simulation-application-names ()
   '(trivial-types:proper-list name))
 (common-lisp:defun |make-simulation-application-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype simulation-application-summaries ()
   '(trivial-types:proper-list simulation-application-summary))
 (common-lisp:defun |make-simulation-application-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            simulation-application-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-application-summary common-lisp:nil
                       ((simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %simulation-application-summary-simulation-software-suite
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %simulation-application-summary-robot-software-suite
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %simulation-application-summary-last-updated-at
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %simulation-application-summary-version :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %simulation-application-summary-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %simulation-application-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-application-summary
                    'make-simulation-application-summary))
 (common-lisp:defun make-simulation-application-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation-software-suite
                     robot-software-suite last-updated-at version arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'simulation-application-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-application-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simulation-job common-lisp:nil
                       ((compute :initarg :|compute| :type
                         (common-lisp:or compute-response common-lisp:null)
                         :accessor %simulation-job-compute :initform
                         common-lisp:nil)
                        (network-interface :initarg :|networkInterface| :type
                         (common-lisp:or network-interface common-lisp:null)
                         :accessor %simulation-job-network-interface :initform
                         common-lisp:nil)
                        (vpc-config :initarg :|vpcConfig| :type
                         (common-lisp:or vpcconfig-response common-lisp:null)
                         :accessor %simulation-job-vpc-config :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %simulation-job-tags :initform common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor %simulation-job-data-sources :initform
                         common-lisp:nil)
                        (simulation-applications :initarg
                         :|simulationApplications| :type
                         (common-lisp:or simulation-application-configs
                                         common-lisp:null)
                         :accessor %simulation-job-simulation-applications
                         :initform common-lisp:nil)
                        (robot-applications :initarg :|robotApplications| :type
                         (common-lisp:or robot-application-configs
                                         common-lisp:null)
                         :accessor %simulation-job-robot-applications :initform
                         common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %simulation-job-iam-role :initform common-lisp:nil)
                        (simulation-time-millis :initarg
                         :|simulationTimeMillis| :type
                         (common-lisp:or simulation-time-millis
                                         common-lisp:null)
                         :accessor %simulation-job-simulation-time-millis
                         :initform common-lisp:nil)
                        (max-job-duration-in-seconds :initarg
                         :|maxJobDurationInSeconds| :type
                         (common-lisp:or job-duration common-lisp:null)
                         :accessor %simulation-job-max-job-duration-in-seconds
                         :initform common-lisp:nil)
                        (logging-config :initarg :|loggingConfig| :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %simulation-job-logging-config :initform
                         common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor %simulation-job-output-location :initform
                         common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %simulation-job-client-request-token
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %simulation-job-failure-reason :initform
                         common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-error-code
                                         common-lisp:null)
                         :accessor %simulation-job-failure-code :initform
                         common-lisp:nil)
                        (failure-behavior :initarg :|failureBehavior| :type
                         (common-lisp:or failure-behavior common-lisp:null)
                         :accessor %simulation-job-failure-behavior :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor %simulation-job-last-updated-at :initform
                         common-lisp:nil)
                        (last-started-at :initarg :|lastStartedAt| :type
                         (common-lisp:or last-started-at common-lisp:null)
                         :accessor %simulation-job-last-started-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-status
                                         common-lisp:null)
                         :accessor %simulation-job-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %simulation-job-name :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %simulation-job-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'simulation-job 'make-simulation-job))
 (common-lisp:defun make-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute network-interface vpc-config tags
                     data-sources simulation-applications robot-applications
                     iam-role simulation-time-millis
                     max-job-duration-in-seconds logging-config output-location
                     client-request-token failure-reason failure-code
                     failure-behavior last-updated-at last-started-at status
                     name arn)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simulation-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simulation-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-started-at))
      (common-lisp:list
       (common-lisp:cons "lastStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-behavior))
      (common-lisp:list
       (common-lisp:cons "failureBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "loggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxJobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-time-millis))
      (common-lisp:list
       (common-lisp:cons "simulationTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot-applications))
      (common-lisp:list
       (common-lisp:cons "robotApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-applications))
      (common-lisp:list
       (common-lisp:cons "simulationApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interface))
      (common-lisp:list
       (common-lisp:cons "networkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simulation-job))
   common-lisp:nil))
(common-lisp:deftype simulation-job-batch-error-code () 'common-lisp:string)
(common-lisp:deftype simulation-job-batch-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype simulation-job-batch-summaries ()
   '(trivial-types:proper-list simulation-job-batch-summary))
 (common-lisp:defun |make-simulation-job-batch-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            simulation-job-batch-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-job-batch-summary common-lisp:nil
                       ((created-request-count :initarg :|createdRequestCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %simulation-job-batch-summary-created-request-count
                         :initform common-lisp:nil)
                        (pending-request-count :initarg :|pendingRequestCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %simulation-job-batch-summary-pending-request-count
                         :initform common-lisp:nil)
                        (failed-request-count :initarg :|failedRequestCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %simulation-job-batch-summary-failed-request-count
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-batch-status
                                         common-lisp:null)
                         :accessor %simulation-job-batch-summary-status
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %simulation-job-batch-summary-created-at :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %simulation-job-batch-summary-last-updated-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %simulation-job-batch-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-job-batch-summary
                    'make-simulation-job-batch-summary))
 (common-lisp:defun make-simulation-job-batch-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-request-count
                     pending-request-count failed-request-count status
                     created-at last-updated-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-job-batch-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-batch-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-batch-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-request-count))
      (common-lisp:list
       (common-lisp:cons "failedRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-request-count))
      (common-lisp:list
       (common-lisp:cons "pendingRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-request-count))
      (common-lisp:list
       (common-lisp:cons "createdRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-batch-summary))
   common-lisp:nil))
(common-lisp:deftype simulation-job-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass simulation-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %simulation-job-request-tags :initform
                         common-lisp:nil)
                        (compute :initarg :|compute| :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %simulation-job-request-compute :initform
                         common-lisp:nil)
                        (vpc-config :initarg :|vpcConfig| :type
                         (common-lisp:or vpcconfig common-lisp:null) :accessor
                         %simulation-job-request-vpc-config :initform
                         common-lisp:nil)
                        (data-sources :initarg :|dataSources| :type
                         (common-lisp:or data-source-configs common-lisp:null)
                         :accessor %simulation-job-request-data-sources
                         :initform common-lisp:nil)
                        (simulation-applications :initarg
                         :|simulationApplications| :type
                         (common-lisp:or simulation-application-configs
                                         common-lisp:null)
                         :accessor
                         %simulation-job-request-simulation-applications
                         :initform common-lisp:nil)
                        (robot-applications :initarg :|robotApplications| :type
                         (common-lisp:or robot-application-configs
                                         common-lisp:null)
                         :accessor %simulation-job-request-robot-applications
                         :initform common-lisp:nil)
                        (use-default-applications :initarg
                         :|useDefaultApplications| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %simulation-job-request-use-default-applications
                         :initform common-lisp:nil)
                        (failure-behavior :initarg :|failureBehavior| :type
                         (common-lisp:or failure-behavior common-lisp:null)
                         :accessor %simulation-job-request-failure-behavior
                         :initform common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %simulation-job-request-iam-role :initform
                         common-lisp:nil)
                        (max-job-duration-in-seconds :initarg
                         :|maxJobDurationInSeconds| :type
                         (common-lisp:or job-duration common-lisp:null)
                         :accessor
                         %simulation-job-request-max-job-duration-in-seconds
                         :initform
                         (common-lisp:error
                          ":maxjobdurationinseconds is required"))
                        (logging-config :initarg :|loggingConfig| :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %simulation-job-request-logging-config
                         :initform common-lisp:nil)
                        (output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor %simulation-job-request-output-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-job-request 'make-simulation-job-request))
 (common-lisp:defun make-simulation-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags compute vpc-config data-sources
                     simulation-applications robot-applications
                     use-default-applications failure-behavior iam-role
                     max-job-duration-in-seconds logging-config
                     output-location)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "loggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxJobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-behavior))
      (common-lisp:list
       (common-lisp:cons "failureBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-applications))
      (common-lisp:list
       (common-lisp:cons "useDefaultApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'robot-applications))
      (common-lisp:list
       (common-lisp:cons "robotApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-applications))
      (common-lisp:list
       (common-lisp:cons "simulationApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "dataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "vpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-request))
   common-lisp:nil))
(common-lisp:deftype simulation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype simulation-job-summaries ()
   '(trivial-types:proper-list simulation-job-summary))
 (common-lisp:defun |make-simulation-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-job-summary common-lisp:nil
                       ((compute-type :initarg :|computeType| :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %simulation-job-summary-compute-type
                         :initform common-lisp:nil)
                        (data-source-names :initarg :|dataSourceNames| :type
                         (common-lisp:or data-source-names common-lisp:null)
                         :accessor %simulation-job-summary-data-source-names
                         :initform common-lisp:nil)
                        (robot-application-names :initarg
                         :|robotApplicationNames| :type
                         (common-lisp:or robot-application-names
                                         common-lisp:null)
                         :accessor
                         %simulation-job-summary-robot-application-names
                         :initform common-lisp:nil)
                        (simulation-application-names :initarg
                         :|simulationApplicationNames| :type
                         (common-lisp:or simulation-application-names
                                         common-lisp:null)
                         :accessor
                         %simulation-job-summary-simulation-application-names
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-status
                                         common-lisp:null)
                         :accessor %simulation-job-summary-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %simulation-job-summary-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor %simulation-job-summary-last-updated-at
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %simulation-job-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-job-summary 'make-simulation-job-summary))
 (common-lisp:defun make-simulation-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-type data-source-names
                     robot-application-names simulation-application-names
                     status name last-updated-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-application-names))
      (common-lisp:list
       (common-lisp:cons "simulationApplicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-application-names))
      (common-lisp:list
       (common-lisp:cons "robotApplicationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-names))
      (common-lisp:list
       (common-lisp:cons "dataSourceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "computeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-jobs ()
   '(trivial-types:proper-list simulation-job))
 (common-lisp:defun |make-simulation-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-software-suite common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or simulation-software-suite-version-type
                                         common-lisp:null)
                         :accessor %simulation-software-suite-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or simulation-software-suite-type
                                         common-lisp:null)
                         :accessor %simulation-software-suite-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-software-suite
                    'make-simulation-software-suite))
 (common-lisp:defun make-simulation-software-suite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-software-suite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-software-suite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-software-suite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-software-suite))
   common-lisp:nil))
(common-lisp:deftype simulation-software-suite-type () 'common-lisp:string)
(common-lisp:deftype simulation-software-suite-version-type ()
  'common-lisp:string)
(common-lisp:deftype simulation-time-millis () 'common-lisp:integer)
(common-lisp:deftype simulation-unit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %source-architecture :initform
                         common-lisp:nil)
                        (etag :initarg :|etag| :type
                         (common-lisp:or s3etag common-lisp:null) :accessor
                         %source-etag :initform common-lisp:nil)
                        (s3key :initarg :|s3Key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %source-s3key :initform common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %source-s3bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defun make-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key architecture etag s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "etag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-config common-lisp:nil
                       ((architecture :initarg :|architecture| :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor %source-config-architecture :initform
                         common-lisp:nil)
                        (s3key :initarg :|s3Key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %source-config-s3key :initform common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %source-config-s3bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source-config 'make-source-config))
 (common-lisp:defun make-source-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key architecture s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'source-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-configs ()
   '(trivial-types:proper-list source-config))
 (common-lisp:defun |make-source-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sources () '(trivial-types:proper-list source))
 (common-lisp:defun |make-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-simulation-job-batch-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-simulation-job-batch-request-tags :initform
                         common-lisp:nil)
                        (create-simulation-job-requests :initarg
                         :|createSimulationJobRequests| :type
                         (common-lisp:or create-simulation-job-requests
                                         common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-request-create-simulation-job-requests
                         :initform
                         (common-lisp:error
                          ":createsimulationjobrequests is required"))
                        (batch-policy :initarg :|batchPolicy| :type
                         (common-lisp:or batch-policy common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-request-batch-policy
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-request-client-request-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-simulation-job-batch-request
                    'make-start-simulation-job-batch-request))
 (common-lisp:defun make-start-simulation-job-batch-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags create-simulation-job-requests
                     batch-policy client-request-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-simulation-job-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-policy))
      (common-lisp:list
       (common-lisp:cons "batchPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-simulation-job-requests))
      (common-lisp:list
       (common-lisp:cons "createSimulationJobRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-simulation-job-batch-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-simulation-job-batch-response-tags :initform
                         common-lisp:nil)
                        (created-requests :initarg :|createdRequests| :type
                         (common-lisp:or simulation-job-summaries
                                         common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-created-requests
                         :initform common-lisp:nil)
                        (pending-requests :initarg :|pendingRequests| :type
                         (common-lisp:or create-simulation-job-requests
                                         common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-pending-requests
                         :initform common-lisp:nil)
                        (failed-requests :initarg :|failedRequests| :type
                         (common-lisp:or failed-create-simulation-job-requests
                                         common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-failed-requests
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or simulation-job-batch-error-code
                                         common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-failure-code
                         :initform common-lisp:nil)
                        (batch-policy :initarg :|batchPolicy| :type
                         (common-lisp:or batch-policy common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-batch-policy
                         :initform common-lisp:nil)
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %start-simulation-job-batch-response-client-request-token
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %start-simulation-job-batch-response-created-at
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or simulation-job-batch-status
                                         common-lisp:null)
                         :accessor %start-simulation-job-batch-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-simulation-job-batch-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-simulation-job-batch-response
                    'make-start-simulation-job-batch-response))
 (common-lisp:defun make-start-simulation-job-batch-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags created-requests pending-requests
                     failed-requests failure-reason failure-code batch-policy
                     client-request-token created-at status arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-simulation-job-batch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-policy))
      (common-lisp:list
       (common-lisp:cons "batchPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "failedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-requests))
      (common-lisp:list
       (common-lisp:cons "pendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-requests))
      (common-lisp:list
       (common-lisp:cons "createdRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-job-batch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-deployment-job-request common-lisp:nil
                       ((fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %sync-deployment-job-request-fleet :initform
                         (common-lisp:error ":fleet is required"))
                        (client-request-token :initarg :|clientRequestToken|
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %sync-deployment-job-request-client-request-token
                         :initform
                         (common-lisp:error
                          ":clientrequesttoken is required"))))
 (common-lisp:export
  (common-lisp:list 'sync-deployment-job-request
                    'make-sync-deployment-job-request))
 (common-lisp:defun make-sync-deployment-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet client-request-token)
   (common-lisp:apply #'common-lisp:make-instance 'sync-deployment-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-deployment-job-response common-lisp:nil
                       ((created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %sync-deployment-job-response-created-at :initform
                         common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or deployment-job-error-code
                                         common-lisp:null)
                         :accessor %sync-deployment-job-response-failure-code
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %sync-deployment-job-response-failure-reason
                         :initform common-lisp:nil)
                        (deployment-application-configs :initarg
                         :|deploymentApplicationConfigs| :type
                         (common-lisp:or deployment-application-configs
                                         common-lisp:null)
                         :accessor
                         %sync-deployment-job-response-deployment-application-configs
                         :initform common-lisp:nil)
                        (deployment-config :initarg :|deploymentConfig| :type
                         (common-lisp:or deployment-config common-lisp:null)
                         :accessor
                         %sync-deployment-job-response-deployment-config
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %sync-deployment-job-response-status
                         :initform common-lisp:nil)
                        (fleet :initarg :|fleet| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %sync-deployment-job-response-fleet :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %sync-deployment-job-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sync-deployment-job-response
                    'make-sync-deployment-job-response))
 (common-lisp:defun make-sync-deployment-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at failure-code failure-reason
                     deployment-application-configs deployment-config status
                     fleet arn)
   (common-lisp:apply #'common-lisp:make-instance 'sync-deployment-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "deploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-application-configs))
      (common-lisp:list
       (common-lisp:cons "deploymentApplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sync-deployment-job-response))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-location common-lisp:nil
                       ((s3key :initarg :|s3Key| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %template-location-s3key :initform
                         (common-lisp:error ":s3key is required"))
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %template-location-s3bucket :initform
                         (common-lisp:error ":s3bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'template-location 'make-template-location))
 (common-lisp:defun make-template-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'template-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-location))
   common-lisp:nil))
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-summaries ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun |make-template-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-summary common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %template-summary-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %template-summary-name :initform
                         common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor %template-summary-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %template-summary-created-at :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %template-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defun make-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name last-updated-at created-at
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (robomaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tool common-lisp:nil
                       ((exit-behavior :initarg :|exitBehavior| :type
                         (common-lisp:or exit-behavior common-lisp:null)
                         :accessor %tool-exit-behavior :initform
                         common-lisp:nil)
                        (stream-output-to-cloud-watch :initarg
                         :|streamOutputToCloudWatch| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %tool-stream-output-to-cloud-watch :initform
                         common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or unrestricted-command common-lisp:null)
                         :accessor %tool-command :initform
                         (common-lisp:error ":command is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %tool-name :initform
                         (common-lisp:error ":name is required"))
                        (stream-ui :initarg :|streamUI| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %tool-stream-ui :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tool 'make-tool))
 (common-lisp:defun make-tool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exit-behavior
                     stream-output-to-cloud-watch command name stream-ui)
   (common-lisp:apply #'common-lisp:make-instance 'tool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-ui))
      (common-lisp:list
       (common-lisp:cons "streamUI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-output-to-cloud-watch))
      (common-lisp:list
       (common-lisp:cons "streamOutputToCloudWatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-behavior))
      (common-lisp:list
       (common-lisp:cons "exitBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tools () '(trivial-types:proper-list tool))
 (common-lisp:defun |make-tools|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tool))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unrestricted-command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-robot-application-request common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %update-robot-application-request-environment
                         :initform common-lisp:nil)
                        (current-revision-id :initarg :|currentRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %update-robot-application-request-current-revision-id
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %update-robot-application-request-robot-software-suite
                         :initform
                         (common-lisp:error ":robotsoftwaresuite is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or source-configs common-lisp:null)
                         :accessor %update-robot-application-request-sources
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-robot-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'update-robot-application-request
                    'make-update-robot-application-request))
 (common-lisp:defun make-update-robot-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment current-revision-id
                     robot-software-suite sources application)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-robot-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision-id))
      (common-lisp:list
       (common-lisp:cons "currentRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-robot-application-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %update-robot-application-response-environment
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %update-robot-application-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %update-robot-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %update-robot-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %update-robot-application-response-sources :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %update-robot-application-response-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-robot-application-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-robot-application-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-robot-application-response
                    'make-update-robot-application-response))
 (common-lisp:defun make-update-robot-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment revision-id last-updated-at
                     robot-software-suite sources version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-robot-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-robot-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-simulation-application-request common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %update-simulation-application-request-environment
                         :initform common-lisp:nil)
                        (current-revision-id :initarg :|currentRevisionId|
                         :type (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %update-simulation-application-request-current-revision-id
                         :initform common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %update-simulation-application-request-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %update-simulation-application-request-robot-software-suite
                         :initform
                         (common-lisp:error ":robotsoftwaresuite is required"))
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %update-simulation-application-request-simulation-software-suite
                         :initform
                         (common-lisp:error
                          ":simulationsoftwaresuite is required"))
                        (sources :initarg :|sources| :type
                         (common-lisp:or source-configs common-lisp:null)
                         :accessor
                         %update-simulation-application-request-sources
                         :initform common-lisp:nil)
                        (application :initarg :|application| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-simulation-application-request-application
                         :initform
                         (common-lisp:error ":application is required"))))
 (common-lisp:export
  (common-lisp:list 'update-simulation-application-request
                    'make-update-simulation-application-request))
 (common-lisp:defun make-update-simulation-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment current-revision-id
                     rendering-engine robot-software-suite
                     simulation-software-suite sources application)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-simulation-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-revision-id))
      (common-lisp:list
       (common-lisp:cons "currentRevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-simulation-application-response common-lisp:nil
                       ((environment :initarg :|environment| :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         %update-simulation-application-response-environment
                         :initform common-lisp:nil)
                        (revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         %update-simulation-application-response-revision-id
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %update-simulation-application-response-last-updated-at
                         :initform common-lisp:nil)
                        (rendering-engine :initarg :|renderingEngine| :type
                         (common-lisp:or rendering-engine common-lisp:null)
                         :accessor
                         %update-simulation-application-response-rendering-engine
                         :initform common-lisp:nil)
                        (robot-software-suite :initarg :|robotSoftwareSuite|
                         :type
                         (common-lisp:or robot-software-suite common-lisp:null)
                         :accessor
                         %update-simulation-application-response-robot-software-suite
                         :initform common-lisp:nil)
                        (simulation-software-suite :initarg
                         :|simulationSoftwareSuite| :type
                         (common-lisp:or simulation-software-suite
                                         common-lisp:null)
                         :accessor
                         %update-simulation-application-response-simulation-software-suite
                         :initform common-lisp:nil)
                        (sources :initarg :|sources| :type
                         (common-lisp:or sources common-lisp:null) :accessor
                         %update-simulation-application-response-sources
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %update-simulation-application-response-version
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-simulation-application-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-simulation-application-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-simulation-application-response
                    'make-update-simulation-application-response))
 (common-lisp:defun make-update-simulation-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment revision-id last-updated-at
                     rendering-engine robot-software-suite
                     simulation-software-suite sources version name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-simulation-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulation-software-suite))
      (common-lisp:list
       (common-lisp:cons "simulationSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'robot-software-suite))
      (common-lisp:list
       (common-lisp:cons "robotSoftwareSuite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendering-engine))
      (common-lisp:list
       (common-lisp:cons "renderingEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-simulation-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-world-template-request common-lisp:nil
                       ((template-location :initarg :|templateLocation| :type
                         (common-lisp:or template-location common-lisp:null)
                         :accessor
                         %update-world-template-request-template-location
                         :initform common-lisp:nil)
                        (template-body :initarg :|templateBody| :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %update-world-template-request-template-body :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %update-world-template-request-name
                         :initform common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-world-template-request-template :initform
                         (common-lisp:error ":template is required"))))
 (common-lisp:export
  (common-lisp:list 'update-world-template-request
                    'make-update-world-template-request))
 (common-lisp:defun make-update-world-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-location template-body name
                     template)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-world-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "templateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-location))
      (common-lisp:list
       (common-lisp:cons "templateLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-world-template-response common-lisp:nil
                       ((last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or last-updated-at common-lisp:null)
                         :accessor
                         %update-world-template-response-last-updated-at
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %update-world-template-response-created-at :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor %update-world-template-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-world-template-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-world-template-response
                    'make-update-world-template-response))
 (common-lisp:defun make-update-world-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-at created-at name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-world-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-world-template-response))
   common-lisp:nil))
(common-lisp:deftype upload-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upload-configuration common-lisp:nil
                       ((upload-behavior :initarg :|uploadBehavior| :type
                         (common-lisp:or upload-behavior common-lisp:null)
                         :accessor %upload-configuration-upload-behavior
                         :initform
                         (common-lisp:error ":uploadbehavior is required"))
                        (path :initarg :|path| :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %upload-configuration-path :initform
                         (common-lisp:error ":path is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %upload-configuration-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'upload-configuration 'make-upload-configuration))
 (common-lisp:defun make-upload-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-behavior path name)
   (common-lisp:apply #'common-lisp:make-instance 'upload-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-behavior))
      (common-lisp:list
       (common-lisp:cons "uploadBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upload-configurations ()
   '(trivial-types:proper-list upload-configuration))
 (common-lisp:defun |make-upload-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upload-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpcconfig common-lisp:nil
                       ((assign-public-ip :initarg :|assignPublicIp| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vpcconfig-assign-public-ip :initform common-lisp:nil)
                        (security-groups :initarg :|securityGroups| :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %vpcconfig-security-groups :initform
                         common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %vpcconfig-subnets :initform
                         (common-lisp:error ":subnets is required"))))
 (common-lisp:export (common-lisp:list 'vpcconfig 'make-vpcconfig))
 (common-lisp:defun make-vpcconfig
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assign-public-ip security-groups subnets)
   (common-lisp:apply #'common-lisp:make-instance 'vpcconfig
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "assignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpcconfig-response common-lisp:nil
                       ((assign-public-ip :initarg :|assignPublicIp| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vpcconfig-response-assign-public-ip :initform
                         common-lisp:nil)
                        (vpc-id :initarg :|vpcId| :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor %vpcconfig-response-vpc-id :initform
                         common-lisp:nil)
                        (security-groups :initarg :|securityGroups| :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %vpcconfig-response-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %vpcconfig-response-subnets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpcconfig-response 'make-vpcconfig-response))
 (common-lisp:defun make-vpcconfig-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assign-public-ip vpc-id security-groups
                     subnets)
   (common-lisp:apply #'common-lisp:make-instance 'vpcconfig-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcconfig-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcconfig-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "assignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcconfig-response))
   common-lisp:nil))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-qualifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass world-config common-lisp:nil
                       ((world :initarg :|world| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-config-world :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'world-config 'make-world-config))
 (common-lisp:defun make-world-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key world)
   (common-lisp:apply #'common-lisp:make-instance 'world-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input world-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input world-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world))
      (common-lisp:list
       (common-lisp:cons "world"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input world-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype world-configs ()
   '(trivial-types:proper-list world-config))
 (common-lisp:defun |make-world-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list world-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass world-count common-lisp:nil
                       ((interior-count-per-floorplan :initarg
                         :|interiorCountPerFloorplan| :type
                         (common-lisp:or interior-count-per-floorplan
                                         common-lisp:null)
                         :accessor %world-count-interior-count-per-floorplan
                         :initform common-lisp:nil)
                        (floorplan-count :initarg :|floorplanCount| :type
                         (common-lisp:or floorplan-count common-lisp:null)
                         :accessor %world-count-floorplan-count :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'world-count 'make-world-count))
 (common-lisp:defun make-world-count
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interior-count-per-floorplan
                     floorplan-count)
   (common-lisp:apply #'common-lisp:make-instance 'world-count
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input world-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input world-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'floorplan-count))
      (common-lisp:list
       (common-lisp:cons "floorplanCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interior-count-per-floorplan))
      (common-lisp:list
       (common-lisp:cons "interiorCountPerFloorplan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input world-count))
   common-lisp:nil))
(common-lisp:deftype world-export-job-error-code () 'common-lisp:string)
(common-lisp:deftype world-export-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype world-export-job-summaries ()
   '(trivial-types:proper-list world-export-job-summary))
 (common-lisp:defun |make-world-export-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            world-export-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass world-export-job-summary common-lisp:nil
                       ((output-location :initarg :|outputLocation| :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor %world-export-job-summary-output-location
                         :initform common-lisp:nil)
                        (worlds :initarg :|worlds| :type
                         (common-lisp:or arns common-lisp:null) :accessor
                         %world-export-job-summary-worlds :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %world-export-job-summary-created-at :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-export-job-status
                                         common-lisp:null)
                         :accessor %world-export-job-summary-status :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-export-job-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'world-export-job-summary 'make-world-export-job-summary))
 (common-lisp:defun make-world-export-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-location worlds created-at status
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'world-export-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          world-export-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          world-export-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worlds))
      (common-lisp:list
       (common-lisp:cons "worlds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "outputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          world-export-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass world-failure common-lisp:nil
                       ((failure-count :initarg :|failureCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %world-failure-failure-count :initform
                         common-lisp:nil)
                        (sample-failure-reason :initarg :|sampleFailureReason|
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor %world-failure-sample-failure-reason
                         :initform common-lisp:nil)
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or world-generation-job-error-code
                                         common-lisp:null)
                         :accessor %world-failure-failure-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'world-failure 'make-world-failure))
 (common-lisp:defun make-world-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-count sample-failure-reason
                     failure-code)
   (common-lisp:apply #'common-lisp:make-instance 'world-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input world-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input world-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-failure-reason))
      (common-lisp:list
       (common-lisp:cons "sampleFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-count))
      (common-lisp:list
       (common-lisp:cons "failureCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input world-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype world-failures ()
   '(trivial-types:proper-list world-failure))
 (common-lisp:defun |make-world-failures|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list world-failure))
   aws-sdk/generator/shape::members))
(common-lisp:deftype world-generation-job-error-code () 'common-lisp:string)
(common-lisp:deftype world-generation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype world-generation-job-summaries ()
   '(trivial-types:proper-list world-generation-job-summary))
 (common-lisp:defun |make-world-generation-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            world-generation-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass world-generation-job-summary common-lisp:nil
                       ((failed-world-count :initarg :|failedWorldCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %world-generation-job-summary-failed-world-count
                         :initform common-lisp:nil)
                        (succeeded-world-count :initarg :|succeededWorldCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %world-generation-job-summary-succeeded-world-count
                         :initform common-lisp:nil)
                        (world-count :initarg :|worldCount| :type
                         (common-lisp:or world-count common-lisp:null)
                         :accessor %world-generation-job-summary-world-count
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or world-generation-job-status
                                         common-lisp:null)
                         :accessor %world-generation-job-summary-status
                         :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %world-generation-job-summary-created-at :initform
                         common-lisp:nil)
                        (template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-generation-job-summary-template :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-generation-job-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'world-generation-job-summary
                    'make-world-generation-job-summary))
 (common-lisp:defun make-world-generation-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-world-count succeeded-world-count
                     world-count status created-at template arn)
   (common-lisp:apply #'common-lisp:make-instance 'world-generation-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          world-generation-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          world-generation-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'world-count))
      (common-lisp:list
       (common-lisp:cons "worldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'succeeded-world-count))
      (common-lisp:list
       (common-lisp:cons "succeededWorldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-world-count))
      (common-lisp:list
       (common-lisp:cons "failedWorldCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          world-generation-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype world-summaries ()
   '(trivial-types:proper-list world-summary))
 (common-lisp:defun |make-world-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list world-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass world-summary common-lisp:nil
                       ((template :initarg :|template| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-summary-template :initform common-lisp:nil)
                        (generation-job :initarg :|generationJob| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-summary-generation-job :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %world-summary-created-at :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %world-summary-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'world-summary 'make-world-summary))
 (common-lisp:defun make-world-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template generation-job created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'world-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input world-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input world-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-job))
      (common-lisp:list
       (common-lisp:cons "generationJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input world-summary))
   common-lisp:nil))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-delete-worlds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worlds)
   (common-lisp:declare (common-lisp:ignorable worlds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-worlds-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/batchDeleteWorlds"
                                                        "BatchDeleteWorlds"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-worlds))
(common-lisp:progn
 (common-lisp:defun batch-describe-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key jobs)
   (common-lisp:declare (common-lisp:ignorable jobs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-describe-simulation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/batchDescribeSimulationJob"
                                                        "BatchDescribeSimulationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-describe-simulation-job))
(common-lisp:progn
 (common-lisp:defun cancel-deployment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-deployment-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cancelDeploymentJob"
                                                        "CancelDeploymentJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-deployment-job))
(common-lisp:progn
 (common-lisp:defun cancel-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-simulation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cancelSimulationJob"
                                                        "CancelSimulationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-simulation-job))
(common-lisp:progn
 (common-lisp:defun cancel-simulation-job-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch)
   (common-lisp:declare (common-lisp:ignorable batch))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-simulation-job-batch-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cancelSimulationJobBatch"
                                                        "CancelSimulationJobBatch"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-simulation-job-batch))
(common-lisp:progn
 (common-lisp:defun cancel-world-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-world-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cancelWorldExportJob"
                                                        "CancelWorldExportJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-world-export-job))
(common-lisp:progn
 (common-lisp:defun cancel-world-generation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-world-generation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/cancelWorldGenerationJob"
                                                        "CancelWorldGenerationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-world-generation-job))
(common-lisp:progn
 (common-lisp:defun create-deployment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-config client-request-token
                     fleet deployment-application-configs tags)
   (common-lisp:declare
    (common-lisp:ignorable deployment-config client-request-token fleet
     deployment-application-configs tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createDeploymentJob"
                                                        "CreateDeploymentJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment-job))
(common-lisp:progn
 (common-lisp:defun create-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name tags)
   (common-lisp:declare (common-lisp:ignorable name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createFleet"
                                                        "CreateFleet"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet))
(common-lisp:progn
 (common-lisp:defun create-robot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name architecture greengrass-group-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name architecture greengrass-group-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-robot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createRobot"
                                                        "CreateRobot"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-robot))
(common-lisp:progn
 (common-lisp:defun create-robot-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name sources robot-software-suite tags
                     environment)
   (common-lisp:declare
    (common-lisp:ignorable name sources robot-software-suite tags environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-robot-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createRobotApplication"
                                                        "CreateRobotApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-robot-application))
(common-lisp:progn
 (common-lisp:defun create-robot-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application current-revision-id s3etags
                     image-digest)
   (common-lisp:declare
    (common-lisp:ignorable application current-revision-id s3etags
     image-digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-robot-application-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createRobotApplicationVersion"
                                                        "CreateRobotApplicationVersion"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-robot-application-version))
(common-lisp:progn
 (common-lisp:defun create-simulation-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name sources simulation-software-suite
                     robot-software-suite rendering-engine tags environment)
   (common-lisp:declare
    (common-lisp:ignorable name sources simulation-software-suite
     robot-software-suite rendering-engine tags environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-simulation-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createSimulationApplication"
                                                        "CreateSimulationApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-simulation-application))
(common-lisp:progn
 (common-lisp:defun create-simulation-application-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application current-revision-id s3etags
                     image-digest)
   (common-lisp:declare
    (common-lisp:ignorable application current-revision-id s3etags
     image-digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-simulation-application-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createSimulationApplicationVersion"
                                                        "CreateSimulationApplicationVersion"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-simulation-application-version))
(common-lisp:progn
 (common-lisp:defun create-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token output-location
                     logging-config max-job-duration-in-seconds iam-role
                     failure-behavior robot-applications
                     simulation-applications data-sources tags vpc-config
                     compute)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token output-location logging-config
     max-job-duration-in-seconds iam-role failure-behavior robot-applications
     simulation-applications data-sources tags vpc-config compute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-simulation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createSimulationJob"
                                                        "CreateSimulationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-simulation-job))
(common-lisp:progn
 (common-lisp:defun create-world-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token worlds
                     output-location iam-role tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token worlds output-location iam-role
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-world-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createWorldExportJob"
                                                        "CreateWorldExportJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-world-export-job))
(common-lisp:progn
 (common-lisp:defun create-world-generation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token template world-count
                     tags world-tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token template world-count tags
     world-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-world-generation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createWorldGenerationJob"
                                                        "CreateWorldGenerationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-world-generation-job))
(common-lisp:progn
 (common-lisp:defun create-world-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name template-body
                     template-location tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name template-body
     template-location tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-world-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/createWorldTemplate"
                                                        "CreateWorldTemplate"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-world-template))
(common-lisp:progn
 (common-lisp:defun delete-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet)
   (common-lisp:declare (common-lisp:ignorable fleet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deleteFleet"
                                                        "DeleteFleet"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet))
(common-lisp:progn
 (common-lisp:defun delete-robot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key robot)
   (common-lisp:declare (common-lisp:ignorable robot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-robot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deleteRobot"
                                                        "DeleteRobot"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-robot))
(common-lisp:progn
 (common-lisp:defun delete-robot-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application application-version)
   (common-lisp:declare
    (common-lisp:ignorable application application-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-robot-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deleteRobotApplication"
                                                        "DeleteRobotApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-robot-application))
(common-lisp:progn
 (common-lisp:defun delete-simulation-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application application-version)
   (common-lisp:declare
    (common-lisp:ignorable application application-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-simulation-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deleteSimulationApplication"
                                                        "DeleteSimulationApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-simulation-application))
(common-lisp:progn
 (common-lisp:defun delete-world-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template)
   (common-lisp:declare (common-lisp:ignorable template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-world-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deleteWorldTemplate"
                                                        "DeleteWorldTemplate"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-world-template))
(common-lisp:progn
 (common-lisp:defun deregister-robot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet robot)
   (common-lisp:declare (common-lisp:ignorable fleet robot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-robot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/deregisterRobot"
                                                        "DeregisterRobot"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-robot))
(common-lisp:progn
 (common-lisp:defun describe-deployment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-deployment-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeDeploymentJob"
                                                        "DescribeDeploymentJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-deployment-job))
(common-lisp:progn
 (common-lisp:defun describe-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet)
   (common-lisp:declare (common-lisp:ignorable fleet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeFleet"
                                                        "DescribeFleet"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet))
(common-lisp:progn
 (common-lisp:defun describe-robot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key robot)
   (common-lisp:declare (common-lisp:ignorable robot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-robot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeRobot"
                                                        "DescribeRobot"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-robot))
(common-lisp:progn
 (common-lisp:defun describe-robot-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application application-version)
   (common-lisp:declare
    (common-lisp:ignorable application application-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-robot-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeRobotApplication"
                                                        "DescribeRobotApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-robot-application))
(common-lisp:progn
 (common-lisp:defun describe-simulation-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application application-version)
   (common-lisp:declare
    (common-lisp:ignorable application application-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-simulation-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeSimulationApplication"
                                                        "DescribeSimulationApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-simulation-application))
(common-lisp:progn
 (common-lisp:defun describe-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-simulation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeSimulationJob"
                                                        "DescribeSimulationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-simulation-job))
(common-lisp:progn
 (common-lisp:defun describe-simulation-job-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key batch)
   (common-lisp:declare (common-lisp:ignorable batch))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-simulation-job-batch-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeSimulationJobBatch"
                                                        "DescribeSimulationJobBatch"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-simulation-job-batch))
(common-lisp:progn
 (common-lisp:defun describe-world
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key world)
   (common-lisp:declare (common-lisp:ignorable world))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-world-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeWorld"
                                                        "DescribeWorld"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-world))
(common-lisp:progn
 (common-lisp:defun describe-world-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-world-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeWorldExportJob"
                                                        "DescribeWorldExportJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-world-export-job))
(common-lisp:progn
 (common-lisp:defun describe-world-generation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-world-generation-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeWorldGenerationJob"
                                                        "DescribeWorldGenerationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-world-generation-job))
(common-lisp:progn
 (common-lisp:defun describe-world-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template)
   (common-lisp:declare (common-lisp:ignorable template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-world-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/describeWorldTemplate"
                                                        "DescribeWorldTemplate"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-world-template))
(common-lisp:progn
 (common-lisp:defun get-world-template-body
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template generation-job)
   (common-lisp:declare (common-lisp:ignorable template generation-job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-world-template-body-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/getWorldTemplateBody"
                                                        "GetWorldTemplateBody"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-world-template-body))
(common-lisp:progn
 (common-lisp:defun list-deployment-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployment-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listDeploymentJobs"
                                                        "ListDeploymentJobs"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-deployment-jobs))
(common-lisp:progn
 (common-lisp:defun list-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listFleets"
                                                        "ListFleets"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fleets))
(common-lisp:progn
 (common-lisp:defun list-robot-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key version-qualifier next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable version-qualifier next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-robot-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listRobotApplications"
                                                        "ListRobotApplications"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-robot-applications))
(common-lisp:progn
 (common-lisp:defun list-robots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-robots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listRobots"
                                                        "ListRobots"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-robots))
(common-lisp:progn
 (common-lisp:defun list-simulation-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key version-qualifier next-token max-results
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable version-qualifier next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-simulation-applications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listSimulationApplications"
                                                        "ListSimulationApplications"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-simulation-applications))
(common-lisp:progn
 (common-lisp:defun list-simulation-job-batches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-simulation-job-batches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listSimulationJobBatches"
                                                        "ListSimulationJobBatches"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-simulation-job-batches))
(common-lisp:progn
 (common-lisp:defun list-simulation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-simulation-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listSimulationJobs"
                                                        "ListSimulationJobs"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-simulation-jobs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-world-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-world-export-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listWorldExportJobs"
                                                        "ListWorldExportJobs"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-world-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-world-generation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-world-generation-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listWorldGenerationJobs"
                                                        "ListWorldGenerationJobs"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-world-generation-jobs))
(common-lisp:progn
 (common-lisp:defun list-world-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-world-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listWorldTemplates"
                                                        "ListWorldTemplates"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-world-templates))
(common-lisp:progn
 (common-lisp:defun list-worlds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-worlds-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/listWorlds"
                                                        "ListWorlds"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-worlds))
(common-lisp:progn
 (common-lisp:defun register-robot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet robot)
   (common-lisp:declare (common-lisp:ignorable fleet robot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-robot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/registerRobot"
                                                        "RegisterRobot"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-robot))
(common-lisp:progn
 (common-lisp:defun restart-simulation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job)
   (common-lisp:declare (common-lisp:ignorable job))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restart-simulation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/restartSimulationJob"
                                                        "RestartSimulationJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restart-simulation-job))
(common-lisp:progn
 (common-lisp:defun start-simulation-job-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token batch-policy
                     create-simulation-job-requests tags)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token batch-policy
     create-simulation-job-requests tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-simulation-job-batch-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/startSimulationJobBatch"
                                                        "StartSimulationJobBatch"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-simulation-job-batch))
(common-lisp:progn
 (common-lisp:defun sync-deployment-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token fleet)
   (common-lisp:declare (common-lisp:ignorable client-request-token fleet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-sync-deployment-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/syncDeploymentJob"
                                                        "SyncDeploymentJob"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'sync-deployment-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-robot-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application sources robot-software-suite
                     current-revision-id environment)
   (common-lisp:declare
    (common-lisp:ignorable application sources robot-software-suite
     current-revision-id environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-robot-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/updateRobotApplication"
                                                        "UpdateRobotApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-robot-application))
(common-lisp:progn
 (common-lisp:defun update-simulation-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application sources
                     simulation-software-suite robot-software-suite
                     rendering-engine current-revision-id environment)
   (common-lisp:declare
    (common-lisp:ignorable application sources simulation-software-suite
     robot-software-suite rendering-engine current-revision-id environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-simulation-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/updateSimulationApplication"
                                                        "UpdateSimulationApplication"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-simulation-application))
(common-lisp:progn
 (common-lisp:defun update-world-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template name template-body
                     template-location)
   (common-lisp:declare
    (common-lisp:ignorable template name template-body template-location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-world-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'robomaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/updateWorldTemplate"
                                                        "UpdateWorldTemplate"
                                                        "2018-06-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-world-template))
