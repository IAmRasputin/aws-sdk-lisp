;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elb/api
  (:use)
  (:nicknames #:aws/elb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elb/api)
(common-lisp:progn
 (common-lisp:defclass elb-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "elb" :protocol :query))
 (common-lisp:export 'elb-request))
(common-lisp:progn
 (common-lisp:define-condition elb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elb-error))
(common-lisp:defvar *error-map*
  '(("AccessPointNotFoundException" . access-point-not-found-exception)
    ("CertificateNotFoundException" . certificate-not-found-exception)
    ("DependencyThrottleException" . dependency-throttle-exception)
    ("DuplicateAccessPointNameException"
     . duplicate-access-point-name-exception)
    ("DuplicateListenerException" . duplicate-listener-exception)
    ("DuplicatePolicyNameException" . duplicate-policy-name-exception)
    ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
    ("InvalidConfigurationRequestException"
     . invalid-configuration-request-exception)
    ("InvalidEndPointException" . invalid-end-point-exception)
    ("InvalidSchemeException" . invalid-scheme-exception)
    ("InvalidSecurityGroupException" . invalid-security-group-exception)
    ("InvalidSubnetException" . invalid-subnet-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("LoadBalancerAttributeNotFoundException"
     . load-balancer-attribute-not-found-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("PolicyNotFoundException" . policy-not-found-exception)
    ("PolicyTypeNotFoundException" . policy-type-not-found-exception)
    ("SubnetNotFoundException" . subnet-not-found-exception)
    ("TooManyAccessPointsException" . too-many-access-points-exception)
    ("TooManyPoliciesException" . too-many-policies-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedProtocolException" . unsupported-protocol-exception)))
(common-lisp:progn
 (common-lisp:defclass access-log common-lisp:nil
                       ((s3bucket-prefix :initarg :s3bucket-prefix :type
                         (common-lisp:or access-log-prefix common-lisp:null)
                         :accessor %access-log-s3bucket-prefix :initform
                         common-lisp:nil)
                        (emit-interval :initarg :emit-interval :type
                         (common-lisp:or access-log-interval common-lisp:null)
                         :accessor %access-log-emit-interval :initform
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %access-log-s3bucket-name :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or access-log-enabled common-lisp:null)
                         :accessor %access-log-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export (common-lisp:list 'access-log 'make-access-log))
 (common-lisp:defun make-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-prefix emit-interval
                     s3bucket-name enabled)
   (common-lisp:apply #'common-lisp:make-instance 'access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emit-interval))
      (common-lisp:list
       (common-lisp:cons "EmitInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "S3BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-log))
   common-lisp:nil))
(common-lisp:deftype access-log-enabled () 'common-lisp:boolean)
(common-lisp:deftype access-log-interval () 'common-lisp:integer)
(common-lisp:deftype access-log-prefix () 'common-lisp:string)
(common-lisp:deftype access-point-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-point-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-point-not-found-exception)))
(common-lisp:deftype access-point-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass add-availability-zones-input common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %add-availability-zones-input-availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %add-availability-zones-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-availability-zones-input
                    'make-add-availability-zones-input))
 (common-lisp:defun make-add-availability-zones-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'add-availability-zones-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-availability-zones-output common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %add-availability-zones-output-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-availability-zones-output
                    'make-add-availability-zones-output))
 (common-lisp:defun make-add-availability-zones-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-availability-zones-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor %add-tags-input-load-balancer-names
                         :initform
                         (common-lisp:error
                          ":load-balancer-names is required"))))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defun make-add-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags load-balancer-names)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defun make-add-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass additional-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or additional-attribute-value
                                         common-lisp:null)
                         :accessor %additional-attribute-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or additional-attribute-key
                                         common-lisp:null)
                         :accessor %additional-attribute-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'additional-attribute 'make-additional-attribute))
 (common-lisp:defun make-additional-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'additional-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-attribute))
   common-lisp:nil))
(common-lisp:deftype additional-attribute-key () 'common-lisp:string)
(common-lisp:deftype additional-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-attributes ()
   '(trivial-types:proper-list additional-attribute))
 (common-lisp:defun |make-additional-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype app-cookie-stickiness-policies ()
   '(trivial-types:proper-list app-cookie-stickiness-policy))
 (common-lisp:defun |make-app-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            app-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass app-cookie-stickiness-policy common-lisp:nil
                       ((cookie-name :initarg :cookie-name :type
                         (common-lisp:or cookie-name common-lisp:null)
                         :accessor %app-cookie-stickiness-policy-cookie-name
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %app-cookie-stickiness-policy-policy-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-cookie-stickiness-policy
                    'make-app-cookie-stickiness-policy))
 (common-lisp:defun make-app-cookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookie-name policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'app-cookie-stickiness-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-security-groups-to-load-balancer-input
                       common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %apply-security-groups-to-load-balancer-input-security-groups
                         :initform
                         (common-lisp:error ":security-groups is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %apply-security-groups-to-load-balancer-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'apply-security-groups-to-load-balancer-input
                    'make-apply-security-groups-to-load-balancer-input))
 (common-lisp:defun make-apply-security-groups-to-load-balancer-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-security-groups-to-load-balancer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-security-groups-to-load-balancer-output
                       common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %apply-security-groups-to-load-balancer-output-security-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'apply-security-groups-to-load-balancer-output
                    'make-apply-security-groups-to-load-balancer-output))
 (common-lisp:defun make-apply-security-groups-to-load-balancer-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-security-groups-to-load-balancer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-to-subnets-input common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %attach-load-balancer-to-subnets-input-subnets
                         :initform (common-lisp:error ":subnets is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %attach-load-balancer-to-subnets-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-to-subnets-input
                    'make-attach-load-balancer-to-subnets-input))
 (common-lisp:defun make-attach-load-balancer-to-subnets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-to-subnets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-load-balancer-to-subnets-output common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %attach-load-balancer-to-subnets-output-subnets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-to-subnets-output
                    'make-attach-load-balancer-to-subnets-output))
 (common-lisp:defun make-attach-load-balancer-to-subnets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-load-balancer-to-subnets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass backend-server-description common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor %backend-server-description-policy-names
                         :initform common-lisp:nil)
                        (instance-port :initarg :instance-port :type
                         (common-lisp:or instance-port common-lisp:null)
                         :accessor %backend-server-description-instance-port
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-server-description
                    'make-backend-server-description))
 (common-lisp:defun make-backend-server-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names instance-port)
   (common-lisp:apply #'common-lisp:make-instance 'backend-server-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backend-server-descriptions ()
   '(trivial-types:proper-list backend-server-description))
 (common-lisp:defun |make-backend-server-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backend-server-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cardinality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass configure-health-check-input common-lisp:nil
                       ((health-check :initarg :health-check :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor %configure-health-check-input-health-check
                         :initform
                         (common-lisp:error ":health-check is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %configure-health-check-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'configure-health-check-input
                    'make-configure-health-check-input))
 (common-lisp:defun make-configure-health-check-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key health-check load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'configure-health-check-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configure-health-check-output common-lisp:nil
                       ((health-check :initarg :health-check :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor %configure-health-check-output-health-check
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configure-health-check-output
                    'make-configure-health-check-output))
 (common-lisp:defun make-configure-health-check-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key health-check)
   (common-lisp:apply #'common-lisp:make-instance
                      'configure-health-check-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-draining common-lisp:nil
                       ((timeout :initarg :timeout :type
                         (common-lisp:or connection-draining-timeout
                                         common-lisp:null)
                         :accessor %connection-draining-timeout :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or connection-draining-enabled
                                         common-lisp:null)
                         :accessor %connection-draining-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'connection-draining 'make-connection-draining))
 (common-lisp:defun make-connection-draining
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout enabled)
   (common-lisp:apply #'common-lisp:make-instance 'connection-draining
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-draining))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-draining))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-draining))
   common-lisp:nil))
(common-lisp:deftype connection-draining-enabled () 'common-lisp:boolean)
(common-lisp:deftype connection-draining-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass connection-settings common-lisp:nil
                       ((idle-timeout :initarg :idle-timeout :type
                         (common-lisp:or idle-timeout common-lisp:null)
                         :accessor %connection-settings-idle-timeout :initform
                         (common-lisp:error ":idle-timeout is required"))))
 (common-lisp:export
  (common-lisp:list 'connection-settings 'make-connection-settings))
 (common-lisp:defun make-connection-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idle-timeout)
   (common-lisp:apply #'common-lisp:make-instance 'connection-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-settings))
   common-lisp:nil))
(common-lisp:deftype cookie-expiration-period () 'common-lisp:integer)
(common-lisp:deftype cookie-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-access-point-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-access-point-input-tags :initform
                         common-lisp:nil)
                        (scheme :initarg :scheme :type
                         (common-lisp:or load-balancer-scheme common-lisp:null)
                         :accessor %create-access-point-input-scheme :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %create-access-point-input-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %create-access-point-input-subnets :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %create-access-point-input-availability-zones
                         :initform common-lisp:nil)
                        (listeners :initarg :listeners :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %create-access-point-input-listeners :initform
                         (common-lisp:error ":listeners is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %create-access-point-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-point-input
                    'make-create-access-point-input))
 (common-lisp:defun make-create-access-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags scheme security-groups subnets
                     availability-zones listeners load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-point-output common-lisp:nil
                       ((dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %create-access-point-output-dnsname :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-output
                    'make-create-access-point-output))
 (common-lisp:defun make-create-access-point-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dnsname)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-point-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-cookie-stickiness-policy-input
                       common-lisp:nil
                       ((cookie-name :initarg :cookie-name :type
                         (common-lisp:or cookie-name common-lisp:null)
                         :accessor
                         %create-app-cookie-stickiness-policy-input-cookie-name
                         :initform
                         (common-lisp:error ":cookie-name is required"))
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         %create-app-cookie-stickiness-policy-input-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %create-app-cookie-stickiness-policy-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-app-cookie-stickiness-policy-input
                    'make-create-app-cookie-stickiness-policy-input))
 (common-lisp:defun make-create-app-cookie-stickiness-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookie-name policy-name
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-app-cookie-stickiness-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-cookie-stickiness-policy-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-app-cookie-stickiness-policy-output
                    'make-create-app-cookie-stickiness-policy-output))
 (common-lisp:defun make-create-app-cookie-stickiness-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-app-cookie-stickiness-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lbcookie-stickiness-policy-input common-lisp:nil
                       ((cookie-expiration-period :initarg
                         :cookie-expiration-period :type
                         (common-lisp:or cookie-expiration-period
                                         common-lisp:null)
                         :accessor
                         %create-lbcookie-stickiness-policy-input-cookie-expiration-period
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         %create-lbcookie-stickiness-policy-input-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %create-lbcookie-stickiness-policy-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-lbcookie-stickiness-policy-input
                    'make-create-lbcookie-stickiness-policy-input))
 (common-lisp:defun make-create-lbcookie-stickiness-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookie-expiration-period policy-name
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lbcookie-stickiness-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lbcookie-stickiness-policy-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-lbcookie-stickiness-policy-output
                    'make-create-lbcookie-stickiness-policy-output))
 (common-lisp:defun make-create-lbcookie-stickiness-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lbcookie-stickiness-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-listener-input common-lisp:nil
                       ((listeners :initarg :listeners :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %create-load-balancer-listener-input-listeners
                         :initform
                         (common-lisp:error ":listeners is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %create-load-balancer-listener-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-listener-input
                    'make-create-load-balancer-listener-input))
 (common-lisp:defun make-create-load-balancer-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listeners load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-listener-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-listener-output
                    'make-create-load-balancer-listener-output))
 (common-lisp:defun make-create-load-balancer-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-policy-input common-lisp:nil
                       ((policy-attributes :initarg :policy-attributes :type
                         (common-lisp:or policy-attributes common-lisp:null)
                         :accessor
                         %create-load-balancer-policy-input-policy-attributes
                         :initform common-lisp:nil)
                        (policy-type-name :initarg :policy-type-name :type
                         (common-lisp:or policy-type-name common-lisp:null)
                         :accessor
                         %create-load-balancer-policy-input-policy-type-name
                         :initform
                         (common-lisp:error ":policy-type-name is required"))
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         %create-load-balancer-policy-input-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %create-load-balancer-policy-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-policy-input
                    'make-create-load-balancer-policy-input))
 (common-lisp:defun make-create-load-balancer-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-attributes policy-type-name
                     policy-name load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-attributes))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-policy-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-policy-output
                    'make-create-load-balancer-policy-output))
 (common-lisp:defun make-create-load-balancer-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-load-balancer-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cross-zone-load-balancing common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or cross-zone-load-balancing-enabled
                                         common-lisp:null)
                         :accessor %cross-zone-load-balancing-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'cross-zone-load-balancing
                    'make-cross-zone-load-balancing))
 (common-lisp:defun make-cross-zone-load-balancing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cross-zone-load-balancing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   common-lisp:nil))
(common-lisp:deftype cross-zone-load-balancing-enabled () 'common-lisp:boolean)
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-access-point-input common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %delete-access-point-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-input
                    'make-delete-access-point-input))
 (common-lisp:defun make-delete-access-point-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-point-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-point-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-access-point-output
                    'make-delete-access-point-output))
 (common-lisp:defun make-delete-access-point-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-point-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-listener-input common-lisp:nil
                       ((load-balancer-ports :initarg :load-balancer-ports
                         :type (common-lisp:or ports common-lisp:null)
                         :accessor
                         %delete-load-balancer-listener-input-load-balancer-ports
                         :initform
                         (common-lisp:error
                          ":load-balancer-ports is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %delete-load-balancer-listener-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-listener-input
                    'make-delete-load-balancer-listener-input))
 (common-lisp:defun make-delete-load-balancer-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-ports load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-ports))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-listener-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-listener-output
                    'make-delete-load-balancer-listener-output))
 (common-lisp:defun make-delete-load-balancer-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-policy-input common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor
                         %delete-load-balancer-policy-input-policy-name
                         :initform
                         (common-lisp:error ":policy-name is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %delete-load-balancer-policy-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-policy-input
                    'make-delete-load-balancer-policy-input))
 (common-lisp:defun make-delete-load-balancer-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-policy-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-policy-output
                    'make-delete-load-balancer-policy-output))
 (common-lisp:defun make-delete-load-balancer-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-load-balancer-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-throttle-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dependency-throttle-exception)))
(common-lisp:progn
 (common-lisp:defclass deregister-end-points-input common-lisp:nil
                       ((instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %deregister-end-points-input-instances :initform
                         (common-lisp:error ":instances is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %deregister-end-points-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-end-points-input
                    'make-deregister-end-points-input))
 (common-lisp:defun make-deregister-end-points-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-end-points-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-end-points-output common-lisp:nil
                       ((instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %deregister-end-points-output-instances :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-end-points-output
                    'make-deregister-end-points-output))
 (common-lisp:defun make-deregister-end-points-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-end-points-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-points-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-access-points-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-access-points-input-marker :initform
                         common-lisp:nil)
                        (load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor
                         %describe-access-points-input-load-balancer-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-input
                    'make-describe-access-points-input))
 (common-lisp:defun make-describe-access-points-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker load-balancer-names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-access-points-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-points-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-access-points-output-next-marker :initform
                         common-lisp:nil)
                        (load-balancer-descriptions :initarg
                         :load-balancer-descriptions :type
                         (common-lisp:or load-balancer-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-access-points-output-load-balancer-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-output
                    'make-describe-access-points-output))
 (common-lisp:defun make-describe-access-points-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker load-balancer-descriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-access-points-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-descriptions))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-account-limits-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-account-limits-input-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defun make-describe-account-limits-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-account-limits-output-next-marker :initform
                         common-lisp:nil)
                        (limits :initarg :limits :type
                         (common-lisp:or limits common-lisp:null) :accessor
                         %describe-account-limits-output-limits :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defun make-describe-account-limits-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker limits)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-end-point-state-input common-lisp:nil
                       ((instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %describe-end-point-state-input-instances :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %describe-end-point-state-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-end-point-state-input
                    'make-describe-end-point-state-input))
 (common-lisp:defun make-describe-end-point-state-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-end-point-state-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-end-point-state-output common-lisp:nil
                       ((instance-states :initarg :instance-states :type
                         (common-lisp:or instance-states common-lisp:null)
                         :accessor
                         %describe-end-point-state-output-instance-states
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-end-point-state-output
                    'make-describe-end-point-state-output))
 (common-lisp:defun make-describe-end-point-state-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-states)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-end-point-state-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-states))
      (common-lisp:list
       (common-lisp:cons "InstanceStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-input common-lisp:nil
                       ((load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %describe-load-balancer-attributes-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-input
                    'make-describe-load-balancer-attributes-input))
 (common-lisp:defun make-describe-load-balancer-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-output common-lisp:nil
                       ((load-balancer-attributes :initarg
                         :load-balancer-attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancer-attributes-output-load-balancer-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-output
                    'make-describe-load-balancer-attributes-output))
 (common-lisp:defun make-describe-load-balancer-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-policies-input common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor
                         %describe-load-balancer-policies-input-policy-names
                         :initform common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %describe-load-balancer-policies-input-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policies-input
                    'make-describe-load-balancer-policies-input))
 (common-lisp:defun make-describe-load-balancer-policies-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-policies-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-policies-output common-lisp:nil
                       ((policy-descriptions :initarg :policy-descriptions
                         :type
                         (common-lisp:or policy-descriptions common-lisp:null)
                         :accessor
                         %describe-load-balancer-policies-output-policy-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policies-output
                    'make-describe-load-balancer-policies-output))
 (common-lisp:defun make-describe-load-balancer-policies-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-descriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-policies-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-policy-types-input
                       common-lisp:nil
                       ((policy-type-names :initarg :policy-type-names :type
                         (common-lisp:or policy-type-names common-lisp:null)
                         :accessor
                         %describe-load-balancer-policy-types-input-policy-type-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policy-types-input
                    'make-describe-load-balancer-policy-types-input))
 (common-lisp:defun make-describe-load-balancer-policy-types-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-policy-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-names))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-policy-types-output
                       common-lisp:nil
                       ((policy-type-descriptions :initarg
                         :policy-type-descriptions :type
                         (common-lisp:or policy-type-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancer-policy-types-output-policy-type-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policy-types-output
                    'make-describe-load-balancer-policy-types-output))
 (common-lisp:defun make-describe-load-balancer-policy-types-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type-descriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-policy-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-type-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-input common-lisp:nil
                       ((load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names-max20
                                         common-lisp:null)
                         :accessor %describe-tags-input-load-balancer-names
                         :initform
                         (common-lisp:error
                          ":load-balancer-names is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defun make-describe-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-output common-lisp:nil
                       ((tag-descriptions :initarg :tag-descriptions :type
                         (common-lisp:or tag-descriptions common-lisp:null)
                         :accessor %describe-tags-output-tag-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defun make-describe-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-descriptions))
      (common-lisp:list
       (common-lisp:cons "TagDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detach-load-balancer-from-subnets-input common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %detach-load-balancer-from-subnets-input-subnets
                         :initform (common-lisp:error ":subnets is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %detach-load-balancer-from-subnets-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-from-subnets-input
                    'make-detach-load-balancer-from-subnets-input))
 (common-lisp:defun make-detach-load-balancer-from-subnets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-load-balancer-from-subnets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-load-balancer-from-subnets-output common-lisp:nil
                       ((subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %detach-load-balancer-from-subnets-output-subnets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-from-subnets-output
                    'make-detach-load-balancer-from-subnets-output))
 (common-lisp:defun make-detach-load-balancer-from-subnets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-load-balancer-from-subnets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-access-point-name-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-access-point-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-listener-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-listener-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-policy-name-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-policy-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:deftype end-point-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass health-check common-lisp:nil
                       ((healthy-threshold :initarg :healthy-threshold :type
                         (common-lisp:or healthy-threshold common-lisp:null)
                         :accessor %health-check-healthy-threshold :initform
                         (common-lisp:error ":healthy-threshold is required"))
                        (unhealthy-threshold :initarg :unhealthy-threshold
                         :type
                         (common-lisp:or unhealthy-threshold common-lisp:null)
                         :accessor %health-check-unhealthy-threshold :initform
                         (common-lisp:error
                          ":unhealthy-threshold is required"))
                        (timeout :initarg :timeout :type
                         (common-lisp:or health-check-timeout common-lisp:null)
                         :accessor %health-check-timeout :initform
                         (common-lisp:error ":timeout is required"))
                        (interval :initarg :interval :type
                         (common-lisp:or health-check-interval
                                         common-lisp:null)
                         :accessor %health-check-interval :initform
                         (common-lisp:error ":interval is required"))
                        (target :initarg :target :type
                         (common-lisp:or health-check-target common-lisp:null)
                         :accessor %health-check-target :initform
                         (common-lisp:error ":target is required"))))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defun make-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key healthy-threshold unhealthy-threshold
                     timeout interval target)
   (common-lisp:apply #'common-lisp:make-instance 'health-check
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check))
   common-lisp:nil))
(common-lisp:deftype health-check-interval () 'common-lisp:integer)
(common-lisp:deftype health-check-target () 'common-lisp:string)
(common-lisp:deftype health-check-timeout () 'common-lisp:integer)
(common-lisp:deftype healthy-threshold () 'common-lisp:integer)
(common-lisp:deftype idle-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defun make-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass instance-state common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %instance-state-description :initform
                         common-lisp:nil)
                        (reason-code :initarg :reason-code :type
                         (common-lisp:or reason-code common-lisp:null)
                         :accessor %instance-state-reason-code :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %instance-state-state :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-state-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defun make-instance-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description reason-code state
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "ReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-states ()
   '(trivial-types:proper-list instance-state))
 (common-lisp:defun |make-instance-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-request-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-request-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-end-point-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-end-point-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scheme-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-scheme-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-security-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet-exception)))
(common-lisp:progn
 (common-lisp:deftype lbcookie-stickiness-policies ()
   '(trivial-types:proper-list lbcookie-stickiness-policy))
 (common-lisp:defun |make-lbcookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lbcookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lbcookie-stickiness-policy common-lisp:nil
                       ((cookie-expiration-period :initarg
                         :cookie-expiration-period :type
                         (common-lisp:or cookie-expiration-period
                                         common-lisp:null)
                         :accessor
                         %lbcookie-stickiness-policy-cookie-expiration-period
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %lbcookie-stickiness-policy-policy-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lbcookie-stickiness-policy
                    'make-lbcookie-stickiness-policy))
 (common-lisp:defun make-lbcookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cookie-expiration-period policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'lbcookie-stickiness-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass limit common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or max common-lisp:null) :accessor
                         %limit-max :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %limit-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'limit 'make-limit))
 (common-lisp:defun make-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max name)
   (common-lisp:apply #'common-lisp:make-instance 'limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits () '(trivial-types:proper-list limit))
 (common-lisp:defun |make-limits|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((sslcertificate-id :initarg :sslcertificate-id :type
                         (common-lisp:or sslcertificate-id common-lisp:null)
                         :accessor %listener-sslcertificate-id :initform
                         common-lisp:nil)
                        (instance-port :initarg :instance-port :type
                         (common-lisp:or instance-port common-lisp:null)
                         :accessor %listener-instance-port :initform
                         (common-lisp:error ":instance-port is required"))
                        (instance-protocol :initarg :instance-protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %listener-instance-protocol :initform common-lisp:nil)
                        (load-balancer-port :initarg :load-balancer-port :type
                         (common-lisp:or access-point-port common-lisp:null)
                         :accessor %listener-load-balancer-port :initform
                         (common-lisp:error ":load-balancer-port is required"))
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %listener-protocol :initform
                         (common-lisp:error ":protocol is required"))))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defun make-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sslcertificate-id instance-port
                     instance-protocol load-balancer-port protocol)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-protocol))
      (common-lisp:list
       (common-lisp:cons "InstanceProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sslcertificate-id))
      (common-lisp:list
       (common-lisp:cons "SSLCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-description common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor %listener-description-policy-names :initform
                         common-lisp:nil)
                        (listener :initarg :listener :type
                         (common-lisp:or listener common-lisp:null) :accessor
                         %listener-description-listener :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listener-description 'make-listener-description))
 (common-lisp:defun make-listener-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names listener)
   (common-lisp:apply #'common-lisp:make-instance 'listener-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listener-descriptions ()
   '(trivial-types:proper-list listener-description))
 (common-lisp:defun |make-listener-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'listener-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun |make-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition load-balancer-attribute-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'load-balancer-attribute-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass load-balancer-attributes common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :type
                         (common-lisp:or additional-attributes
                                         common-lisp:null)
                         :accessor
                         %load-balancer-attributes-additional-attributes
                         :initform common-lisp:nil)
                        (connection-settings :initarg :connection-settings
                         :type
                         (common-lisp:or connection-settings common-lisp:null)
                         :accessor
                         %load-balancer-attributes-connection-settings
                         :initform common-lisp:nil)
                        (connection-draining :initarg :connection-draining
                         :type
                         (common-lisp:or connection-draining common-lisp:null)
                         :accessor
                         %load-balancer-attributes-connection-draining
                         :initform common-lisp:nil)
                        (access-log :initarg :access-log :type
                         (common-lisp:or access-log common-lisp:null) :accessor
                         %load-balancer-attributes-access-log :initform
                         common-lisp:nil)
                        (cross-zone-load-balancing :initarg
                         :cross-zone-load-balancing :type
                         (common-lisp:or cross-zone-load-balancing
                                         common-lisp:null)
                         :accessor
                         %load-balancer-attributes-cross-zone-load-balancing
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-attributes 'make-load-balancer-attributes))
 (common-lisp:defun make-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-attributes connection-settings
                     connection-draining access-log cross-zone-load-balancing)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-zone-load-balancing))
      (common-lisp:list
       (common-lisp:cons "CrossZoneLoadBalancing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "AccessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-draining))
      (common-lisp:list
       (common-lisp:cons "ConnectionDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-description common-lisp:nil
                       ((scheme :initarg :scheme :type
                         (common-lisp:or load-balancer-scheme common-lisp:null)
                         :accessor %load-balancer-description-scheme :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %load-balancer-description-created-time
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %load-balancer-description-security-groups
                         :initform common-lisp:nil)
                        (source-security-group :initarg :source-security-group
                         :type
                         (common-lisp:or source-security-group
                                         common-lisp:null)
                         :accessor
                         %load-balancer-description-source-security-group
                         :initform common-lisp:nil)
                        (health-check :initarg :health-check :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor %load-balancer-description-health-check
                         :initform common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %load-balancer-description-instances :initform
                         common-lisp:nil)
                        (vpcid :initarg :vpcid :type
                         (common-lisp:or vpcid common-lisp:null) :accessor
                         %load-balancer-description-vpcid :initform
                         common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %load-balancer-description-subnets :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %load-balancer-description-availability-zones
                         :initform common-lisp:nil)
                        (backend-server-descriptions :initarg
                         :backend-server-descriptions :type
                         (common-lisp:or backend-server-descriptions
                                         common-lisp:null)
                         :accessor
                         %load-balancer-description-backend-server-descriptions
                         :initform common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or policies common-lisp:null) :accessor
                         %load-balancer-description-policies :initform
                         common-lisp:nil)
                        (listener-descriptions :initarg :listener-descriptions
                         :type
                         (common-lisp:or listener-descriptions
                                         common-lisp:null)
                         :accessor
                         %load-balancer-description-listener-descriptions
                         :initform common-lisp:nil)
                        (canonical-hosted-zone-name-id :initarg
                         :canonical-hosted-zone-name-id :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %load-balancer-description-canonical-hosted-zone-name-id
                         :initform common-lisp:nil)
                        (canonical-hosted-zone-name :initarg
                         :canonical-hosted-zone-name :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %load-balancer-description-canonical-hosted-zone-name
                         :initform common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %load-balancer-description-dnsname :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %load-balancer-description-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-description
                    'make-load-balancer-description))
 (common-lisp:defun make-load-balancer-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheme created-time security-groups
                     source-security-group health-check instances vpcid subnets
                     availability-zones backend-server-descriptions policies
                     listener-descriptions canonical-hosted-zone-name-id
                     canonical-hosted-zone-name dnsname load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneNameID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'listener-descriptions))
      (common-lisp:list
       (common-lisp:cons "ListenerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-server-descriptions))
      (common-lisp:list
       (common-lisp:cons "BackendServerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-descriptions ()
   '(trivial-types:proper-list load-balancer-description))
 (common-lisp:defun |make-load-balancer-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list access-point-name))
 (common-lisp:defun |make-load-balancer-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names-max20 ()
   '(trivial-types:proper-list access-point-name))
 (common-lisp:defun |make-load-balancer-names-max20|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-scheme () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-input common-lisp:nil
                       ((load-balancer-attributes :initarg
                         :load-balancer-attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-input-load-balancer-attributes
                         :initform
                         (common-lisp:error
                          ":load-balancer-attributes is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-input
                    'make-modify-load-balancer-attributes-input))
 (common-lisp:defun make-modify-load-balancer-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-attributes
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-output common-lisp:nil
                       ((load-balancer-attributes :initarg
                         :load-balancer-attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-output-load-balancer-attributes
                         :initform common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-output-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-output
                    'make-modify-load-balancer-attributes-output))
 (common-lisp:defun make-modify-load-balancer-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-attributes
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-permitted-exception)))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass policies common-lisp:nil
                       ((other-policies :initarg :other-policies :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor %policies-other-policies :initform
                         common-lisp:nil)
                        (lbcookie-stickiness-policies :initarg
                         :lbcookie-stickiness-policies :type
                         (common-lisp:or lbcookie-stickiness-policies
                                         common-lisp:null)
                         :accessor %policies-lbcookie-stickiness-policies
                         :initform common-lisp:nil)
                        (app-cookie-stickiness-policies :initarg
                         :app-cookie-stickiness-policies :type
                         (common-lisp:or app-cookie-stickiness-policies
                                         common-lisp:null)
                         :accessor %policies-app-cookie-stickiness-policies
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policies 'make-policies))
 (common-lisp:defun make-policies
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key other-policies
                     lbcookie-stickiness-policies
                     app-cookie-stickiness-policies)
   (common-lisp:apply #'common-lisp:make-instance 'policies
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "AppCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lbcookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "LBCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-policies))
      (common-lisp:list
       (common-lisp:cons "OtherPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-attribute common-lisp:nil
                       ((attribute-value :initarg :attribute-value :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor %policy-attribute-attribute-value :initform
                         common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor %policy-attribute-attribute-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute 'make-policy-attribute))
 (common-lisp:defun make-policy-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-value attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'policy-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-attribute-description common-lisp:nil
                       ((attribute-value :initarg :attribute-value :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor
                         %policy-attribute-description-attribute-value
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor %policy-attribute-description-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute-description
                    'make-policy-attribute-description))
 (common-lisp:defun make-policy-attribute-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-value attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'policy-attribute-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-attribute-descriptions ()
   '(trivial-types:proper-list policy-attribute-description))
 (common-lisp:defun |make-policy-attribute-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-attribute-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-attribute-type-description common-lisp:nil
                       ((cardinality :initarg :cardinality :type
                         (common-lisp:or cardinality common-lisp:null)
                         :accessor
                         %policy-attribute-type-description-cardinality
                         :initform common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or default-value common-lisp:null)
                         :accessor
                         %policy-attribute-type-description-default-value
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %policy-attribute-type-description-description
                         :initform common-lisp:nil)
                        (attribute-type :initarg :attribute-type :type
                         (common-lisp:or attribute-type common-lisp:null)
                         :accessor
                         %policy-attribute-type-description-attribute-type
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor
                         %policy-attribute-type-description-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute-type-description
                    'make-policy-attribute-type-description))
 (common-lisp:defun make-policy-attribute-type-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cardinality default-value description
                     attribute-type attribute-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'policy-attribute-type-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cardinality))
      (common-lisp:list
       (common-lisp:cons "Cardinality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-attribute-type-descriptions ()
   '(trivial-types:proper-list policy-attribute-type-description))
 (common-lisp:defun |make-policy-attribute-type-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-attribute-type-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype policy-attributes ()
   '(trivial-types:proper-list policy-attribute))
 (common-lisp:defun |make-policy-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-description common-lisp:nil
                       ((policy-attribute-descriptions :initarg
                         :policy-attribute-descriptions :type
                         (common-lisp:or policy-attribute-descriptions
                                         common-lisp:null)
                         :accessor
                         %policy-description-policy-attribute-descriptions
                         :initform common-lisp:nil)
                        (policy-type-name :initarg :policy-type-name :type
                         (common-lisp:or policy-type-name common-lisp:null)
                         :accessor %policy-description-policy-type-name
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %policy-description-policy-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-description 'make-policy-description))
 (common-lisp:defun make-policy-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-attribute-descriptions
                     policy-type-name policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'policy-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-attribute-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-descriptions ()
   '(trivial-types:proper-list policy-description))
 (common-lisp:defun |make-policy-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-names () '(trivial-types:proper-list policy-name))
 (common-lisp:defun |make-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition policy-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass policy-type-description common-lisp:nil
                       ((policy-attribute-type-descriptions :initarg
                         :policy-attribute-type-descriptions :type
                         (common-lisp:or policy-attribute-type-descriptions
                                         common-lisp:null)
                         :accessor
                         %policy-type-description-policy-attribute-type-descriptions
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %policy-type-description-description
                         :initform common-lisp:nil)
                        (policy-type-name :initarg :policy-type-name :type
                         (common-lisp:or policy-type-name common-lisp:null)
                         :accessor %policy-type-description-policy-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-type-description 'make-policy-type-description))
 (common-lisp:defun make-policy-type-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-attribute-type-descriptions
                     description policy-type-name)
   (common-lisp:apply #'common-lisp:make-instance 'policy-type-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-attribute-type-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributeTypeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-type-descriptions ()
   '(trivial-types:proper-list policy-type-description))
 (common-lisp:defun |make-policy-type-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-type-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-type-names ()
   '(trivial-types:proper-list policy-type-name))
 (common-lisp:defun |make-policy-type-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-type-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition policy-type-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-type-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype ports () '(trivial-types:proper-list access-point-port))
 (common-lisp:defun |make-ports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-port))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-end-points-input common-lisp:nil
                       ((instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %register-end-points-input-instances :initform
                         (common-lisp:error ":instances is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %register-end-points-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'register-end-points-input
                    'make-register-end-points-input))
 (common-lisp:defun make-register-end-points-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'register-end-points-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-end-points-output common-lisp:nil
                       ((instances :initarg :instances :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         %register-end-points-output-instances :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-end-points-output
                    'make-register-end-points-output))
 (common-lisp:defun make-register-end-points-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instances)
   (common-lisp:apply #'common-lisp:make-instance 'register-end-points-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-availability-zones-input common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %remove-availability-zones-input-availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %remove-availability-zones-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-availability-zones-input
                    'make-remove-availability-zones-input))
 (common-lisp:defun make-remove-availability-zones-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-availability-zones-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-availability-zones-output common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %remove-availability-zones-output-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-availability-zones-output
                    'make-remove-availability-zones-output))
 (common-lisp:defun make-remove-availability-zones-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-availability-zones-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %remove-tags-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (load-balancer-names :initarg :load-balancer-names
                         :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor %remove-tags-input-load-balancer-names
                         :initform
                         (common-lisp:error
                          ":load-balancer-names is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defun make-remove-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags load-balancer-names)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defun make-remove-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype sslcertificate-id () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype security-group-name () 'common-lisp:string)
(common-lisp:deftype security-group-owner-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-listener-sslcertificate-input
                       common-lisp:nil
                       ((sslcertificate-id :initarg :sslcertificate-id :type
                         (common-lisp:or sslcertificate-id common-lisp:null)
                         :accessor
                         %set-load-balancer-listener-sslcertificate-input-sslcertificate-id
                         :initform
                         (common-lisp:error ":sslcertificate-id is required"))
                        (load-balancer-port :initarg :load-balancer-port :type
                         (common-lisp:or access-point-port common-lisp:null)
                         :accessor
                         %set-load-balancer-listener-sslcertificate-input-load-balancer-port
                         :initform
                         (common-lisp:error ":load-balancer-port is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %set-load-balancer-listener-sslcertificate-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-listener-sslcertificate-input
                    'make-set-load-balancer-listener-sslcertificate-input))
 (common-lisp:defun make-set-load-balancer-listener-sslcertificate-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sslcertificate-id load-balancer-port
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-listener-sslcertificate-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sslcertificate-id))
      (common-lisp:list
       (common-lisp:cons "SSLCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-listener-sslcertificate-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-listener-sslcertificate-output
                    'make-set-load-balancer-listener-sslcertificate-output))
 (common-lisp:defun make-set-load-balancer-listener-sslcertificate-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-listener-sslcertificate-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-policies-for-backend-server-input
                       common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-for-backend-server-input-policy-names
                         :initform
                         (common-lisp:error ":policy-names is required"))
                        (instance-port :initarg :instance-port :type
                         (common-lisp:or end-point-port common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-for-backend-server-input-instance-port
                         :initform
                         (common-lisp:error ":instance-port is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-for-backend-server-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-for-backend-server-input
                    'make-set-load-balancer-policies-for-backend-server-input))
 (common-lisp:defun make-set-load-balancer-policies-for-backend-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names instance-port
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-policies-for-backend-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-policies-for-backend-server-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-for-backend-server-output
                    'make-set-load-balancer-policies-for-backend-server-output))
 (common-lisp:defun make-set-load-balancer-policies-for-backend-server-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-policies-for-backend-server-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-policies-of-listener-input
                       common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or policy-names common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-of-listener-input-policy-names
                         :initform
                         (common-lisp:error ":policy-names is required"))
                        (load-balancer-port :initarg :load-balancer-port :type
                         (common-lisp:or access-point-port common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-of-listener-input-load-balancer-port
                         :initform
                         (common-lisp:error ":load-balancer-port is required"))
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor
                         %set-load-balancer-policies-of-listener-input-load-balancer-name
                         :initform
                         (common-lisp:error
                          ":load-balancer-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-of-listener-input
                    'make-set-load-balancer-policies-of-listener-input))
 (common-lisp:defun make-set-load-balancer-policies-of-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names load-balancer-port
                     load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-policies-of-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-load-balancer-policies-of-listener-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-of-listener-output
                    'make-set-load-balancer-policies-of-listener-output))
 (common-lisp:defun make-set-load-balancer-policies-of-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-balancer-policies-of-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-security-group common-lisp:nil
                       ((group-name :initarg :group-name :type
                         (common-lisp:or security-group-name common-lisp:null)
                         :accessor %source-security-group-group-name :initform
                         common-lisp:nil)
                        (owner-alias :initarg :owner-alias :type
                         (common-lisp:or security-group-owner-alias
                                         common-lisp:null)
                         :accessor %source-security-group-owner-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-security-group 'make-source-security-group))
 (common-lisp:defun make-source-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-name owner-alias)
   (common-lisp:apply #'common-lisp:make-instance 'source-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition subnet-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-description common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-description-tags :initform common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or access-point-name common-lisp:null)
                         :accessor %tag-description-load-balancer-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defun make-tag-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags load-balancer-name)
   (common-lisp:apply #'common-lisp:make-instance 'tag-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-descriptions ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list tag-key-only))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-only))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-key-only common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key-only-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-key-only 'make-tag-key-only))
 (common-lisp:defun make-tag-key-only
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-key-only
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-key-only))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-key-only))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-key-only))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-access-points-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-access-points-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-policies-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-policies-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:deftype unhealthy-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition unsupported-protocol-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-protocol-exception)))
(common-lisp:deftype vpcid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names tags)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddTags"
                                                        "2012-06-01"))
      common-lisp:nil "AddTagsResult" *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun apply-security-groups-to-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name security-groups)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-security-groups-to-load-balancer-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ApplySecurityGroupsToLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "ApplySecurityGroupsToLoadBalancerResult" *error-map*)))
 (common-lisp:export 'apply-security-groups-to-load-balancer))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-to-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name subnets)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name subnets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-to-subnets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachLoadBalancerToSubnets"
                                                        "2012-06-01"))
      common-lisp:nil "AttachLoadBalancerToSubnetsResult" *error-map*)))
 (common-lisp:export 'attach-load-balancer-to-subnets))
(common-lisp:progn
 (common-lisp:defun configure-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name health-check)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name health-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-configure-health-check-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ConfigureHealthCheck"
                                                        "2012-06-01"))
      common-lisp:nil "ConfigureHealthCheckResult" *error-map*)))
 (common-lisp:export 'configure-health-check))
(common-lisp:progn
 (common-lisp:defun create-app-cookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     cookie-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name cookie-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-app-cookie-stickiness-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateAppCookieStickinessPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateAppCookieStickinessPolicyResult" *error-map*)))
 (common-lisp:export 'create-app-cookie-stickiness-policy))
(common-lisp:progn
 (common-lisp:defun create-lbcookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     cookie-expiration-period)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name
     cookie-expiration-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-lbcookie-stickiness-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLBCookieStickinessPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLBCookieStickinessPolicyResult" *error-map*)))
 (common-lisp:export 'create-lbcookie-stickiness-policy))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name listeners
                     availability-zones subnets security-groups scheme tags)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name listeners availability-zones
     subnets security-groups scheme tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerResult" *error-map*)))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name listeners)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name listeners))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancerListeners"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerListenersResult" *error-map*)))
 (common-lisp:export 'create-load-balancer-listeners))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     policy-type-name policy-attributes)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name policy-type-name
     policy-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancerPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerPolicyResult" *error-map*)))
 (common-lisp:export 'create-load-balancer-policy))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-ports)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-ports))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancerListeners"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerListenersResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer-listeners))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancerPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerPolicyResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer-policy))
(common-lisp:progn
 (common-lisp:defun deregister-instances-from-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-end-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeregisterInstancesFromLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DeregisterInstancesFromLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'deregister-instances-from-load-balancer))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size)
   (common-lisp:declare (common-lisp:ignorable marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAccountLimits"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeAccountLimitsResult" *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-instance-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-end-point-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeInstanceHealth"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeInstanceHealthResult" *error-map*)))
 (common-lisp:export 'describe-instance-health))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerAttributes"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-policies-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerPolicies"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerPoliciesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-policies))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-policy-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-type-names)
   (common-lisp:declare (common-lisp:ignorable policy-type-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-policy-types-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerPolicyTypes"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerPolicyTypesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-policy-types))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-names marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancers"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTags"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun detach-load-balancer-from-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name subnets)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name subnets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-load-balancer-from-subnets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachLoadBalancerFromSubnets"
                                                        "2012-06-01"))
      common-lisp:nil "DetachLoadBalancerFromSubnetsResult" *error-map*)))
 (common-lisp:export 'detach-load-balancer-from-subnets))
(common-lisp:progn
 (common-lisp:defun disable-availability-zones-for-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-availability-zones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DisableAvailabilityZonesForLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DisableAvailabilityZonesForLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'disable-availability-zones-for-load-balancer))
(common-lisp:progn
 (common-lisp:defun enable-availability-zones-for-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-availability-zones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "EnableAvailabilityZonesForLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "EnableAvailabilityZonesForLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'enable-availability-zones-for-load-balancer))
(common-lisp:progn
 (common-lisp:defun modify-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name
                     load-balancer-attributes)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyLoadBalancerAttributes"
                                                        "2012-06-01"))
      common-lisp:nil "ModifyLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'modify-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun register-instances-with-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-end-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RegisterInstancesWithLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "RegisterInstancesWithLoadBalancerResult" *error-map*)))
 (common-lisp:export 'register-instances-with-load-balancer))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names tags)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveTags"
                                                        "2012-06-01"))
      common-lisp:nil "RemoveTagsResult" *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-listener-sslcertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-port
                     sslcertificate-id)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-port
     sslcertificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-listener-sslcertificate-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerListenerSSLCertificate"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerListenerSSLCertificateResult"
      *error-map*)))
 (common-lisp:export 'set-load-balancer-listener-sslcertificate))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-policies-for-backend-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-port
                     policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-port policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-policies-for-backend-server-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerPoliciesForBackendServer"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerPoliciesForBackendServerResult"
      *error-map*)))
 (common-lisp:export 'set-load-balancer-policies-for-backend-server))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-policies-of-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-port
                     policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-port policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-policies-of-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerPoliciesOfListener"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerPoliciesOfListenerResult" *error-map*)))
 (common-lisp:export 'set-load-balancer-policies-of-listener))
