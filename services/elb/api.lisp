;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elb/api
  (:use)
  (:nicknames #:aws/elb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elb/api)
(common-lisp:progn
 (common-lisp:defclass elb-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "elb" :protocol :query))
 (common-lisp:export 'elb-request))
(common-lisp:progn
 (common-lisp:define-condition elb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elb-error))
(common-lisp:defvar *error-map*
  '(("AccessPointNotFoundException" . access-point-not-found-exception)
    ("CertificateNotFoundException" . certificate-not-found-exception)
    ("DependencyThrottleException" . dependency-throttle-exception)
    ("DuplicateAccessPointNameException"
     . duplicate-access-point-name-exception)
    ("DuplicateListenerException" . duplicate-listener-exception)
    ("DuplicatePolicyNameException" . duplicate-policy-name-exception)
    ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
    ("InvalidConfigurationRequestException"
     . invalid-configuration-request-exception)
    ("InvalidEndPointException" . invalid-end-point-exception)
    ("InvalidSchemeException" . invalid-scheme-exception)
    ("InvalidSecurityGroupException" . invalid-security-group-exception)
    ("InvalidSubnetException" . invalid-subnet-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("LoadBalancerAttributeNotFoundException"
     . load-balancer-attribute-not-found-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("PolicyNotFoundException" . policy-not-found-exception)
    ("PolicyTypeNotFoundException" . policy-type-not-found-exception)
    ("SubnetNotFoundException" . subnet-not-found-exception)
    ("TooManyAccessPointsException" . too-many-access-points-exception)
    ("TooManyPoliciesException" . too-many-policies-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnsupportedProtocolException" . unsupported-protocol-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-log-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or access-log-enabled common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (emit-interval common-lisp:nil :type
    (common-lisp:or access-log-interval common-lisp:null))
   (s3bucket-prefix common-lisp:nil :type
    (common-lisp:or access-log-prefix common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-log 'make-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emit-interval))
      (common-lisp:list
       (common-lisp:cons "EmitInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "S3BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-log))
   common-lisp:nil))
(common-lisp:deftype access-log-enabled () 'common-lisp:boolean)
(common-lisp:deftype access-log-interval () 'common-lisp:integer)
(common-lisp:deftype access-log-prefix () 'common-lisp:string)
(common-lisp:deftype access-point-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-point-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-point-not-found-exception)))
(common-lisp:deftype access-point-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (add-availability-zones-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-availability-zones-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or availability-zones common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-availability-zones-input
                    'make-add-availability-zones-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-availability-zones-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-availability-zones-output-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-availability-zones-output
                    'make-add-availability-zones-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-availability-zones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-input-"))
   (load-balancer-names (common-lisp:error ":load-balancer-names is required")
    :type (common-lisp:or load-balancer-names common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-output-")))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-additional-attribute-"))
   (key common-lisp:nil :type
    (common-lisp:or additional-attribute-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or additional-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-attribute 'make-additional-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-attribute))
   common-lisp:nil))
(common-lisp:deftype additional-attribute-key () 'common-lisp:string)
(common-lisp:deftype additional-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-attributes ()
   '(trivial-types:proper-list additional-attribute))
 (common-lisp:defun |make-additional-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype app-cookie-stickiness-policies ()
   '(trivial-types:proper-list app-cookie-stickiness-policy))
 (common-lisp:defun |make-app-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            app-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (app-cookie-stickiness-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-cookie-stickiness-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (cookie-name common-lisp:nil :type
    (common-lisp:or cookie-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-cookie-stickiness-policy
                    'make-app-cookie-stickiness-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-security-groups-to-load-balancer-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-apply-security-groups-to-load-balancer-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (security-groups (common-lisp:error ":security-groups is required") :type
    (common-lisp:or security-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-security-groups-to-load-balancer-input
                    'make-apply-security-groups-to-load-balancer-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-security-groups-to-load-balancer-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-apply-security-groups-to-load-balancer-output-"))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-security-groups-to-load-balancer-output
                    'make-apply-security-groups-to-load-balancer-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-security-groups-to-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-to-subnets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancer-to-subnets-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-to-subnets-input
                    'make-attach-load-balancer-to-subnets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-to-subnets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancer-to-subnets-output-"))
   (subnets common-lisp:nil :type (common-lisp:or subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-to-subnets-output
                    'make-attach-load-balancer-to-subnets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-to-subnets-output))
   common-lisp:nil))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (backend-server-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-backend-server-description-"))
   (instance-port common-lisp:nil :type
    (common-lisp:or instance-port common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'backend-server-description
                    'make-backend-server-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-server-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backend-server-descriptions ()
   '(trivial-types:proper-list backend-server-description))
 (common-lisp:defun |make-backend-server-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            backend-server-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cardinality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (configure-health-check-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-configure-health-check-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (health-check (common-lisp:error ":health-check is required") :type
    (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configure-health-check-input
                    'make-configure-health-check-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configure-health-check-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-configure-health-check-output-"))
   (health-check common-lisp:nil :type
    (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configure-health-check-output
                    'make-configure-health-check-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-health-check-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-draining (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-draining-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or connection-draining-enabled common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or connection-draining-timeout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-draining 'make-connection-draining))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-draining))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-draining))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-draining))
   common-lisp:nil))
(common-lisp:deftype connection-draining-enabled () 'common-lisp:boolean)
(common-lisp:deftype connection-draining-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (connection-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-settings-"))
   (idle-timeout (common-lisp:error ":idle-timeout is required") :type
    (common-lisp:or idle-timeout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-settings 'make-connection-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-settings))
   common-lisp:nil))
(common-lisp:deftype cookie-expiration-period () 'common-lisp:integer)
(common-lisp:deftype cookie-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-point-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (listeners (common-lisp:error ":listeners is required") :type
    (common-lisp:or listeners common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (subnets common-lisp:nil :type (common-lisp:or subnets common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null))
   (scheme common-lisp:nil :type
    (common-lisp:or load-balancer-scheme common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-input
                    'make-create-access-point-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-point-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-point-output-"))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-point-output
                    'make-create-access-point-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-point-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-cookie-stickiness-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-cookie-stickiness-policy-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (cookie-name (common-lisp:error ":cookie-name is required") :type
    (common-lisp:or cookie-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-cookie-stickiness-policy-input
                    'make-create-app-cookie-stickiness-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-cookie-stickiness-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-cookie-stickiness-policy-output-")))
 (common-lisp:export
  (common-lisp:list 'create-app-cookie-stickiness-policy-output
                    'make-create-app-cookie-stickiness-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-cookie-stickiness-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lbcookie-stickiness-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lbcookie-stickiness-policy-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (cookie-expiration-period common-lisp:nil :type
    (common-lisp:or cookie-expiration-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lbcookie-stickiness-policy-input
                    'make-create-lbcookie-stickiness-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lbcookie-stickiness-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lbcookie-stickiness-policy-output-")))
 (common-lisp:export
  (common-lisp:list 'create-lbcookie-stickiness-policy-output
                    'make-create-lbcookie-stickiness-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lbcookie-stickiness-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-listener-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-listener-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (listeners (common-lisp:error ":listeners is required") :type
    (common-lisp:or listeners common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-listener-input
                    'make-create-load-balancer-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-listener-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-listener-output-")))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-listener-output
                    'make-create-load-balancer-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-policy-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-type-name (common-lisp:error ":policy-type-name is required") :type
    (common-lisp:or policy-type-name common-lisp:null))
   (policy-attributes common-lisp:nil :type
    (common-lisp:or policy-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-policy-input
                    'make-create-load-balancer-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-attributes))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-policy-output-")))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-policy-output
                    'make-create-load-balancer-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-policy-output))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cross-zone-load-balancing (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-zone-load-balancing-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or cross-zone-load-balancing-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-zone-load-balancing
                    'make-cross-zone-load-balancing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-zone-load-balancing))
   common-lisp:nil))
(common-lisp:deftype cross-zone-load-balancing-enabled () 'common-lisp:boolean)
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-point-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-input
                    'make-delete-access-point-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-point-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-point-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-point-output
                    'make-delete-access-point-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-point-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-listener-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-listener-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (load-balancer-ports (common-lisp:error ":load-balancer-ports is required")
    :type (common-lisp:or ports common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-listener-input
                    'make-delete-load-balancer-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-ports))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-listener-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-listener-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-listener-output
                    'make-delete-load-balancer-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-policy-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-policy-input
                    'make-delete-load-balancer-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-policy-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-policy-output
                    'make-delete-load-balancer-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-throttle-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dependency-throttle-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-end-points-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-end-points-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (instances (common-lisp:error ":instances is required") :type
    (common-lisp:or instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-end-points-input
                    'make-deregister-end-points-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-end-points-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-end-points-output-"))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-end-points-output
                    'make-deregister-end-points-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-end-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-points-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-points-input-"))
   (load-balancer-names common-lisp:nil :type
    (common-lisp:or load-balancer-names common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-input
                    'make-describe-access-points-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-points-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-points-output-"))
   (load-balancer-descriptions common-lisp:nil :type
    (common-lisp:or load-balancer-descriptions common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-points-output
                    'make-describe-access-points-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-descriptions))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-input-"))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-limits-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-limits-output-"))
   (limits common-lisp:nil :type (common-lisp:or limits common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-end-point-state-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-end-point-state-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-end-point-state-input
                    'make-describe-end-point-state-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-end-point-state-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-end-point-state-output-"))
   (instance-states common-lisp:nil :type
    (common-lisp:or instance-states common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-end-point-state-output
                    'make-describe-end-point-state-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-states))
      (common-lisp:list
       (common-lisp:cons "InstanceStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-end-point-state-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-attributes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-attributes-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-input
                    'make-describe-load-balancer-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-attributes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-attributes-output-"))
   (load-balancer-attributes common-lisp:nil :type
    (common-lisp:or load-balancer-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-output
                    'make-describe-load-balancer-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-policies-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-policies-input-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or access-point-name common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policies-input
                    'make-describe-load-balancer-policies-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-policies-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-policies-output-"))
   (policy-descriptions common-lisp:nil :type
    (common-lisp:or policy-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policies-output
                    'make-describe-load-balancer-policies-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-policy-types-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-policy-types-input-"))
   (policy-type-names common-lisp:nil :type
    (common-lisp:or policy-type-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policy-types-input
                    'make-describe-load-balancer-policy-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-names))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-load-balancer-policy-types-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-load-balancer-policy-types-output-"))
   (policy-type-descriptions common-lisp:nil :type
    (common-lisp:or policy-type-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-policy-types-output
                    'make-describe-load-balancer-policy-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-type-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-policy-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-input-"))
   (load-balancer-names (common-lisp:error ":load-balancer-names is required")
    :type (common-lisp:or load-balancer-names-max20 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-output-"))
   (tag-descriptions common-lisp:nil :type
    (common-lisp:or tag-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-descriptions))
      (common-lisp:list
       (common-lisp:cons "TagDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancer-from-subnets-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-load-balancer-from-subnets-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-from-subnets-input
                    'make-detach-load-balancer-from-subnets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-load-balancer-from-subnets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-load-balancer-from-subnets-output-"))
   (subnets common-lisp:nil :type (common-lisp:or subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-load-balancer-from-subnets-output
                    'make-detach-load-balancer-from-subnets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-load-balancer-from-subnets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-access-point-name-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-access-point-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-listener-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-listener-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-policy-name-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-policy-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:deftype end-point-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (health-check (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-"))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or health-check-target common-lisp:null))
   (interval (common-lisp:error ":interval is required") :type
    (common-lisp:or health-check-interval common-lisp:null))
   (timeout (common-lisp:error ":timeout is required") :type
    (common-lisp:or health-check-timeout common-lisp:null))
   (unhealthy-threshold (common-lisp:error ":unhealthy-threshold is required")
    :type (common-lisp:or unhealthy-threshold common-lisp:null))
   (healthy-threshold (common-lisp:error ":healthy-threshold is required")
    :type (common-lisp:or healthy-threshold common-lisp:null)))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check))
   common-lisp:nil))
(common-lisp:deftype health-check-interval () 'common-lisp:integer)
(common-lisp:deftype health-check-target () 'common-lisp:string)
(common-lisp:deftype health-check-timeout () 'common-lisp:integer)
(common-lisp:deftype healthy-threshold () 'common-lisp:integer)
(common-lisp:deftype idle-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-state-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or instance-id common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (reason-code common-lisp:nil :type
    (common-lisp:or reason-code common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "ReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-states ()
   '(trivial-types:proper-list instance-state))
 (common-lisp:defun |make-instance-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-request-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-request-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-end-point-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-end-point-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scheme-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-scheme-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-security-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet-exception)))
(common-lisp:progn
 (common-lisp:deftype lbcookie-stickiness-policies ()
   '(trivial-types:proper-list lbcookie-stickiness-policy))
 (common-lisp:defun |make-lbcookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lbcookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lbcookie-stickiness-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-lbcookie-stickiness-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (cookie-expiration-period common-lisp:nil :type
    (common-lisp:or cookie-expiration-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lbcookie-stickiness-policy
                    'make-lbcookie-stickiness-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lbcookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (limit (:copier common-lisp:nil) (:conc-name "struct-shape-limit-"))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (max common-lisp:nil :type (common-lisp:or max common-lisp:null)))
 (common-lisp:export (common-lisp:list 'limit 'make-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits () '(trivial-types:proper-list limit))
 (common-lisp:defun |make-limits|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listener (:copier common-lisp:nil) (:conc-name "struct-shape-listener-"))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or protocol common-lisp:null))
   (load-balancer-port (common-lisp:error ":load-balancer-port is required")
    :type (common-lisp:or access-point-port common-lisp:null))
   (instance-protocol common-lisp:nil :type
    (common-lisp:or protocol common-lisp:null))
   (instance-port (common-lisp:error ":instance-port is required") :type
    (common-lisp:or instance-port common-lisp:null))
   (sslcertificate-id common-lisp:nil :type
    (common-lisp:or sslcertificate-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-protocol))
      (common-lisp:list
       (common-lisp:cons "InstanceProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sslcertificate-id))
      (common-lisp:list
       (common-lisp:cons "SSLCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-description-"))
   (listener common-lisp:nil :type (common-lisp:or listener common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-description 'make-listener-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listener-descriptions ()
   '(trivial-types:proper-list listener-description))
 (common-lisp:defun |make-listener-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'listener-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun |make-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition load-balancer-attribute-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'load-balancer-attribute-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-attributes-"))
   (cross-zone-load-balancing common-lisp:nil :type
    (common-lisp:or cross-zone-load-balancing common-lisp:null))
   (access-log common-lisp:nil :type
    (common-lisp:or access-log common-lisp:null))
   (connection-draining common-lisp:nil :type
    (common-lisp:or connection-draining common-lisp:null))
   (connection-settings common-lisp:nil :type
    (common-lisp:or connection-settings common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or additional-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-attributes 'make-load-balancer-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-zone-load-balancing))
      (common-lisp:list
       (common-lisp:cons "CrossZoneLoadBalancing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "AccessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-draining))
      (common-lisp:list
       (common-lisp:cons "ConnectionDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-description-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or access-point-name common-lisp:null))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null))
   (canonical-hosted-zone-name common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (canonical-hosted-zone-name-id common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (listener-descriptions common-lisp:nil :type
    (common-lisp:or listener-descriptions common-lisp:null))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (backend-server-descriptions common-lisp:nil :type
    (common-lisp:or backend-server-descriptions common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (subnets common-lisp:nil :type (common-lisp:or subnets common-lisp:null))
   (vpcid common-lisp:nil :type (common-lisp:or vpcid common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or health-check common-lisp:null))
   (source-security-group common-lisp:nil :type
    (common-lisp:or source-security-group common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-time common-lisp:null))
   (scheme common-lisp:nil :type
    (common-lisp:or load-balancer-scheme common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-description
                    'make-load-balancer-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneNameID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'listener-descriptions))
      (common-lisp:list
       (common-lisp:cons "ListenerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-server-descriptions))
      (common-lisp:list
       (common-lisp:cons "BackendServerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-descriptions ()
   '(trivial-types:proper-list load-balancer-description))
 (common-lisp:defun |make-load-balancer-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list access-point-name))
 (common-lisp:defun |make-load-balancer-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype load-balancer-names-max20 ()
   '(trivial-types:proper-list access-point-name))
 (common-lisp:defun |make-load-balancer-names-max20|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-scheme () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (modify-load-balancer-attributes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-load-balancer-attributes-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (load-balancer-attributes
    (common-lisp:error ":load-balancer-attributes is required") :type
    (common-lisp:or load-balancer-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-input
                    'make-modify-load-balancer-attributes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-load-balancer-attributes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-load-balancer-attributes-output-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or access-point-name common-lisp:null))
   (load-balancer-attributes common-lisp:nil :type
    (common-lisp:or load-balancer-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-output
                    'make-modify-load-balancer-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-permitted-exception)))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (policies (:copier common-lisp:nil) (:conc-name "struct-shape-policies-"))
   (app-cookie-stickiness-policies common-lisp:nil :type
    (common-lisp:or app-cookie-stickiness-policies common-lisp:null))
   (lbcookie-stickiness-policies common-lisp:nil :type
    (common-lisp:or lbcookie-stickiness-policies common-lisp:null))
   (other-policies common-lisp:nil :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policies 'make-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "AppCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lbcookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "LBCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-policies))
      (common-lisp:list
       (common-lisp:cons "OtherPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-attribute-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute 'make-policy-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-attribute-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-attribute-description-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute-description
                    'make-policy-attribute-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-attribute-descriptions ()
   '(trivial-types:proper-list policy-attribute-description))
 (common-lisp:defun |make-policy-attribute-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-attribute-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-attribute-type-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-attribute-type-description-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-type common-lisp:nil :type
    (common-lisp:or attribute-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or default-value common-lisp:null))
   (cardinality common-lisp:nil :type
    (common-lisp:or cardinality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-attribute-type-description
                    'make-policy-attribute-type-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cardinality))
      (common-lisp:list
       (common-lisp:cons "Cardinality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-attribute-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-attribute-type-descriptions ()
   '(trivial-types:proper-list policy-attribute-type-description))
 (common-lisp:defun |make-policy-attribute-type-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-attribute-type-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype policy-attributes ()
   '(trivial-types:proper-list policy-attribute))
 (common-lisp:defun |make-policy-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-description-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-type-name common-lisp:nil :type
    (common-lisp:or policy-type-name common-lisp:null))
   (policy-attribute-descriptions common-lisp:nil :type
    (common-lisp:or policy-attribute-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-description 'make-policy-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-attribute-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-descriptions ()
   '(trivial-types:proper-list policy-description))
 (common-lisp:defun |make-policy-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-names () '(trivial-types:proper-list policy-name))
 (common-lisp:defun |make-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition policy-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-type-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-type-description-"))
   (policy-type-name common-lisp:nil :type
    (common-lisp:or policy-type-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (policy-attribute-type-descriptions common-lisp:nil :type
    (common-lisp:or policy-attribute-type-descriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-type-description 'make-policy-type-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type-name))
      (common-lisp:list
       (common-lisp:cons "PolicyTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-attribute-type-descriptions))
      (common-lisp:list
       (common-lisp:cons "PolicyAttributeTypeDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-type-descriptions ()
   '(trivial-types:proper-list policy-type-description))
 (common-lisp:defun |make-policy-type-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-type-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-type-names ()
   '(trivial-types:proper-list policy-type-name))
 (common-lisp:defun |make-policy-type-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-type-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition policy-type-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-type-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype ports () '(trivial-types:proper-list access-point-port))
 (common-lisp:defun |make-ports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-point-port))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-end-points-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-end-points-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (instances (common-lisp:error ":instances is required") :type
    (common-lisp:or instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-end-points-input
                    'make-register-end-points-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-end-points-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-end-points-output-"))
   (instances common-lisp:nil :type
    (common-lisp:or instances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-end-points-output
                    'make-register-end-points-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-end-points-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-availability-zones-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-availability-zones-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or availability-zones common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-availability-zones-input
                    'make-remove-availability-zones-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-availability-zones-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-availability-zones-output-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-availability-zones-output
                    'make-remove-availability-zones-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-availability-zones-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-input-"))
   (load-balancer-names (common-lisp:error ":load-balancer-names is required")
    :type (common-lisp:or load-balancer-names common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-output-")))
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype sslcertificate-id () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:deftype security-group-name () 'common-lisp:string)
(common-lisp:deftype security-group-owner-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-listener-sslcertificate-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-listener-sslcertificate-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (load-balancer-port (common-lisp:error ":load-balancer-port is required")
    :type (common-lisp:or access-point-port common-lisp:null))
   (sslcertificate-id (common-lisp:error ":sslcertificate-id is required")
    :type (common-lisp:or sslcertificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-listener-sslcertificate-input
                    'make-set-load-balancer-listener-sslcertificate-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sslcertificate-id))
      (common-lisp:list
       (common-lisp:cons "SSLCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-listener-sslcertificate-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-listener-sslcertificate-output-")))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-listener-sslcertificate-output
                    'make-set-load-balancer-listener-sslcertificate-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-listener-sslcertificate-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-policies-for-backend-server-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-policies-for-backend-server-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (instance-port (common-lisp:error ":instance-port is required") :type
    (common-lisp:or end-point-port common-lisp:null))
   (policy-names (common-lisp:error ":policy-names is required") :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-for-backend-server-input
                    'make-set-load-balancer-policies-for-backend-server-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-policies-for-backend-server-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-policies-for-backend-server-output-")))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-for-backend-server-output
                    'make-set-load-balancer-policies-for-backend-server-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-for-backend-server-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-policies-of-listener-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-policies-of-listener-input-"))
   (load-balancer-name (common-lisp:error ":load-balancer-name is required")
    :type (common-lisp:or access-point-name common-lisp:null))
   (load-balancer-port (common-lisp:error ":load-balancer-port is required")
    :type (common-lisp:or access-point-port common-lisp:null))
   (policy-names (common-lisp:error ":policy-names is required") :type
    (common-lisp:or policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-of-listener-input
                    'make-set-load-balancer-policies-of-listener-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-load-balancer-policies-of-listener-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-load-balancer-policies-of-listener-output-")))
 (common-lisp:export
  (common-lisp:list 'set-load-balancer-policies-of-listener-output
                    'make-set-load-balancer-policies-of-listener-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-balancer-policies-of-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-security-group-"))
   (owner-alias common-lisp:nil :type
    (common-lisp:or security-group-owner-alias common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or security-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-security-group 'make-source-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-security-group))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition subnet-not-found-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-description-"))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or access-point-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-descriptions ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list tag-key-only))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-only))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-key-only (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-key-only-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-key-only 'make-tag-key-only))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-key-only))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-key-only))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-key-only))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-access-points-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-access-points-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-policies-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-policies-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:deftype unhealthy-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition unsupported-protocol-exception
     (elb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-protocol-exception)))
(common-lisp:deftype vpcid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names tags)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddTags"
                                                        "2012-06-01"))
      common-lisp:nil "AddTagsResult" *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun apply-security-groups-to-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name security-groups)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-security-groups-to-load-balancer-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ApplySecurityGroupsToLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "ApplySecurityGroupsToLoadBalancerResult" *error-map*)))
 (common-lisp:export 'apply-security-groups-to-load-balancer))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-to-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name subnets)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name subnets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-to-subnets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AttachLoadBalancerToSubnets"
                                                        "2012-06-01"))
      common-lisp:nil "AttachLoadBalancerToSubnetsResult" *error-map*)))
 (common-lisp:export 'attach-load-balancer-to-subnets))
(common-lisp:progn
 (common-lisp:defun configure-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name health-check)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name health-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-configure-health-check-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ConfigureHealthCheck"
                                                        "2012-06-01"))
      common-lisp:nil "ConfigureHealthCheckResult" *error-map*)))
 (common-lisp:export 'configure-health-check))
(common-lisp:progn
 (common-lisp:defun create-app-cookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     cookie-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name cookie-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-app-cookie-stickiness-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateAppCookieStickinessPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateAppCookieStickinessPolicyResult" *error-map*)))
 (common-lisp:export 'create-app-cookie-stickiness-policy))
(common-lisp:progn
 (common-lisp:defun create-lbcookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     cookie-expiration-period)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name
     cookie-expiration-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-lbcookie-stickiness-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLBCookieStickinessPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLBCookieStickinessPolicyResult" *error-map*)))
 (common-lisp:export 'create-lbcookie-stickiness-policy))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name listeners
                     availability-zones subnets security-groups scheme tags)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name listeners availability-zones
     subnets security-groups scheme tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerResult" *error-map*)))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name listeners)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name listeners))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancerListeners"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerListenersResult" *error-map*)))
 (common-lisp:export 'create-load-balancer-listeners))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name
                     policy-type-name policy-attributes)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-name policy-type-name
     policy-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancerPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "CreateLoadBalancerPolicyResult" *error-map*)))
 (common-lisp:export 'create-load-balancer-policy))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-point-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-ports)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-ports))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancerListeners"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerListenersResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer-listeners))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancerPolicy"
                                                        "2012-06-01"))
      common-lisp:nil "DeleteLoadBalancerPolicyResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer-policy))
(common-lisp:progn
 (common-lisp:defun deregister-instances-from-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-end-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeregisterInstancesFromLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DeregisterInstancesFromLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'deregister-instances-from-load-balancer))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size)
   (common-lisp:declare (common-lisp:ignorable marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAccountLimits"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeAccountLimitsResult" *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-instance-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-end-point-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeInstanceHealth"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeInstanceHealthResult" *error-map*)))
 (common-lisp:export 'describe-instance-health))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerAttributes"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-policies-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerPolicies"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerPoliciesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-policies))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-policy-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-type-names)
   (common-lisp:declare (common-lisp:ignorable policy-type-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-policy-types-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerPolicyTypes"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancerPolicyTypesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-policy-types))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-names marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancers"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTags"
                                                        "2012-06-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun detach-load-balancer-from-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name subnets)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name subnets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-load-balancer-from-subnets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetachLoadBalancerFromSubnets"
                                                        "2012-06-01"))
      common-lisp:nil "DetachLoadBalancerFromSubnetsResult" *error-map*)))
 (common-lisp:export 'detach-load-balancer-from-subnets))
(common-lisp:progn
 (common-lisp:defun disable-availability-zones-for-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-availability-zones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DisableAvailabilityZonesForLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "DisableAvailabilityZonesForLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'disable-availability-zones-for-load-balancer))
(common-lisp:progn
 (common-lisp:defun enable-availability-zones-for-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-availability-zones-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "EnableAvailabilityZonesForLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "EnableAvailabilityZonesForLoadBalancerResult"
      *error-map*)))
 (common-lisp:export 'enable-availability-zones-for-load-balancer))
(common-lisp:progn
 (common-lisp:defun modify-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name
                     load-balancer-attributes)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyLoadBalancerAttributes"
                                                        "2012-06-01"))
      common-lisp:nil "ModifyLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'modify-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun register-instances-with-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instances)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-end-points-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RegisterInstancesWithLoadBalancer"
                                                        "2012-06-01"))
      common-lisp:nil "RegisterInstancesWithLoadBalancerResult" *error-map*)))
 (common-lisp:export 'register-instances-with-load-balancer))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-names tags)
   (common-lisp:declare (common-lisp:ignorable load-balancer-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveTags"
                                                        "2012-06-01"))
      common-lisp:nil "RemoveTagsResult" *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-listener-sslcertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-port
                     sslcertificate-id)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-port
     sslcertificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-listener-sslcertificate-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerListenerSSLCertificate"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerListenerSSLCertificateResult"
      *error-map*)))
 (common-lisp:export 'set-load-balancer-listener-sslcertificate))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-policies-for-backend-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-port
                     policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-port policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-policies-for-backend-server-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerPoliciesForBackendServer"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerPoliciesForBackendServerResult"
      *error-map*)))
 (common-lisp:export 'set-load-balancer-policies-for-backend-server))
(common-lisp:progn
 (common-lisp:defun set-load-balancer-policies-of-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name load-balancer-port
                     policy-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name load-balancer-port policy-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-balancer-policies-of-listener-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetLoadBalancerPoliciesOfListener"
                                                        "2012-06-01"))
      common-lisp:nil "SetLoadBalancerPoliciesOfListenerResult" *error-map*)))
 (common-lisp:export 'set-load-balancer-policies-of-listener))
