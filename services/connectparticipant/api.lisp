;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/connectparticipant/api
  (:use)
  (:nicknames #:aws/connectparticipant)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/connectparticipant/api)
(common-lisp:progn
 (common-lisp:defclass connectparticipant-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "connectparticipant"))
 (common-lisp:export 'connectparticipant-request))
(common-lisp:progn
 (common-lisp:define-condition connectparticipant-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'connectparticipant-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype artifact-id () 'common-lisp:string)
(common-lisp:deftype artifact-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachment-id-list ()
   '(trivial-types:proper-list artifact-id))
 (common-lisp:defun |make-attachment-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attachment-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-attachment-item-"))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (attachment-id common-lisp:nil :type
    (common-lisp:or artifact-id common-lisp:null))
   (attachment-name common-lisp:nil :type
    (common-lisp:or attachment-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or artifact-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attachment-item 'make-attachment-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-name))
      (common-lisp:list
       (common-lisp:cons "AttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-item))
   common-lisp:nil))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:deftype attachment-size-in-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype attachments ()
   '(trivial-types:proper-list attachment-item))
 (common-lisp:defun |make-attachments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bool () 'common-lisp:boolean)
(common-lisp:deftype chat-content () 'common-lisp:string)
(common-lisp:deftype chat-content-type () 'common-lisp:string)
(common-lisp:deftype chat-item-id () 'common-lisp:string)
(common-lisp:deftype chat-item-type () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (complete-attachment-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-attachment-upload-request-"))
   (attachment-ids (common-lisp:error ":attachment-ids is required") :type
    (common-lisp:or attachment-id-list common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or non-empty-client-token common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-attachment-upload-request
                    'make-complete-attachment-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-ids))
      (common-lisp:list
       (common-lisp:cons "AttachmentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-attachment-upload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-attachment-upload-response-")))
 (common-lisp:export
  (common-lisp:list 'complete-attachment-upload-response
                    'make-complete-attachment-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-credentials-"))
   (connection-token common-lisp:nil :type
    (common-lisp:or participant-token common-lisp:null))
   (expiry common-lisp:nil :type
    (common-lisp:or iso8601datetime common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-credentials 'make-connection-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:list
       (common-lisp:cons "ConnectionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry))
      (common-lisp:list
       (common-lisp:cons "Expiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   common-lisp:nil))
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-type-list ()
   '(trivial-types:proper-list connection-type))
 (common-lisp:defun |make-connection-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-id () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-participant-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-participant-connection-request-"))
   (type common-lisp:nil :type
    (common-lisp:or connection-type-list common-lisp:null))
   (participant-token (common-lisp:error ":participant-token is required")
    :type (common-lisp:or participant-token common-lisp:null))
   (connect-participant common-lisp:nil :type
    (common-lisp:or bool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-participant-connection-request
                    'make-create-participant-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-participant))
      (common-lisp:list
       (common-lisp:cons "ConnectParticipant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-participant-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-participant-connection-response-"))
   (websocket common-lisp:nil :type
    (common-lisp:or websocket common-lisp:null))
   (connection-credentials common-lisp:nil :type
    (common-lisp:or connection-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-participant-connection-response
                    'make-create-participant-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'websocket))
      (common-lisp:list
       (common-lisp:cons "Websocket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-credentials))
      (common-lisp:list
       (common-lisp:cons "ConnectionCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disconnect-participant-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disconnect-participant-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disconnect-participant-request
                    'make-disconnect-participant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disconnect-participant-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disconnect-participant-response-")))
 (common-lisp:export
  (common-lisp:list 'disconnect-participant-response
                    'make-disconnect-participant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-attachment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-attachment-request-"))
   (attachment-id (common-lisp:error ":attachment-id is required") :type
    (common-lisp:or artifact-id common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-attachment-request 'make-get-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-attachment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-attachment-response-"))
   (url common-lisp:nil :type
    (common-lisp:or pre-signed-attachment-url common-lisp:null))
   (url-expiry common-lisp:nil :type
    (common-lisp:or iso8601datetime common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-attachment-response 'make-get-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "UrlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transcript-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transcript-request-"))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (scan-direction common-lisp:nil :type
    (common-lisp:or scan-direction common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-key common-lisp:null))
   (start-position common-lisp:nil :type
    (common-lisp:or start-position common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transcript-request 'make-get-transcript-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-direction))
      (common-lisp:list
       (common-lisp:cons "ScanDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transcript-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transcript-response-"))
   (initial-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (transcript common-lisp:nil :type
    (common-lisp:or transcript common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transcript-response 'make-get-transcript-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   common-lisp:nil))
(common-lisp:deftype iso8601datetime () 'common-lisp:string)
(common-lisp:deftype instant () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (item (:copier common-lisp:nil) (:conc-name "struct-shape-item-"))
   (absolute-time common-lisp:nil :type
    (common-lisp:or instant common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or chat-content common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or chat-content-type common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or chat-item-id common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or chat-item-type common-lisp:null))
   (participant-id common-lisp:nil :type
    (common-lisp:or participant-id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (attachments common-lisp:nil :type
    (common-lisp:or attachments common-lisp:null))
   (message-metadata common-lisp:nil :type
    (common-lisp:or message-metadata common-lisp:null))
   (related-contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null))
   (contact-id common-lisp:nil :type
    (common-lisp:or contact-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'item 'make-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-id))
      (common-lisp:list
       (common-lisp:cons "ParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-metadata))
      (common-lisp:list
       (common-lisp:cons "MessageMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-contact-id))
      (common-lisp:list
       (common-lisp:cons "RelatedContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (message-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-metadata-"))
   (message-id common-lisp:nil :type
    (common-lisp:or chat-item-id common-lisp:null))
   (receipts common-lisp:nil :type (common-lisp:or receipts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'message-metadata 'make-message-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipts))
      (common-lisp:list
       (common-lisp:cons "Receipts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-metadata))
   common-lisp:nil))
(common-lisp:deftype most-recent () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-client-token () 'common-lisp:string)
(common-lisp:deftype participant-id () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype participant-token () 'common-lisp:string)
(common-lisp:deftype pre-signed-attachment-url () 'common-lisp:string)
(common-lisp:deftype pre-signed-connection-url () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (receipt (:copier common-lisp:nil) (:conc-name "struct-shape-receipt-"))
   (delivered-timestamp common-lisp:nil :type
    (common-lisp:or instant common-lisp:null))
   (read-timestamp common-lisp:nil :type
    (common-lisp:or instant common-lisp:null))
   (recipient-participant-id common-lisp:nil :type
    (common-lisp:or participant-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'receipt 'make-receipt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivered-timestamp))
      (common-lisp:list
       (common-lisp:cons "DeliveredTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-timestamp))
      (common-lisp:list
       (common-lisp:cons "ReadTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recipient-participant-id))
      (common-lisp:list
       (common-lisp:cons "RecipientParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype receipts () '(trivial-types:proper-list receipt))
 (common-lisp:defun |make-receipts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scan-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (send-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-event-request-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or chat-content-type common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or chat-content common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-event-request 'make-send-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-event-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-event-response-"))
   (id common-lisp:nil :type (common-lisp:or chat-item-id common-lisp:null))
   (absolute-time common-lisp:nil :type
    (common-lisp:or instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-event-response 'make-send-event-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-message-request-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or chat-content-type common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or chat-content common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-message-request 'make-send-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-message-response-"))
   (id common-lisp:nil :type (common-lisp:or chat-item-id common-lisp:null))
   (absolute-time common-lisp:nil :type
    (common-lisp:or instant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-message-response 'make-send-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-attachment-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-attachment-upload-request-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or content-type common-lisp:null))
   (attachment-size-in-bytes
    (common-lisp:error ":attachment-size-in-bytes is required") :type
    (common-lisp:or attachment-size-in-bytes common-lisp:null))
   (attachment-name (common-lisp:error ":attachment-name is required") :type
    (common-lisp:or attachment-name common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or non-empty-client-token common-lisp:null))
   (connection-token (common-lisp:error ":connection-token is required") :type
    (common-lisp:or participant-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-attachment-upload-request
                    'make-start-attachment-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "AttachmentSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-name))
      (common-lisp:list
       (common-lisp:cons "AttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-attachment-upload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-attachment-upload-response-"))
   (attachment-id common-lisp:nil :type
    (common-lisp:or artifact-id common-lisp:null))
   (upload-metadata common-lisp:nil :type
    (common-lisp:or upload-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-attachment-upload-response
                    'make-start-attachment-upload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-metadata))
      (common-lisp:list
       (common-lisp:cons "UploadMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-position (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-position-"))
   (id common-lisp:nil :type (common-lisp:or chat-item-id common-lisp:null))
   (absolute-time common-lisp:nil :type
    (common-lisp:or instant common-lisp:null))
   (most-recent common-lisp:nil :type
    (common-lisp:or most-recent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'start-position 'make-start-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'most-recent))
      (common-lisp:list
       (common-lisp:cons "MostRecent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:deftype transcript () '(trivial-types:proper-list item))
 (common-lisp:defun |make-transcript|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-metadata-"))
   (url common-lisp:nil :type
    (common-lisp:or upload-metadata-url common-lisp:null))
   (url-expiry common-lisp:nil :type
    (common-lisp:or iso8601datetime common-lisp:null))
   (headers-to-include common-lisp:nil :type
    (common-lisp:or upload-metadata-signed-headers common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upload-metadata 'make-upload-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "UrlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-to-include))
      (common-lisp:list
       (common-lisp:cons "HeadersToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upload-metadata-signed-headers ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-upload-metadata-signed-headers|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype upload-metadata-signed-headers-key () 'common-lisp:string)
(common-lisp:deftype upload-metadata-signed-headers-value ()
  'common-lisp:string)
(common-lisp:deftype upload-metadata-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (websocket (:copier common-lisp:nil)
      (:conc-name "struct-shape-websocket-"))
   (url common-lisp:nil :type
    (common-lisp:or pre-signed-connection-url common-lisp:null))
   (connection-expiry common-lisp:nil :type
    (common-lisp:or iso8601datetime common-lisp:null)))
 (common-lisp:export (common-lisp:list 'websocket 'make-websocket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input websocket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input websocket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-expiry))
      (common-lisp:list
       (common-lisp:cons "ConnectionExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input websocket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun complete-attachment-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-ids client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable attachment-ids client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-complete-attachment-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/complete-attachment-upload" "CompleteAttachmentUpload"
        "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'complete-attachment-upload))
(common-lisp:progn
 (common-lisp:defun create-participant-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type participant-token
                     connect-participant)
   (common-lisp:declare
    (common-lisp:ignorable type participant-token connect-participant))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-participant-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/connection" "CreateParticipantConnection" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-participant-connection))
(common-lisp:progn
 (common-lisp:defun disconnect-participant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connection-token)
   (common-lisp:declare (common-lisp:ignorable client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disconnect-participant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/disconnect" "DisconnectParticipant" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disconnect-participant))
(common-lisp:progn
 (common-lisp:defun get-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id connection-token)
   (common-lisp:declare (common-lisp:ignorable attachment-id connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/attachment" "GetAttachment" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-attachment))
(common-lisp:progn
 (common-lisp:defun get-transcript
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id max-results next-token
                     scan-direction sort-order start-position connection-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id max-results next-token scan-direction
     sort-order start-position connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transcript-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/transcript" "GetTranscript" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transcript))
(common-lisp:progn
 (common-lisp:defun send-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type content client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type content client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/event" "SendEvent" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-event))
(common-lisp:progn
 (common-lisp:defun send-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type content client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type content client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/message" "SendMessage" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-message))
(common-lisp:progn
 (common-lisp:defun start-attachment-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type attachment-size-in-bytes
                     attachment-name client-token connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type attachment-size-in-bytes
     attachment-name client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-attachment-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        "/participant/start-attachment-upload" "StartAttachmentUpload"
        "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-attachment-upload))
