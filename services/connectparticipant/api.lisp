;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/connectparticipant/api
  (:use)
  (:nicknames #:aws/connectparticipant)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/connectparticipant/api)
(common-lisp:progn
 (common-lisp:defclass connectparticipant-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "connectparticipant"
                        :protocol :rest-json))
 (common-lisp:export 'connectparticipant-request))
(common-lisp:progn
 (common-lisp:define-condition connectparticipant-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'connectparticipant-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype artifact-id () 'common-lisp:string)
(common-lisp:deftype artifact-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachment-id-list ()
   '(trivial-types:proper-list artifact-id))
 (common-lisp:defun |make-attachment-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attachment-item common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or artifact-status common-lisp:null)
                         :accessor %attachment-item-status :initform
                         common-lisp:nil)
                        (attachment-name :initarg :attachment-name :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor %attachment-item-attachment-name :initform
                         common-lisp:nil)
                        (attachment-id :initarg :attachment-id :type
                         (common-lisp:or artifact-id common-lisp:null)
                         :accessor %attachment-item-attachment-id :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %attachment-item-content-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attachment-item 'make-attachment-item))
 (common-lisp:defun make-attachment-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status attachment-name attachment-id
                     content-type)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-name))
      (common-lisp:list
       (common-lisp:cons "AttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-item))
   common-lisp:nil))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:deftype attachment-size-in-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype attachments ()
   '(trivial-types:proper-list attachment-item))
 (common-lisp:defun |make-attachments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bool () 'common-lisp:boolean)
(common-lisp:deftype chat-content () 'common-lisp:string)
(common-lisp:deftype chat-content-type () 'common-lisp:string)
(common-lisp:deftype chat-item-id () 'common-lisp:string)
(common-lisp:deftype chat-item-type () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass complete-attachment-upload-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor
                         %complete-attachment-upload-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or non-empty-client-token
                                         common-lisp:null)
                         :accessor
                         %complete-attachment-upload-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (attachment-ids :initarg :attachment-ids :type
                         (common-lisp:or attachment-id-list common-lisp:null)
                         :accessor
                         %complete-attachment-upload-request-attachment-ids
                         :initform
                         (common-lisp:error ":attachment-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'complete-attachment-upload-request
                    'make-complete-attachment-upload-request))
 (common-lisp:defun make-complete-attachment-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token client-token
                     attachment-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-attachment-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-ids))
      (common-lisp:list
       (common-lisp:cons "AttachmentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-attachment-upload-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'complete-attachment-upload-response
                    'make-complete-attachment-upload-response))
 (common-lisp:defun make-complete-attachment-upload-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-attachment-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-attachment-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connection-credentials common-lisp:nil
                       ((expiry :initarg :expiry :type
                         (common-lisp:or iso8601datetime common-lisp:null)
                         :accessor %connection-credentials-expiry :initform
                         common-lisp:nil)
                        (connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor %connection-credentials-connection-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-credentials 'make-connection-credentials))
 (common-lisp:defun make-connection-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiry connection-token)
   (common-lisp:apply #'common-lisp:make-instance 'connection-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:list
       (common-lisp:cons "ConnectionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry))
      (common-lisp:list
       (common-lisp:cons "Expiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-credentials))
   common-lisp:nil))
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-type-list ()
   '(trivial-types:proper-list connection-type))
 (common-lisp:defun |make-connection-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-id () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-participant-connection-request common-lisp:nil
                       ((connect-participant :initarg :connect-participant
                         :type (common-lisp:or bool common-lisp:null) :accessor
                         %create-participant-connection-request-connect-participant
                         :initform common-lisp:nil)
                        (participant-token :initarg :participant-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor
                         %create-participant-connection-request-participant-token
                         :initform
                         (common-lisp:error ":participant-token is required"))
                        (type :initarg :type :type
                         (common-lisp:or connection-type-list common-lisp:null)
                         :accessor %create-participant-connection-request-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-participant-connection-request
                    'make-create-participant-connection-request))
 (common-lisp:defun make-create-participant-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connect-participant participant-token
                     type)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-participant-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-participant))
      (common-lisp:list
       (common-lisp:cons "ConnectParticipant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-participant-connection-response common-lisp:nil
                       ((connection-credentials :initarg
                         :connection-credentials :type
                         (common-lisp:or connection-credentials
                                         common-lisp:null)
                         :accessor
                         %create-participant-connection-response-connection-credentials
                         :initform common-lisp:nil)
                        (websocket :initarg :websocket :type
                         (common-lisp:or websocket common-lisp:null) :accessor
                         %create-participant-connection-response-websocket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-participant-connection-response
                    'make-create-participant-connection-response))
 (common-lisp:defun make-create-participant-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-credentials websocket)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-participant-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'websocket))
      (common-lisp:list
       (common-lisp:cons "Websocket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-credentials))
      (common-lisp:list
       (common-lisp:cons "ConnectionCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-participant-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disconnect-participant-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor
                         %disconnect-participant-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %disconnect-participant-request-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disconnect-participant-request
                    'make-disconnect-participant-request))
 (common-lisp:defun make-disconnect-participant-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token client-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'disconnect-participant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disconnect-participant-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disconnect-participant-response
                    'make-disconnect-participant-response))
 (common-lisp:defun make-disconnect-participant-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disconnect-participant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-participant-response))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-attachment-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor %get-attachment-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (attachment-id :initarg :attachment-id :type
                         (common-lisp:or artifact-id common-lisp:null)
                         :accessor %get-attachment-request-attachment-id
                         :initform
                         (common-lisp:error ":attachment-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-attachment-request 'make-get-attachment-request))
 (common-lisp:defun make-get-attachment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token attachment-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-attachment-response common-lisp:nil
                       ((url-expiry :initarg :url-expiry :type
                         (common-lisp:or iso8601datetime common-lisp:null)
                         :accessor %get-attachment-response-url-expiry
                         :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or pre-signed-attachment-url
                                         common-lisp:null)
                         :accessor %get-attachment-response-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-attachment-response 'make-get-attachment-response))
 (common-lisp:defun make-get-attachment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url-expiry url)
   (common-lisp:apply #'common-lisp:make-instance 'get-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "UrlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transcript-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor %get-transcript-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (start-position :initarg :start-position :type
                         (common-lisp:or start-position common-lisp:null)
                         :accessor %get-transcript-request-start-position
                         :initform common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-key common-lisp:null) :accessor
                         %get-transcript-request-sort-order :initform
                         common-lisp:nil)
                        (scan-direction :initarg :scan-direction :type
                         (common-lisp:or scan-direction common-lisp:null)
                         :accessor %get-transcript-request-scan-direction
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-transcript-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-transcript-request-max-results
                         :initform common-lisp:nil)
                        (contact-id :initarg :contact-id :type
                         (common-lisp:or contact-id common-lisp:null) :accessor
                         %get-transcript-request-contact-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-transcript-request 'make-get-transcript-request))
 (common-lisp:defun make-get-transcript-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token start-position
                     sort-order scan-direction next-token max-results
                     contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-transcript-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-direction))
      (common-lisp:list
       (common-lisp:cons "ScanDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transcript-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-transcript-response-next-token :initform
                         common-lisp:nil)
                        (transcript :initarg :transcript :type
                         (common-lisp:or transcript common-lisp:null) :accessor
                         %get-transcript-response-transcript :initform
                         common-lisp:nil)
                        (initial-contact-id :initarg :initial-contact-id :type
                         (common-lisp:or contact-id common-lisp:null) :accessor
                         %get-transcript-response-initial-contact-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-transcript-response 'make-get-transcript-response))
 (common-lisp:defun make-get-transcript-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token transcript initial-contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-transcript-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-contact-id))
      (common-lisp:list
       (common-lisp:cons "InitialContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcript-response))
   common-lisp:nil))
(common-lisp:deftype iso8601datetime () 'common-lisp:string)
(common-lisp:deftype instant () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass item common-lisp:nil
                       ((contact-id :initarg :contact-id :type
                         (common-lisp:or contact-id common-lisp:null) :accessor
                         %item-contact-id :initform common-lisp:nil)
                        (related-contact-id :initarg :related-contact-id :type
                         (common-lisp:or contact-id common-lisp:null) :accessor
                         %item-related-contact-id :initform common-lisp:nil)
                        (message-metadata :initarg :message-metadata :type
                         (common-lisp:or message-metadata common-lisp:null)
                         :accessor %item-message-metadata :initform
                         common-lisp:nil)
                        (attachments :initarg :attachments :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor %item-attachments :initform common-lisp:nil)
                        (participant-role :initarg :participant-role :type
                         (common-lisp:or participant-role common-lisp:null)
                         :accessor %item-participant-role :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %item-display-name :initform
                         common-lisp:nil)
                        (participant-id :initarg :participant-id :type
                         (common-lisp:or participant-id common-lisp:null)
                         :accessor %item-participant-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or chat-item-type common-lisp:null)
                         :accessor %item-type :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or chat-item-id common-lisp:null)
                         :accessor %item-id :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or chat-content-type common-lisp:null)
                         :accessor %item-content-type :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or chat-content common-lisp:null)
                         :accessor %item-content :initform common-lisp:nil)
                        (absolute-time :initarg :absolute-time :type
                         (common-lisp:or instant common-lisp:null) :accessor
                         %item-absolute-time :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'item 'make-item))
 (common-lisp:defun make-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id related-contact-id
                     message-metadata attachments participant-role display-name
                     participant-id type id content-type content absolute-time)
   (common-lisp:apply #'common-lisp:make-instance 'item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-id))
      (common-lisp:list
       (common-lisp:cons "ParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-metadata))
      (common-lisp:list
       (common-lisp:cons "MessageMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-contact-id))
      (common-lisp:list
       (common-lisp:cons "RelatedContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "ContactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-metadata common-lisp:nil
                       ((receipts :initarg :receipts :type
                         (common-lisp:or receipts common-lisp:null) :accessor
                         %message-metadata-receipts :initform common-lisp:nil)
                        (message-id :initarg :message-id :type
                         (common-lisp:or chat-item-id common-lisp:null)
                         :accessor %message-metadata-message-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'message-metadata 'make-message-metadata))
 (common-lisp:defun make-message-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key receipts message-id)
   (common-lisp:apply #'common-lisp:make-instance 'message-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'receipts))
      (common-lisp:list
       (common-lisp:cons "Receipts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-metadata))
   common-lisp:nil))
(common-lisp:deftype most-recent () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-client-token () 'common-lisp:string)
(common-lisp:deftype participant-id () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype participant-token () 'common-lisp:string)
(common-lisp:deftype pre-signed-attachment-url () 'common-lisp:string)
(common-lisp:deftype pre-signed-connection-url () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass receipt common-lisp:nil
                       ((recipient-participant-id :initarg
                         :recipient-participant-id :type
                         (common-lisp:or participant-id common-lisp:null)
                         :accessor %receipt-recipient-participant-id :initform
                         common-lisp:nil)
                        (read-timestamp :initarg :read-timestamp :type
                         (common-lisp:or instant common-lisp:null) :accessor
                         %receipt-read-timestamp :initform common-lisp:nil)
                        (delivered-timestamp :initarg :delivered-timestamp
                         :type (common-lisp:or instant common-lisp:null)
                         :accessor %receipt-delivered-timestamp :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'receipt 'make-receipt))
 (common-lisp:defun make-receipt
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recipient-participant-id read-timestamp
                     delivered-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'receipt
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input receipt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivered-timestamp))
      (common-lisp:list
       (common-lisp:cons "DeliveredTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-timestamp))
      (common-lisp:list
       (common-lisp:cons "ReadTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recipient-participant-id))
      (common-lisp:list
       (common-lisp:cons "RecipientParticipantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input receipt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype receipts () '(trivial-types:proper-list receipt))
 (common-lisp:defun |make-receipts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list receipt))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scan-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass send-event-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor %send-event-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %send-event-request-client-token :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or chat-content common-lisp:null)
                         :accessor %send-event-request-content :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or chat-content-type common-lisp:null)
                         :accessor %send-event-request-content-type :initform
                         (common-lisp:error ":content-type is required"))))
 (common-lisp:export
  (common-lisp:list 'send-event-request 'make-send-event-request))
 (common-lisp:defun make-send-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token client-token content
                     content-type)
   (common-lisp:apply #'common-lisp:make-instance 'send-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-event-response common-lisp:nil
                       ((absolute-time :initarg :absolute-time :type
                         (common-lisp:or instant common-lisp:null) :accessor
                         %send-event-response-absolute-time :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or chat-item-id common-lisp:null)
                         :accessor %send-event-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-event-response 'make-send-event-response))
 (common-lisp:defun make-send-event-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key absolute-time id)
   (common-lisp:apply #'common-lisp:make-instance 'send-event-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-event-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-event-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-event-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-message-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor %send-message-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %send-message-request-client-token :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or chat-content common-lisp:null)
                         :accessor %send-message-request-content :initform
                         (common-lisp:error ":content is required"))
                        (content-type :initarg :content-type :type
                         (common-lisp:or chat-content-type common-lisp:null)
                         :accessor %send-message-request-content-type :initform
                         (common-lisp:error ":content-type is required"))))
 (common-lisp:export
  (common-lisp:list 'send-message-request 'make-send-message-request))
 (common-lisp:defun make-send-message-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token client-token content
                     content-type)
   (common-lisp:apply #'common-lisp:make-instance 'send-message-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-message-response common-lisp:nil
                       ((absolute-time :initarg :absolute-time :type
                         (common-lisp:or instant common-lisp:null) :accessor
                         %send-message-response-absolute-time :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or chat-item-id common-lisp:null)
                         :accessor %send-message-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-message-response 'make-send-message-response))
 (common-lisp:defun make-send-message-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key absolute-time id)
   (common-lisp:apply #'common-lisp:make-instance 'send-message-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-attachment-upload-request common-lisp:nil
                       ((connection-token :initarg :connection-token :type
                         (common-lisp:or participant-token common-lisp:null)
                         :accessor
                         %start-attachment-upload-request-connection-token
                         :initform
                         (common-lisp:error ":connection-token is required"))
                        (client-token :initarg :client-token :type
                         (common-lisp:or non-empty-client-token
                                         common-lisp:null)
                         :accessor
                         %start-attachment-upload-request-client-token
                         :initform
                         (common-lisp:error ":client-token is required"))
                        (attachment-name :initarg :attachment-name :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor
                         %start-attachment-upload-request-attachment-name
                         :initform
                         (common-lisp:error ":attachment-name is required"))
                        (attachment-size-in-bytes :initarg
                         :attachment-size-in-bytes :type
                         (common-lisp:or attachment-size-in-bytes
                                         common-lisp:null)
                         :accessor
                         %start-attachment-upload-request-attachment-size-in-bytes
                         :initform
                         (common-lisp:error
                          ":attachment-size-in-bytes is required"))
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         %start-attachment-upload-request-content-type
                         :initform
                         (common-lisp:error ":content-type is required"))))
 (common-lisp:export
  (common-lisp:list 'start-attachment-upload-request
                    'make-start-attachment-upload-request))
 (common-lisp:defun make-start-attachment-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-token client-token
                     attachment-name attachment-size-in-bytes content-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-attachment-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-token))
      (common-lisp:cons "X-Amz-Bearer" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "AttachmentSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-name))
      (common-lisp:list
       (common-lisp:cons "AttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-attachment-upload-response common-lisp:nil
                       ((upload-metadata :initarg :upload-metadata :type
                         (common-lisp:or upload-metadata common-lisp:null)
                         :accessor
                         %start-attachment-upload-response-upload-metadata
                         :initform common-lisp:nil)
                        (attachment-id :initarg :attachment-id :type
                         (common-lisp:or artifact-id common-lisp:null)
                         :accessor
                         %start-attachment-upload-response-attachment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-attachment-upload-response
                    'make-start-attachment-upload-response))
 (common-lisp:defun make-start-attachment-upload-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-metadata attachment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-attachment-upload-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-metadata))
      (common-lisp:list
       (common-lisp:cons "UploadMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-attachment-upload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-position common-lisp:nil
                       ((most-recent :initarg :most-recent :type
                         (common-lisp:or most-recent common-lisp:null)
                         :accessor %start-position-most-recent :initform
                         common-lisp:nil)
                        (absolute-time :initarg :absolute-time :type
                         (common-lisp:or instant common-lisp:null) :accessor
                         %start-position-absolute-time :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or chat-item-id common-lisp:null)
                         :accessor %start-position-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'start-position 'make-start-position))
 (common-lisp:defun make-start-position
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key most-recent absolute-time id)
   (common-lisp:apply #'common-lisp:make-instance 'start-position
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'most-recent))
      (common-lisp:list
       (common-lisp:cons "MostRecent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:deftype transcript () '(trivial-types:proper-list item))
 (common-lisp:defun |make-transcript|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass upload-metadata common-lisp:nil
                       ((headers-to-include :initarg :headers-to-include :type
                         (common-lisp:or upload-metadata-signed-headers
                                         common-lisp:null)
                         :accessor %upload-metadata-headers-to-include
                         :initform common-lisp:nil)
                        (url-expiry :initarg :url-expiry :type
                         (common-lisp:or iso8601datetime common-lisp:null)
                         :accessor %upload-metadata-url-expiry :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or upload-metadata-url common-lisp:null)
                         :accessor %upload-metadata-url :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'upload-metadata 'make-upload-metadata))
 (common-lisp:defun make-upload-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key headers-to-include url-expiry url)
   (common-lisp:apply #'common-lisp:make-instance 'upload-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-expiry))
      (common-lisp:list
       (common-lisp:cons "UrlExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-to-include))
      (common-lisp:list
       (common-lisp:cons "HeadersToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upload-metadata-signed-headers ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-upload-metadata-signed-headers|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype upload-metadata-signed-headers-key () 'common-lisp:string)
(common-lisp:deftype upload-metadata-signed-headers-value ()
  'common-lisp:string)
(common-lisp:deftype upload-metadata-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (connectparticipant-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass websocket common-lisp:nil
                       ((connection-expiry :initarg :connection-expiry :type
                         (common-lisp:or iso8601datetime common-lisp:null)
                         :accessor %websocket-connection-expiry :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or pre-signed-connection-url
                                         common-lisp:null)
                         :accessor %websocket-url :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'websocket 'make-websocket))
 (common-lisp:defun make-websocket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-expiry url)
   (common-lisp:apply #'common-lisp:make-instance 'websocket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input websocket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input websocket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-expiry))
      (common-lisp:list
       (common-lisp:cons "ConnectionExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input websocket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun complete-attachment-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-ids client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable attachment-ids client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-complete-attachment-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/complete-attachment-upload"
        "CompleteAttachmentUpload" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'complete-attachment-upload))
(common-lisp:progn
 (common-lisp:defun create-participant-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type participant-token
                     connect-participant)
   (common-lisp:declare
    (common-lisp:ignorable type participant-token connect-participant))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-participant-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/connection" "CreateParticipantConnection"
        "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-participant-connection))
(common-lisp:progn
 (common-lisp:defun disconnect-participant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connection-token)
   (common-lisp:declare (common-lisp:ignorable client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disconnect-participant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/disconnect" "DisconnectParticipant"
        "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disconnect-participant))
(common-lisp:progn
 (common-lisp:defun get-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id connection-token)
   (common-lisp:declare (common-lisp:ignorable attachment-id connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/attachment" "GetAttachment" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-attachment))
(common-lisp:progn
 (common-lisp:defun get-transcript
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id max-results next-token
                     scan-direction sort-order start-position connection-token)
   (common-lisp:declare
    (common-lisp:ignorable contact-id max-results next-token scan-direction
     sort-order start-position connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transcript-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/transcript" "GetTranscript" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transcript))
(common-lisp:progn
 (common-lisp:defun send-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type content client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type content client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/event" "SendEvent" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-event))
(common-lisp:progn
 (common-lisp:defun send-message
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type content client-token
                     connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type content client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-message-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/message" "SendMessage" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-message))
(common-lisp:progn
 (common-lisp:defun start-attachment-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content-type attachment-size-in-bytes
                     attachment-name client-token connection-token)
   (common-lisp:declare
    (common-lisp:ignorable content-type attachment-size-in-bytes
     attachment-name client-token connection-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-attachment-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectparticipant-request aws-sdk/generator/operation::input "POST"
        :rest-json "/participant/start-attachment-upload"
        "StartAttachmentUpload" "2018-09-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-attachment-upload))
