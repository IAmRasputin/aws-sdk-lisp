;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/amplifyuibuilder/api
  (:use)
  (:nicknames #:aws/amplifyuibuilder)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amplifyuibuilder/api)
(common-lisp:progn
 (common-lisp:defclass amplifyuibuilder-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "amplifyuibuilder" :protocol
                        :rest-json))
 (common-lisp:export 'amplifyuibuilder-request))
(common-lisp:progn
 (common-lisp:define-condition amplifyuibuilder-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amplifyuibuilder-error))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:defclass action-parameters common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or mutation-action-set-state-parameter
                                         common-lisp:null)
                         :accessor %action-parameters-state :initform
                         common-lisp:nil)
                        (fields :initarg :|fields| :type
                         (common-lisp:or component-properties common-lisp:null)
                         :accessor %action-parameters-fields :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-id :initform
                         common-lisp:nil)
                        (model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %action-parameters-model :initform common-lisp:nil)
                        (global :initarg :|global| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-global :initform
                         common-lisp:nil)
                        (target :initarg :|target| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-target :initform
                         common-lisp:nil)
                        (anchor :initarg :|anchor| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-anchor :initform
                         common-lisp:nil)
                        (url :initarg :|url| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-url :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %action-parameters-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-parameters 'make-action-parameters))
 (common-lisp:defun make-action-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state fields id model global target
                     anchor url type)
   (common-lisp:apply #'common-lisp:make-instance 'action-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anchor))
      (common-lisp:list
       (common-lisp:cons "anchor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global))
      (common-lisp:list
       (common-lisp:cons "global"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-parameters))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass component common-lisp:nil
                       ((schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-schema-version :initform common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or component-events common-lisp:null)
                         :accessor %component-events :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %component-tags :initform common-lisp:nil)
                        (modified-at :initarg :|modifiedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %component-modified-at :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %component-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (collection-properties :initarg :|collectionProperties|
                         :type
                         (common-lisp:or component-collection-properties
                                         common-lisp:null)
                         :accessor %component-collection-properties :initform
                         common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or component-binding-properties
                                         common-lisp:null)
                         :accessor %component-binding-properties :initform
                         (common-lisp:error ":bindingproperties is required"))
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or component-overrides common-lisp:null)
                         :accessor %component-overrides :initform
                         (common-lisp:error ":overrides is required"))
                        (variants :initarg :|variants| :type
                         (common-lisp:or component-variants common-lisp:null)
                         :accessor %component-variants :initform
                         (common-lisp:error ":variants is required"))
                        (children :initarg :|children| :type
                         (common-lisp:or component-child-list common-lisp:null)
                         :accessor %component-children :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or component-properties common-lisp:null)
                         :accessor %component-properties :initform
                         (common-lisp:error ":properties is required"))
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %component-component-type :initform
                         (common-lisp:error ":componenttype is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %component-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %component-id :initform
                         (common-lisp:error ":id is required"))
                        (source-id :initarg :|sourceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-source-id :initform common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defun make-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema-version events tags modified-at
                     created-at collection-properties binding-properties
                     overrides variants children properties component-type name
                     id source-id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-binding-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-binding-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-binding-properties-value common-lisp:nil
                       ((default-value :initarg :|defaultValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-default-value
                         :initform common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or
                          component-binding-properties-value-properties
                          common-lisp:null)
                         :accessor
                         %component-binding-properties-value-binding-properties
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-binding-properties-value
                    'make-component-binding-properties-value))
 (common-lisp:defun make-component-binding-properties-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value binding-properties type)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-binding-properties-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-binding-properties-value-properties
                       common-lisp:nil
                       ((slot-name :initarg :|slotName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-slot-name
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-default-value
                         :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-key
                         :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-bucket
                         :initform common-lisp:nil)
                        (user-attribute :initarg :|userAttribute| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-user-attribute
                         :initform common-lisp:nil)
                        (predicates :initarg :|predicates| :type
                         (common-lisp:or predicate-list common-lisp:null)
                         :accessor
                         %component-binding-properties-value-properties-predicates
                         :initform common-lisp:nil)
                        (field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-field
                         :initform common-lisp:nil)
                        (model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-binding-properties-value-properties-model
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-binding-properties-value-properties
                    'make-component-binding-properties-value-properties))
 (common-lisp:defun make-component-binding-properties-value-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-name default-value key bucket
                     user-attribute predicates field model)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-binding-properties-value-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicates))
      (common-lisp:list
       (common-lisp:cons "predicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attribute))
      (common-lisp:list
       (common-lisp:cons "userAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-child common-lisp:nil
                       ((source-id :initarg :|sourceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-child-source-id :initform common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or component-events common-lisp:null)
                         :accessor %component-child-events :initform
                         common-lisp:nil)
                        (children :initarg :|children| :type
                         (common-lisp:or component-child-list common-lisp:null)
                         :accessor %component-child-children :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or component-properties common-lisp:null)
                         :accessor %component-child-properties :initform
                         (common-lisp:error ":properties is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-child-name :initform
                         (common-lisp:error ":name is required"))
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-child-component-type :initform
                         (common-lisp:error ":componenttype is required"))))
 (common-lisp:export (common-lisp:list 'component-child 'make-component-child))
 (common-lisp:defun make-component-child
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-id events children properties name
                     component-type)
   (common-lisp:apply #'common-lisp:make-instance 'component-child
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-child))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-child))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-child))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-child-list ()
   '(trivial-types:proper-list component-child))
 (common-lisp:defun |make-component-child-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-child))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype component-collection-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-component-collection-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-condition-property common-lisp:nil
                       ((operand-type :initarg :|operandType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-condition-property-operand-type :initform
                         common-lisp:nil)
                        (else :initarg :|else| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %component-condition-property-else :initform
                         common-lisp:nil)
                        (then :initarg :|then| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %component-condition-property-then :initform
                         common-lisp:nil)
                        (operand :initarg :|operand| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-condition-property-operand :initform
                         common-lisp:nil)
                        (operator :initarg :|operator| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-condition-property-operator :initform
                         common-lisp:nil)
                        (field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-condition-property-field :initform
                         common-lisp:nil)
                        (property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-condition-property-property :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-condition-property
                    'make-component-condition-property))
 (common-lisp:defun make-component-condition-property
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operand-type else then operand operator
                     field property)
   (common-lisp:apply #'common-lisp:make-instance 'component-condition-property
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand))
      (common-lisp:list
       (common-lisp:cons "operand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'then))
      (common-lisp:list
       (common-lisp:cons "then"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'else))
      (common-lisp:list
       (common-lisp:cons "else"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand-type))
      (common-lisp:list
       (common-lisp:cons "operandType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-data-configuration common-lisp:nil
                       ((identifiers :initarg :|identifiers| :type
                         (common-lisp:or identifier-list common-lisp:null)
                         :accessor %component-data-configuration-identifiers
                         :initform common-lisp:nil)
                        (predicate :initarg :|predicate| :type
                         (common-lisp:or predicate common-lisp:null) :accessor
                         %component-data-configuration-predicate :initform
                         common-lisp:nil)
                        (sort :initarg :|sort| :type
                         (common-lisp:or sort-property-list common-lisp:null)
                         :accessor %component-data-configuration-sort :initform
                         common-lisp:nil)
                        (model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-data-configuration-model :initform
                         (common-lisp:error ":model is required"))))
 (common-lisp:export
  (common-lisp:list 'component-data-configuration
                    'make-component-data-configuration))
 (common-lisp:defun make-component-data-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifiers predicate sort model)
   (common-lisp:apply #'common-lisp:make-instance 'component-data-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifiers))
      (common-lisp:list
       (common-lisp:cons "identifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-event common-lisp:nil
                       ((binding-event :initarg :|bindingEvent| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-event-binding-event :initform
                         common-lisp:nil)
                        (parameters :initarg :|parameters| :type
                         (common-lisp:or action-parameters common-lisp:null)
                         :accessor %component-event-parameters :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-event-action :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'component-event 'make-component-event))
 (common-lisp:defun make-component-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key binding-event parameters action)
   (common-lisp:apply #'common-lisp:make-instance 'component-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-event))
      (common-lisp:list
       (common-lisp:cons "bindingEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-events () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-events|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-list () '(trivial-types:proper-list component))
 (common-lisp:defun |make-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-overrides () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-overrides|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-overrides-value () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-overrides-value|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-property common-lisp:nil
                       ((property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-property :initform
                         common-lisp:nil)
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-component-name :initform
                         common-lisp:nil)
                        (imported-value :initarg :|importedValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-imported-value :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-type :initform common-lisp:nil)
                        (configured :initarg :|configured| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %component-property-configured :initform
                         common-lisp:nil)
                        (condition :initarg :|condition| :type
                         (common-lisp:or component-condition-property
                                         common-lisp:null)
                         :accessor %component-property-condition :initform
                         common-lisp:nil)
                        (concat :initarg :|concat| :type
                         (common-lisp:or component-property-list
                                         common-lisp:null)
                         :accessor %component-property-concat :initform
                         common-lisp:nil)
                        (user-attribute :initarg :|userAttribute| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-user-attribute :initform
                         common-lisp:nil)
                        (event :initarg :|event| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-event :initform common-lisp:nil)
                        (bindings :initarg :|bindings| :type
                         (common-lisp:or form-bindings common-lisp:null)
                         :accessor %component-property-bindings :initform
                         common-lisp:nil)
                        (model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-model :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-default-value :initform
                         common-lisp:nil)
                        (collection-binding-properties :initarg
                         :|collectionBindingProperties| :type
                         (common-lisp:or component-property-binding-properties
                                         common-lisp:null)
                         :accessor
                         %component-property-collection-binding-properties
                         :initform common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or component-property-binding-properties
                                         common-lisp:null)
                         :accessor %component-property-binding-properties
                         :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-value :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-property 'make-component-property))
 (common-lisp:defun make-component-property
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property component-name imported-value
                     type configured condition concat user-attribute event
                     bindings model default-value collection-binding-properties
                     binding-properties value)
   (common-lisp:apply #'common-lisp:make-instance 'component-property
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-binding-properties))
      (common-lisp:list
       (common-lisp:cons "collectionBindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bindings))
      (common-lisp:list
       (common-lisp:cons "bindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attribute))
      (common-lisp:list
       (common-lisp:cons "userAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'concat))
      (common-lisp:list
       (common-lisp:cons "concat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured))
      (common-lisp:list
       (common-lisp:cons "configured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-value))
      (common-lisp:list
       (common-lisp:cons "importedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-property-binding-properties common-lisp:nil
                       ((field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-binding-properties-field :initform
                         common-lisp:nil)
                        (property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-property-binding-properties-property
                         :initform
                         (common-lisp:error ":property is required"))))
 (common-lisp:export
  (common-lisp:list 'component-property-binding-properties
                    'make-component-property-binding-properties))
 (common-lisp:defun make-component-property-binding-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field property)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-property-binding-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-list ()
   '(trivial-types:proper-list component-property))
 (common-lisp:defun |make-component-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-summary common-lisp:nil
                       ((component-type :initarg :|componentType| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %component-summary-component-type :initform
                         (common-lisp:error ":componenttype is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %component-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %component-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-summary-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-summary-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defun make-component-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type name id environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun |make-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-variant common-lisp:nil
                       ((overrides :initarg :|overrides| :type
                         (common-lisp:or component-overrides common-lisp:null)
                         :accessor %component-variant-overrides :initform
                         common-lisp:nil)
                        (variant-values :initarg :|variantValues| :type
                         (common-lisp:or component-variant-values
                                         common-lisp:null)
                         :accessor %component-variant-variant-values :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-variant 'make-component-variant))
 (common-lisp:defun make-component-variant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overrides variant-values)
   (common-lisp:apply #'common-lisp:make-instance 'component-variant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-values))
      (common-lisp:list
       (common-lisp:cons "variantValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-variant-values () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-variant-values|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-variants ()
   '(trivial-types:proper-list component-variant))
 (common-lisp:defun |make-component-variants|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-variant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-component-data common-lisp:nil
                       ((schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-component-data-schema-version :initform
                         common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or component-events common-lisp:null)
                         :accessor %create-component-data-events :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-component-data-tags :initform common-lisp:nil)
                        (collection-properties :initarg :|collectionProperties|
                         :type
                         (common-lisp:or component-collection-properties
                                         common-lisp:null)
                         :accessor %create-component-data-collection-properties
                         :initform common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or component-binding-properties
                                         common-lisp:null)
                         :accessor %create-component-data-binding-properties
                         :initform
                         (common-lisp:error ":bindingproperties is required"))
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or component-overrides common-lisp:null)
                         :accessor %create-component-data-overrides :initform
                         (common-lisp:error ":overrides is required"))
                        (variants :initarg :|variants| :type
                         (common-lisp:or component-variants common-lisp:null)
                         :accessor %create-component-data-variants :initform
                         (common-lisp:error ":variants is required"))
                        (children :initarg :|children| :type
                         (common-lisp:or component-child-list common-lisp:null)
                         :accessor %create-component-data-children :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or component-properties common-lisp:null)
                         :accessor %create-component-data-properties :initform
                         (common-lisp:error ":properties is required"))
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %create-component-data-component-type
                         :initform
                         (common-lisp:error ":componenttype is required"))
                        (source-id :initarg :|sourceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-component-data-source-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %create-component-data-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-data 'make-create-component-data))
 (common-lisp:defun make-create-component-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema-version events tags
                     collection-properties binding-properties overrides
                     variants children properties component-type source-id
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-request common-lisp:nil
                       ((component-to-create :initarg :|componentToCreate|
                         :type
                         (common-lisp:or create-component-data
                                         common-lisp:null)
                         :accessor
                         %create-component-request-component-to-create
                         :initform
                         (common-lisp:error ":componenttocreate is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-component-request-client-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-component-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-component-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defun make-create-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-to-create client-token
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-to-create))
      (common-lisp:list
       (common-lisp:cons "componentToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input
                            'component-to-create))))
(common-lisp:progn
 (common-lisp:defclass create-component-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or component common-lisp:null) :accessor
                         %create-component-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defun make-create-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:progn
 (common-lisp:defclass create-form-data common-lisp:nil
                       ((label-decorator :initarg :|labelDecorator| :type
                         (common-lisp:or label-decorator common-lisp:null)
                         :accessor %create-form-data-label-decorator :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-form-data-tags :initform common-lisp:nil)
                        (cta :initarg :|cta| :type
                         (common-lisp:or form-cta common-lisp:null) :accessor
                         %create-form-data-cta :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-form-data-schema-version :initform
                         (common-lisp:error ":schemaversion is required"))
                        (sectional-elements :initarg :|sectionalElements| :type
                         (common-lisp:or sectional-element-map
                                         common-lisp:null)
                         :accessor %create-form-data-sectional-elements
                         :initform
                         (common-lisp:error ":sectionalelements is required"))
                        (style :initarg :|style| :type
                         (common-lisp:or form-style common-lisp:null) :accessor
                         %create-form-data-style :initform
                         (common-lisp:error ":style is required"))
                        (fields :initarg :|fields| :type
                         (common-lisp:or fields-map common-lisp:null) :accessor
                         %create-form-data-fields :initform
                         (common-lisp:error ":fields is required"))
                        (form-action-type :initarg :|formActionType| :type
                         (common-lisp:or form-action-type common-lisp:null)
                         :accessor %create-form-data-form-action-type :initform
                         (common-lisp:error ":formactiontype is required"))
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or form-data-type-config
                                         common-lisp:null)
                         :accessor %create-form-data-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         %create-form-data-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-form-data 'make-create-form-data))
 (common-lisp:defun make-create-form-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-decorator tags cta schema-version
                     sectional-elements style fields form-action-type data-type
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-form-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-decorator))
      (common-lisp:list
       (common-lisp:cons "labelDecorator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-form-request common-lisp:nil
                       ((form-to-create :initarg :|formToCreate| :type
                         (common-lisp:or create-form-data common-lisp:null)
                         :accessor %create-form-request-form-to-create
                         :initform
                         (common-lisp:error ":formtocreate is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-form-request-client-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-form-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-form-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-form-request 'make-create-form-request))
 (common-lisp:defun make-create-form-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key form-to-create client-token
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-form-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-to-create))
      (common-lisp:list
       (common-lisp:cons "formToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'form-to-create))))
(common-lisp:progn
 (common-lisp:defclass create-form-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or form common-lisp:null) :accessor
                         %create-form-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-form-response 'make-create-form-response))
 (common-lisp:defun make-create-form-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'create-form-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:progn
 (common-lisp:defclass create-theme-data common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-theme-data-tags :initform common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %create-theme-data-overrides :initform
                         common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %create-theme-data-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %create-theme-data-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-theme-data 'make-create-theme-data))
 (common-lisp:defun make-create-theme-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags overrides values name)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-theme-request common-lisp:nil
                       ((theme-to-create :initarg :|themeToCreate| :type
                         (common-lisp:or create-theme-data common-lisp:null)
                         :accessor %create-theme-request-theme-to-create
                         :initform
                         (common-lisp:error ":themetocreate is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-theme-request-client-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-theme-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-theme-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-theme-request 'make-create-theme-request))
 (common-lisp:defun make-create-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme-to-create client-token
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-to-create))
      (common-lisp:list
       (common-lisp:cons "themeToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'theme-to-create))))
(common-lisp:progn
 (common-lisp:defclass create-theme-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or theme common-lisp:null) :accessor
                         %create-theme-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-theme-response 'make-create-theme-response))
 (common-lisp:defun make-create-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'create-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:progn
 (common-lisp:defclass delete-component-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-component-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-component-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-component-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defun make-delete-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-form-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-form-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-form-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-form-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-form-request 'make-delete-form-request))
 (common-lisp:defun make-delete-form-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-form-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-theme-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-theme-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-theme-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-theme-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-theme-request 'make-delete-theme-request))
 (common-lisp:defun make-delete-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exchange-code-for-token-request common-lisp:nil
                       ((request :initarg :|request| :type
                         (common-lisp:or exchange-code-for-token-request-body
                                         common-lisp:null)
                         :accessor %exchange-code-for-token-request-request
                         :initform (common-lisp:error ":request is required"))
                        (provider :initarg :|provider| :type
                         (common-lisp:or token-providers common-lisp:null)
                         :accessor %exchange-code-for-token-request-provider
                         :initform
                         (common-lisp:error ":provider is required"))))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-request
                    'make-exchange-code-for-token-request))
 (common-lisp:defun make-exchange-code-for-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'exchange-code-for-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'request))))
(common-lisp:progn
 (common-lisp:defclass exchange-code-for-token-request-body common-lisp:nil
                       ((client-id :initarg :|clientId| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         %exchange-code-for-token-request-body-client-id
                         :initform common-lisp:nil)
                        (redirect-uri :initarg :|redirectUri| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %exchange-code-for-token-request-body-redirect-uri
                         :initform
                         (common-lisp:error ":redirecturi is required"))
                        (code :initarg :|code| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %exchange-code-for-token-request-body-code
                         :initform (common-lisp:error ":code is required"))))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-request-body
                    'make-exchange-code-for-token-request-body))
 (common-lisp:defun make-exchange-code-for-token-request-body
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-id redirect-uri code)
   (common-lisp:apply #'common-lisp:make-instance
                      'exchange-code-for-token-request-body
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-uri))
      (common-lisp:list
       (common-lisp:cons "redirectUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exchange-code-for-token-response common-lisp:nil
                       ((refresh-token :initarg :|refreshToken| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         %exchange-code-for-token-response-refresh-token
                         :initform
                         (common-lisp:error ":refreshtoken is required"))
                        (expires-in :initarg :|expiresIn| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %exchange-code-for-token-response-expires-in :initform
                         (common-lisp:error ":expiresin is required"))
                        (access-token :initarg :|accessToken| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor
                         %exchange-code-for-token-response-access-token
                         :initform
                         (common-lisp:error ":accesstoken is required"))))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-response
                    'make-exchange-code-for-token-response))
 (common-lisp:defun make-exchange-code-for-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key refresh-token expires-in access-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'exchange-code-for-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-components-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-components-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-components-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-components-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'export-components-request
                    'make-export-components-request))
 (common-lisp:defun make-export-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-components-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-components-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or component-list common-lisp:null)
                         :accessor %export-components-response-entities
                         :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'export-components-response
                    'make-export-components-response))
 (common-lisp:defun make-export-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'export-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-forms-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-forms-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-forms-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-forms-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'export-forms-request 'make-export-forms-request))
 (common-lisp:defun make-export-forms-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-forms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-forms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-forms-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-forms-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or form-list common-lisp:null) :accessor
                         %export-forms-response-entities :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'export-forms-response 'make-export-forms-response))
 (common-lisp:defun make-export-forms-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'export-forms-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-themes-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-themes-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-themes-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-themes-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'export-themes-request 'make-export-themes-request))
 (common-lisp:defun make-export-themes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-themes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-themes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %export-themes-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or theme-list common-lisp:null) :accessor
                         %export-themes-response-entities :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'export-themes-response 'make-export-themes-response))
 (common-lisp:defun make-export-themes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'export-themes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype features-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-features-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass field-config common-lisp:nil
                       ((validations :initarg :|validations| :type
                         (common-lisp:or validations-list common-lisp:null)
                         :accessor %field-config-validations :initform
                         common-lisp:nil)
                        (input-type :initarg :|inputType| :type
                         (common-lisp:or field-input-config common-lisp:null)
                         :accessor %field-config-input-type :initform
                         common-lisp:nil)
                        (excluded :initarg :|excluded| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %field-config-excluded :initform common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or field-position common-lisp:null)
                         :accessor %field-config-position :initform
                         common-lisp:nil)
                        (label :initarg :|label| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-config-label :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'field-config 'make-field-config))
 (common-lisp:defun make-field-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validations input-type excluded position
                     label)
   (common-lisp:apply #'common-lisp:make-instance 'field-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "inputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validations))
      (common-lisp:list
       (common-lisp:cons "validations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-input-config common-lisp:nil
                       ((file-uploader-config :initarg :|fileUploaderConfig|
                         :type
                         (common-lisp:or file-uploader-field-config
                                         common-lisp:null)
                         :accessor %field-input-config-file-uploader-config
                         :initform common-lisp:nil)
                        (is-array :initarg :|isArray| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %field-input-config-is-array :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-value :initform common-lisp:nil)
                        (step :initarg :|step| :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %field-input-config-step :initform common-lisp:nil)
                        (max-value :initarg :|maxValue| :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %field-input-config-max-value :initform
                         common-lisp:nil)
                        (min-value :initarg :|minValue| :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %field-input-config-min-value :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-name :initform common-lisp:nil)
                        (value-mappings :initarg :|valueMappings| :type
                         (common-lisp:or value-mappings common-lisp:null)
                         :accessor %field-input-config-value-mappings :initform
                         common-lisp:nil)
                        (default-country-code :initarg :|defaultCountryCode|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %field-input-config-default-country-code
                         :initform common-lisp:nil)
                        (default-checked :initarg :|defaultChecked| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %field-input-config-default-checked :initform
                         common-lisp:nil)
                        (descriptive-text :initarg :|descriptiveText| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-descriptive-text :initform
                         common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-default-value :initform
                         common-lisp:nil)
                        (placeholder :initarg :|placeholder| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-placeholder :initform
                         common-lisp:nil)
                        (read-only :initarg :|readOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %field-input-config-read-only :initform
                         common-lisp:nil)
                        (required :initarg :|required| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %field-input-config-required :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-input-config-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'field-input-config 'make-field-input-config))
 (common-lisp:defun make-field-input-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-uploader-config is-array value step
                     max-value min-value name value-mappings
                     default-country-code default-checked descriptive-text
                     default-value placeholder read-only required type)
   (common-lisp:apply #'common-lisp:make-instance 'field-input-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder))
      (common-lisp:list
       (common-lisp:cons "placeholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descriptive-text))
      (common-lisp:list
       (common-lisp:cons "descriptiveText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-checked))
      (common-lisp:list
       (common-lisp:cons "defaultChecked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-country-code))
      (common-lisp:list
       (common-lisp:cons "defaultCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-mappings))
      (common-lisp:list
       (common-lisp:cons "valueMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "minValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "maxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-array))
      (common-lisp:list
       (common-lisp:cons "isArray"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-uploader-config))
      (common-lisp:list
       (common-lisp:cons "fileUploaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-position common-lisp:nil
                       ((below :initarg :|below| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-position-below :initform common-lisp:nil)
                        (right-of :initarg :|rightOf| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-position-right-of :initform common-lisp:nil)
                        (fixed :initarg :|fixed| :type
                         (common-lisp:or fixed-position common-lisp:null)
                         :accessor %field-position-fixed :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'field-position 'make-field-position))
 (common-lisp:defun make-field-position
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key below right-of fixed)
   (common-lisp:apply #'common-lisp:make-instance 'field-position
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed))
      (common-lisp:list
       (common-lisp:cons "fixed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right-of))
      (common-lisp:list
       (common-lisp:cons "rightOf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'below))
      (common-lisp:list
       (common-lisp:cons "below"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field-validation-configuration common-lisp:nil
                       ((validation-message :initarg :|validationMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-validation-configuration-validation-message
                         :initform common-lisp:nil)
                        (num-values :initarg :|numValues| :type
                         (common-lisp:or num-values common-lisp:null) :accessor
                         %field-validation-configuration-num-values :initform
                         common-lisp:nil)
                        (str-values :initarg :|strValues| :type
                         (common-lisp:or str-values common-lisp:null) :accessor
                         %field-validation-configuration-str-values :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %field-validation-configuration-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'field-validation-configuration
                    'make-field-validation-configuration))
 (common-lisp:defun make-field-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-message num-values str-values
                     type)
   (common-lisp:apply #'common-lisp:make-instance
                      'field-validation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'str-values))
      (common-lisp:list
       (common-lisp:cons "strValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-values))
      (common-lisp:list
       (common-lisp:cons "numValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-message))
      (common-lisp:list
       (common-lisp:cons "validationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fields-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-fields-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass file-uploader-field-config common-lisp:nil
                       ((max-size :initarg :|maxSize| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %file-uploader-field-config-max-size :initform
                         common-lisp:nil)
                        (max-file-count :initarg :|maxFileCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %file-uploader-field-config-max-file-count :initform
                         common-lisp:nil)
                        (is-resumable :initarg :|isResumable| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %file-uploader-field-config-is-resumable :initform
                         common-lisp:nil)
                        (show-thumbnails :initarg :|showThumbnails| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %file-uploader-field-config-show-thumbnails :initform
                         common-lisp:nil)
                        (accepted-file-types :initarg :|acceptedFileTypes|
                         :type (common-lisp:or str-values common-lisp:null)
                         :accessor
                         %file-uploader-field-config-accepted-file-types
                         :initform
                         (common-lisp:error ":acceptedfiletypes is required"))
                        (access-level :initarg :|accessLevel| :type
                         (common-lisp:or storage-access-level common-lisp:null)
                         :accessor %file-uploader-field-config-access-level
                         :initform
                         (common-lisp:error ":accesslevel is required"))))
 (common-lisp:export
  (common-lisp:list 'file-uploader-field-config
                    'make-file-uploader-field-config))
 (common-lisp:defun make-file-uploader-field-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-size max-file-count is-resumable
                     show-thumbnails accepted-file-types access-level)
   (common-lisp:apply #'common-lisp:make-instance 'file-uploader-field-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-uploader-field-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-uploader-field-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-level))
      (common-lisp:list
       (common-lisp:cons "accessLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepted-file-types))
      (common-lisp:list
       (common-lisp:cons "acceptedFileTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-thumbnails))
      (common-lisp:list
       (common-lisp:cons "showThumbnails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-resumable))
      (common-lisp:list
       (common-lisp:cons "isResumable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-count))
      (common-lisp:list
       (common-lisp:cons "maxFileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "maxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-uploader-field-config))
   common-lisp:nil))
(common-lisp:deftype fixed-position () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass form common-lisp:nil
                       ((label-decorator :initarg :|labelDecorator| :type
                         (common-lisp:or label-decorator common-lisp:null)
                         :accessor %form-label-decorator :initform
                         common-lisp:nil)
                        (cta :initarg :|cta| :type
                         (common-lisp:or form-cta common-lisp:null) :accessor
                         %form-cta :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %form-tags :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-schema-version :initform
                         (common-lisp:error ":schemaversion is required"))
                        (sectional-elements :initarg :|sectionalElements| :type
                         (common-lisp:or sectional-element-map
                                         common-lisp:null)
                         :accessor %form-sectional-elements :initform
                         (common-lisp:error ":sectionalelements is required"))
                        (fields :initarg :|fields| :type
                         (common-lisp:or fields-map common-lisp:null) :accessor
                         %form-fields :initform
                         (common-lisp:error ":fields is required"))
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or form-data-type-config
                                         common-lisp:null)
                         :accessor %form-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (style :initarg :|style| :type
                         (common-lisp:or form-style common-lisp:null) :accessor
                         %form-style :initform
                         (common-lisp:error ":style is required"))
                        (form-action-type :initarg :|formActionType| :type
                         (common-lisp:or form-action-type common-lisp:null)
                         :accessor %form-form-action-type :initform
                         (common-lisp:error ":formactiontype is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         %form-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %form-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export (common-lisp:list 'form 'make-form))
 (common-lisp:defun make-form
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-decorator cta tags schema-version
                     sectional-elements fields data-type style form-action-type
                     name id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'form
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-decorator))
      (common-lisp:list
       (common-lisp:cons "labelDecorator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form))
   common-lisp:nil))
(common-lisp:deftype form-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass form-binding-element common-lisp:nil
                       ((property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-binding-element-property :initform
                         (common-lisp:error ":property is required"))
                        (element :initarg :|element| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-binding-element-element :initform
                         (common-lisp:error ":element is required"))))
 (common-lisp:export
  (common-lisp:list 'form-binding-element 'make-form-binding-element))
 (common-lisp:defun make-form-binding-element
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property element)
   (common-lisp:apply #'common-lisp:make-instance 'form-binding-element
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-binding-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-binding-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element))
      (common-lisp:list
       (common-lisp:cons "element"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-binding-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-bindings () 'common-lisp:hash-table)
 (common-lisp:defun |make-form-bindings| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass form-button common-lisp:nil
                       ((position :initarg :|position| :type
                         (common-lisp:or field-position common-lisp:null)
                         :accessor %form-button-position :initform
                         common-lisp:nil)
                        (children :initarg :|children| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-button-children :initform common-lisp:nil)
                        (excluded :initarg :|excluded| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %form-button-excluded :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'form-button 'make-form-button))
 (common-lisp:defun make-form-button
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key position children excluded)
   (common-lisp:apply #'common-lisp:make-instance 'form-button
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-button))
   common-lisp:nil))
(common-lisp:deftype form-buttons-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass form-cta common-lisp:nil
                       ((submit :initarg :|submit| :type
                         (common-lisp:or form-button common-lisp:null)
                         :accessor %form-cta-submit :initform common-lisp:nil)
                        (cancel :initarg :|cancel| :type
                         (common-lisp:or form-button common-lisp:null)
                         :accessor %form-cta-cancel :initform common-lisp:nil)
                        (clear :initarg :|clear| :type
                         (common-lisp:or form-button common-lisp:null)
                         :accessor %form-cta-clear :initform common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or form-buttons-position
                                         common-lisp:null)
                         :accessor %form-cta-position :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'form-cta 'make-form-cta))
 (common-lisp:defun make-form-cta
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key submit cancel clear position)
   (common-lisp:apply #'common-lisp:make-instance 'form-cta
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-cta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-cta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clear))
      (common-lisp:list
       (common-lisp:cons "clear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel))
      (common-lisp:list
       (common-lisp:cons "cancel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit))
      (common-lisp:list
       (common-lisp:cons "submit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-cta))
   common-lisp:nil))
(common-lisp:deftype form-data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass form-data-type-config common-lisp:nil
                       ((data-type-name :initarg :|dataTypeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-data-type-config-data-type-name :initform
                         (common-lisp:error ":datatypename is required"))
                        (data-source-type :initarg :|dataSourceType| :type
                         (common-lisp:or form-data-source-type
                                         common-lisp:null)
                         :accessor %form-data-type-config-data-source-type
                         :initform
                         (common-lisp:error ":datasourcetype is required"))))
 (common-lisp:export
  (common-lisp:list 'form-data-type-config 'make-form-data-type-config))
 (common-lisp:defun make-form-data-type-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type-name data-source-type)
   (common-lisp:apply #'common-lisp:make-instance 'form-data-type-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-type))
      (common-lisp:list
       (common-lisp:cons "dataSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-name))
      (common-lisp:list
       (common-lisp:cons "dataTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-input-binding-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-form-input-binding-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass form-input-binding-properties-value common-lisp:nil
                       ((binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or
                          form-input-binding-properties-value-properties
                          common-lisp:null)
                         :accessor
                         %form-input-binding-properties-value-binding-properties
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-input-binding-properties-value-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'form-input-binding-properties-value
                    'make-form-input-binding-properties-value))
 (common-lisp:defun make-form-input-binding-properties-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key binding-properties type)
   (common-lisp:apply #'common-lisp:make-instance
                      'form-input-binding-properties-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-input-binding-properties-value-properties
                       common-lisp:nil
                       ((model :initarg :|model| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-input-binding-properties-value-properties-model
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'form-input-binding-properties-value-properties
                    'make-form-input-binding-properties-value-properties))
 (common-lisp:defun make-form-input-binding-properties-value-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model)
   (common-lisp:apply #'common-lisp:make-instance
                      'form-input-binding-properties-value-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-input-binding-properties-value-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-input-value-property common-lisp:nil
                       ((concat :initarg :|concat| :type
                         (common-lisp:or form-input-value-property-list
                                         common-lisp:null)
                         :accessor %form-input-value-property-concat :initform
                         common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or
                          form-input-value-property-binding-properties
                          common-lisp:null)
                         :accessor
                         %form-input-value-property-binding-properties
                         :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-input-value-property-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'form-input-value-property
                    'make-form-input-value-property))
 (common-lisp:defun make-form-input-value-property
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key concat binding-properties value)
   (common-lisp:apply #'common-lisp:make-instance 'form-input-value-property
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'concat))
      (common-lisp:list
       (common-lisp:cons "concat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-input-value-property-binding-properties
                       common-lisp:nil
                       ((field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-input-value-property-binding-properties-field
                         :initform common-lisp:nil)
                        (property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-input-value-property-binding-properties-property
                         :initform
                         (common-lisp:error ":property is required"))))
 (common-lisp:export
  (common-lisp:list 'form-input-value-property-binding-properties
                    'make-form-input-value-property-binding-properties))
 (common-lisp:defun make-form-input-value-property-binding-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field property)
   (common-lisp:apply #'common-lisp:make-instance
                      'form-input-value-property-binding-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property-binding-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property-binding-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property-binding-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-input-value-property-list ()
   '(trivial-types:proper-list form-input-value-property))
 (common-lisp:defun |make-form-input-value-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            form-input-value-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype form-list () '(trivial-types:proper-list form))
 (common-lisp:defun |make-form-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form))
   aws-sdk/generator/shape::members))
(common-lisp:deftype form-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass form-style common-lisp:nil
                       ((outer-padding :initarg :|outerPadding| :type
                         (common-lisp:or form-style-config common-lisp:null)
                         :accessor %form-style-outer-padding :initform
                         common-lisp:nil)
                        (vertical-gap :initarg :|verticalGap| :type
                         (common-lisp:or form-style-config common-lisp:null)
                         :accessor %form-style-vertical-gap :initform
                         common-lisp:nil)
                        (horizontal-gap :initarg :|horizontalGap| :type
                         (common-lisp:or form-style-config common-lisp:null)
                         :accessor %form-style-horizontal-gap :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'form-style 'make-form-style))
 (common-lisp:defun make-form-style
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outer-padding vertical-gap
                     horizontal-gap)
   (common-lisp:apply #'common-lisp:make-instance 'form-style
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-gap))
      (common-lisp:list
       (common-lisp:cons "horizontalGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-gap))
      (common-lisp:list
       (common-lisp:cons "verticalGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outer-padding))
      (common-lisp:list
       (common-lisp:cons "outerPadding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-style-config common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-style-config-value :initform common-lisp:nil)
                        (token-reference :initarg :|tokenReference| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-style-config-token-reference :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'form-style-config 'make-form-style-config))
 (common-lisp:defun make-form-style-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value token-reference)
   (common-lisp:apply #'common-lisp:make-instance 'form-style-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-style-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-style-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-reference))
      (common-lisp:list
       (common-lisp:cons "tokenReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-style-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass form-summary common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         %form-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %form-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (form-action-type :initarg :|formActionType| :type
                         (common-lisp:or form-action-type common-lisp:null)
                         :accessor %form-summary-form-action-type :initform
                         (common-lisp:error ":formactiontype is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-summary-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or form-data-type-config
                                         common-lisp:null)
                         :accessor %form-summary-data-type :initform
                         (common-lisp:error ":datatype is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %form-summary-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export (common-lisp:list 'form-summary 'make-form-summary))
 (common-lisp:defun make-form-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id form-action-type environment-name
                     data-type app-id)
   (common-lisp:apply #'common-lisp:make-instance 'form-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-summary-list ()
   '(trivial-types:proper-list form-summary))
 (common-lisp:defun |make-form-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-component-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-component-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-component-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-component-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-component-request 'make-get-component-request))
 (common-lisp:defun make-get-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-response common-lisp:nil
                       ((component :initarg :|component| :type
                         (common-lisp:or component common-lisp:null) :accessor
                         %get-component-response-component :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-component-response 'make-get-component-response))
 (common-lisp:defun make-get-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'component))))
(common-lisp:progn
 (common-lisp:defclass get-form-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-form-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-form-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-form-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-form-request 'make-get-form-request))
 (common-lisp:defun make-get-form-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-form-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-form-response common-lisp:nil
                       ((form :initarg :|form| :type
                         (common-lisp:or form common-lisp:null) :accessor
                         %get-form-response-form :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-form-response 'make-get-form-response))
 (common-lisp:defun make-get-form-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key form)
   (common-lisp:apply #'common-lisp:make-instance 'get-form-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form))
      (common-lisp:list
       (common-lisp:cons "form"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'form))))
(common-lisp:progn
 (common-lisp:defclass get-metadata-request common-lisp:nil
                       ((environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-metadata-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-metadata-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-metadata-request 'make-get-metadata-request))
 (common-lisp:defun make-get-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-metadata-response common-lisp:nil
                       ((features :initarg :|features| :type
                         (common-lisp:or features-map common-lisp:null)
                         :accessor %get-metadata-response-features :initform
                         (common-lisp:error ":features is required"))))
 (common-lisp:export
  (common-lisp:list 'get-metadata-response 'make-get-metadata-response))
 (common-lisp:defun make-get-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key features)
   (common-lisp:apply #'common-lisp:make-instance 'get-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-theme-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-theme-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-theme-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-theme-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-theme-request 'make-get-theme-request))
 (common-lisp:defun make-get-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-theme-response common-lisp:nil
                       ((theme :initarg :|theme| :type
                         (common-lisp:or theme common-lisp:null) :accessor
                         %get-theme-response-theme :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-theme-response 'make-get-theme-response))
 (common-lisp:defun make-get-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key theme)
   (common-lisp:apply #'common-lisp:make-instance 'get-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme))
      (common-lisp:list
       (common-lisp:cons "theme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-theme-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'theme))))
(common-lisp:progn
 (common-lisp:deftype identifier-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype label-decorator () 'common-lisp:string)
(common-lisp:deftype list-components-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-components-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-components-limit
                                         common-lisp:null)
                         :accessor %list-components-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-components-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-components-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-components-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defun make-list-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-components-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or component-summary-list
                                         common-lisp:null)
                         :accessor %list-components-response-entities :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defun make-list-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:deftype list-forms-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-forms-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-forms-limit common-lisp:null)
                         :accessor %list-forms-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-forms-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-forms-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-forms-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-forms-request 'make-list-forms-request))
 (common-lisp:defun make-list-forms-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-forms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-forms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-forms-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-forms-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or form-summary-list common-lisp:null)
                         :accessor %list-forms-response-entities :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'list-forms-response 'make-list-forms-response))
 (common-lisp:defun make-list-forms-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'list-forms-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-forms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-forms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-forms-response))
   common-lisp:nil))
(common-lisp:deftype list-themes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-themes-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-themes-limit common-lisp:null)
                         :accessor %list-themes-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-request-next-token :initform
                         common-lisp:nil)
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-themes-request 'make-list-themes-request))
 (common-lisp:defun make-list-themes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-themes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-themes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-themes-response-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :|entities| :type
                         (common-lisp:or theme-summary-list common-lisp:null)
                         :accessor %list-themes-response-entities :initform
                         (common-lisp:error ":entities is required"))))
 (common-lisp:export
  (common-lisp:list 'list-themes-response 'make-list-themes-response))
 (common-lisp:defun make-list-themes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'list-themes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mutation-action-set-state-parameter common-lisp:nil
                       ((set :initarg :|set| :type
                         (common-lisp:or component-property common-lisp:null)
                         :accessor %mutation-action-set-state-parameter-set
                         :initform (common-lisp:error ":set is required"))
                        (property :initarg :|property| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %mutation-action-set-state-parameter-property
                         :initform (common-lisp:error ":property is required"))
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %mutation-action-set-state-parameter-component-name
                         :initform
                         (common-lisp:error ":componentname is required"))))
 (common-lisp:export
  (common-lisp:list 'mutation-action-set-state-parameter
                    'make-mutation-action-set-state-parameter))
 (common-lisp:defun make-mutation-action-set-state-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key set property component-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'mutation-action-set-state-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set))
      (common-lisp:list
       (common-lisp:cons "set"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype num-values () '(trivial-types:proper-list integer))
 (common-lisp:defun |make-num-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operand-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass predicate common-lisp:nil
                       ((operand-type :initarg :|operandType| :type
                         (common-lisp:or operand-type common-lisp:null)
                         :accessor %predicate-operand-type :initform
                         common-lisp:nil)
                        (operand :initarg :|operand| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %predicate-operand :initform common-lisp:nil)
                        (operator :initarg :|operator| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %predicate-operator :initform common-lisp:nil)
                        (field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %predicate-field :initform common-lisp:nil)
                        (and :initarg :|and| :type
                         (common-lisp:or predicate-list common-lisp:null)
                         :accessor %predicate-and :initform common-lisp:nil)
                        (or :initarg :|or| :type
                         (common-lisp:or predicate-list common-lisp:null)
                         :accessor %predicate-or :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defun make-predicate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operand-type operand operator field and
                     or)
   (common-lisp:apply #'common-lisp:make-instance 'predicate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand))
      (common-lisp:list
       (common-lisp:cons "operand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand-type))
      (common-lisp:list
       (common-lisp:cons "operandType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predicate-list () '(trivial-types:proper-list predicate))
 (common-lisp:defun |make-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-metadata-flag-body common-lisp:nil
                       ((new-value :initarg :|newValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-metadata-flag-body-new-value :initform
                         (common-lisp:error ":newvalue is required"))))
 (common-lisp:export
  (common-lisp:list 'put-metadata-flag-body 'make-put-metadata-flag-body))
 (common-lisp:defun make-put-metadata-flag-body
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key new-value)
   (common-lisp:apply #'common-lisp:make-instance 'put-metadata-flag-body
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-value))
      (common-lisp:list
       (common-lisp:cons "newValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-metadata-flag-request common-lisp:nil
                       ((body :initarg :|body| :type
                         (common-lisp:or put-metadata-flag-body
                                         common-lisp:null)
                         :accessor %put-metadata-flag-request-body :initform
                         (common-lisp:error ":body is required"))
                        (feature-name :initarg :|featureName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-metadata-flag-request-feature-name :initform
                         (common-lisp:error ":featurename is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-metadata-flag-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-metadata-flag-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'put-metadata-flag-request
                    'make-put-metadata-flag-request))
 (common-lisp:defun make-put-metadata-flag-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key body feature-name environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-metadata-flag-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'body))))
(common-lisp:progn
 (common-lisp:defclass refresh-token-request common-lisp:nil
                       ((refresh-token-body :initarg :|refreshTokenBody| :type
                         (common-lisp:or refresh-token-request-body
                                         common-lisp:null)
                         :accessor %refresh-token-request-refresh-token-body
                         :initform
                         (common-lisp:error ":refreshtokenbody is required"))
                        (provider :initarg :|provider| :type
                         (common-lisp:or token-providers common-lisp:null)
                         :accessor %refresh-token-request-provider :initform
                         (common-lisp:error ":provider is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-token-request 'make-refresh-token-request))
 (common-lisp:defun make-refresh-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key refresh-token-body provider)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token-body))
      (common-lisp:list
       (common-lisp:cons "refreshTokenBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input
                            'refresh-token-body))))
(common-lisp:progn
 (common-lisp:defclass refresh-token-request-body common-lisp:nil
                       ((client-id :initarg :|clientId| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %refresh-token-request-body-client-id
                         :initform common-lisp:nil)
                        (token :initarg :|token| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %refresh-token-request-body-token :initform
                         (common-lisp:error ":token is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-token-request-body
                    'make-refresh-token-request-body))
 (common-lisp:defun make-refresh-token-request-body
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-id token)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-token-request-body
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-token-response common-lisp:nil
                       ((expires-in :initarg :|expiresIn| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %refresh-token-response-expires-in :initform
                         (common-lisp:error ":expiresin is required"))
                        (access-token :initarg :|accessToken| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %refresh-token-response-access-token
                         :initform
                         (common-lisp:error ":accesstoken is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-token-response 'make-refresh-token-response))
 (common-lisp:defun make-refresh-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires-in access-token)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sectional-element common-lisp:nil
                       ((excluded :initarg :|excluded| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %sectional-element-excluded :initform common-lisp:nil)
                        (orientation :initarg :|orientation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sectional-element-orientation :initform
                         common-lisp:nil)
                        (level :initarg :|level| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %sectional-element-level :initform common-lisp:nil)
                        (text :initarg :|text| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sectional-element-text :initform common-lisp:nil)
                        (position :initarg :|position| :type
                         (common-lisp:or field-position common-lisp:null)
                         :accessor %sectional-element-position :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sectional-element-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'sectional-element 'make-sectional-element))
 (common-lisp:defun make-sectional-element
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key excluded orientation level text position
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'sectional-element
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sectional-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sectional-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sectional-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sectional-element-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-sectional-element-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sort-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sort-property common-lisp:nil
                       ((direction :initarg :|direction| :type
                         (common-lisp:or sort-direction common-lisp:null)
                         :accessor %sort-property-direction :initform
                         (common-lisp:error ":direction is required"))
                        (field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sort-property-field :initform
                         (common-lisp:error ":field is required"))))
 (common-lisp:export (common-lisp:list 'sort-property 'make-sort-property))
 (common-lisp:defun make-sort-property
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key direction field)
   (common-lisp:apply #'common-lisp:make-instance 'sort-property
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sort-property-list ()
   '(trivial-types:proper-list sort-property))
 (common-lisp:defun |make-sort-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-access-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype str-values () '(trivial-types:proper-list string))
 (common-lisp:defun |make-str-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass theme common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %theme-tags :initform common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %theme-overrides :initform common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %theme-values :initform
                         (common-lisp:error ":values is required"))
                        (modified-at :initarg :|modifiedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %theme-modified-at :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %theme-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %theme-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %theme-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export (common-lisp:list 'theme 'make-theme))
 (common-lisp:defun make-theme
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags overrides values modified-at
                     created-at name id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'theme
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-list () '(trivial-types:proper-list theme))
 (common-lisp:defun |make-theme-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass theme-summary common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %theme-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %theme-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-summary-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-summary-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export (common-lisp:list 'theme-summary 'make-theme-summary))
 (common-lisp:defun make-theme-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name id environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'theme-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-summary-list ()
   '(trivial-types:proper-list theme-summary))
 (common-lisp:defun |make-theme-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass theme-value common-lisp:nil
                       ((children :initarg :|children| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %theme-value-children :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-value-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-value 'make-theme-value))
 (common-lisp:defun make-theme-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key children value)
   (common-lisp:apply #'common-lisp:make-instance 'theme-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass theme-values common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or theme-value common-lisp:null)
                         :accessor %theme-values-value :initform
                         common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %theme-values-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'theme-values 'make-theme-values))
 (common-lisp:defun make-theme-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'theme-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-values-list ()
   '(trivial-types:proper-list theme-values))
 (common-lisp:defun |make-theme-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token-providers () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (amplifyuibuilder-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-component-data common-lisp:nil
                       ((schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-component-data-schema-version :initform
                         common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or component-events common-lisp:null)
                         :accessor %update-component-data-events :initform
                         common-lisp:nil)
                        (collection-properties :initarg :|collectionProperties|
                         :type
                         (common-lisp:or component-collection-properties
                                         common-lisp:null)
                         :accessor %update-component-data-collection-properties
                         :initform common-lisp:nil)
                        (binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or component-binding-properties
                                         common-lisp:null)
                         :accessor %update-component-data-binding-properties
                         :initform common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or component-overrides common-lisp:null)
                         :accessor %update-component-data-overrides :initform
                         common-lisp:nil)
                        (variants :initarg :|variants| :type
                         (common-lisp:or component-variants common-lisp:null)
                         :accessor %update-component-data-variants :initform
                         common-lisp:nil)
                        (children :initarg :|children| :type
                         (common-lisp:or component-child-list common-lisp:null)
                         :accessor %update-component-data-children :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or component-properties common-lisp:null)
                         :accessor %update-component-data-properties :initform
                         common-lisp:nil)
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or component-type common-lisp:null)
                         :accessor %update-component-data-component-type
                         :initform common-lisp:nil)
                        (source-id :initarg :|sourceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-component-data-source-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %update-component-data-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-component-data-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-component-data 'make-update-component-data))
 (common-lisp:defun make-update-component-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema-version events
                     collection-properties binding-properties overrides
                     variants children properties component-type source-id name
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-request common-lisp:nil
                       ((updated-component :initarg :|updatedComponent| :type
                         (common-lisp:or update-component-data
                                         common-lisp:null)
                         :accessor %update-component-request-updated-component
                         :initform
                         (common-lisp:error ":updatedcomponent is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-component-request-client-token :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-component-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-component-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-component-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-component-request 'make-update-component-request))
 (common-lisp:defun make-update-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-component client-token id
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-component))
      (common-lisp:list
       (common-lisp:cons "updatedComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input
                            'updated-component))))
(common-lisp:progn
 (common-lisp:defclass update-component-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or component common-lisp:null) :accessor
                         %update-component-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-component-response
                    'make-update-component-response))
 (common-lisp:defun make-update-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:progn
 (common-lisp:defclass update-form-data common-lisp:nil
                       ((label-decorator :initarg :|labelDecorator| :type
                         (common-lisp:or label-decorator common-lisp:null)
                         :accessor %update-form-data-label-decorator :initform
                         common-lisp:nil)
                        (cta :initarg :|cta| :type
                         (common-lisp:or form-cta common-lisp:null) :accessor
                         %update-form-data-cta :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-form-data-schema-version :initform
                         common-lisp:nil)
                        (sectional-elements :initarg :|sectionalElements| :type
                         (common-lisp:or sectional-element-map
                                         common-lisp:null)
                         :accessor %update-form-data-sectional-elements
                         :initform common-lisp:nil)
                        (style :initarg :|style| :type
                         (common-lisp:or form-style common-lisp:null) :accessor
                         %update-form-data-style :initform common-lisp:nil)
                        (fields :initarg :|fields| :type
                         (common-lisp:or fields-map common-lisp:null) :accessor
                         %update-form-data-fields :initform common-lisp:nil)
                        (form-action-type :initarg :|formActionType| :type
                         (common-lisp:or form-action-type common-lisp:null)
                         :accessor %update-form-data-form-action-type :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or form-data-type-config
                                         common-lisp:null)
                         :accessor %update-form-data-data-type :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or form-name common-lisp:null) :accessor
                         %update-form-data-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-form-data 'make-update-form-data))
 (common-lisp:defun make-update-form-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label-decorator cta schema-version
                     sectional-elements style fields form-action-type data-type
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'update-form-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-decorator))
      (common-lisp:list
       (common-lisp:cons "labelDecorator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-form-request common-lisp:nil
                       ((updated-form :initarg :|updatedForm| :type
                         (common-lisp:or update-form-data common-lisp:null)
                         :accessor %update-form-request-updated-form :initform
                         (common-lisp:error ":updatedform is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-form-request-client-token :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-form-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-form-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-form-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-form-request 'make-update-form-request))
 (common-lisp:defun make-update-form-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-form client-token id
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-form-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-form))
      (common-lisp:list
       (common-lisp:cons "updatedForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'updated-form))))
(common-lisp:progn
 (common-lisp:defclass update-form-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or form common-lisp:null) :accessor
                         %update-form-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-form-response 'make-update-form-response))
 (common-lisp:defun make-update-form-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'update-form-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:progn
 (common-lisp:defclass update-theme-data common-lisp:nil
                       ((overrides :initarg :|overrides| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %update-theme-data-overrides :initform
                         common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or theme-values-list common-lisp:null)
                         :accessor %update-theme-data-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or theme-name common-lisp:null) :accessor
                         %update-theme-data-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-theme-data-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-theme-data 'make-update-theme-data))
 (common-lisp:defun make-update-theme-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overrides values name id)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-theme-request common-lisp:nil
                       ((updated-theme :initarg :|updatedTheme| :type
                         (common-lisp:or update-theme-data common-lisp:null)
                         :accessor %update-theme-request-updated-theme
                         :initform
                         (common-lisp:error ":updatedtheme is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-request-client-token :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-theme-request-id :initform
                         (common-lisp:error ":id is required"))
                        (environment-name :initarg :|environmentName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-request-environment-name :initform
                         (common-lisp:error ":environmentname is required"))
                        (app-id :initarg :|appId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-theme-request-app-id :initform
                         (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-theme-request 'make-update-theme-request))
 (common-lisp:defun make-update-theme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-theme client-token id
                     environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-theme))
      (common-lisp:list
       (common-lisp:cons "updatedTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'updated-theme))))
(common-lisp:progn
 (common-lisp:defclass update-theme-response common-lisp:nil
                       ((entity :initarg :|entity| :type
                         (common-lisp:or theme common-lisp:null) :accessor
                         %update-theme-response-entity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-theme-response 'make-update-theme-response))
 (common-lisp:defun make-update-theme-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity)
   (common-lisp:apply #'common-lisp:make-instance 'update-theme-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'entity))))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype validations-list ()
   '(trivial-types:proper-list field-validation-configuration))
 (common-lisp:defun |make-validations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-validation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass value-mapping common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or form-input-value-property
                                         common-lisp:null)
                         :accessor %value-mapping-value :initform
                         (common-lisp:error ":value is required"))
                        (display-value :initarg :|displayValue| :type
                         (common-lisp:or form-input-value-property
                                         common-lisp:null)
                         :accessor %value-mapping-display-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'value-mapping 'make-value-mapping))
 (common-lisp:defun make-value-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value display-value)
   (common-lisp:apply #'common-lisp:make-instance 'value-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-value))
      (common-lisp:list
       (common-lisp:cons "displayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype value-mapping-list ()
   '(trivial-types:proper-list value-mapping))
 (common-lisp:defun |make-value-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass value-mappings common-lisp:nil
                       ((binding-properties :initarg :|bindingProperties| :type
                         (common-lisp:or form-input-binding-properties
                                         common-lisp:null)
                         :accessor %value-mappings-binding-properties :initform
                         common-lisp:nil)
                        (values :initarg :|values| :type
                         (common-lisp:or value-mapping-list common-lisp:null)
                         :accessor %value-mappings-values :initform
                         (common-lisp:error ":values is required"))))
 (common-lisp:export (common-lisp:list 'value-mappings 'make-value-mappings))
 (common-lisp:defun make-value-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key binding-properties values)
   (common-lisp:apply #'common-lisp:make-instance 'value-mappings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-mappings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-mappings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-mappings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name client-token
                     component-to-create)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name client-token
     component-to-create))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name client-token
                     form-to-create)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name client-token
     form-to-create))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-form))
(common-lisp:progn
 (common-lisp:defun create-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name client-token
                     theme-to-create)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name client-token
     theme-to-create))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteComponent" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteForm" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-form))
(common-lisp:progn
 (common-lisp:defun delete-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteTheme" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme))
(common-lisp:progn
 (common-lisp:defun exchange-code-for-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider request)
   (common-lisp:declare (common-lisp:ignorable provider request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-exchange-code-for-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tokens/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'provider))))
        "ExchangeCodeForToken" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'exchange-code-for-token))
(common-lisp:progn
 (common-lisp:defun export-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportComponents" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-components))
(common-lisp:progn
 (common-lisp:defun export-forms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-forms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportForms" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-forms))
(common-lisp:progn
 (common-lisp:defun export-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportThemes" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-themes))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-form))
(common-lisp:progn
 (common-lisp:defun get-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/metadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "GetMetadata" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-metadata))
(common-lisp:progn
 (common-lisp:defun get-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-theme))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListComponents" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-forms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-forms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListForms" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-forms))
(common-lisp:progn
 (common-lisp:defun list-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListThemes" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-themes))
(common-lisp:progn
 (common-lisp:defun put-metadata-flag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name feature-name
                     body)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name feature-name body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-metadata-flag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/metadata/features/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'feature-name))))
        "PutMetadataFlag" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-metadata-flag))
(common-lisp:progn
 (common-lisp:defun refresh-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider refresh-token-body)
   (common-lisp:declare (common-lisp:ignorable provider refresh-token-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-refresh-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tokens/~A/refresh"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'provider))))
        "RefreshToken" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'refresh-token))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id client-token
                     updated-component)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name id client-token
     updated-component))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id client-token
                     updated-form)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name id client-token
     updated-form))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-form))
(common-lisp:progn
 (common-lisp:defun update-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id client-token
                     updated-theme)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name id client-token
     updated-theme))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme))
