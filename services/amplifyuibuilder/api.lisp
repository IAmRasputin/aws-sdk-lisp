;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/amplifyuibuilder/api
  (:use)
  (:nicknames #:aws/amplifyuibuilder)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amplifyuibuilder/api)
(common-lisp:progn
 (common-lisp:defclass amplifyuibuilder-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "amplifyuibuilder"))
 (common-lisp:export 'amplifyuibuilder-request))
(common-lisp:progn
 (common-lisp:define-condition amplifyuibuilder-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amplifyuibuilder-error))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (action-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-parameters-"))
   (anchor common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or component-properties common-lisp:null))
   (global common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (model common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or mutation-action-set-state-parameter common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-parameters 'make-action-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anchor))
      (common-lisp:list
       (common-lisp:cons "anchor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global))
      (common-lisp:list
       (common-lisp:cons "global"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-parameters))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (component (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (binding-properties (common-lisp:error ":bindingproperties is required")
    :type (common-lisp:or component-binding-properties common-lisp:null))
   (children common-lisp:nil :type
    (common-lisp:or component-child-list common-lisp:null))
   (collection-properties common-lisp:nil :type
    (common-lisp:or component-collection-properties common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or component-events common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (overrides (common-lisp:error ":overrides is required") :type
    (common-lisp:or component-overrides common-lisp:null))
   (properties (common-lisp:error ":properties is required") :type
    (common-lisp:or component-properties common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (variants (common-lisp:error ":variants is required") :type
    (common-lisp:or component-variants common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-binding-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-binding-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (component-binding-properties-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-binding-properties-value-"))
   (binding-properties common-lisp:nil :type
    (common-lisp:or component-binding-properties-value-properties
                    common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-binding-properties-value
                    'make-component-binding-properties-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (component-binding-properties-value-properties (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-component-binding-properties-value-properties-"))
   (bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (field common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (model common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (predicates common-lisp:nil :type
    (common-lisp:or predicate-list common-lisp:null))
   (slot-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-binding-properties-value-properties
                    'make-component-binding-properties-value-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicates))
      (common-lisp:list
       (common-lisp:cons "predicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "slotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attribute))
      (common-lisp:list
       (common-lisp:cons "userAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-binding-properties-value-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (component-child (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-child-"))
   (children common-lisp:nil :type
    (common-lisp:or component-child-list common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or component-events common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (properties (common-lisp:error ":properties is required") :type
    (common-lisp:or component-properties common-lisp:null))
   (source-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component-child 'make-component-child))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-child))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-child))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-child))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-child-list ()
   '(trivial-types:proper-list component-child))
 (common-lisp:defun |make-component-child-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-child))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype component-collection-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-component-collection-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (component-condition-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-condition-property-"))
   (else common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null))
   (field common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operand common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operand-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (property common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (then common-lisp:nil :type
    (common-lisp:or component-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-condition-property
                    'make-component-condition-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'else))
      (common-lisp:list
       (common-lisp:cons "else"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand))
      (common-lisp:list
       (common-lisp:cons "operand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand-type))
      (common-lisp:list
       (common-lisp:cons "operandType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'then))
      (common-lisp:list
       (common-lisp:cons "then"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-condition-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (component-data-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-data-configuration-"))
   (identifiers common-lisp:nil :type
    (common-lisp:or identifier-list common-lisp:null))
   (model (common-lisp:error ":model is required") :type
    (common-lisp:or string common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or sort-property-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-data-configuration
                    'make-component-data-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifiers))
      (common-lisp:list
       (common-lisp:cons "identifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-data-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (component-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-event-"))
   (action common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (binding-event common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or action-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'component-event 'make-component-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-event))
      (common-lisp:list
       (common-lisp:cons "bindingEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-events () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-events|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-list () '(trivial-types:proper-list component))
 (common-lisp:defun |make-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-overrides () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-overrides|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-overrides-value () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-overrides-value|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (component-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-property-"))
   (binding-properties common-lisp:nil :type
    (common-lisp:or component-property-binding-properties common-lisp:null))
   (bindings common-lisp:nil :type
    (common-lisp:or form-bindings common-lisp:null))
   (collection-binding-properties common-lisp:nil :type
    (common-lisp:or component-property-binding-properties common-lisp:null))
   (component-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (concat common-lisp:nil :type
    (common-lisp:or component-property-list common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or component-condition-property common-lisp:null))
   (configured common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (event common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (imported-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (model common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (property common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-property 'make-component-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bindings))
      (common-lisp:list
       (common-lisp:cons "bindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-binding-properties))
      (common-lisp:list
       (common-lisp:cons "collectionBindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'concat))
      (common-lisp:list
       (common-lisp:cons "concat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured))
      (common-lisp:list
       (common-lisp:cons "configured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-value))
      (common-lisp:list
       (common-lisp:cons "importedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attribute))
      (common-lisp:list
       (common-lisp:cons "userAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (component-property-binding-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-property-binding-properties-"))
   (field common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (property (common-lisp:error ":property is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-property-binding-properties
                    'make-component-property-binding-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-binding-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-list ()
   '(trivial-types:proper-list component-property))
 (common-lisp:defun |make-component-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-summary-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or component-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun |make-component-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-variant (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-variant-"))
   (overrides common-lisp:nil :type
    (common-lisp:or component-overrides common-lisp:null))
   (variant-values common-lisp:nil :type
    (common-lisp:or component-variant-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-variant 'make-component-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-values))
      (common-lisp:list
       (common-lisp:cons "variantValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-variant-values () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-variant-values|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype component-variants ()
   '(trivial-types:proper-list component-variant))
 (common-lisp:defun |make-component-variants|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-variant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-data-"))
   (binding-properties (common-lisp:error ":bindingproperties is required")
    :type (common-lisp:or component-binding-properties common-lisp:null))
   (children common-lisp:nil :type
    (common-lisp:or component-child-list common-lisp:null))
   (collection-properties common-lisp:nil :type
    (common-lisp:or component-collection-properties common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or component-events common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (overrides (common-lisp:error ":overrides is required") :type
    (common-lisp:or component-overrides common-lisp:null))
   (properties (common-lisp:error ":properties is required") :type
    (common-lisp:or component-properties common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (variants (common-lisp:error ":variants is required") :type
    (common-lisp:or component-variants common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-data 'make-create-component-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (component-to-create (common-lisp:error ":componenttocreate is required")
    :type (common-lisp:or create-component-data common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-to-create))
      (common-lisp:list
       (common-lisp:cons "componentToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'component-to-create)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-response-"))
   (entity common-lisp:nil :type (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-form-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-form-data-"))
   (cta common-lisp:nil :type (common-lisp:or form-cta common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or form-data-type-config common-lisp:null))
   (fields (common-lisp:error ":fields is required") :type
    (common-lisp:or fields-map common-lisp:null))
   (form-action-type (common-lisp:error ":formactiontype is required") :type
    (common-lisp:or form-action-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-name common-lisp:null))
   (schema-version (common-lisp:error ":schemaversion is required") :type
    (common-lisp:or string common-lisp:null))
   (sectional-elements (common-lisp:error ":sectionalelements is required")
    :type (common-lisp:or sectional-element-map common-lisp:null))
   (style (common-lisp:error ":style is required") :type
    (common-lisp:or form-style common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-form-data 'make-create-form-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-form-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (form-to-create (common-lisp:error ":formtocreate is required") :type
    (common-lisp:or create-form-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-form-request 'make-create-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-to-create))
      (common-lisp:list
       (common-lisp:cons "formToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'form-to-create)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-form-response-"))
   (entity common-lisp:nil :type (common-lisp:or form common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-form-response 'make-create-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-form-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-data-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or theme-name common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or theme-values-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or theme-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-data 'make-create-theme-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (theme-to-create (common-lisp:error ":themetocreate is required") :type
    (common-lisp:or create-theme-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-request 'make-create-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme-to-create))
      (common-lisp:list
       (common-lisp:cons "themeToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-theme-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'theme-to-create)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-theme-response-"))
   (entity common-lisp:nil :type (common-lisp:or theme common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-theme-response 'make-create-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-theme-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-form-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-form-request 'make-delete-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-theme-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-theme-request 'make-delete-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exchange-code-for-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-exchange-code-for-token-request-"))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or token-providers common-lisp:null))
   (request (common-lisp:error ":request is required") :type
    (common-lisp:or exchange-code-for-token-request-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-request
                    'make-exchange-code-for-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'request)))
(common-lisp:progn
 (common-lisp:defstruct
     (exchange-code-for-token-request-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-exchange-code-for-token-request-body-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (redirect-uri (common-lisp:error ":redirecturi is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-request-body
                    'make-exchange-code-for-token-request-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-uri))
      (common-lisp:list
       (common-lisp:cons "redirectUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-request-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (exchange-code-for-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-exchange-code-for-token-response-"))
   (access-token (common-lisp:error ":accesstoken is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (expires-in (common-lisp:error ":expiresin is required") :type
    (common-lisp:or integer common-lisp:null))
   (refresh-token (common-lisp:error ":refreshtoken is required") :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exchange-code-for-token-response
                    'make-exchange-code-for-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exchange-code-for-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-components-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-components-request
                    'make-export-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-components-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or component-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-components-response
                    'make-export-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-forms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-forms-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-forms-request 'make-export-forms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-forms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-forms-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-forms-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or form-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-forms-response 'make-export-forms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-forms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-themes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-themes-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-themes-request 'make-export-themes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-themes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-themes-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or theme-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-themes-response 'make-export-themes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype features-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-features-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (field-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-config-"))
   (excluded common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (input-type common-lisp:nil :type
    (common-lisp:or field-input-config common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or field-position common-lisp:null))
   (validations common-lisp:nil :type
    (common-lisp:or validations-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-config 'make-field-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "inputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validations))
      (common-lisp:list
       (common-lisp:cons "validations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-input-config-"))
   (default-checked common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (default-country-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (descriptive-text common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-array common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (max-value common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (min-value common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (placeholder common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (read-only common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (required common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (step common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value-mappings common-lisp:nil :type
    (common-lisp:or value-mappings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-input-config 'make-field-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-checked))
      (common-lisp:list
       (common-lisp:cons "defaultChecked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-country-code))
      (common-lisp:list
       (common-lisp:cons "defaultCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descriptive-text))
      (common-lisp:list
       (common-lisp:cons "descriptiveText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-array))
      (common-lisp:list
       (common-lisp:cons "isArray"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "maxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "minValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placeholder))
      (common-lisp:list
       (common-lisp:cons "placeholder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-mappings))
      (common-lisp:list
       (common-lisp:cons "valueMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-position (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-position-"))
   (below common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (fixed common-lisp:nil :type
    (common-lisp:or fixed-position common-lisp:null))
   (right-of common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-position 'make-field-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'below))
      (common-lisp:list
       (common-lisp:cons "below"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed))
      (common-lisp:list
       (common-lisp:cons "fixed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'right-of))
      (common-lisp:list
       (common-lisp:cons "rightOf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field-validation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-validation-configuration-"))
   (num-values common-lisp:nil :type
    (common-lisp:or num-values common-lisp:null))
   (str-values common-lisp:nil :type
    (common-lisp:or str-values common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null))
   (validation-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-validation-configuration
                    'make-field-validation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-values))
      (common-lisp:list
       (common-lisp:cons "numValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'str-values))
      (common-lisp:list
       (common-lisp:cons "strValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-message))
      (common-lisp:list
       (common-lisp:cons "validationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          field-validation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fields-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-fields-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype fixed-position () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (form (:copier common-lisp:nil) (:conc-name "struct-shape-form-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (cta common-lisp:nil :type (common-lisp:or form-cta common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or form-data-type-config common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (fields (common-lisp:error ":fields is required") :type
    (common-lisp:or fields-map common-lisp:null))
   (form-action-type (common-lisp:error ":formactiontype is required") :type
    (common-lisp:or form-action-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-name common-lisp:null))
   (schema-version (common-lisp:error ":schemaversion is required") :type
    (common-lisp:or string common-lisp:null))
   (sectional-elements (common-lisp:error ":sectionalelements is required")
    :type (common-lisp:or sectional-element-map common-lisp:null))
   (style (common-lisp:error ":style is required") :type
    (common-lisp:or form-style common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form 'make-form))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form))
   common-lisp:nil))
(common-lisp:deftype form-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (form-binding-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-binding-element-"))
   (element (common-lisp:error ":element is required") :type
    (common-lisp:or string common-lisp:null))
   (property (common-lisp:error ":property is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-binding-element 'make-form-binding-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-binding-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-binding-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element))
      (common-lisp:list
       (common-lisp:cons "element"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-binding-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-bindings () 'common-lisp:hash-table)
 (common-lisp:defun |make-form-bindings| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (form-button (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-button-"))
   (children common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (excluded common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or field-position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-button 'make-form-button))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded))
      (common-lisp:list
       (common-lisp:cons "excluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-button))
   common-lisp:nil))
(common-lisp:deftype form-buttons-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (form-cta (:copier common-lisp:nil) (:conc-name "struct-shape-form-cta-"))
   (cancel common-lisp:nil :type (common-lisp:or form-button common-lisp:null))
   (clear common-lisp:nil :type (common-lisp:or form-button common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or form-buttons-position common-lisp:null))
   (submit common-lisp:nil :type
    (common-lisp:or form-button common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-cta 'make-form-cta))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-cta))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-cta))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancel))
      (common-lisp:list
       (common-lisp:cons "cancel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clear))
      (common-lisp:list
       (common-lisp:cons "clear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit))
      (common-lisp:list
       (common-lisp:cons "submit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-cta))
   common-lisp:nil))
(common-lisp:deftype form-data-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (form-data-type-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-data-type-config-"))
   (data-source-type (common-lisp:error ":datasourcetype is required") :type
    (common-lisp:or form-data-source-type common-lisp:null))
   (data-type-name (common-lisp:error ":datatypename is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-data-type-config 'make-form-data-type-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-type))
      (common-lisp:list
       (common-lisp:cons "dataSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-name))
      (common-lisp:list
       (common-lisp:cons "dataTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-data-type-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (form-input-value-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-input-value-property-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-input-value-property
                    'make-form-input-value-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          form-input-value-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-list () '(trivial-types:proper-list form))
 (common-lisp:defun |make-form-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form))
   aws-sdk/generator/shape::members))
(common-lisp:deftype form-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (form-style (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-style-"))
   (horizontal-gap common-lisp:nil :type
    (common-lisp:or form-style-config common-lisp:null))
   (outer-padding common-lisp:nil :type
    (common-lisp:or form-style-config common-lisp:null))
   (vertical-gap common-lisp:nil :type
    (common-lisp:or form-style-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-style 'make-form-style))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-style))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-style))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-gap))
      (common-lisp:list
       (common-lisp:cons "horizontalGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outer-padding))
      (common-lisp:list
       (common-lisp:cons "outerPadding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-gap))
      (common-lisp:list
       (common-lisp:cons "verticalGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-style))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (form-style-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-style-config-"))
   (token-reference common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'form-style-config 'make-form-style-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-style-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-style-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-reference))
      (common-lisp:list
       (common-lisp:cons "tokenReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-style-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (form-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-form-summary-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or form-data-type-config common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (form-action-type (common-lisp:error ":formactiontype is required") :type
    (common-lisp:or form-action-type common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or form-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'form-summary 'make-form-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input form-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input form-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input form-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype form-summary-list ()
   '(trivial-types:proper-list form-summary))
 (common-lisp:defun |make-form-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list form-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-request 'make-get-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-component-response-"))
   (component common-lisp:nil :type
    (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-component-response 'make-get-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'component)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-form-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-form-request 'make-get-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-form-response-"))
   (form common-lisp:nil :type (common-lisp:or form common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-form-response 'make-get-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form))
      (common-lisp:list
       (common-lisp:cons "form"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-form-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'form)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metadata-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metadata-request 'make-get-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-metadata-response-"))
   (features (common-lisp:error ":features is required") :type
    (common-lisp:or features-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-metadata-response 'make-get-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features))
      (common-lisp:list
       (common-lisp:cons "features"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-theme-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-theme-request 'make-get-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-theme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-theme-response-"))
   (theme common-lisp:nil :type (common-lisp:or theme common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-theme-response 'make-get-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'theme))
      (common-lisp:list
       (common-lisp:cons "theme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-theme-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'theme)))
(common-lisp:progn
 (common-lisp:deftype identifier-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype list-components-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-components-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or component-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:deftype list-forms-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-forms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-forms-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-forms-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-forms-request 'make-list-forms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-forms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-forms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-forms-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-forms-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or form-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-forms-response 'make-list-forms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-forms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-forms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-forms-response))
   common-lisp:nil))
(common-lisp:deftype list-themes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-themes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-themes-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-themes-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-themes-request 'make-list-themes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-themes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-themes-response-"))
   (entities (common-lisp:error ":entities is required") :type
    (common-lisp:or theme-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-themes-response 'make-list-themes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-themes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-themes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mutation-action-set-state-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-mutation-action-set-state-parameter-"))
   (component-name (common-lisp:error ":componentname is required") :type
    (common-lisp:or string common-lisp:null))
   (property (common-lisp:error ":property is required") :type
    (common-lisp:or string common-lisp:null))
   (set (common-lisp:error ":set is required") :type
    (common-lisp:or component-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mutation-action-set-state-parameter
                    'make-mutation-action-set-state-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set))
      (common-lisp:list
       (common-lisp:cons "set"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mutation-action-set-state-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype num-values () '(trivial-types:proper-list integer))
 (common-lisp:defun |make-num-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (predicate (:copier common-lisp:nil)
      (:conc-name "struct-shape-predicate-"))
   (and common-lisp:nil :type (common-lisp:or predicate-list common-lisp:null))
   (field common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operand common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (or common-lisp:nil :type (common-lisp:or predicate-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "and"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operand))
      (common-lisp:list
       (common-lisp:cons "operand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predicate-list () '(trivial-types:proper-list predicate))
 (common-lisp:defun |make-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-metadata-flag-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-metadata-flag-body-"))
   (new-value (common-lisp:error ":newvalue is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-metadata-flag-body 'make-put-metadata-flag-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-value))
      (common-lisp:list
       (common-lisp:cons "newValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-metadata-flag-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-metadata-flag-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (body (common-lisp:error ":body is required") :type
    (common-lisp:or put-metadata-flag-body common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name (common-lisp:error ":featurename is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-metadata-flag-request
                    'make-put-metadata-flag-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-metadata-flag-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:defstruct
     (refresh-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-refresh-token-request-"))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or token-providers common-lisp:null))
   (refresh-token-body (common-lisp:error ":refreshtokenbody is required")
    :type (common-lisp:or refresh-token-request-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'refresh-token-request 'make-refresh-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token-body))
      (common-lisp:list
       (common-lisp:cons "refreshTokenBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'refresh-token-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (refresh-token-request-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-refresh-token-request-body-"))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or sensitive-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'refresh-token-request-body
                    'make-refresh-token-request-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-request-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (refresh-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-refresh-token-response-"))
   (access-token (common-lisp:error ":accesstoken is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (expires-in (common-lisp:error ":expiresin is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'refresh-token-response 'make-refresh-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (sectional-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-sectional-element-"))
   (level common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (orientation common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (position common-lisp:nil :type
    (common-lisp:or field-position common-lisp:null))
   (text common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sectional-element 'make-sectional-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sectional-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sectional-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orientation))
      (common-lisp:list
       (common-lisp:cons "orientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sectional-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sectional-element-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-sectional-element-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sort-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sort-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-property-"))
   (direction (common-lisp:error ":direction is required") :type
    (common-lisp:or sort-direction common-lisp:null))
   (field (common-lisp:error ":field is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-property 'make-sort-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sort-property-list ()
   '(trivial-types:proper-list sort-property))
 (common-lisp:defun |make-sort-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype str-values () '(trivial-types:proper-list string))
 (common-lisp:defun |make-str-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (theme (:copier common-lisp:nil) (:conc-name "struct-shape-theme-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (modified-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or theme-name common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or theme-values-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or theme-values-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme 'make-theme))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-at))
      (common-lisp:list
       (common-lisp:cons "modifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-list () '(trivial-types:proper-list theme))
 (common-lisp:defun |make-theme-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme))
   aws-sdk/generator/shape::members))
(common-lisp:deftype theme-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (theme-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-summary-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or theme-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-summary 'make-theme-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-summary-list ()
   '(trivial-types:proper-list theme-summary))
 (common-lisp:defun |make-theme-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-value-"))
   (children common-lisp:nil :type
    (common-lisp:or theme-values-list common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-value 'make-theme-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (theme-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-theme-values-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or theme-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'theme-values 'make-theme-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input theme-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input theme-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input theme-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype theme-values-list ()
   '(trivial-types:proper-list theme-values))
 (common-lisp:defun |make-theme-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list theme-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token-providers () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (amplifyuibuilder-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-data-"))
   (binding-properties common-lisp:nil :type
    (common-lisp:or component-binding-properties common-lisp:null))
   (children common-lisp:nil :type
    (common-lisp:or component-child-list common-lisp:null))
   (collection-properties common-lisp:nil :type
    (common-lisp:or component-collection-properties common-lisp:null))
   (component-type common-lisp:nil :type
    (common-lisp:or component-type common-lisp:null))
   (events common-lisp:nil :type
    (common-lisp:or component-events common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or component-name common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or component-overrides common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or component-properties common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (variants common-lisp:nil :type
    (common-lisp:or component-variants common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-data 'make-update-component-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binding-properties))
      (common-lisp:list
       (common-lisp:cons "bindingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-properties))
      (common-lisp:list
       (common-lisp:cons "collectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "sourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variants))
      (common-lisp:list
       (common-lisp:cons "variants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (updated-component (common-lisp:error ":updatedcomponent is required") :type
    (common-lisp:or update-component-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-request 'make-update-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-component))
      (common-lisp:list
       (common-lisp:cons "updatedComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'updated-component)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-response-"))
   (entity common-lisp:nil :type (common-lisp:or component common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-response
                    'make-update-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-form-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-form-data-"))
   (cta common-lisp:nil :type (common-lisp:or form-cta common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or form-data-type-config common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or fields-map common-lisp:null))
   (form-action-type common-lisp:nil :type
    (common-lisp:or form-action-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or form-name common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sectional-elements common-lisp:nil :type
    (common-lisp:or sectional-element-map common-lisp:null))
   (style common-lisp:nil :type (common-lisp:or form-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-form-data 'make-update-form-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cta))
      (common-lisp:list
       (common-lisp:cons "cta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'form-action-type))
      (common-lisp:list
       (common-lisp:cons "formActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sectional-elements))
      (common-lisp:list
       (common-lisp:cons "sectionalElements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style))
      (common-lisp:list
       (common-lisp:cons "style"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-form-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-form-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (updated-form (common-lisp:error ":updatedform is required") :type
    (common-lisp:or update-form-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-form-request 'make-update-form-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-form))
      (common-lisp:list
       (common-lisp:cons "updatedForm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'updated-form)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-form-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-form-response-"))
   (entity common-lisp:nil :type (common-lisp:or form common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-form-response 'make-update-form-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-form-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-form-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-form-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-data-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or theme-name common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or theme-values-list common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or theme-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-data 'make-update-theme-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (updated-theme (common-lisp:error ":updatedtheme is required") :type
    (common-lisp:or update-theme-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-request 'make-update-theme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-theme))
      (common-lisp:list
       (common-lisp:cons "updatedTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-theme-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'updated-theme)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-theme-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-theme-response-"))
   (entity common-lisp:nil :type (common-lisp:or theme common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-theme-response 'make-update-theme-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-theme-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'entity)))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype validations-list ()
   '(trivial-types:proper-list field-validation-configuration))
 (common-lisp:defun |make-validations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            field-validation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (value-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-value-mapping-"))
   (display-value common-lisp:nil :type
    (common-lisp:or form-input-value-property common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or form-input-value-property common-lisp:null)))
 (common-lisp:export (common-lisp:list 'value-mapping 'make-value-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-value))
      (common-lisp:list
       (common-lisp:cons "displayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype value-mapping-list ()
   '(trivial-types:proper-list value-mapping))
 (common-lisp:defun |make-value-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (value-mappings (:copier common-lisp:nil)
      (:conc-name "struct-shape-value-mappings-"))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or value-mapping-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'value-mappings 'make-value-mappings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-mappings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-mappings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-mappings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token component-to-create
                     environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token component-to-create
     environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token environment-name
                     form-to-create)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token environment-name
     form-to-create))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-form))
(common-lisp:progn
 (common-lisp:defun create-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token environment-name
                     theme-to-create)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token environment-name
     theme-to-create))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "CreateTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-theme))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteComponent" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteForm" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-form))
(common-lisp:progn
 (common-lisp:defun delete-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteTheme" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-theme))
(common-lisp:progn
 (common-lisp:defun exchange-code-for-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider request)
   (common-lisp:declare (common-lisp:ignorable provider request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-exchange-code-for-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tokens/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'provider))))
        "ExchangeCodeForToken" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'exchange-code-for-token))
(common-lisp:progn
 (common-lisp:defun export-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportComponents" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-components))
(common-lisp:progn
 (common-lisp:defun export-forms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-forms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportForms" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-forms))
(common-lisp:progn
 (common-lisp:defun export-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/export/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ExportThemes" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-themes))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-form))
(common-lisp:progn
 (common-lisp:defun get-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/metadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "GetMetadata" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-metadata))
(common-lisp:progn
 (common-lisp:defun get-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name id)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-theme))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListComponents" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-forms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-forms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListForms" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-forms))
(common-lisp:progn
 (common-lisp:defun list-themes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-themes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/themes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))))
        "ListThemes" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-themes))
(common-lisp:progn
 (common-lisp:defun put-metadata-flag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id body environment-name
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id body environment-name feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-metadata-flag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/metadata/features/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'feature-name))))
        "PutMetadataFlag" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-metadata-flag))
(common-lisp:progn
 (common-lisp:defun refresh-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider refresh-token-body)
   (common-lisp:declare (common-lisp:ignorable provider refresh-token-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-refresh-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tokens/~A/refresh"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'provider))))
        "RefreshToken" "2021-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'refresh-token))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token environment-name id
                     updated-component)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token environment-name id
     updated-component))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/components/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateComponent" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-form
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token environment-name id
                     updated-form)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token environment-name id
     updated-form))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-form-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/app/~A/environment/~A/forms/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateForm" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-form))
(common-lisp:progn
 (common-lisp:defun update-theme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id client-token environment-name id
                     updated-theme)
   (common-lisp:declare
    (common-lisp:ignorable app-id client-token environment-name id
     updated-theme))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-theme-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'amplifyuibuilder-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/app/~A/environment/~A/themes/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'app-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'environment-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateTheme" "2021-08-11"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-theme))
