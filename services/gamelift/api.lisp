;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/gamelift/api
  (:use)
  (:nicknames #:aws/gamelift)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/gamelift/api)
(common-lisp:progn
 (common-lisp:defclass gamelift-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "gamelift" :protocol :json))
 (common-lisp:export 'gamelift-request))
(common-lisp:progn
 (common-lisp:define-condition gamelift-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'gamelift-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("FleetCapacityExceededException" . fleet-capacity-exceeded-exception)
    ("GameSessionFullException" . game-session-full-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidFleetStatusException" . invalid-fleet-status-exception)
    ("InvalidGameSessionStatusException"
     . invalid-game-session-status-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("OutOfCapacityException" . out-of-capacity-exception)
    ("TaggingFailedException" . tagging-failed-exception)
    ("TerminalRoutingStrategyException" . terminal-routing-strategy-exception)
    ("UnauthorizedException" . unauthorized-exception)
    ("UnsupportedRegionException" . unsupported-region-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-match-input common-lisp:nil
                       ((acceptance-type :initarg :acceptance-type :type
                         (common-lisp:or acceptance-type common-lisp:null)
                         :accessor %accept-match-input-acceptance-type
                         :initform
                         (common-lisp:error ":acceptance-type is required"))
                        (player-ids :initarg :player-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %accept-match-input-player-ids :initform
                         (common-lisp:error ":player-ids is required"))
                        (ticket-id :initarg :ticket-id :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %accept-match-input-ticket-id :initform
                         (common-lisp:error ":ticket-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-match-input 'make-accept-match-input))
 (common-lisp:defun make-accept-match-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acceptance-type player-ids ticket-id)
   (common-lisp:apply #'common-lisp:make-instance 'accept-match-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-match-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-match-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-id))
      (common-lisp:list
       (common-lisp:cons "TicketId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-ids))
      (common-lisp:list
       (common-lisp:cons "PlayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-type))
      (common-lisp:list
       (common-lisp:cons "AcceptanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-match-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-match-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-match-output 'make-accept-match-output))
 (common-lisp:defun make-accept-match-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'accept-match-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accept-match-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accept-match-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accept-match-output))
   common-lisp:nil))
(common-lisp:deftype acceptance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alias common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alias-last-updated-time :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %alias-creation-time :initform common-lisp:nil)
                        (routing-strategy :initarg :routing-strategy :type
                         (common-lisp:or routing-strategy common-lisp:null)
                         :accessor %alias-routing-strategy :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or free-text common-lisp:null) :accessor
                         %alias-description :initform common-lisp:nil)
                        (alias-arn :initarg :alias-arn :type
                         (common-lisp:or alias-arn common-lisp:null) :accessor
                         %alias-alias-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-blank-and-length-constraint-string
                                         common-lisp:null)
                         :accessor %alias-name :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id common-lisp:null) :accessor
                         %alias-alias-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'alias 'make-alias))
 (common-lisp:defun make-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time creation-time
                     routing-strategy description alias-arn name alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-strategy))
      (common-lisp:list
       (common-lisp:cons "RoutingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias))
   common-lisp:nil))
(common-lisp:deftype alias-arn () 'common-lisp:string)
(common-lisp:deftype alias-id () 'common-lisp:string)
(common-lisp:deftype alias-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alias-list () '(trivial-types:proper-list alias))
 (common-lisp:defun |make-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anywhere-configuration common-lisp:nil
                       ((cost :initarg :cost :type
                         (common-lisp:or non-negative-limited-length-double
                                         common-lisp:null)
                         :accessor %anywhere-configuration-cost :initform
                         (common-lisp:error ":cost is required"))))
 (common-lisp:export
  (common-lisp:list 'anywhere-configuration 'make-anywhere-configuration))
 (common-lisp:defun make-anywhere-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cost)
   (common-lisp:apply #'common-lisp:make-instance 'anywhere-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anywhere-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anywhere-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost))
      (common-lisp:list
       (common-lisp:cons "Cost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anywhere-configuration))
   common-lisp:nil))
(common-lisp:deftype arn-string-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute-value common-lisp:nil
                       ((sdm :initarg :sdm :type
                         (common-lisp:or player-attribute-string-double-map
                                         common-lisp:null)
                         :accessor %attribute-value-sdm :initform
                         common-lisp:nil)
                        (sl :initarg :sl :type
                         (common-lisp:or player-attribute-string-list
                                         common-lisp:null)
                         :accessor %attribute-value-sl :initform
                         common-lisp:nil)
                        (n :initarg :n :type
                         (common-lisp:or double-object common-lisp:null)
                         :accessor %attribute-value-n :initform
                         common-lisp:nil)
                        (s :initarg :s :type
                         (common-lisp:or player-attribute-string
                                         common-lisp:null)
                         :accessor %attribute-value-s :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attribute-value 'make-attribute-value))
 (common-lisp:defun make-attribute-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sdm sl n s)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's))
      (common-lisp:list
       (common-lisp:cons "S"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'n))
      (common-lisp:list
       (common-lisp:cons "N"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sl))
      (common-lisp:list
       (common-lisp:cons "SL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sdm))
      (common-lisp:list
       (common-lisp:cons "SDM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-credentials common-lisp:nil
                       ((session-token :initarg :session-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-credentials-session-token :initform
                         common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-credentials-secret-access-key :initform
                         common-lisp:nil)
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-credentials-access-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-credentials 'make-aws-credentials))
 (common-lisp:defun make-aws-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-token secret-access-key
                     access-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-credentials))
   common-lisp:nil))
(common-lisp:deftype backfill-mode () 'common-lisp:string)
(common-lisp:deftype balancing-strategy () 'common-lisp:string)
(common-lisp:deftype boolean-model () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass build common-lisp:nil
                       ((server-sdk-version :initarg :server-sdk-version :type
                         (common-lisp:or server-sdk-version common-lisp:null)
                         :accessor %build-server-sdk-version :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %build-creation-time :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %build-operating-system :initform
                         common-lisp:nil)
                        (size-on-disk :initarg :size-on-disk :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor %build-size-on-disk :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or build-status common-lisp:null)
                         :accessor %build-status :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or free-text common-lisp:null) :accessor
                         %build-version :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or free-text common-lisp:null) :accessor
                         %build-name :initform common-lisp:nil)
                        (build-arn :initarg :build-arn :type
                         (common-lisp:or build-arn common-lisp:null) :accessor
                         %build-build-arn :initform common-lisp:nil)
                        (build-id :initarg :build-id :type
                         (common-lisp:or build-id common-lisp:null) :accessor
                         %build-build-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'build 'make-build))
 (common-lisp:defun make-build
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-sdk-version creation-time
                     operating-system size-on-disk status version name
                     build-arn build-id)
   (common-lisp:apply #'common-lisp:make-instance 'build
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input build))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input build))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-arn))
      (common-lisp:list
       (common-lisp:cons "BuildArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-on-disk))
      (common-lisp:list
       (common-lisp:cons "SizeOnDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-sdk-version))
      (common-lisp:list
       (common-lisp:cons "ServerSdkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input build))
   common-lisp:nil))
(common-lisp:deftype build-arn () 'common-lisp:string)
(common-lisp:deftype build-id () 'common-lisp:string)
(common-lisp:deftype build-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype build-list () '(trivial-types:proper-list build))
 (common-lisp:defun |make-build-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list build))
   aws-sdk/generator/shape::members))
(common-lisp:deftype build-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-configuration common-lisp:nil
                       ((certificate-type :initarg :certificate-type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %certificate-configuration-certificate-type
                         :initform
                         (common-lisp:error ":certificate-type is required"))))
 (common-lisp:export
  (common-lisp:list 'certificate-configuration
                    'make-certificate-configuration))
 (common-lisp:defun make-certificate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-type)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-type))
      (common-lisp:list
       (common-lisp:cons "CertificateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-configuration))
   common-lisp:nil))
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass claim-game-server-input common-lisp:nil
                       ((game-server-data :initarg :game-server-data :type
                         (common-lisp:or game-server-data common-lisp:null)
                         :accessor %claim-game-server-input-game-server-data
                         :initform common-lisp:nil)
                        (game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %claim-game-server-input-game-server-id
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %claim-game-server-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'claim-game-server-input 'make-claim-game-server-input))
 (common-lisp:defun make-claim-game-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-data game-server-id
                     game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'claim-game-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-data))
      (common-lisp:list
       (common-lisp:cons "GameServerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass claim-game-server-output common-lisp:nil
                       ((game-server :initarg :game-server :type
                         (common-lisp:or game-server common-lisp:null)
                         :accessor %claim-game-server-output-game-server
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'claim-game-server-output 'make-claim-game-server-output))
 (common-lisp:defun make-claim-game-server-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server)
   (common-lisp:apply #'common-lisp:make-instance 'claim-game-server-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server))
      (common-lisp:list
       (common-lisp:cons "GameServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-game-server-output))
   common-lisp:nil))
(common-lisp:deftype comparison-operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute common-lisp:nil
                       ((game-lift-service-sdk-endpoint :initarg
                         :game-lift-service-sdk-endpoint :type
                         (common-lisp:or game-lift-service-sdk-endpoint-output
                                         common-lisp:null)
                         :accessor %compute-game-lift-service-sdk-endpoint
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %compute-type :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %compute-operating-system :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %compute-creation-time :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %compute-location :initform common-lisp:nil)
                        (compute-status :initarg :compute-status :type
                         (common-lisp:or compute-status common-lisp:null)
                         :accessor %compute-compute-status :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %compute-dns-name :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %compute-ip-address :initform common-lisp:nil)
                        (compute-arn :initarg :compute-arn :type
                         (common-lisp:or compute-arn common-lisp:null)
                         :accessor %compute-compute-arn :initform
                         common-lisp:nil)
                        (compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name common-lisp:null)
                         :accessor %compute-compute-name :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %compute-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %compute-fleet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compute 'make-compute))
 (common-lisp:defun make-compute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-lift-service-sdk-endpoint type
                     operating-system creation-time location compute-status
                     dns-name ip-address compute-arn compute-name fleet-arn
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'compute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-arn))
      (common-lisp:list
       (common-lisp:cons "ComputeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-status))
      (common-lisp:list
       (common-lisp:cons "ComputeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-lift-service-sdk-endpoint))
      (common-lisp:list
       (common-lisp:cons "GameLiftServiceSdkEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute))
   common-lisp:nil))
(common-lisp:deftype compute-arn () 'common-lisp:string)
(common-lisp:deftype compute-auth-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compute-list () '(trivial-types:proper-list compute))
 (common-lisp:defun |make-compute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compute-name () 'common-lisp:string)
(common-lisp:deftype compute-name-or-arn () 'common-lisp:string)
(common-lisp:deftype compute-status () 'common-lisp:string)
(common-lisp:deftype compute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-alias-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-alias-input-tags :initform common-lisp:nil)
                        (routing-strategy :initarg :routing-strategy :type
                         (common-lisp:or routing-strategy common-lisp:null)
                         :accessor %create-alias-input-routing-strategy
                         :initform
                         (common-lisp:error ":routing-strategy is required"))
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-alias-input-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-blank-and-length-constraint-string
                                         common-lisp:null)
                         :accessor %create-alias-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-alias-input 'make-create-alias-input))
 (common-lisp:defun make-create-alias-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags routing-strategy description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-strategy))
      (common-lisp:list
       (common-lisp:cons "RoutingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-alias-output common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %create-alias-output-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-alias-output 'make-create-alias-output))
 (common-lisp:defun make-create-alias-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-build-input common-lisp:nil
                       ((server-sdk-version :initarg :server-sdk-version :type
                         (common-lisp:or server-sdk-version common-lisp:null)
                         :accessor %create-build-input-server-sdk-version
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-build-input-tags :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %create-build-input-operating-system
                         :initform common-lisp:nil)
                        (storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-build-input-storage-location :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-build-input-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-build-input-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-build-input 'make-create-build-input))
 (common-lisp:defun make-create-build-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-sdk-version tags operating-system
                     storage-location version name)
   (common-lisp:apply #'common-lisp:make-instance 'create-build-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-build-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-build-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-sdk-version))
      (common-lisp:list
       (common-lisp:cons "ServerSdkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-build-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-build-output common-lisp:nil
                       ((storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-build-output-storage-location :initform
                         common-lisp:nil)
                        (upload-credentials :initarg :upload-credentials :type
                         (common-lisp:or aws-credentials common-lisp:null)
                         :accessor %create-build-output-upload-credentials
                         :initform common-lisp:nil)
                        (build :initarg :build :type
                         (common-lisp:or build common-lisp:null) :accessor
                         %create-build-output-build :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-build-output 'make-create-build-output))
 (common-lisp:defun make-create-build-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-location upload-credentials
                     build)
   (common-lisp:apply #'common-lisp:make-instance 'create-build-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-build-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-build-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build))
      (common-lisp:list
       (common-lisp:cons "Build"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-credentials))
      (common-lisp:list
       (common-lisp:cons "UploadCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-build-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-input common-lisp:nil
                       ((anywhere-configuration :initarg
                         :anywhere-configuration :type
                         (common-lisp:or anywhere-configuration
                                         common-lisp:null)
                         :accessor %create-fleet-input-anywhere-configuration
                         :initform common-lisp:nil)
                        (compute-type :initarg :compute-type :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %create-fleet-input-compute-type :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-fleet-input-tags :initform common-lisp:nil)
                        (locations :initarg :locations :type
                         (common-lisp:or location-configuration-list
                                         common-lisp:null)
                         :accessor %create-fleet-input-locations :initform
                         common-lisp:nil)
                        (certificate-configuration :initarg
                         :certificate-configuration :type
                         (common-lisp:or certificate-configuration
                                         common-lisp:null)
                         :accessor
                         %create-fleet-input-certificate-configuration
                         :initform common-lisp:nil)
                        (instance-role-arn :initarg :instance-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-fleet-input-instance-role-arn
                         :initform common-lisp:nil)
                        (fleet-type :initarg :fleet-type :type
                         (common-lisp:or fleet-type common-lisp:null) :accessor
                         %create-fleet-input-fleet-type :initform
                         common-lisp:nil)
                        (peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-fleet-input-peer-vpc-id :initform
                         common-lisp:nil)
                        (peer-vpc-aws-account-id :initarg
                         :peer-vpc-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-fleet-input-peer-vpc-aws-account-id
                         :initform common-lisp:nil)
                        (metric-groups :initarg :metric-groups :type
                         (common-lisp:or metric-group-list common-lisp:null)
                         :accessor %create-fleet-input-metric-groups :initform
                         common-lisp:nil)
                        (resource-creation-limit-policy :initarg
                         :resource-creation-limit-policy :type
                         (common-lisp:or resource-creation-limit-policy
                                         common-lisp:null)
                         :accessor
                         %create-fleet-input-resource-creation-limit-policy
                         :initform common-lisp:nil)
                        (runtime-configuration :initarg :runtime-configuration
                         :type
                         (common-lisp:or runtime-configuration
                                         common-lisp:null)
                         :accessor %create-fleet-input-runtime-configuration
                         :initform common-lisp:nil)
                        (new-game-session-protection-policy :initarg
                         :new-game-session-protection-policy :type
                         (common-lisp:or protection-policy common-lisp:null)
                         :accessor
                         %create-fleet-input-new-game-session-protection-policy
                         :initform common-lisp:nil)
                        (ec2inbound-permissions :initarg
                         :ec2inbound-permissions :type
                         (common-lisp:or ip-permissions-list common-lisp:null)
                         :accessor %create-fleet-input-ec2inbound-permissions
                         :initform common-lisp:nil)
                        (ec2instance-type :initarg :ec2instance-type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %create-fleet-input-ec2instance-type
                         :initform common-lisp:nil)
                        (log-paths :initarg :log-paths :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-fleet-input-log-paths :initform
                         common-lisp:nil)
                        (server-launch-parameters :initarg
                         :server-launch-parameters :type
                         (common-lisp:or launch-parameters-string-model
                                         common-lisp:null)
                         :accessor %create-fleet-input-server-launch-parameters
                         :initform common-lisp:nil)
                        (server-launch-path :initarg :server-launch-path :type
                         (common-lisp:or launch-path-string-model
                                         common-lisp:null)
                         :accessor %create-fleet-input-server-launch-path
                         :initform common-lisp:nil)
                        (script-id :initarg :script-id :type
                         (common-lisp:or script-id-or-arn common-lisp:null)
                         :accessor %create-fleet-input-script-id :initform
                         common-lisp:nil)
                        (build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %create-fleet-input-build-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-fleet-input-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-fleet-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-input 'make-create-fleet-input))
 (common-lisp:defun make-create-fleet-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anywhere-configuration compute-type tags
                     locations certificate-configuration instance-role-arn
                     fleet-type peer-vpc-id peer-vpc-aws-account-id
                     metric-groups resource-creation-limit-policy
                     runtime-configuration new-game-session-protection-policy
                     ec2inbound-permissions ec2instance-type log-paths
                     server-launch-parameters server-launch-path script-id
                     build-id description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-launch-path))
      (common-lisp:list
       (common-lisp:cons "ServerLaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-launch-parameters))
      (common-lisp:list
       (common-lisp:cons "ServerLaunchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-paths))
      (common-lisp:list
       (common-lisp:cons "LogPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2inbound-permissions))
      (common-lisp:list
       (common-lisp:cons "EC2InboundPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-game-session-protection-policy))
      (common-lisp:list
       (common-lisp:cons "NewGameSessionProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "RuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-creation-limit-policy))
      (common-lisp:list
       (common-lisp:cons "ResourceCreationLimitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-groups))
      (common-lisp:list
       (common-lisp:cons "MetricGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'peer-vpc-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-type))
      (common-lisp:list
       (common-lisp:cons "FleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-configuration))
      (common-lisp:list
       (common-lisp:cons "CertificateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "Locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anywhere-configuration))
      (common-lisp:list
       (common-lisp:cons "AnywhereConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-locations-input common-lisp:nil
                       ((locations :initarg :locations :type
                         (common-lisp:or location-configuration-list
                                         common-lisp:null)
                         :accessor %create-fleet-locations-input-locations
                         :initform
                         (common-lisp:error ":locations is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %create-fleet-locations-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-locations-input
                    'make-create-fleet-locations-input))
 (common-lisp:defun make-create-fleet-locations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locations fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-locations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "Locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-locations-output common-lisp:nil
                       ((location-states :initarg :location-states :type
                         (common-lisp:or location-state-list common-lisp:null)
                         :accessor
                         %create-fleet-locations-output-location-states
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %create-fleet-locations-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %create-fleet-locations-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-locations-output
                    'make-create-fleet-locations-output))
 (common-lisp:defun make-create-fleet-locations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-states fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fleet-locations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-states))
      (common-lisp:list
       (common-lisp:cons "LocationStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-locations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-output common-lisp:nil
                       ((location-states :initarg :location-states :type
                         (common-lisp:or location-state-list common-lisp:null)
                         :accessor %create-fleet-output-location-states
                         :initform common-lisp:nil)
                        (fleet-attributes :initarg :fleet-attributes :type
                         (common-lisp:or fleet-attributes common-lisp:null)
                         :accessor %create-fleet-output-fleet-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-output 'make-create-fleet-output))
 (common-lisp:defun make-create-fleet-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-states fleet-attributes)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-attributes))
      (common-lisp:list
       (common-lisp:cons "FleetAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-states))
      (common-lisp:list
       (common-lisp:cons "LocationStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-server-group-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-game-server-group-input-tags :initform
                         common-lisp:nil)
                        (vpc-subnets :initarg :vpc-subnets :type
                         (common-lisp:or vpc-subnets common-lisp:null)
                         :accessor %create-game-server-group-input-vpc-subnets
                         :initform common-lisp:nil)
                        (game-server-protection-policy :initarg
                         :game-server-protection-policy :type
                         (common-lisp:or game-server-protection-policy
                                         common-lisp:null)
                         :accessor
                         %create-game-server-group-input-game-server-protection-policy
                         :initform common-lisp:nil)
                        (balancing-strategy :initarg :balancing-strategy :type
                         (common-lisp:or balancing-strategy common-lisp:null)
                         :accessor
                         %create-game-server-group-input-balancing-strategy
                         :initform common-lisp:nil)
                        (auto-scaling-policy :initarg :auto-scaling-policy
                         :type
                         (common-lisp:or game-server-group-auto-scaling-policy
                                         common-lisp:null)
                         :accessor
                         %create-game-server-group-input-auto-scaling-policy
                         :initform common-lisp:nil)
                        (instance-definitions :initarg :instance-definitions
                         :type
                         (common-lisp:or instance-definitions common-lisp:null)
                         :accessor
                         %create-game-server-group-input-instance-definitions
                         :initform
                         (common-lisp:error
                          ":instance-definitions is required"))
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or launch-template-specification
                                         common-lisp:null)
                         :accessor
                         %create-game-server-group-input-launch-template
                         :initform
                         (common-lisp:error ":launch-template is required"))
                        (max-size :initarg :max-size :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %create-game-server-group-input-max-size
                         :initform (common-lisp:error ":max-size is required"))
                        (min-size :initarg :min-size :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %create-game-server-group-input-min-size
                         :initform (common-lisp:error ":min-size is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %create-game-server-group-input-role-arn
                         :initform (common-lisp:error ":role-arn is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name
                                         common-lisp:null)
                         :accessor
                         %create-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-game-server-group-input
                    'make-create-game-server-group-input))
 (common-lisp:defun make-create-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags vpc-subnets
                     game-server-protection-policy balancing-strategy
                     auto-scaling-policy instance-definitions launch-template
                     max-size min-size role-arn game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-definitions))
      (common-lisp:list
       (common-lisp:cons "InstanceDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-policy))
      (common-lisp:list
       (common-lisp:cons "AutoScalingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balancing-strategy))
      (common-lisp:list
       (common-lisp:cons "BalancingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-protection-policy))
      (common-lisp:list
       (common-lisp:cons "GameServerProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnets))
      (common-lisp:list
       (common-lisp:cons "VpcSubnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %create-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-game-server-group-output
                    'make-create-game-server-group-output))
 (common-lisp:defun make-create-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-session-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %create-game-session-input-location
                         :initform common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or large-game-session-data
                                         common-lisp:null)
                         :accessor %create-game-session-input-game-session-data
                         :initform common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor %create-game-session-input-idempotency-token
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor %create-game-session-input-game-session-id
                         :initform common-lisp:nil)
                        (creator-id :initarg :creator-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-game-session-input-creator-id
                         :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor %create-game-session-input-game-properties
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-game-session-input-name :initform
                         common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %create-game-session-input-maximum-player-session-count
                         :initform
                         (common-lisp:error
                          ":maximum-player-session-count is required"))
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %create-game-session-input-alias-id
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %create-game-session-input-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-game-session-input
                    'make-create-game-session-input))
 (common-lisp:defun make-create-game-session-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location game-session-data
                     idempotency-token game-session-id creator-id
                     game-properties name maximum-player-session-count alias-id
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-game-session-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-session-output common-lisp:nil
                       ((game-session :initarg :game-session :type
                         (common-lisp:or game-session common-lisp:null)
                         :accessor %create-game-session-output-game-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-game-session-output
                    'make-create-game-session-output))
 (common-lisp:defun make-create-game-session-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session)
   (common-lisp:apply #'common-lisp:make-instance 'create-game-session-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session))
      (common-lisp:list
       (common-lisp:cons "GameSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-session-queue-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-game-session-queue-input-tags :initform
                         common-lisp:nil)
                        (notification-target :initarg :notification-target
                         :type
                         (common-lisp:or queue-sns-arn-string-model
                                         common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-notification-target
                         :initform common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or queue-custom-event-data
                                         common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-custom-event-data
                         :initform common-lisp:nil)
                        (priority-configuration :initarg
                         :priority-configuration :type
                         (common-lisp:or priority-configuration
                                         common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-priority-configuration
                         :initform common-lisp:nil)
                        (filter-configuration :initarg :filter-configuration
                         :type
                         (common-lisp:or filter-configuration common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-filter-configuration
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or game-session-queue-destination-list
                                         common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-destinations
                         :initform common-lisp:nil)
                        (player-latency-policies :initarg
                         :player-latency-policies :type
                         (common-lisp:or player-latency-policy-list
                                         common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-player-latency-policies
                         :initform common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %create-game-session-queue-input-timeout-in-seconds
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or game-session-queue-name
                                         common-lisp:null)
                         :accessor %create-game-session-queue-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-game-session-queue-input
                    'make-create-game-session-queue-input))
 (common-lisp:defun make-create-game-session-queue-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags notification-target
                     custom-event-data priority-configuration
                     filter-configuration destinations player-latency-policies
                     timeout-in-seconds name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-game-session-queue-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-latency-policies))
      (common-lisp:list
       (common-lisp:cons "PlayerLatencyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-configuration))
      (common-lisp:list
       (common-lisp:cons "FilterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'priority-configuration))
      (common-lisp:list
       (common-lisp:cons "PriorityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-game-session-queue-output common-lisp:nil
                       ((game-session-queue :initarg :game-session-queue :type
                         (common-lisp:or game-session-queue common-lisp:null)
                         :accessor
                         %create-game-session-queue-output-game-session-queue
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-game-session-queue-output
                    'make-create-game-session-queue-output))
 (common-lisp:defun make-create-game-session-queue-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-queue)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-game-session-queue-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-queue))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-game-session-queue-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-location-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-location-input-tags :initform common-lisp:nil)
                        (location-name :initarg :location-name :type
                         (common-lisp:or custom-input-location-string-model
                                         common-lisp:null)
                         :accessor %create-location-input-location-name
                         :initform
                         (common-lisp:error ":location-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-location-input 'make-create-location-input))
 (common-lisp:defun make-create-location-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags location-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-location-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-location-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-location-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-name))
      (common-lisp:list
       (common-lisp:cons "LocationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-location-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-location-output common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-model common-lisp:null)
                         :accessor %create-location-output-location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-location-output 'make-create-location-output))
 (common-lisp:defun make-create-location-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location)
   (common-lisp:apply #'common-lisp:make-instance 'create-location-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-location-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-location-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-matchmaking-configuration-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-matchmaking-configuration-input-tags :initform
                         common-lisp:nil)
                        (flex-match-mode :initarg :flex-match-mode :type
                         (common-lisp:or flex-match-mode common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-flex-match-mode
                         :initform common-lisp:nil)
                        (backfill-mode :initarg :backfill-mode :type
                         (common-lisp:or backfill-mode common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-backfill-mode
                         :initform common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or game-session-data common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-game-session-data
                         :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-game-properties
                         :initform common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or custom-event-data common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-custom-event-data
                         :initform common-lisp:nil)
                        (additional-player-count :initarg
                         :additional-player-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-additional-player-count
                         :initform common-lisp:nil)
                        (notification-target :initarg :notification-target
                         :type
                         (common-lisp:or sns-arn-string-model common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-notification-target
                         :initform common-lisp:nil)
                        (rule-set-name :initarg :rule-set-name :type
                         (common-lisp:or matchmaking-rule-set-name
                                         common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-rule-set-name
                         :initform
                         (common-lisp:error ":rule-set-name is required"))
                        (acceptance-required :initarg :acceptance-required
                         :type (common-lisp:or boolean-model common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-acceptance-required
                         :initform
                         (common-lisp:error
                          ":acceptance-required is required"))
                        (acceptance-timeout-seconds :initarg
                         :acceptance-timeout-seconds :type
                         (common-lisp:or matchmaking-acceptance-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-acceptance-timeout-seconds
                         :initform common-lisp:nil)
                        (request-timeout-seconds :initarg
                         :request-timeout-seconds :type
                         (common-lisp:or matchmaking-request-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-request-timeout-seconds
                         :initform
                         (common-lisp:error
                          ":request-timeout-seconds is required"))
                        (game-session-queue-arns :initarg
                         :game-session-queue-arns :type
                         (common-lisp:or queue-arns-list common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-game-session-queue-arns
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %create-matchmaking-configuration-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-matchmaking-configuration-input
                    'make-create-matchmaking-configuration-input))
 (common-lisp:defun make-create-matchmaking-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags flex-match-mode backfill-mode
                     game-session-data game-properties custom-event-data
                     additional-player-count notification-target rule-set-name
                     acceptance-required acceptance-timeout-seconds
                     request-timeout-seconds game-session-queue-arns
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-matchmaking-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-arns))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "RequestTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceptance-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "AcceptanceTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-required))
      (common-lisp:list
       (common-lisp:cons "AcceptanceRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-player-count))
      (common-lisp:list
       (common-lisp:cons "AdditionalPlayerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-mode))
      (common-lisp:list
       (common-lisp:cons "BackfillMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flex-match-mode))
      (common-lisp:list
       (common-lisp:cons "FlexMatchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-matchmaking-configuration-output common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or matchmaking-configuration
                                         common-lisp:null)
                         :accessor
                         %create-matchmaking-configuration-output-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-matchmaking-configuration-output
                    'make-create-matchmaking-configuration-output))
 (common-lisp:defun make-create-matchmaking-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-matchmaking-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-matchmaking-rule-set-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-matchmaking-rule-set-input-tags :initform
                         common-lisp:nil)
                        (rule-set-body :initarg :rule-set-body :type
                         (common-lisp:or rule-set-body common-lisp:null)
                         :accessor
                         %create-matchmaking-rule-set-input-rule-set-body
                         :initform
                         (common-lisp:error ":rule-set-body is required"))
                        (name :initarg :name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %create-matchmaking-rule-set-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-matchmaking-rule-set-input
                    'make-create-matchmaking-rule-set-input))
 (common-lisp:defun make-create-matchmaking-rule-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags rule-set-body name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-matchmaking-rule-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-body))
      (common-lisp:list
       (common-lisp:cons "RuleSetBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-matchmaking-rule-set-output common-lisp:nil
                       ((rule-set :initarg :rule-set :type
                         (common-lisp:or matchmaking-rule-set common-lisp:null)
                         :accessor %create-matchmaking-rule-set-output-rule-set
                         :initform
                         (common-lisp:error ":rule-set is required"))))
 (common-lisp:export
  (common-lisp:list 'create-matchmaking-rule-set-output
                    'make-create-matchmaking-rule-set-output))
 (common-lisp:defun make-create-matchmaking-rule-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-set)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-matchmaking-rule-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set))
      (common-lisp:list
       (common-lisp:cons "RuleSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matchmaking-rule-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-player-session-input common-lisp:nil
                       ((player-data :initarg :player-data :type
                         (common-lisp:or player-data common-lisp:null)
                         :accessor %create-player-session-input-player-data
                         :initform common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-player-session-input-player-id
                         :initform
                         (common-lisp:error ":player-id is required"))
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor %create-player-session-input-game-session-id
                         :initform
                         (common-lisp:error ":game-session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-player-session-input
                    'make-create-player-session-input))
 (common-lisp:defun make-create-player-session-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-data player-id game-session-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-player-session-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-data))
      (common-lisp:list
       (common-lisp:cons "PlayerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-player-session-output common-lisp:nil
                       ((player-session :initarg :player-session :type
                         (common-lisp:or player-session common-lisp:null)
                         :accessor %create-player-session-output-player-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-player-session-output
                    'make-create-player-session-output))
 (common-lisp:defun make-create-player-session-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-session)
   (common-lisp:apply #'common-lisp:make-instance 'create-player-session-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-session))
      (common-lisp:list
       (common-lisp:cons "PlayerSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-player-session-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-player-sessions-input common-lisp:nil
                       ((player-data-map :initarg :player-data-map :type
                         (common-lisp:or player-data-map common-lisp:null)
                         :accessor
                         %create-player-sessions-input-player-data-map
                         :initform common-lisp:nil)
                        (player-ids :initarg :player-ids :type
                         (common-lisp:or player-id-list common-lisp:null)
                         :accessor %create-player-sessions-input-player-ids
                         :initform
                         (common-lisp:error ":player-ids is required"))
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %create-player-sessions-input-game-session-id
                         :initform
                         (common-lisp:error ":game-session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-player-sessions-input
                    'make-create-player-sessions-input))
 (common-lisp:defun make-create-player-sessions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-data-map player-ids
                     game-session-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-player-sessions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-ids))
      (common-lisp:list
       (common-lisp:cons "PlayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-data-map))
      (common-lisp:list
       (common-lisp:cons "PlayerDataMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-player-sessions-output common-lisp:nil
                       ((player-sessions :initarg :player-sessions :type
                         (common-lisp:or player-session-list common-lisp:null)
                         :accessor
                         %create-player-sessions-output-player-sessions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-player-sessions-output
                    'make-create-player-sessions-output))
 (common-lisp:defun make-create-player-sessions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-sessions)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-player-sessions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-sessions))
      (common-lisp:list
       (common-lisp:cons "PlayerSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-player-sessions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-script-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-script-input-tags :initform common-lisp:nil)
                        (zip-file :initarg :zip-file :type
                         (common-lisp:or zip-blob common-lisp:null) :accessor
                         %create-script-input-zip-file :initform
                         common-lisp:nil)
                        (storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-script-input-storage-location :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-script-input-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %create-script-input-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-script-input 'make-create-script-input))
 (common-lisp:defun make-create-script-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags zip-file storage-location version
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-script-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-script-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-script-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-script-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-script-output common-lisp:nil
                       ((script :initarg :script :type
                         (common-lisp:or script common-lisp:null) :accessor
                         %create-script-output-script :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-script-output 'make-create-script-output))
 (common-lisp:defun make-create-script-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script)
   (common-lisp:apply #'common-lisp:make-instance 'create-script-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-script-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-script-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "Script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-script-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-peering-authorization-input common-lisp:nil
                       ((peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %create-vpc-peering-authorization-input-peer-vpc-id
                         :initform
                         (common-lisp:error ":peer-vpc-id is required"))
                        (game-lift-aws-account-id :initarg
                         :game-lift-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %create-vpc-peering-authorization-input-game-lift-aws-account-id
                         :initform
                         (common-lisp:error
                          ":game-lift-aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-authorization-input
                    'make-create-vpc-peering-authorization-input))
 (common-lisp:defun make-create-vpc-peering-authorization-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key peer-vpc-id game-lift-aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-peering-authorization-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-lift-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "GameLiftAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-peering-authorization-output common-lisp:nil
                       ((vpc-peering-authorization :initarg
                         :vpc-peering-authorization :type
                         (common-lisp:or vpc-peering-authorization
                                         common-lisp:null)
                         :accessor
                         %create-vpc-peering-authorization-output-vpc-peering-authorization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-authorization-output
                    'make-create-vpc-peering-authorization-output))
 (common-lisp:defun make-create-vpc-peering-authorization-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-authorization)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-peering-authorization-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-authorization))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringAuthorization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-authorization-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-peering-connection-input common-lisp:nil
                       ((peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %create-vpc-peering-connection-input-peer-vpc-id
                         :initform
                         (common-lisp:error ":peer-vpc-id is required"))
                        (peer-vpc-aws-account-id :initarg
                         :peer-vpc-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %create-vpc-peering-connection-input-peer-vpc-aws-account-id
                         :initform
                         (common-lisp:error
                          ":peer-vpc-aws-account-id is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %create-vpc-peering-connection-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-connection-input
                    'make-create-vpc-peering-connection-input))
 (common-lisp:defun make-create-vpc-peering-connection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key peer-vpc-id peer-vpc-aws-account-id
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-peering-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'peer-vpc-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-peering-connection-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-vpc-peering-connection-output
                    'make-create-vpc-peering-connection-output))
 (common-lisp:defun make-create-vpc-peering-connection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-peering-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-peering-connection-output))
   common-lisp:nil))
(common-lisp:deftype custom-event-data () 'common-lisp:string)
(common-lisp:deftype custom-input-location-string-model () 'common-lisp:string)
(common-lisp:deftype custom-location-name-or-arn-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-alias-input common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %delete-alias-input-alias-id :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-alias-input 'make-delete-alias-input))
 (common-lisp:defun make-delete-alias-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-build-input common-lisp:nil
                       ((build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %delete-build-input-build-id :initform
                         (common-lisp:error ":build-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-build-input 'make-delete-build-input))
 (common-lisp:defun make-delete-build-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-build-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-build-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-build-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-build-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-input common-lisp:nil
                       ((fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %delete-fleet-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-input 'make-delete-fleet-input))
 (common-lisp:defun make-delete-fleet-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-locations-input common-lisp:nil
                       ((locations :initarg :locations :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor %delete-fleet-locations-input-locations
                         :initform
                         (common-lisp:error ":locations is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %delete-fleet-locations-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-locations-input
                    'make-delete-fleet-locations-input))
 (common-lisp:defun make-delete-fleet-locations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locations fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-locations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "Locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-locations-output common-lisp:nil
                       ((location-states :initarg :location-states :type
                         (common-lisp:or location-state-list common-lisp:null)
                         :accessor
                         %delete-fleet-locations-output-location-states
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %delete-fleet-locations-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %delete-fleet-locations-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-locations-output
                    'make-delete-fleet-locations-output))
 (common-lisp:defun make-delete-fleet-locations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-states fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fleet-locations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-states))
      (common-lisp:list
       (common-lisp:cons "LocationStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-locations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-game-server-group-input common-lisp:nil
                       ((delete-option :initarg :delete-option :type
                         (common-lisp:or game-server-group-delete-option
                                         common-lisp:null)
                         :accessor
                         %delete-game-server-group-input-delete-option
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %delete-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-game-server-group-input
                    'make-delete-game-server-group-input))
 (common-lisp:defun make-delete-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-option game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-option))
      (common-lisp:list
       (common-lisp:cons "DeleteOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %delete-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-game-server-group-output
                    'make-delete-game-server-group-output))
 (common-lisp:defun make-delete-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-game-session-queue-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or game-session-queue-name-or-arn
                                         common-lisp:null)
                         :accessor %delete-game-session-queue-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-game-session-queue-input
                    'make-delete-game-session-queue-input))
 (common-lisp:defun make-delete-game-session-queue-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-game-session-queue-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-game-session-queue-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-game-session-queue-output
                    'make-delete-game-session-queue-output))
 (common-lisp:defun make-delete-game-session-queue-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-game-session-queue-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-game-session-queue-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-location-input common-lisp:nil
                       ((location-name :initarg :location-name :type
                         (common-lisp:or custom-location-name-or-arn-model
                                         common-lisp:null)
                         :accessor %delete-location-input-location-name
                         :initform
                         (common-lisp:error ":location-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-location-input 'make-delete-location-input))
 (common-lisp:defun make-delete-location-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-location-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-name))
      (common-lisp:list
       (common-lisp:cons "LocationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-location-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-location-output 'make-delete-location-output))
 (common-lisp:defun make-delete-location-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-location-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-location-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-matchmaking-configuration-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or matchmaking-configuration-name
                                         common-lisp:null)
                         :accessor %delete-matchmaking-configuration-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-matchmaking-configuration-input
                    'make-delete-matchmaking-configuration-input))
 (common-lisp:defun make-delete-matchmaking-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-matchmaking-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-matchmaking-configuration-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-matchmaking-configuration-output
                    'make-delete-matchmaking-configuration-output))
 (common-lisp:defun make-delete-matchmaking-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-matchmaking-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-matchmaking-rule-set-input common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or matchmaking-rule-set-name
                                         common-lisp:null)
                         :accessor %delete-matchmaking-rule-set-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-matchmaking-rule-set-input
                    'make-delete-matchmaking-rule-set-input))
 (common-lisp:defun make-delete-matchmaking-rule-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-matchmaking-rule-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-matchmaking-rule-set-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-matchmaking-rule-set-output
                    'make-delete-matchmaking-rule-set-output))
 (common-lisp:defun make-delete-matchmaking-rule-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-matchmaking-rule-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matchmaking-rule-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scaling-policy-input common-lisp:nil
                       ((fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %delete-scaling-policy-input-fleet-id
                         :initform (common-lisp:error ":fleet-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %delete-scaling-policy-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-scaling-policy-input
                    'make-delete-scaling-policy-input))
 (common-lisp:defun make-delete-scaling-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-script-input common-lisp:nil
                       ((script-id :initarg :script-id :type
                         (common-lisp:or script-id-or-arn common-lisp:null)
                         :accessor %delete-script-input-script-id :initform
                         (common-lisp:error ":script-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-script-input 'make-delete-script-input))
 (common-lisp:defun make-delete-script-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-script-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-script-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-script-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-script-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-peering-authorization-input common-lisp:nil
                       ((peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-peering-authorization-input-peer-vpc-id
                         :initform
                         (common-lisp:error ":peer-vpc-id is required"))
                        (game-lift-aws-account-id :initarg
                         :game-lift-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-peering-authorization-input-game-lift-aws-account-id
                         :initform
                         (common-lisp:error
                          ":game-lift-aws-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-authorization-input
                    'make-delete-vpc-peering-authorization-input))
 (common-lisp:defun make-delete-vpc-peering-authorization-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key peer-vpc-id game-lift-aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-peering-authorization-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-lift-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "GameLiftAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-peering-authorization-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-authorization-output
                    'make-delete-vpc-peering-authorization-output))
 (common-lisp:defun make-delete-vpc-peering-authorization-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-peering-authorization-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-authorization-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-peering-connection-input common-lisp:nil
                       ((vpc-peering-connection-id :initarg
                         :vpc-peering-connection-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-peering-connection-input-vpc-peering-connection-id
                         :initform
                         (common-lisp:error
                          ":vpc-peering-connection-id is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %delete-vpc-peering-connection-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-connection-input
                    'make-delete-vpc-peering-connection-input))
 (common-lisp:defun make-delete-vpc-peering-connection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-connection-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-peering-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-peering-connection-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-vpc-peering-connection-output
                    'make-delete-vpc-peering-connection-output))
 (common-lisp:defun make-delete-vpc-peering-connection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-peering-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-peering-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-compute-input common-lisp:nil
                       ((compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %deregister-compute-input-compute-name
                         :initform
                         (common-lisp:error ":compute-name is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %deregister-compute-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-compute-input 'make-deregister-compute-input))
 (common-lisp:defun make-deregister-compute-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-name fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-compute-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-compute-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-compute-output
                    'make-deregister-compute-output))
 (common-lisp:defun make-deregister-compute-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-compute-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-compute-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-game-server-input common-lisp:nil
                       ((game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %deregister-game-server-input-game-server-id
                         :initform
                         (common-lisp:error ":game-server-id is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %deregister-game-server-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-game-server-input
                    'make-deregister-game-server-input))
 (common-lisp:defun make-deregister-game-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-id game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-game-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-game-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-game-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-game-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-alias-input common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %describe-alias-input-alias-id :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-alias-input 'make-describe-alias-input))
 (common-lisp:defun make-describe-alias-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-alias-output common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %describe-alias-output-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-alias-output 'make-describe-alias-output))
 (common-lisp:defun make-describe-alias-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias)
   (common-lisp:apply #'common-lisp:make-instance 'describe-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-build-input common-lisp:nil
                       ((build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %describe-build-input-build-id :initform
                         (common-lisp:error ":build-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-build-input 'make-describe-build-input))
 (common-lisp:defun make-describe-build-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-build-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-build-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-build-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-build-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-build-output common-lisp:nil
                       ((build :initarg :build :type
                         (common-lisp:or build common-lisp:null) :accessor
                         %describe-build-output-build :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-build-output 'make-describe-build-output))
 (common-lisp:defun make-describe-build-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build)
   (common-lisp:apply #'common-lisp:make-instance 'describe-build-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-build-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-build-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build))
      (common-lisp:list
       (common-lisp:cons "Build"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-build-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compute-input common-lisp:nil
                       ((compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %describe-compute-input-compute-name
                         :initform
                         (common-lisp:error ":compute-name is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-compute-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-compute-input 'make-describe-compute-input))
 (common-lisp:defun make-describe-compute-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-name fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-compute-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compute-output common-lisp:nil
                       ((compute :initarg :compute :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %describe-compute-output-compute :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-compute-output 'make-describe-compute-output))
 (common-lisp:defun make-describe-compute-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute)
   (common-lisp:apply #'common-lisp:make-instance 'describe-compute-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "Compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compute-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ec2instance-limits-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %describe-ec2instance-limits-input-location
                         :initform common-lisp:nil)
                        (ec2instance-type :initarg :ec2instance-type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         %describe-ec2instance-limits-input-ec2instance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ec2instance-limits-input
                    'make-describe-ec2instance-limits-input))
 (common-lisp:defun make-describe-ec2instance-limits-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location ec2instance-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ec2instance-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ec2instance-limits-output common-lisp:nil
                       ((ec2instance-limits :initarg :ec2instance-limits :type
                         (common-lisp:or ec2instance-limit-list
                                         common-lisp:null)
                         :accessor
                         %describe-ec2instance-limits-output-ec2instance-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ec2instance-limits-output
                    'make-describe-ec2instance-limits-output))
 (common-lisp:defun make-describe-ec2instance-limits-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ec2instance-limits)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ec2instance-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-limits))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ec2instance-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-attributes-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-attributes-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-fleet-attributes-input-limit
                         :initform common-lisp:nil)
                        (fleet-ids :initarg :fleet-ids :type
                         (common-lisp:or fleet-id-or-arn-list common-lisp:null)
                         :accessor %describe-fleet-attributes-input-fleet-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-attributes-input
                    'make-describe-fleet-attributes-input))
 (common-lisp:defun make-describe-fleet-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit fleet-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-ids))
      (common-lisp:list
       (common-lisp:cons "FleetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-attributes-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-attributes-output-next-token
                         :initform common-lisp:nil)
                        (fleet-attributes :initarg :fleet-attributes :type
                         (common-lisp:or fleet-attributes-list
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-attributes-output-fleet-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-attributes-output
                    'make-describe-fleet-attributes-output))
 (common-lisp:defun make-describe-fleet-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-attributes))
      (common-lisp:list
       (common-lisp:cons "FleetAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-capacity-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-capacity-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-fleet-capacity-input-limit
                         :initform common-lisp:nil)
                        (fleet-ids :initarg :fleet-ids :type
                         (common-lisp:or fleet-id-or-arn-list common-lisp:null)
                         :accessor %describe-fleet-capacity-input-fleet-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-capacity-input
                    'make-describe-fleet-capacity-input))
 (common-lisp:defun make-describe-fleet-capacity-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit fleet-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-capacity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-ids))
      (common-lisp:list
       (common-lisp:cons "FleetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-capacity-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-capacity-output-next-token
                         :initform common-lisp:nil)
                        (fleet-capacity :initarg :fleet-capacity :type
                         (common-lisp:or fleet-capacity-list common-lisp:null)
                         :accessor
                         %describe-fleet-capacity-output-fleet-capacity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-capacity-output
                    'make-describe-fleet-capacity-output))
 (common-lisp:defun make-describe-fleet-capacity-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-capacity)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-capacity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-capacity))
      (common-lisp:list
       (common-lisp:cons "FleetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-capacity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-events-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-events-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-fleet-events-input-limit :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-fleet-events-input-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-fleet-events-input-start-time :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-fleet-events-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-events-input
                    'make-describe-fleet-events-input))
 (common-lisp:defun make-describe-fleet-events-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit end-time start-time
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleet-events-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-events-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-events-output-next-token
                         :initform common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %describe-fleet-events-output-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-events-output
                    'make-describe-fleet-events-output))
 (common-lisp:defun make-describe-fleet-events-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token events)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleet-events-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-attributes-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-input-limit
                         :initform common-lisp:nil)
                        (locations :initarg :locations :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-input-locations
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-attributes-input
                    'make-describe-fleet-location-attributes-input))
 (common-lisp:defun make-describe-fleet-location-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit locations fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "Locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-attributes-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-output-next-token
                         :initform common-lisp:nil)
                        (location-attributes :initarg :location-attributes
                         :type
                         (common-lisp:or location-attributes-list
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-output-location-attributes
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %describe-fleet-location-attributes-output-fleet-arn
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-fleet-location-attributes-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-attributes-output
                    'make-describe-fleet-location-attributes-output))
 (common-lisp:defun make-describe-fleet-location-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token location-attributes fleet-arn
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-attributes))
      (common-lisp:list
       (common-lisp:cons "LocationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-capacity-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-location-capacity-input-location
                         :initform (common-lisp:error ":location is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-fleet-location-capacity-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-capacity-input
                    'make-describe-fleet-location-capacity-input))
 (common-lisp:defun make-describe-fleet-location-capacity-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-capacity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-capacity-output common-lisp:nil
                       ((fleet-capacity :initarg :fleet-capacity :type
                         (common-lisp:or fleet-capacity common-lisp:null)
                         :accessor
                         %describe-fleet-location-capacity-output-fleet-capacity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-capacity-output
                    'make-describe-fleet-location-capacity-output))
 (common-lisp:defun make-describe-fleet-location-capacity-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-capacity)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-capacity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-capacity))
      (common-lisp:list
       (common-lisp:cons "FleetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-capacity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-utilization-input
                       common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-location-utilization-input-location
                         :initform (common-lisp:error ":location is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-fleet-location-utilization-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-utilization-input
                    'make-describe-fleet-location-utilization-input))
 (common-lisp:defun make-describe-fleet-location-utilization-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-utilization-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-location-utilization-output
                       common-lisp:nil
                       ((fleet-utilization :initarg :fleet-utilization :type
                         (common-lisp:or fleet-utilization common-lisp:null)
                         :accessor
                         %describe-fleet-location-utilization-output-fleet-utilization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-location-utilization-output
                    'make-describe-fleet-location-utilization-output))
 (common-lisp:defun make-describe-fleet-location-utilization-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-utilization)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-location-utilization-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-utilization))
      (common-lisp:list
       (common-lisp:cons "FleetUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-location-utilization-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-port-settings-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %describe-fleet-port-settings-input-location
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-fleet-port-settings-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-port-settings-input
                    'make-describe-fleet-port-settings-input))
 (common-lisp:defun make-describe-fleet-port-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-port-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-port-settings-output common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-port-settings-output-location
                         :initform common-lisp:nil)
                        (update-status :initarg :update-status :type
                         (common-lisp:or location-update-status
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-port-settings-output-update-status
                         :initform common-lisp:nil)
                        (inbound-permissions :initarg :inbound-permissions
                         :type
                         (common-lisp:or ip-permissions-list common-lisp:null)
                         :accessor
                         %describe-fleet-port-settings-output-inbound-permissions
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %describe-fleet-port-settings-output-fleet-arn
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %describe-fleet-port-settings-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-port-settings-output
                    'make-describe-fleet-port-settings-output))
 (common-lisp:defun make-describe-fleet-port-settings-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location update-status
                     inbound-permissions fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-port-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inbound-permissions))
      (common-lisp:list
       (common-lisp:cons "InboundPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-port-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-utilization-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-fleet-utilization-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-fleet-utilization-input-limit
                         :initform common-lisp:nil)
                        (fleet-ids :initarg :fleet-ids :type
                         (common-lisp:or fleet-id-or-arn-list common-lisp:null)
                         :accessor %describe-fleet-utilization-input-fleet-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-utilization-input
                    'make-describe-fleet-utilization-input))
 (common-lisp:defun make-describe-fleet-utilization-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit fleet-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-utilization-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-ids))
      (common-lisp:list
       (common-lisp:cons "FleetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-utilization-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-utilization-output-next-token
                         :initform common-lisp:nil)
                        (fleet-utilization :initarg :fleet-utilization :type
                         (common-lisp:or fleet-utilization-list
                                         common-lisp:null)
                         :accessor
                         %describe-fleet-utilization-output-fleet-utilization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-utilization-output
                    'make-describe-fleet-utilization-output))
 (common-lisp:defun make-describe-fleet-utilization-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-utilization)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-utilization-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-utilization))
      (common-lisp:list
       (common-lisp:cons "FleetUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-utilization-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-group-input common-lisp:nil
                       ((game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-group-input
                    'make-describe-game-server-group-input))
 (common-lisp:defun make-describe-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %describe-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-group-output
                    'make-describe-game-server-group-output))
 (common-lisp:defun make-describe-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-input common-lisp:nil
                       ((game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %describe-game-server-input-game-server-id
                         :initform
                         (common-lisp:error ":game-server-id is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-input
                    'make-describe-game-server-input))
 (common-lisp:defun make-describe-game-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-id game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-game-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-instances-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-instances-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-game-server-instances-input-limit
                         :initform common-lisp:nil)
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or game-server-instance-ids
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-instances-input-instance-ids
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-instances-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-instances-input
                    'make-describe-game-server-instances-input))
 (common-lisp:defun make-describe-game-server-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit instance-ids
                     game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-server-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-instances-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-instances-output-next-token
                         :initform common-lisp:nil)
                        (game-server-instances :initarg :game-server-instances
                         :type
                         (common-lisp:or game-server-instances
                                         common-lisp:null)
                         :accessor
                         %describe-game-server-instances-output-game-server-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-instances-output
                    'make-describe-game-server-instances-output))
 (common-lisp:defun make-describe-game-server-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-server-instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-server-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-instances))
      (common-lisp:list
       (common-lisp:cons "GameServerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-server-output common-lisp:nil
                       ((game-server :initarg :game-server :type
                         (common-lisp:or game-server common-lisp:null)
                         :accessor %describe-game-server-output-game-server
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-server-output
                    'make-describe-game-server-output))
 (common-lisp:defun make-describe-game-server-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server)
   (common-lisp:apply #'common-lisp:make-instance 'describe-game-server-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server))
      (common-lisp:list
       (common-lisp:cons "GameServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-server-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-details-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-game-session-details-input-limit
                         :initform common-lisp:nil)
                        (status-filter :initarg :status-filter :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-status-filter
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-location
                         :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-alias-id
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-game-session-id
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-game-session-details-input-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-details-input
                    'make-describe-game-session-details-input))
 (common-lisp:defun make-describe-game-session-details-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit status-filter location
                     alias-id game-session-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-details-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-details-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-details-output-next-token
                         :initform common-lisp:nil)
                        (game-session-details :initarg :game-session-details
                         :type
                         (common-lisp:or game-session-detail-list
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-details-output-game-session-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-details-output
                    'make-describe-game-session-details-output))
 (common-lisp:defun make-describe-game-session-details-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-session-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-details-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-details))
      (common-lisp:list
       (common-lisp:cons "GameSessionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-details-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-placement-input common-lisp:nil
                       ((placement-id :initarg :placement-id :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor
                         %describe-game-session-placement-input-placement-id
                         :initform
                         (common-lisp:error ":placement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-placement-input
                    'make-describe-game-session-placement-input))
 (common-lisp:defun make-describe-game-session-placement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key placement-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-placement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-id))
      (common-lisp:list
       (common-lisp:cons "PlacementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-placement-output common-lisp:nil
                       ((game-session-placement :initarg
                         :game-session-placement :type
                         (common-lisp:or game-session-placement
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-placement-output-game-session-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-placement-output
                    'make-describe-game-session-placement-output))
 (common-lisp:defun make-describe-game-session-placement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-placement)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-placement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-placement))
      (common-lisp:list
       (common-lisp:cons "GameSessionPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-placement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-queues-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-queues-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-game-session-queues-input-limit
                         :initform common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or game-session-queue-name-or-arn-list
                                         common-lisp:null)
                         :accessor %describe-game-session-queues-input-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-queues-input
                    'make-describe-game-session-queues-input))
 (common-lisp:defun make-describe-game-session-queues-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-queues-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-session-queues-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-queues-output-next-token
                         :initform common-lisp:nil)
                        (game-session-queues :initarg :game-session-queues
                         :type
                         (common-lisp:or game-session-queue-list
                                         common-lisp:null)
                         :accessor
                         %describe-game-session-queues-output-game-session-queues
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-session-queues-output
                    'make-describe-game-session-queues-output))
 (common-lisp:defun make-describe-game-session-queues-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-session-queues)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-session-queues-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-queues))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-session-queues-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-sessions-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-game-sessions-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-game-sessions-input-limit
                         :initform common-lisp:nil)
                        (status-filter :initarg :status-filter :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-game-sessions-input-status-filter
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %describe-game-sessions-input-location
                         :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %describe-game-sessions-input-alias-id
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %describe-game-sessions-input-game-session-id
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-game-sessions-input-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-sessions-input
                    'make-describe-game-sessions-input))
 (common-lisp:defun make-describe-game-sessions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit status-filter location
                     alias-id game-session-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-game-sessions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-game-sessions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-game-sessions-output-next-token
                         :initform common-lisp:nil)
                        (game-sessions :initarg :game-sessions :type
                         (common-lisp:or game-session-list common-lisp:null)
                         :accessor %describe-game-sessions-output-game-sessions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-game-sessions-output
                    'make-describe-game-sessions-output))
 (common-lisp:defun make-describe-game-sessions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-sessions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-game-sessions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-sessions))
      (common-lisp:list
       (common-lisp:cons "GameSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-game-sessions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %describe-instances-input-location :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-instances-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-instances-input-limit :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %describe-instances-input-instance-id
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-instances-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instances-input 'make-describe-instances-input))
 (common-lisp:defun make-describe-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location next-token limit instance-id
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-instances-output-next-token
                         :initform common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or instance-list common-lisp:null)
                         :accessor %describe-instances-output-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instances-output
                    'make-describe-instances-output))
 (common-lisp:defun make-describe-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instances)
   (common-lisp:apply #'common-lisp:make-instance 'describe-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-configurations-input
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-input-limit
                         :initform common-lisp:nil)
                        (rule-set-name :initarg :rule-set-name :type
                         (common-lisp:or matchmaking-rule-set-name
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-input-rule-set-name
                         :initform common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or matchmaking-configuration-name-list
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-input-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-configurations-input
                    'make-describe-matchmaking-configurations-input))
 (common-lisp:defun make-describe-matchmaking-configurations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit rule-set-name names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-matchmaking-configurations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-configurations-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-output-next-token
                         :initform common-lisp:nil)
                        (configurations :initarg :configurations :type
                         (common-lisp:or matchmaking-configuration-list
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-configurations-output-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-configurations-output
                    'make-describe-matchmaking-configurations-output))
 (common-lisp:defun make-describe-matchmaking-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-matchmaking-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-input common-lisp:nil
                       ((ticket-ids :initarg :ticket-ids :type
                         (common-lisp:or matchmaking-id-list common-lisp:null)
                         :accessor %describe-matchmaking-input-ticket-ids
                         :initform
                         (common-lisp:error ":ticket-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-input
                    'make-describe-matchmaking-input))
 (common-lisp:defun make-describe-matchmaking-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ticket-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-matchmaking-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-ids))
      (common-lisp:list
       (common-lisp:cons "TicketIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-output common-lisp:nil
                       ((ticket-list :initarg :ticket-list :type
                         (common-lisp:or matchmaking-ticket-list
                                         common-lisp:null)
                         :accessor %describe-matchmaking-output-ticket-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-output
                    'make-describe-matchmaking-output))
 (common-lisp:defun make-describe-matchmaking-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ticket-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-matchmaking-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-list))
      (common-lisp:list
       (common-lisp:cons "TicketList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-rule-sets-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-rule-sets-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or rule-set-limit common-lisp:null)
                         :accessor %describe-matchmaking-rule-sets-input-limit
                         :initform common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or matchmaking-rule-set-name-list
                                         common-lisp:null)
                         :accessor %describe-matchmaking-rule-sets-input-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-rule-sets-input
                    'make-describe-matchmaking-rule-sets-input))
 (common-lisp:defun make-describe-matchmaking-rule-sets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-matchmaking-rule-sets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-matchmaking-rule-sets-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-rule-sets-output-next-token
                         :initform common-lisp:nil)
                        (rule-sets :initarg :rule-sets :type
                         (common-lisp:or matchmaking-rule-set-list
                                         common-lisp:null)
                         :accessor
                         %describe-matchmaking-rule-sets-output-rule-sets
                         :initform
                         (common-lisp:error ":rule-sets is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-matchmaking-rule-sets-output
                    'make-describe-matchmaking-rule-sets-output))
 (common-lisp:defun make-describe-matchmaking-rule-sets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rule-sets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-matchmaking-rule-sets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-sets))
      (common-lisp:list
       (common-lisp:cons "RuleSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-matchmaking-rule-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-player-sessions-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-player-sessions-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-player-sessions-input-limit
                         :initform common-lisp:nil)
                        (player-session-status-filter :initarg
                         :player-session-status-filter :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %describe-player-sessions-input-player-session-status-filter
                         :initform common-lisp:nil)
                        (player-session-id :initarg :player-session-id :type
                         (common-lisp:or player-session-id common-lisp:null)
                         :accessor
                         %describe-player-sessions-input-player-session-id
                         :initform common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-player-sessions-input-player-id
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %describe-player-sessions-input-game-session-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-player-sessions-input
                    'make-describe-player-sessions-input))
 (common-lisp:defun make-describe-player-sessions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit
                     player-session-status-filter player-session-id player-id
                     game-session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-player-sessions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-session-id))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-session-status-filter))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-player-sessions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-player-sessions-output-next-token
                         :initform common-lisp:nil)
                        (player-sessions :initarg :player-sessions :type
                         (common-lisp:or player-session-list common-lisp:null)
                         :accessor
                         %describe-player-sessions-output-player-sessions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-player-sessions-output
                    'make-describe-player-sessions-output))
 (common-lisp:defun make-describe-player-sessions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token player-sessions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-player-sessions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-sessions))
      (common-lisp:list
       (common-lisp:cons "PlayerSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-player-sessions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-runtime-configuration-input common-lisp:nil
                       ((fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor
                         %describe-runtime-configuration-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-runtime-configuration-input
                    'make-describe-runtime-configuration-input))
 (common-lisp:defun make-describe-runtime-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-runtime-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-runtime-configuration-output common-lisp:nil
                       ((runtime-configuration :initarg :runtime-configuration
                         :type
                         (common-lisp:or runtime-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-runtime-configuration-output-runtime-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-runtime-configuration-output
                    'make-describe-runtime-configuration-output))
 (common-lisp:defun make-describe-runtime-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-runtime-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "RuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-runtime-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-policies-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %describe-scaling-policies-input-location
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-scaling-policies-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %describe-scaling-policies-input-limit
                         :initform common-lisp:nil)
                        (status-filter :initarg :status-filter :type
                         (common-lisp:or scaling-status-type common-lisp:null)
                         :accessor
                         %describe-scaling-policies-input-status-filter
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %describe-scaling-policies-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-policies-input
                    'make-describe-scaling-policies-input))
 (common-lisp:defun make-describe-scaling-policies-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location next-token limit status-filter
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-policies-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-filter))
      (common-lisp:list
       (common-lisp:cons "StatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-scaling-policies-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %describe-scaling-policies-output-next-token
                         :initform common-lisp:nil)
                        (scaling-policies :initarg :scaling-policies :type
                         (common-lisp:or scaling-policy-list common-lisp:null)
                         :accessor
                         %describe-scaling-policies-output-scaling-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-policies-output
                    'make-describe-scaling-policies-output))
 (common-lisp:defun make-describe-scaling-policies-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scaling-policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-scaling-policies-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policies))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-policies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-script-input common-lisp:nil
                       ((script-id :initarg :script-id :type
                         (common-lisp:or script-id-or-arn common-lisp:null)
                         :accessor %describe-script-input-script-id :initform
                         (common-lisp:error ":script-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-script-input 'make-describe-script-input))
 (common-lisp:defun make-describe-script-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-script-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-script-output common-lisp:nil
                       ((script :initarg :script :type
                         (common-lisp:or script common-lisp:null) :accessor
                         %describe-script-output-script :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-script-output 'make-describe-script-output))
 (common-lisp:defun make-describe-script-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script)
   (common-lisp:apply #'common-lisp:make-instance 'describe-script-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "Script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-script-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-peering-authorizations-input
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-authorizations-input
                    'make-describe-vpc-peering-authorizations-input))
 (common-lisp:defun make-describe-vpc-peering-authorizations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-peering-authorizations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-peering-authorizations-output
                       common-lisp:nil
                       ((vpc-peering-authorizations :initarg
                         :vpc-peering-authorizations :type
                         (common-lisp:or vpc-peering-authorization-list
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-peering-authorizations-output-vpc-peering-authorizations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-authorizations-output
                    'make-describe-vpc-peering-authorizations-output))
 (common-lisp:defun make-describe-vpc-peering-authorizations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-authorizations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-peering-authorizations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-authorizations))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringAuthorizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-authorizations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-peering-connections-input common-lisp:nil
                       ((fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %describe-vpc-peering-connections-input-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-connections-input
                    'make-describe-vpc-peering-connections-input))
 (common-lisp:defun make-describe-vpc-peering-connections-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-peering-connections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-peering-connections-output common-lisp:nil
                       ((vpc-peering-connections :initarg
                         :vpc-peering-connections :type
                         (common-lisp:or vpc-peering-connection-list
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-peering-connections-output-vpc-peering-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-peering-connections-output
                    'make-describe-vpc-peering-connections-output))
 (common-lisp:defun make-describe-vpc-peering-connections-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-peering-connections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connections))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-peering-connections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass desired-player-session common-lisp:nil
                       ((player-data :initarg :player-data :type
                         (common-lisp:or player-data common-lisp:null)
                         :accessor %desired-player-session-player-data
                         :initform common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %desired-player-session-player-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'desired-player-session 'make-desired-player-session))
 (common-lisp:defun make-desired-player-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-data player-id)
   (common-lisp:apply #'common-lisp:make-instance 'desired-player-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          desired-player-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          desired-player-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-data))
      (common-lisp:list
       (common-lisp:cons "PlayerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          desired-player-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype desired-player-session-list ()
   '(trivial-types:proper-list desired-player-session))
 (common-lisp:defun |make-desired-player-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list desired-player-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dns-name () 'common-lisp:string)
(common-lisp:deftype dns-name-input () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-object () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass ec2instance-counts common-lisp:nil
                       ((terminating :initarg :terminating :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-terminating :initform
                         common-lisp:nil)
                        (idle :initarg :idle :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-idle :initform
                         common-lisp:nil)
                        (active :initarg :active :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-active :initform
                         common-lisp:nil)
                        (pending :initarg :pending :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-pending :initform
                         common-lisp:nil)
                        (maximum :initarg :maximum :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-maximum :initform
                         common-lisp:nil)
                        (minimum :initarg :minimum :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-minimum :initform
                         common-lisp:nil)
                        (desired :initarg :desired :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-counts-desired :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-counts 'make-ec2instance-counts))
 (common-lisp:defun make-ec2instance-counts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminating idle active pending maximum
                     minimum desired)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-counts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance-counts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance-counts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired))
      (common-lisp:list
       (common-lisp:cons "DESIRED"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "MINIMUM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "MAXIMUM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "PENDING"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "ACTIVE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "IDLE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminating))
      (common-lisp:list
       (common-lisp:cons "TERMINATING"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance-counts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance-limit common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %ec2instance-limit-location :initform
                         common-lisp:nil)
                        (instance-limit :initarg :instance-limit :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-limit-instance-limit :initform
                         common-lisp:nil)
                        (current-instances :initarg :current-instances :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %ec2instance-limit-current-instances
                         :initform common-lisp:nil)
                        (ec2instance-type :initarg :ec2instance-type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %ec2instance-limit-ec2instance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-limit 'make-ec2instance-limit))
 (common-lisp:defun make-ec2instance-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location instance-limit current-instances
                     ec2instance-type)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-instances))
      (common-lisp:list
       (common-lisp:cons "CurrentInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-limit))
      (common-lisp:list
       (common-lisp:cons "InstanceLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2instance-limit-list ()
   '(trivial-types:proper-list ec2instance-limit))
 (common-lisp:defun |make-ec2instance-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2instance-limit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ec2instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((pre-signed-log-url :initarg :pre-signed-log-url :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %event-pre-signed-log-url :initform
                         common-lisp:nil)
                        (event-time :initarg :event-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-event-time :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %event-message :initform common-lisp:nil)
                        (event-code :initarg :event-code :type
                         (common-lisp:or event-code common-lisp:null) :accessor
                         %event-event-code :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %event-resource-id :initform
                         common-lisp:nil)
                        (event-id :initarg :event-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %event-event-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pre-signed-log-url event-time message
                     event-code resource-id event-id)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-code))
      (common-lisp:list
       (common-lisp:cons "EventCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-log-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedLogUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:deftype event-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter-configuration common-lisp:nil
                       ((allowed-locations :initarg :allowed-locations :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor %filter-configuration-allowed-locations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'filter-configuration 'make-filter-configuration))
 (common-lisp:defun make-filter-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-locations)
   (common-lisp:apply #'common-lisp:make-instance 'filter-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-locations))
      (common-lisp:list
       (common-lisp:cons "AllowedLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-configuration))
   common-lisp:nil))
(common-lisp:deftype fleet-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fleet-action-list ()
   '(trivial-types:proper-list fleet-action))
 (common-lisp:defun |make-fleet-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fleet-attributes common-lisp:nil
                       ((anywhere-configuration :initarg
                         :anywhere-configuration :type
                         (common-lisp:or anywhere-configuration
                                         common-lisp:null)
                         :accessor %fleet-attributes-anywhere-configuration
                         :initform common-lisp:nil)
                        (compute-type :initarg :compute-type :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %fleet-attributes-compute-type :initform
                         common-lisp:nil)
                        (certificate-configuration :initarg
                         :certificate-configuration :type
                         (common-lisp:or certificate-configuration
                                         common-lisp:null)
                         :accessor %fleet-attributes-certificate-configuration
                         :initform common-lisp:nil)
                        (instance-role-arn :initarg :instance-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %fleet-attributes-instance-role-arn
                         :initform common-lisp:nil)
                        (stopped-actions :initarg :stopped-actions :type
                         (common-lisp:or fleet-action-list common-lisp:null)
                         :accessor %fleet-attributes-stopped-actions :initform
                         common-lisp:nil)
                        (metric-groups :initarg :metric-groups :type
                         (common-lisp:or metric-group-list common-lisp:null)
                         :accessor %fleet-attributes-metric-groups :initform
                         common-lisp:nil)
                        (resource-creation-limit-policy :initarg
                         :resource-creation-limit-policy :type
                         (common-lisp:or resource-creation-limit-policy
                                         common-lisp:null)
                         :accessor
                         %fleet-attributes-resource-creation-limit-policy
                         :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %fleet-attributes-operating-system :initform
                         common-lisp:nil)
                        (new-game-session-protection-policy :initarg
                         :new-game-session-protection-policy :type
                         (common-lisp:or protection-policy common-lisp:null)
                         :accessor
                         %fleet-attributes-new-game-session-protection-policy
                         :initform common-lisp:nil)
                        (log-paths :initarg :log-paths :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %fleet-attributes-log-paths :initform
                         common-lisp:nil)
                        (server-launch-parameters :initarg
                         :server-launch-parameters :type
                         (common-lisp:or launch-parameters-string-model
                                         common-lisp:null)
                         :accessor %fleet-attributes-server-launch-parameters
                         :initform common-lisp:nil)
                        (server-launch-path :initarg :server-launch-path :type
                         (common-lisp:or launch-path-string-model
                                         common-lisp:null)
                         :accessor %fleet-attributes-server-launch-path
                         :initform common-lisp:nil)
                        (script-arn :initarg :script-arn :type
                         (common-lisp:or script-arn common-lisp:null) :accessor
                         %fleet-attributes-script-arn :initform
                         common-lisp:nil)
                        (script-id :initarg :script-id :type
                         (common-lisp:or script-id common-lisp:null) :accessor
                         %fleet-attributes-script-id :initform common-lisp:nil)
                        (build-arn :initarg :build-arn :type
                         (common-lisp:or build-arn common-lisp:null) :accessor
                         %fleet-attributes-build-arn :initform common-lisp:nil)
                        (build-id :initarg :build-id :type
                         (common-lisp:or build-id common-lisp:null) :accessor
                         %fleet-attributes-build-id :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or fleet-status common-lisp:null)
                         :accessor %fleet-attributes-status :initform
                         common-lisp:nil)
                        (termination-time :initarg :termination-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fleet-attributes-termination-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fleet-attributes-creation-time :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %fleet-attributes-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %fleet-attributes-description :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %fleet-attributes-instance-type :initform
                         common-lisp:nil)
                        (fleet-type :initarg :fleet-type :type
                         (common-lisp:or fleet-type common-lisp:null) :accessor
                         %fleet-attributes-fleet-type :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %fleet-attributes-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %fleet-attributes-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fleet-attributes 'make-fleet-attributes))
 (common-lisp:defun make-fleet-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anywhere-configuration compute-type
                     certificate-configuration instance-role-arn
                     stopped-actions metric-groups
                     resource-creation-limit-policy operating-system
                     new-game-session-protection-policy log-paths
                     server-launch-parameters server-launch-path script-arn
                     script-id build-arn build-id status termination-time
                     creation-time name description instance-type fleet-type
                     fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-type))
      (common-lisp:list
       (common-lisp:cons "FleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-time))
      (common-lisp:list
       (common-lisp:cons "TerminationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-arn))
      (common-lisp:list
       (common-lisp:cons "BuildArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-arn))
      (common-lisp:list
       (common-lisp:cons "ScriptArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-launch-path))
      (common-lisp:list
       (common-lisp:cons "ServerLaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-launch-parameters))
      (common-lisp:list
       (common-lisp:cons "ServerLaunchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-paths))
      (common-lisp:list
       (common-lisp:cons "LogPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-game-session-protection-policy))
      (common-lisp:list
       (common-lisp:cons "NewGameSessionProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-creation-limit-policy))
      (common-lisp:list
       (common-lisp:cons "ResourceCreationLimitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-groups))
      (common-lisp:list
       (common-lisp:cons "MetricGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-actions))
      (common-lisp:list
       (common-lisp:cons "StoppedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-configuration))
      (common-lisp:list
       (common-lisp:cons "CertificateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anywhere-configuration))
      (common-lisp:list
       (common-lisp:cons "AnywhereConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleet-attributes-list ()
   '(trivial-types:proper-list fleet-attributes))
 (common-lisp:defun |make-fleet-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fleet-capacity common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %fleet-capacity-location :initform
                         common-lisp:nil)
                        (instance-counts :initarg :instance-counts :type
                         (common-lisp:or ec2instance-counts common-lisp:null)
                         :accessor %fleet-capacity-instance-counts :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %fleet-capacity-instance-type :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %fleet-capacity-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %fleet-capacity-fleet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fleet-capacity 'make-fleet-capacity))
 (common-lisp:defun make-fleet-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location instance-counts instance-type
                     fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-capacity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-counts))
      (common-lisp:list
       (common-lisp:cons "InstanceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition fleet-capacity-exceeded-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       fleet-capacity-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'fleet-capacity-exceeded-exception
                    'fleet-capacity-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype fleet-capacity-list ()
   '(trivial-types:proper-list fleet-capacity))
 (common-lisp:defun |make-fleet-capacity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-capacity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fleet-id-list () '(trivial-types:proper-list fleet-id))
 (common-lisp:defun |make-fleet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fleet-id-or-arn-list ()
   '(trivial-types:proper-list fleet-id-or-arn))
 (common-lisp:defun |make-fleet-id-or-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-id-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-status () 'common-lisp:string)
(common-lisp:deftype fleet-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fleet-utilization common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %fleet-utilization-location :initform
                         common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %fleet-utilization-maximum-player-session-count
                         :initform common-lisp:nil)
                        (current-player-session-count :initarg
                         :current-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %fleet-utilization-current-player-session-count
                         :initform common-lisp:nil)
                        (active-game-session-count :initarg
                         :active-game-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %fleet-utilization-active-game-session-count
                         :initform common-lisp:nil)
                        (active-server-process-count :initarg
                         :active-server-process-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %fleet-utilization-active-server-process-count
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %fleet-utilization-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %fleet-utilization-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fleet-utilization 'make-fleet-utilization))
 (common-lisp:defun make-fleet-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location maximum-player-session-count
                     current-player-session-count active-game-session-count
                     active-server-process-count fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-server-process-count))
      (common-lisp:list
       (common-lisp:cons "ActiveServerProcessCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-game-session-count))
      (common-lisp:list
       (common-lisp:cons "ActiveGameSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-player-session-count))
      (common-lisp:list
       (common-lisp:cons "CurrentPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleet-utilization-list ()
   '(trivial-types:proper-list fleet-utilization))
 (common-lisp:defun |make-fleet-utilization-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-utilization))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flex-match-mode () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:deftype free-text () 'common-lisp:string)
(common-lisp:deftype game-lift-service-sdk-endpoint-output ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-property common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or game-property-value common-lisp:null)
                         :accessor %game-property-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or game-property-key common-lisp:null)
                         :accessor %game-property-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'game-property 'make-game-property))
 (common-lisp:defun make-game-property
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'game-property
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-property))
   common-lisp:nil))
(common-lisp:deftype game-property-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-property-list ()
   '(trivial-types:proper-list game-property))
 (common-lisp:defun |make-game-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-server common-lisp:nil
                       ((last-health-check-time :initarg
                         :last-health-check-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-server-last-health-check-time :initform
                         common-lisp:nil)
                        (last-claim-time :initarg :last-claim-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-server-last-claim-time :initform
                         common-lisp:nil)
                        (registration-time :initarg :registration-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-server-registration-time :initform
                         common-lisp:nil)
                        (utilization-status :initarg :utilization-status :type
                         (common-lisp:or game-server-utilization-status
                                         common-lisp:null)
                         :accessor %game-server-utilization-status :initform
                         common-lisp:nil)
                        (claim-status :initarg :claim-status :type
                         (common-lisp:or game-server-claim-status
                                         common-lisp:null)
                         :accessor %game-server-claim-status :initform
                         common-lisp:nil)
                        (game-server-data :initarg :game-server-data :type
                         (common-lisp:or game-server-data common-lisp:null)
                         :accessor %game-server-game-server-data :initform
                         common-lisp:nil)
                        (connection-info :initarg :connection-info :type
                         (common-lisp:or game-server-connection-info
                                         common-lisp:null)
                         :accessor %game-server-connection-info :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or game-server-instance-id
                                         common-lisp:null)
                         :accessor %game-server-instance-id :initform
                         common-lisp:nil)
                        (game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %game-server-game-server-id :initform
                         common-lisp:nil)
                        (game-server-group-arn :initarg :game-server-group-arn
                         :type
                         (common-lisp:or game-server-group-arn
                                         common-lisp:null)
                         :accessor %game-server-game-server-group-arn :initform
                         common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name
                                         common-lisp:null)
                         :accessor %game-server-game-server-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'game-server 'make-game-server))
 (common-lisp:defun make-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-health-check-time last-claim-time
                     registration-time utilization-status claim-status
                     game-server-data connection-info instance-id
                     game-server-id game-server-group-arn
                     game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'game-server
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-arn))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-info))
      (common-lisp:list
       (common-lisp:cons "ConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-data))
      (common-lisp:list
       (common-lisp:cons "GameServerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'claim-status))
      (common-lisp:list
       (common-lisp:cons "ClaimStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization-status))
      (common-lisp:list
       (common-lisp:cons "UtilizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-time))
      (common-lisp:list
       (common-lisp:cons "RegistrationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-claim-time))
      (common-lisp:list
       (common-lisp:cons "LastClaimTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-health-check-time))
      (common-lisp:list
       (common-lisp:cons "LastHealthCheckTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-server))
   common-lisp:nil))
(common-lisp:deftype game-server-claim-status () 'common-lisp:string)
(common-lisp:deftype game-server-connection-info () 'common-lisp:string)
(common-lisp:deftype game-server-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-server-group common-lisp:nil
                       ((last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-server-group-last-updated-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-server-group-creation-time :initform
                         common-lisp:nil)
                        (suspended-actions :initarg :suspended-actions :type
                         (common-lisp:or game-server-group-actions
                                         common-lisp:null)
                         :accessor %game-server-group-suspended-actions
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-server-group-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or game-server-group-status
                                         common-lisp:null)
                         :accessor %game-server-group-status :initform
                         common-lisp:nil)
                        (auto-scaling-group-arn :initarg
                         :auto-scaling-group-arn :type
                         (common-lisp:or auto-scaling-group-arn
                                         common-lisp:null)
                         :accessor %game-server-group-auto-scaling-group-arn
                         :initform common-lisp:nil)
                        (game-server-protection-policy :initarg
                         :game-server-protection-policy :type
                         (common-lisp:or game-server-protection-policy
                                         common-lisp:null)
                         :accessor
                         %game-server-group-game-server-protection-policy
                         :initform common-lisp:nil)
                        (balancing-strategy :initarg :balancing-strategy :type
                         (common-lisp:or balancing-strategy common-lisp:null)
                         :accessor %game-server-group-balancing-strategy
                         :initform common-lisp:nil)
                        (instance-definitions :initarg :instance-definitions
                         :type
                         (common-lisp:or instance-definitions common-lisp:null)
                         :accessor %game-server-group-instance-definitions
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %game-server-group-role-arn :initform
                         common-lisp:nil)
                        (game-server-group-arn :initarg :game-server-group-arn
                         :type
                         (common-lisp:or game-server-group-arn
                                         common-lisp:null)
                         :accessor %game-server-group-game-server-group-arn
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name
                                         common-lisp:null)
                         :accessor %game-server-group-game-server-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-server-group 'make-game-server-group))
 (common-lisp:defun make-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time creation-time
                     suspended-actions status-reason status
                     auto-scaling-group-arn game-server-protection-policy
                     balancing-strategy instance-definitions role-arn
                     game-server-group-arn game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'game-server-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-server-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-server-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-arn))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-definitions))
      (common-lisp:list
       (common-lisp:cons "InstanceDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balancing-strategy))
      (common-lisp:list
       (common-lisp:cons "BalancingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-protection-policy))
      (common-lisp:list
       (common-lisp:cons "GameServerProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspended-actions))
      (common-lisp:list
       (common-lisp:cons "SuspendedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-server-group))
   common-lisp:nil))
(common-lisp:deftype game-server-group-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-server-group-actions ()
   '(trivial-types:proper-list game-server-group-action))
 (common-lisp:defun |make-game-server-group-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            game-server-group-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-server-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-server-group-auto-scaling-policy common-lisp:nil
                       ((target-tracking-configuration :initarg
                         :target-tracking-configuration :type
                         (common-lisp:or target-tracking-configuration
                                         common-lisp:null)
                         :accessor
                         %game-server-group-auto-scaling-policy-target-tracking-configuration
                         :initform
                         (common-lisp:error
                          ":target-tracking-configuration is required"))
                        (estimated-instance-warmup :initarg
                         :estimated-instance-warmup :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         %game-server-group-auto-scaling-policy-estimated-instance-warmup
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-server-group-auto-scaling-policy
                    'make-game-server-group-auto-scaling-policy))
 (common-lisp:defun make-game-server-group-auto-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-tracking-configuration
                     estimated-instance-warmup)
   (common-lisp:apply #'common-lisp:make-instance
                      'game-server-group-auto-scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          game-server-group-auto-scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          game-server-group-auto-scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          game-server-group-auto-scaling-policy))
   common-lisp:nil))
(common-lisp:deftype game-server-group-delete-option () 'common-lisp:string)
(common-lisp:deftype game-server-group-instance-type () 'common-lisp:string)
(common-lisp:deftype game-server-group-name () 'common-lisp:string)
(common-lisp:deftype game-server-group-name-or-arn () 'common-lisp:string)
(common-lisp:deftype game-server-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-server-groups ()
   '(trivial-types:proper-list game-server-group))
 (common-lisp:defun |make-game-server-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-server-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-server-health-check () 'common-lisp:string)
(common-lisp:deftype game-server-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-server-instance common-lisp:nil
                       ((instance-status :initarg :instance-status :type
                         (common-lisp:or game-server-instance-status
                                         common-lisp:null)
                         :accessor %game-server-instance-instance-status
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or game-server-instance-id
                                         common-lisp:null)
                         :accessor %game-server-instance-instance-id :initform
                         common-lisp:nil)
                        (game-server-group-arn :initarg :game-server-group-arn
                         :type
                         (common-lisp:or game-server-group-arn
                                         common-lisp:null)
                         :accessor %game-server-instance-game-server-group-arn
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name
                                         common-lisp:null)
                         :accessor %game-server-instance-game-server-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-server-instance 'make-game-server-instance))
 (common-lisp:defun make-game-server-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-status instance-id
                     game-server-group-arn game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'game-server-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-server-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-server-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-arn))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-status))
      (common-lisp:list
       (common-lisp:cons "InstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-server-instance))
   common-lisp:nil))
(common-lisp:deftype game-server-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-server-instance-ids ()
   '(trivial-types:proper-list game-server-instance-id))
 (common-lisp:defun |make-game-server-instance-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-server-instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-server-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-server-instances ()
   '(trivial-types:proper-list game-server-instance))
 (common-lisp:defun |make-game-server-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-server-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-server-protection-policy () 'common-lisp:string)
(common-lisp:deftype game-server-utilization-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-servers () '(trivial-types:proper-list game-server))
 (common-lisp:defun |make-game-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass game-session common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %game-session-location :initform
                         common-lisp:nil)
                        (matchmaker-data :initarg :matchmaker-data :type
                         (common-lisp:or matchmaker-data common-lisp:null)
                         :accessor %game-session-matchmaker-data :initform
                         common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or large-game-session-data
                                         common-lisp:null)
                         :accessor %game-session-game-session-data :initform
                         common-lisp:nil)
                        (creator-id :initarg :creator-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-creator-id :initform
                         common-lisp:nil)
                        (player-session-creation-policy :initarg
                         :player-session-creation-policy :type
                         (common-lisp:or player-session-creation-policy
                                         common-lisp:null)
                         :accessor %game-session-player-session-creation-policy
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %game-session-port :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %game-session-dns-name :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %game-session-ip-address :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor %game-session-game-properties :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or game-session-status-reason
                                         common-lisp:null)
                         :accessor %game-session-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or game-session-status common-lisp:null)
                         :accessor %game-session-status :initform
                         common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %game-session-maximum-player-session-count
                         :initform common-lisp:nil)
                        (current-player-session-count :initarg
                         :current-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %game-session-current-player-session-count
                         :initform common-lisp:nil)
                        (termination-time :initarg :termination-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-session-termination-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-session-creation-time :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %game-session-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %game-session-fleet-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-name :initform
                         common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-game-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'game-session 'make-game-session))
 (common-lisp:defun make-game-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location matchmaker-data
                     game-session-data creator-id
                     player-session-creation-policy port dns-name ip-address
                     game-properties status-reason status
                     maximum-player-session-count current-player-session-count
                     termination-time creation-time fleet-arn fleet-id name
                     game-session-id)
   (common-lisp:apply #'common-lisp:make-instance 'game-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-time))
      (common-lisp:list
       (common-lisp:cons "TerminationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-player-session-count))
      (common-lisp:list
       (common-lisp:cons "CurrentPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-session-creation-policy))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionCreationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-id))
      (common-lisp:list
       (common-lisp:cons "CreatorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matchmaker-data))
      (common-lisp:list
       (common-lisp:cons "MatchmakerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-session))
   common-lisp:nil))
(common-lisp:deftype game-session-activation-timeout-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass game-session-connection-info common-lisp:nil
                       ((matched-player-sessions :initarg
                         :matched-player-sessions :type
                         (common-lisp:or matched-player-session-list
                                         common-lisp:null)
                         :accessor
                         %game-session-connection-info-matched-player-sessions
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %game-session-connection-info-port :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %game-session-connection-info-dns-name :initform
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %game-session-connection-info-ip-address :initform
                         common-lisp:nil)
                        (game-session-arn :initarg :game-session-arn :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %game-session-connection-info-game-session-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-session-connection-info
                    'make-game-session-connection-info))
 (common-lisp:defun make-game-session-connection-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matched-player-sessions port dns-name
                     ip-address game-session-arn)
   (common-lisp:apply #'common-lisp:make-instance 'game-session-connection-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          game-session-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          game-session-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-arn))
      (common-lisp:list
       (common-lisp:cons "GameSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'matched-player-sessions))
      (common-lisp:list
       (common-lisp:cons "MatchedPlayerSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          game-session-connection-info))
   common-lisp:nil))
(common-lisp:deftype game-session-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-session-detail common-lisp:nil
                       ((protection-policy :initarg :protection-policy :type
                         (common-lisp:or protection-policy common-lisp:null)
                         :accessor %game-session-detail-protection-policy
                         :initform common-lisp:nil)
                        (game-session :initarg :game-session :type
                         (common-lisp:or game-session common-lisp:null)
                         :accessor %game-session-detail-game-session :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-session-detail 'make-game-session-detail))
 (common-lisp:defun make-game-session-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protection-policy game-session)
   (common-lisp:apply #'common-lisp:make-instance 'game-session-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-session-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-session-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session))
      (common-lisp:list
       (common-lisp:cons "GameSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-policy))
      (common-lisp:list
       (common-lisp:cons "ProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-session-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype game-session-detail-list ()
   '(trivial-types:proper-list game-session-detail))
 (common-lisp:defun |make-game-session-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-session-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition game-session-full-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       game-session-full-exception-message)))
 (common-lisp:export
  (common-lisp:list 'game-session-full-exception
                    'game-session-full-exception-message)))
(common-lisp:progn
 (common-lisp:deftype game-session-list ()
   '(trivial-types:proper-list game-session))
 (common-lisp:defun |make-game-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-session))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass game-session-placement common-lisp:nil
                       ((matchmaker-data :initarg :matchmaker-data :type
                         (common-lisp:or matchmaker-data common-lisp:null)
                         :accessor %game-session-placement-matchmaker-data
                         :initform common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or large-game-session-data
                                         common-lisp:null)
                         :accessor %game-session-placement-game-session-data
                         :initform common-lisp:nil)
                        (placed-player-sessions :initarg
                         :placed-player-sessions :type
                         (common-lisp:or placed-player-session-list
                                         common-lisp:null)
                         :accessor
                         %game-session-placement-placed-player-sessions
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %game-session-placement-port :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %game-session-placement-dns-name :initform
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %game-session-placement-ip-address :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-session-placement-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %game-session-placement-start-time :initform
                         common-lisp:nil)
                        (player-latencies :initarg :player-latencies :type
                         (common-lisp:or player-latency-list common-lisp:null)
                         :accessor %game-session-placement-player-latencies
                         :initform common-lisp:nil)
                        (game-session-region :initarg :game-session-region
                         :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-placement-game-session-region
                         :initform common-lisp:nil)
                        (game-session-arn :initarg :game-session-arn :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-placement-game-session-arn
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-placement-game-session-id
                         :initform common-lisp:nil)
                        (game-session-name :initarg :game-session-name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %game-session-placement-game-session-name
                         :initform common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %game-session-placement-maximum-player-session-count
                         :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor %game-session-placement-game-properties
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or game-session-placement-state
                                         common-lisp:null)
                         :accessor %game-session-placement-status :initform
                         common-lisp:nil)
                        (game-session-queue-name :initarg
                         :game-session-queue-name :type
                         (common-lisp:or game-session-queue-name
                                         common-lisp:null)
                         :accessor
                         %game-session-placement-game-session-queue-name
                         :initform common-lisp:nil)
                        (placement-id :initarg :placement-id :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor %game-session-placement-placement-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-session-placement 'make-game-session-placement))
 (common-lisp:defun make-game-session-placement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matchmaker-data game-session-data
                     placed-player-sessions port dns-name ip-address end-time
                     start-time player-latencies game-session-region
                     game-session-arn game-session-id game-session-name
                     maximum-player-session-count game-properties status
                     game-session-queue-name placement-id)
   (common-lisp:apply #'common-lisp:make-instance 'game-session-placement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          game-session-placement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          game-session-placement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-id))
      (common-lisp:list
       (common-lisp:cons "PlacementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-name))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-name))
      (common-lisp:list
       (common-lisp:cons "GameSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-arn))
      (common-lisp:list
       (common-lisp:cons "GameSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-region))
      (common-lisp:list
       (common-lisp:cons "GameSessionRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-latencies))
      (common-lisp:list
       (common-lisp:cons "PlayerLatencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placed-player-sessions))
      (common-lisp:list
       (common-lisp:cons "PlacedPlayerSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matchmaker-data))
      (common-lisp:list
       (common-lisp:cons "MatchmakerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          game-session-placement))
   common-lisp:nil))
(common-lisp:deftype game-session-placement-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-session-queue common-lisp:nil
                       ((notification-target :initarg :notification-target
                         :type
                         (common-lisp:or queue-sns-arn-string-model
                                         common-lisp:null)
                         :accessor %game-session-queue-notification-target
                         :initform common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or queue-custom-event-data
                                         common-lisp:null)
                         :accessor %game-session-queue-custom-event-data
                         :initform common-lisp:nil)
                        (priority-configuration :initarg
                         :priority-configuration :type
                         (common-lisp:or priority-configuration
                                         common-lisp:null)
                         :accessor %game-session-queue-priority-configuration
                         :initform common-lisp:nil)
                        (filter-configuration :initarg :filter-configuration
                         :type
                         (common-lisp:or filter-configuration common-lisp:null)
                         :accessor %game-session-queue-filter-configuration
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or game-session-queue-destination-list
                                         common-lisp:null)
                         :accessor %game-session-queue-destinations :initform
                         common-lisp:nil)
                        (player-latency-policies :initarg
                         :player-latency-policies :type
                         (common-lisp:or player-latency-policy-list
                                         common-lisp:null)
                         :accessor %game-session-queue-player-latency-policies
                         :initform common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %game-session-queue-timeout-in-seconds
                         :initform common-lisp:nil)
                        (game-session-queue-arn :initarg
                         :game-session-queue-arn :type
                         (common-lisp:or game-session-queue-arn
                                         common-lisp:null)
                         :accessor %game-session-queue-game-session-queue-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or game-session-queue-name
                                         common-lisp:null)
                         :accessor %game-session-queue-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-session-queue 'make-game-session-queue))
 (common-lisp:defun make-game-session-queue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-target custom-event-data
                     priority-configuration filter-configuration destinations
                     player-latency-policies timeout-in-seconds
                     game-session-queue-arn name)
   (common-lisp:apply #'common-lisp:make-instance 'game-session-queue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input game-session-queue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input game-session-queue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-arn))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-latency-policies))
      (common-lisp:list
       (common-lisp:cons "PlayerLatencyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-configuration))
      (common-lisp:list
       (common-lisp:cons "FilterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'priority-configuration))
      (common-lisp:list
       (common-lisp:cons "PriorityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input game-session-queue))
   common-lisp:nil))
(common-lisp:deftype game-session-queue-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass game-session-queue-destination common-lisp:nil
                       ((destination-arn :initarg :destination-arn :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %game-session-queue-destination-destination-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'game-session-queue-destination
                    'make-game-session-queue-destination))
 (common-lisp:defun make-game-session-queue-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'game-session-queue-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          game-session-queue-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          game-session-queue-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          game-session-queue-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype game-session-queue-destination-list ()
   '(trivial-types:proper-list game-session-queue-destination))
 (common-lisp:defun |make-game-session-queue-destination-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            game-session-queue-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype game-session-queue-list ()
   '(trivial-types:proper-list game-session-queue))
 (common-lisp:defun |make-game-session-queue-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list game-session-queue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-session-queue-name () 'common-lisp:string)
(common-lisp:deftype game-session-queue-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype game-session-queue-name-or-arn-list ()
   '(trivial-types:proper-list game-session-queue-name-or-arn))
 (common-lisp:defun |make-game-session-queue-name-or-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            game-session-queue-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype game-session-status () 'common-lisp:string)
(common-lisp:deftype game-session-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-compute-access-input common-lisp:nil
                       ((compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %get-compute-access-input-compute-name
                         :initform
                         (common-lisp:error ":compute-name is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %get-compute-access-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-compute-access-input 'make-get-compute-access-input))
 (common-lisp:defun make-get-compute-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-name fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-compute-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compute-access-output common-lisp:nil
                       ((credentials :initarg :credentials :type
                         (common-lisp:or aws-credentials common-lisp:null)
                         :accessor %get-compute-access-output-credentials
                         :initform common-lisp:nil)
                        (compute-arn :initarg :compute-arn :type
                         (common-lisp:or compute-arn common-lisp:null)
                         :accessor %get-compute-access-output-compute-arn
                         :initform common-lisp:nil)
                        (compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %get-compute-access-output-compute-name
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %get-compute-access-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %get-compute-access-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compute-access-output
                    'make-get-compute-access-output))
 (common-lisp:defun make-get-compute-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credentials compute-arn compute-name
                     fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-compute-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-arn))
      (common-lisp:list
       (common-lisp:cons "ComputeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-access-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compute-auth-token-input common-lisp:nil
                       ((compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %get-compute-auth-token-input-compute-name
                         :initform
                         (common-lisp:error ":compute-name is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %get-compute-auth-token-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-compute-auth-token-input
                    'make-get-compute-auth-token-input))
 (common-lisp:defun make-get-compute-auth-token-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute-name fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-compute-auth-token-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compute-auth-token-output common-lisp:nil
                       ((expiration-timestamp :initarg :expiration-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %get-compute-auth-token-output-expiration-timestamp
                         :initform common-lisp:nil)
                        (auth-token :initarg :auth-token :type
                         (common-lisp:or compute-auth-token common-lisp:null)
                         :accessor %get-compute-auth-token-output-auth-token
                         :initform common-lisp:nil)
                        (compute-arn :initarg :compute-arn :type
                         (common-lisp:or compute-arn common-lisp:null)
                         :accessor %get-compute-auth-token-output-compute-arn
                         :initform common-lisp:nil)
                        (compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name-or-arn common-lisp:null)
                         :accessor %get-compute-auth-token-output-compute-name
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %get-compute-auth-token-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %get-compute-auth-token-output-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compute-auth-token-output
                    'make-get-compute-auth-token-output))
 (common-lisp:defun make-get-compute-auth-token-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration-timestamp auth-token
                     compute-arn compute-name fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compute-auth-token-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-arn))
      (common-lisp:list
       (common-lisp:cons "ComputeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-timestamp))
      (common-lisp:list
       (common-lisp:cons "ExpirationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compute-auth-token-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-game-session-log-url-input common-lisp:nil
                       ((game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor
                         %get-game-session-log-url-input-game-session-id
                         :initform
                         (common-lisp:error ":game-session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-game-session-log-url-input
                    'make-get-game-session-log-url-input))
 (common-lisp:defun make-get-game-session-log-url-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-game-session-log-url-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-game-session-log-url-output common-lisp:nil
                       ((pre-signed-url :initarg :pre-signed-url :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %get-game-session-log-url-output-pre-signed-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-game-session-log-url-output
                    'make-get-game-session-log-url-output))
 (common-lisp:defun make-get-game-session-log-url-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pre-signed-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-game-session-log-url-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-game-session-log-url-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-access-input common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %get-instance-access-input-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %get-instance-access-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-input
                    'make-get-instance-access-input))
 (common-lisp:defun make-get-instance-access-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-access-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-access-output common-lisp:nil
                       ((instance-access :initarg :instance-access :type
                         (common-lisp:or instance-access common-lisp:null)
                         :accessor %get-instance-access-output-instance-access
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-output
                    'make-get-instance-access-output))
 (common-lisp:defun make-get-instance-access-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-access)
   (common-lisp:apply #'common-lisp:make-instance 'get-instance-access-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-access))
      (common-lisp:list
       (common-lisp:cons "InstanceAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-output))
   common-lisp:nil))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype id-string-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %instance-location :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-creation-time :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or instance-status common-lisp:null)
                         :accessor %instance-status :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor %instance-type :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %instance-operating-system :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %instance-dns-name :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %instance-ip-address :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-instance-id :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %instance-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %instance-fleet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defun make-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location creation-time status type
                     operating-system dns-name ip-address instance-id fleet-arn
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-access common-lisp:nil
                       ((credentials :initarg :credentials :type
                         (common-lisp:or instance-credentials common-lisp:null)
                         :accessor %instance-access-credentials :initform
                         common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %instance-access-operating-system :initform
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %instance-access-ip-address :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-access-instance-id :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %instance-access-fleet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-access 'make-instance-access))
 (common-lisp:defun make-instance-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credentials operating-system ip-address
                     instance-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-credentials common-lisp:nil
                       ((secret :initarg :secret :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %instance-credentials-secret :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %instance-credentials-user-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-credentials 'make-instance-credentials))
 (common-lisp:defun make-instance-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret user-name)
   (common-lisp:apply #'common-lisp:make-instance 'instance-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret))
      (common-lisp:list
       (common-lisp:cons "Secret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-definition common-lisp:nil
                       ((weighted-capacity :initarg :weighted-capacity :type
                         (common-lisp:or weighted-capacity common-lisp:null)
                         :accessor %instance-definition-weighted-capacity
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or game-server-group-instance-type
                                         common-lisp:null)
                         :accessor %instance-definition-instance-type :initform
                         (common-lisp:error ":instance-type is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-definition 'make-instance-definition))
 (common-lisp:defun make-instance-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-capacity instance-type)
   (common-lisp:apply #'common-lisp:make-instance 'instance-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-definitions ()
   '(trivial-types:proper-list instance-definition))
 (common-lisp:defun |make-instance-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun |make-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-status () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-fleet-status-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-fleet-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-fleet-status-exception
                    'invalid-fleet-status-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-game-session-status-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-game-session-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-game-session-status-exception
                    'invalid-game-session-status-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ip-permission common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or ip-protocol common-lisp:null)
                         :accessor %ip-permission-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (ip-range :initarg :ip-range :type
                         (common-lisp:or non-blank-string common-lisp:null)
                         :accessor %ip-permission-ip-range :initform
                         (common-lisp:error ":ip-range is required"))
                        (to-port :initarg :to-port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %ip-permission-to-port :initform
                         (common-lisp:error ":to-port is required"))
                        (from-port :initarg :from-port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %ip-permission-from-port :initform
                         (common-lisp:error ":from-port is required"))))
 (common-lisp:export (common-lisp:list 'ip-permission 'make-ip-permission))
 (common-lisp:defun make-ip-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol ip-range to-port from-port)
   (common-lisp:apply #'common-lisp:make-instance 'ip-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-range))
      (common-lisp:list
       (common-lisp:cons "IpRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-permissions-list ()
   '(trivial-types:proper-list ip-permission))
 (common-lisp:defun |make-ip-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-protocol () 'common-lisp:string)
(common-lisp:deftype large-game-session-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype latency-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-latency-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype launch-parameters-string-model () 'common-lisp:string)
(common-lisp:deftype launch-path-string-model () 'common-lisp:string)
(common-lisp:deftype launch-template-id () 'common-lisp:string)
(common-lisp:deftype launch-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-template-specification common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or launch-template-version
                                         common-lisp:null)
                         :accessor %launch-template-specification-version
                         :initform common-lisp:nil)
                        (launch-template-name :initarg :launch-template-name
                         :type
                         (common-lisp:or launch-template-name common-lisp:null)
                         :accessor
                         %launch-template-specification-launch-template-name
                         :initform common-lisp:nil)
                        (launch-template-id :initarg :launch-template-id :type
                         (common-lisp:or launch-template-id common-lisp:null)
                         :accessor
                         %launch-template-specification-launch-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-template-specification
                    'make-launch-template-specification))
 (common-lisp:defun make-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version launch-template-name
                     launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-specification))
   common-lisp:nil))
(common-lisp:deftype launch-template-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-aliases-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-aliases-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-aliases-input-limit :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-aliases-input-name :initform
                         common-lisp:nil)
                        (routing-strategy-type :initarg :routing-strategy-type
                         :type
                         (common-lisp:or routing-strategy-type
                                         common-lisp:null)
                         :accessor %list-aliases-input-routing-strategy-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-input 'make-list-aliases-input))
 (common-lisp:defun make-list-aliases-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit name
                     routing-strategy-type)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'routing-strategy-type))
      (common-lisp:list
       (common-lisp:cons "RoutingStrategyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aliases-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-aliases-output-next-token :initform
                         common-lisp:nil)
                        (aliases :initarg :aliases :type
                         (common-lisp:or alias-list common-lisp:null) :accessor
                         %list-aliases-output-aliases :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-output 'make-list-aliases-output))
 (common-lisp:defun make-list-aliases-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token aliases)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-builds-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-builds-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-builds-input-limit :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or build-status common-lisp:null)
                         :accessor %list-builds-input-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-builds-input 'make-list-builds-input))
 (common-lisp:defun make-list-builds-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit status)
   (common-lisp:apply #'common-lisp:make-instance 'list-builds-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-builds-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-builds-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-builds-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-builds-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-builds-output-next-token :initform
                         common-lisp:nil)
                        (builds :initarg :builds :type
                         (common-lisp:or build-list common-lisp:null) :accessor
                         %list-builds-output-builds :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-builds-output 'make-list-builds-output))
 (common-lisp:defun make-list-builds-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token builds)
   (common-lisp:apply #'common-lisp:make-instance 'list-builds-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-builds-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-builds-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'builds))
      (common-lisp:list
       (common-lisp:cons "Builds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-builds-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compute-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-compute-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-compute-input-limit :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %list-compute-input-location :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %list-compute-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-compute-input 'make-list-compute-input))
 (common-lisp:defun make-list-compute-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit location fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-compute-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-compute-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-compute-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-compute-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compute-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-compute-output-next-token :initform
                         common-lisp:nil)
                        (compute-list :initarg :compute-list :type
                         (common-lisp:or compute-list common-lisp:null)
                         :accessor %list-compute-output-compute-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compute-output 'make-list-compute-output))
 (common-lisp:defun make-list-compute-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token compute-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-compute-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-compute-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-compute-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-list))
      (common-lisp:list
       (common-lisp:cons "ComputeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-compute-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-fleets-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-fleets-input-limit :initform
                         common-lisp:nil)
                        (script-id :initarg :script-id :type
                         (common-lisp:or script-id-or-arn common-lisp:null)
                         :accessor %list-fleets-input-script-id :initform
                         common-lisp:nil)
                        (build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %list-fleets-input-build-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-input 'make-list-fleets-input))
 (common-lisp:defun make-list-fleets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit script-id build-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fleets-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-fleets-output-next-token :initform
                         common-lisp:nil)
                        (fleet-ids :initarg :fleet-ids :type
                         (common-lisp:or fleet-id-list common-lisp:null)
                         :accessor %list-fleets-output-fleet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fleets-output 'make-list-fleets-output))
 (common-lisp:defun make-list-fleets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-fleets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fleets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fleets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-ids))
      (common-lisp:list
       (common-lisp:cons "FleetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fleets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-game-server-groups-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-game-server-groups-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-game-server-groups-input-limit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-game-server-groups-input
                    'make-list-game-server-groups-input))
 (common-lisp:defun make-list-game-server-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-game-server-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-game-server-groups-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-game-server-groups-output-next-token
                         :initform common-lisp:nil)
                        (game-server-groups :initarg :game-server-groups :type
                         (common-lisp:or game-server-groups common-lisp:null)
                         :accessor
                         %list-game-server-groups-output-game-server-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-game-server-groups-output
                    'make-list-game-server-groups-output))
 (common-lisp:defun make-list-game-server-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-server-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-game-server-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-groups))
      (common-lisp:list
       (common-lisp:cons "GameServerGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-game-server-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-game-servers-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-game-servers-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-game-servers-input-limit :initform
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-game-servers-input-sort-order :initform
                         common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %list-game-servers-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-game-servers-input 'make-list-game-servers-input))
 (common-lisp:defun make-list-game-servers-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit sort-order
                     game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-game-servers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-game-servers-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-game-servers-output-next-token
                         :initform common-lisp:nil)
                        (game-servers :initarg :game-servers :type
                         (common-lisp:or game-servers common-lisp:null)
                         :accessor %list-game-servers-output-game-servers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-game-servers-output 'make-list-game-servers-output))
 (common-lisp:defun make-list-game-servers-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-servers)
   (common-lisp:apply #'common-lisp:make-instance 'list-game-servers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-servers))
      (common-lisp:list
       (common-lisp:cons "GameServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-game-servers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-locations-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-locations-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or list-locations-limit common-lisp:null)
                         :accessor %list-locations-input-limit :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or location-filter-list common-lisp:null)
                         :accessor %list-locations-input-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-locations-input 'make-list-locations-input))
 (common-lisp:defun make-list-locations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-locations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-locations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-locations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-locations-input))
   common-lisp:nil))
(common-lisp:deftype list-locations-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-locations-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %list-locations-output-next-token :initform
                         common-lisp:nil)
                        (locations :initarg :locations :type
                         (common-lisp:or location-model-list common-lisp:null)
                         :accessor %list-locations-output-locations :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-locations-output 'make-list-locations-output))
 (common-lisp:defun make-list-locations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token locations)
   (common-lisp:apply #'common-lisp:make-instance 'list-locations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-locations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-locations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "Locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-locations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scripts-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-scripts-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-scripts-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scripts-input 'make-list-scripts-input))
 (common-lisp:defun make-list-scripts-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-scripts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scripts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scripts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scripts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scripts-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-scripts-output-next-token :initform
                         common-lisp:nil)
                        (scripts :initarg :scripts :type
                         (common-lisp:or script-list common-lisp:null)
                         :accessor %list-scripts-output-scripts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scripts-output 'make-list-scripts-output))
 (common-lisp:defun make-list-scripts-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scripts)
   (common-lisp:apply #'common-lisp:make-instance 'list-scripts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scripts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scripts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scripts))
      (common-lisp:list
       (common-lisp:cons "Scripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scripts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype location-arn-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass location-attributes common-lisp:nil
                       ((update-status :initarg :update-status :type
                         (common-lisp:or location-update-status
                                         common-lisp:null)
                         :accessor %location-attributes-update-status :initform
                         common-lisp:nil)
                        (stopped-actions :initarg :stopped-actions :type
                         (common-lisp:or fleet-action-list common-lisp:null)
                         :accessor %location-attributes-stopped-actions
                         :initform common-lisp:nil)
                        (location-state :initarg :location-state :type
                         (common-lisp:or location-state common-lisp:null)
                         :accessor %location-attributes-location-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'location-attributes 'make-location-attributes))
 (common-lisp:defun make-location-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-status stopped-actions
                     location-state)
   (common-lisp:apply #'common-lisp:make-instance 'location-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-state))
      (common-lisp:list
       (common-lisp:cons "LocationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-actions))
      (common-lisp:list
       (common-lisp:cons "StoppedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-attributes-list ()
   '(trivial-types:proper-list location-attributes))
 (common-lisp:defun |make-location-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass location-configuration common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %location-configuration-location :initform
                         (common-lisp:error ":location is required"))))
 (common-lisp:export
  (common-lisp:list 'location-configuration 'make-location-configuration))
 (common-lisp:defun make-location-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location)
   (common-lisp:apply #'common-lisp:make-instance 'location-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          location-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          location-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          location-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-configuration-list ()
   '(trivial-types:proper-list location-configuration))
 (common-lisp:defun |make-location-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-filter-list ()
   '(trivial-types:proper-list location-filter))
 (common-lisp:defun |make-location-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype location-list ()
   '(trivial-types:proper-list location-string-model))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-string-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass location-model common-lisp:nil
                       ((location-arn :initarg :location-arn :type
                         (common-lisp:or location-arn-model common-lisp:null)
                         :accessor %location-model-location-arn :initform
                         common-lisp:nil)
                        (location-name :initarg :location-name :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %location-model-location-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'location-model 'make-location-model))
 (common-lisp:defun make-location-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-arn location-name)
   (common-lisp:apply #'common-lisp:make-instance 'location-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-name))
      (common-lisp:list
       (common-lisp:cons "LocationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-arn))
      (common-lisp:list
       (common-lisp:cons "LocationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-model-list ()
   '(trivial-types:proper-list location-model))
 (common-lisp:defun |make-location-model-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass location-state common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or fleet-status common-lisp:null)
                         :accessor %location-state-status :initform
                         common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %location-state-location :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'location-state 'make-location-state))
 (common-lisp:defun make-location-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status location)
   (common-lisp:apply #'common-lisp:make-instance 'location-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-state-list ()
   '(trivial-types:proper-list location-state))
 (common-lisp:defun |make-location-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location-string-model () 'common-lisp:string)
(common-lisp:deftype location-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass matched-player-session common-lisp:nil
                       ((player-session-id :initarg :player-session-id :type
                         (common-lisp:or player-session-id common-lisp:null)
                         :accessor %matched-player-session-player-session-id
                         :initform common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %matched-player-session-player-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'matched-player-session 'make-matched-player-session))
 (common-lisp:defun make-matched-player-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-session-id player-id)
   (common-lisp:apply #'common-lisp:make-instance 'matched-player-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          matched-player-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          matched-player-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-session-id))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          matched-player-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matched-player-session-list ()
   '(trivial-types:proper-list matched-player-session))
 (common-lisp:defun |make-matched-player-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matched-player-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype matchmaker-data () 'common-lisp:string)
(common-lisp:deftype matchmaking-acceptance-timeout-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass matchmaking-configuration common-lisp:nil
                       ((flex-match-mode :initarg :flex-match-mode :type
                         (common-lisp:or flex-match-mode common-lisp:null)
                         :accessor %matchmaking-configuration-flex-match-mode
                         :initform common-lisp:nil)
                        (backfill-mode :initarg :backfill-mode :type
                         (common-lisp:or backfill-mode common-lisp:null)
                         :accessor %matchmaking-configuration-backfill-mode
                         :initform common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or game-session-data common-lisp:null)
                         :accessor %matchmaking-configuration-game-session-data
                         :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor %matchmaking-configuration-game-properties
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %matchmaking-configuration-creation-time :initform
                         common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or custom-event-data common-lisp:null)
                         :accessor %matchmaking-configuration-custom-event-data
                         :initform common-lisp:nil)
                        (additional-player-count :initarg
                         :additional-player-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %matchmaking-configuration-additional-player-count
                         :initform common-lisp:nil)
                        (notification-target :initarg :notification-target
                         :type
                         (common-lisp:or sns-arn-string-model common-lisp:null)
                         :accessor
                         %matchmaking-configuration-notification-target
                         :initform common-lisp:nil)
                        (rule-set-arn :initarg :rule-set-arn :type
                         (common-lisp:or matchmaking-rule-set-arn
                                         common-lisp:null)
                         :accessor %matchmaking-configuration-rule-set-arn
                         :initform common-lisp:nil)
                        (rule-set-name :initarg :rule-set-name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %matchmaking-configuration-rule-set-name
                         :initform common-lisp:nil)
                        (acceptance-required :initarg :acceptance-required
                         :type (common-lisp:or boolean-model common-lisp:null)
                         :accessor
                         %matchmaking-configuration-acceptance-required
                         :initform common-lisp:nil)
                        (acceptance-timeout-seconds :initarg
                         :acceptance-timeout-seconds :type
                         (common-lisp:or matchmaking-acceptance-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %matchmaking-configuration-acceptance-timeout-seconds
                         :initform common-lisp:nil)
                        (request-timeout-seconds :initarg
                         :request-timeout-seconds :type
                         (common-lisp:or matchmaking-request-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %matchmaking-configuration-request-timeout-seconds
                         :initform common-lisp:nil)
                        (game-session-queue-arns :initarg
                         :game-session-queue-arns :type
                         (common-lisp:or queue-arns-list common-lisp:null)
                         :accessor
                         %matchmaking-configuration-game-session-queue-arns
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %matchmaking-configuration-description
                         :initform common-lisp:nil)
                        (configuration-arn :initarg :configuration-arn :type
                         (common-lisp:or matchmaking-configuration-arn
                                         common-lisp:null)
                         :accessor %matchmaking-configuration-configuration-arn
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %matchmaking-configuration-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'matchmaking-configuration
                    'make-matchmaking-configuration))
 (common-lisp:defun make-matchmaking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flex-match-mode backfill-mode
                     game-session-data game-properties creation-time
                     custom-event-data additional-player-count
                     notification-target rule-set-arn rule-set-name
                     acceptance-required acceptance-timeout-seconds
                     request-timeout-seconds game-session-queue-arns
                     description configuration-arn name)
   (common-lisp:apply #'common-lisp:make-instance 'matchmaking-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          matchmaking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          matchmaking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-arns))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "RequestTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceptance-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "AcceptanceTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-required))
      (common-lisp:list
       (common-lisp:cons "AcceptanceRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-arn))
      (common-lisp:list
       (common-lisp:cons "RuleSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-player-count))
      (common-lisp:list
       (common-lisp:cons "AdditionalPlayerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-mode))
      (common-lisp:list
       (common-lisp:cons "BackfillMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flex-match-mode))
      (common-lisp:list
       (common-lisp:cons "FlexMatchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          matchmaking-configuration))
   common-lisp:nil))
(common-lisp:deftype matchmaking-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matchmaking-configuration-list ()
   '(trivial-types:proper-list matchmaking-configuration))
 (common-lisp:defun |make-matchmaking-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            matchmaking-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype matchmaking-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matchmaking-configuration-name-list ()
   '(trivial-types:proper-list matchmaking-configuration-name))
 (common-lisp:defun |make-matchmaking-configuration-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            matchmaking-configuration-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype matchmaking-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matchmaking-id-list ()
   '(trivial-types:proper-list matchmaking-id-string-model))
 (common-lisp:defun |make-matchmaking-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            matchmaking-id-string-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype matchmaking-id-string-model () 'common-lisp:string)
(common-lisp:deftype matchmaking-request-timeout-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass matchmaking-rule-set common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %matchmaking-rule-set-creation-time :initform
                         common-lisp:nil)
                        (rule-set-body :initarg :rule-set-body :type
                         (common-lisp:or rule-set-body common-lisp:null)
                         :accessor %matchmaking-rule-set-rule-set-body
                         :initform
                         (common-lisp:error ":rule-set-body is required"))
                        (rule-set-arn :initarg :rule-set-arn :type
                         (common-lisp:or matchmaking-rule-set-arn
                                         common-lisp:null)
                         :accessor %matchmaking-rule-set-rule-set-arn :initform
                         common-lisp:nil)
                        (rule-set-name :initarg :rule-set-name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %matchmaking-rule-set-rule-set-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'matchmaking-rule-set 'make-matchmaking-rule-set))
 (common-lisp:defun make-matchmaking-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time rule-set-body rule-set-arn
                     rule-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'matchmaking-rule-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matchmaking-rule-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matchmaking-rule-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-arn))
      (common-lisp:list
       (common-lisp:cons "RuleSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-body))
      (common-lisp:list
       (common-lisp:cons "RuleSetBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matchmaking-rule-set))
   common-lisp:nil))
(common-lisp:deftype matchmaking-rule-set-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matchmaking-rule-set-list ()
   '(trivial-types:proper-list matchmaking-rule-set))
 (common-lisp:defun |make-matchmaking-rule-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matchmaking-rule-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype matchmaking-rule-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matchmaking-rule-set-name-list ()
   '(trivial-types:proper-list matchmaking-rule-set-name))
 (common-lisp:defun |make-matchmaking-rule-set-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            matchmaking-rule-set-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass matchmaking-ticket common-lisp:nil
                       ((estimated-wait-time :initarg :estimated-wait-time
                         :type (common-lisp:or whole-number common-lisp:null)
                         :accessor %matchmaking-ticket-estimated-wait-time
                         :initform common-lisp:nil)
                        (game-session-connection-info :initarg
                         :game-session-connection-info :type
                         (common-lisp:or game-session-connection-info
                                         common-lisp:null)
                         :accessor
                         %matchmaking-ticket-game-session-connection-info
                         :initform common-lisp:nil)
                        (players :initarg :players :type
                         (common-lisp:or player-list common-lisp:null)
                         :accessor %matchmaking-ticket-players :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %matchmaking-ticket-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %matchmaking-ticket-start-time :initform
                         common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or string-model common-lisp:null)
                         :accessor %matchmaking-ticket-status-message :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or string-model common-lisp:null)
                         :accessor %matchmaking-ticket-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or matchmaking-configuration-status
                                         common-lisp:null)
                         :accessor %matchmaking-ticket-status :initform
                         common-lisp:nil)
                        (configuration-arn :initarg :configuration-arn :type
                         (common-lisp:or matchmaking-configuration-arn
                                         common-lisp:null)
                         :accessor %matchmaking-ticket-configuration-arn
                         :initform common-lisp:nil)
                        (configuration-name :initarg :configuration-name :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %matchmaking-ticket-configuration-name
                         :initform common-lisp:nil)
                        (ticket-id :initarg :ticket-id :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %matchmaking-ticket-ticket-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'matchmaking-ticket 'make-matchmaking-ticket))
 (common-lisp:defun make-matchmaking-ticket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key estimated-wait-time
                     game-session-connection-info players end-time start-time
                     status-message status-reason status configuration-arn
                     configuration-name ticket-id)
   (common-lisp:apply #'common-lisp:make-instance 'matchmaking-ticket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matchmaking-ticket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matchmaking-ticket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-id))
      (common-lisp:list
       (common-lisp:cons "TicketId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'players))
      (common-lisp:list
       (common-lisp:cons "Players"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-connection-info))
      (common-lisp:list
       (common-lisp:cons "GameSessionConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-wait-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedWaitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matchmaking-ticket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matchmaking-ticket-list ()
   '(trivial-types:proper-list matchmaking-ticket))
 (common-lisp:defun |make-matchmaking-ticket-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list matchmaking-ticket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-concurrent-game-session-activations ()
  'common-lisp:integer)
(common-lisp:deftype metric-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-group-list ()
   '(trivial-types:proper-list metric-group))
 (common-lisp:defun |make-metric-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype non-blank-and-length-constraint-string ()
  'common-lisp:string)
(common-lisp:deftype non-blank-string () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype non-negative-limited-length-double () 'common-lisp:string)
(common-lisp:deftype non-zero-and-max-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype operating-system () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition out-of-capacity-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       out-of-capacity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'out-of-capacity-exception
                    'out-of-capacity-exception-message)))
(common-lisp:progn
 (common-lisp:defclass placed-player-session common-lisp:nil
                       ((player-session-id :initarg :player-session-id :type
                         (common-lisp:or player-session-id common-lisp:null)
                         :accessor %placed-player-session-player-session-id
                         :initform common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %placed-player-session-player-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placed-player-session 'make-placed-player-session))
 (common-lisp:defun make-placed-player-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-session-id player-id)
   (common-lisp:apply #'common-lisp:make-instance 'placed-player-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          placed-player-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          placed-player-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-session-id))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          placed-player-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype placed-player-session-list ()
   '(trivial-types:proper-list placed-player-session))
 (common-lisp:defun |make-placed-player-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placed-player-session))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass player common-lisp:nil
                       ((latency-in-ms :initarg :latency-in-ms :type
                         (common-lisp:or latency-map common-lisp:null)
                         :accessor %player-latency-in-ms :initform
                         common-lisp:nil)
                        (team :initarg :team :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-team :initform common-lisp:nil)
                        (player-attributes :initarg :player-attributes :type
                         (common-lisp:or player-attribute-map common-lisp:null)
                         :accessor %player-player-attributes :initform
                         common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-player-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'player 'make-player))
 (common-lisp:defun make-player
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency-in-ms team player-attributes
                     player-id)
   (common-lisp:apply #'common-lisp:make-instance 'player
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input player))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input player))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-attributes))
      (common-lisp:list
       (common-lisp:cons "PlayerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team))
      (common-lisp:list
       (common-lisp:cons "Team"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-in-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input player))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype player-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-player-attribute-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype player-attribute-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype player-attribute-string-double-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-player-attribute-string-double-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype player-attribute-string-list ()
   '(trivial-types:proper-list player-attribute-string))
 (common-lisp:defun |make-player-attribute-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list player-attribute-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype player-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype player-data-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-player-data-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype player-id-list ()
   '(trivial-types:proper-list non-zero-and-max-string))
 (common-lisp:defun |make-player-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-zero-and-max-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass player-latency common-lisp:nil
                       ((latency-in-milliseconds :initarg
                         :latency-in-milliseconds :type
                         (common-lisp:or float common-lisp:null) :accessor
                         %player-latency-latency-in-milliseconds :initform
                         common-lisp:nil)
                        (region-identifier :initarg :region-identifier :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-latency-region-identifier :initform
                         common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-latency-player-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'player-latency 'make-player-latency))
 (common-lisp:defun make-player-latency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency-in-milliseconds region-identifier
                     player-id)
   (common-lisp:apply #'common-lisp:make-instance 'player-latency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input player-latency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input player-latency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-identifier))
      (common-lisp:list
       (common-lisp:cons "RegionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latency-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "LatencyInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input player-latency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype player-latency-list ()
   '(trivial-types:proper-list player-latency))
 (common-lisp:defun |make-player-latency-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list player-latency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass player-latency-policy common-lisp:nil
                       ((policy-duration-seconds :initarg
                         :policy-duration-seconds :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %player-latency-policy-policy-duration-seconds
                         :initform common-lisp:nil)
                        (maximum-individual-player-latency-milliseconds
                         :initarg
                         :maximum-individual-player-latency-milliseconds :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %player-latency-policy-maximum-individual-player-latency-milliseconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'player-latency-policy 'make-player-latency-policy))
 (common-lisp:defun make-player-latency-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-duration-seconds
                     maximum-individual-player-latency-milliseconds)
   (common-lisp:apply #'common-lisp:make-instance 'player-latency-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          player-latency-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          player-latency-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-individual-player-latency-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MaximumIndividualPlayerLatencyMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "PolicyDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          player-latency-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype player-latency-policy-list ()
   '(trivial-types:proper-list player-latency-policy))
 (common-lisp:defun |make-player-latency-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list player-latency-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype player-list () '(trivial-types:proper-list player))
 (common-lisp:defun |make-player-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list player))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass player-session common-lisp:nil
                       ((player-data :initarg :player-data :type
                         (common-lisp:or player-data common-lisp:null)
                         :accessor %player-session-player-data :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %player-session-port :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name common-lisp:null) :accessor
                         %player-session-dns-name :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %player-session-ip-address :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or player-session-status
                                         common-lisp:null)
                         :accessor %player-session-status :initform
                         common-lisp:nil)
                        (termination-time :initarg :termination-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %player-session-termination-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %player-session-creation-time :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %player-session-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %player-session-fleet-id :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-session-game-session-id :initform
                         common-lisp:nil)
                        (player-id :initarg :player-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %player-session-player-id :initform
                         common-lisp:nil)
                        (player-session-id :initarg :player-session-id :type
                         (common-lisp:or player-session-id common-lisp:null)
                         :accessor %player-session-player-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'player-session 'make-player-session))
 (common-lisp:defun make-player-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key player-data port dns-name ip-address
                     status termination-time creation-time fleet-arn fleet-id
                     game-session-id player-id player-session-id)
   (common-lisp:apply #'common-lisp:make-instance 'player-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input player-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input player-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-session-id))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-id))
      (common-lisp:list
       (common-lisp:cons "PlayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'termination-time))
      (common-lisp:list
       (common-lisp:cons "TerminationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-data))
      (common-lisp:list
       (common-lisp:cons "PlayerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input player-session))
   common-lisp:nil))
(common-lisp:deftype player-session-creation-policy () 'common-lisp:string)
(common-lisp:deftype player-session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype player-session-list ()
   '(trivial-types:proper-list player-session))
 (common-lisp:defun |make-player-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list player-session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype player-session-status () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass priority-configuration common-lisp:nil
                       ((location-order :initarg :location-order :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor %priority-configuration-location-order
                         :initform common-lisp:nil)
                        (priority-order :initarg :priority-order :type
                         (common-lisp:or priority-type-list common-lisp:null)
                         :accessor %priority-configuration-priority-order
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'priority-configuration 'make-priority-configuration))
 (common-lisp:defun make-priority-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-order priority-order)
   (common-lisp:apply #'common-lisp:make-instance 'priority-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          priority-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          priority-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority-order))
      (common-lisp:list
       (common-lisp:cons "PriorityOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-order))
      (common-lisp:list
       (common-lisp:cons "LocationOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          priority-configuration))
   common-lisp:nil))
(common-lisp:deftype priority-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype priority-type-list ()
   '(trivial-types:proper-list priority-type))
 (common-lisp:defun |make-priority-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list priority-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protection-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-scaling-policy-input common-lisp:nil
                       ((target-configuration :initarg :target-configuration
                         :type
                         (common-lisp:or target-configuration common-lisp:null)
                         :accessor
                         %put-scaling-policy-input-target-configuration
                         :initform common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %put-scaling-policy-input-policy-type
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %put-scaling-policy-input-metric-name
                         :initform
                         (common-lisp:error ":metric-name is required"))
                        (evaluation-periods :initarg :evaluation-periods :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %put-scaling-policy-input-evaluation-periods
                         :initform common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :type
                         (common-lisp:or comparison-operator-type
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-input-comparison-operator
                         :initform common-lisp:nil)
                        (threshold :initarg :threshold :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %put-scaling-policy-input-threshold :initform
                         common-lisp:nil)
                        (scaling-adjustment-type :initarg
                         :scaling-adjustment-type :type
                         (common-lisp:or scaling-adjustment-type
                                         common-lisp:null)
                         :accessor
                         %put-scaling-policy-input-scaling-adjustment-type
                         :initform common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %put-scaling-policy-input-scaling-adjustment :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %put-scaling-policy-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %put-scaling-policy-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-input 'make-put-scaling-policy-input))
 (common-lisp:defun make-put-scaling-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-configuration policy-type
                     metric-name evaluation-periods comparison-operator
                     threshold scaling-adjustment-type scaling-adjustment
                     fleet-id name)
   (common-lisp:apply #'common-lisp:make-instance 'put-scaling-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-adjustment-type))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-scaling-policy-output common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %put-scaling-policy-output-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-scaling-policy-output
                    'make-put-scaling-policy-output))
 (common-lisp:defun make-put-scaling-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'put-scaling-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-scaling-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-arns-list ()
   '(trivial-types:proper-list arn-string-model))
 (common-lisp:defun |make-queue-arns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn-string-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype queue-custom-event-data () 'common-lisp:string)
(common-lisp:deftype queue-sns-arn-string-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-compute-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %register-compute-input-location :initform
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %register-compute-input-ip-address :initform
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or dns-name-input common-lisp:null)
                         :accessor %register-compute-input-dns-name :initform
                         common-lisp:nil)
                        (certificate-path :initarg :certificate-path :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %register-compute-input-certificate-path
                         :initform common-lisp:nil)
                        (compute-name :initarg :compute-name :type
                         (common-lisp:or compute-name common-lisp:null)
                         :accessor %register-compute-input-compute-name
                         :initform
                         (common-lisp:error ":compute-name is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %register-compute-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-compute-input 'make-register-compute-input))
 (common-lisp:defun make-register-compute-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location ip-address dns-name
                     certificate-path compute-name fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-compute-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-name))
      (common-lisp:list
       (common-lisp:cons "ComputeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-path))
      (common-lisp:list
       (common-lisp:cons "CertificatePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-compute-output common-lisp:nil
                       ((compute :initarg :compute :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %register-compute-output-compute :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-compute-output 'make-register-compute-output))
 (common-lisp:defun make-register-compute-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compute)
   (common-lisp:apply #'common-lisp:make-instance 'register-compute-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "Compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-compute-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-game-server-input common-lisp:nil
                       ((game-server-data :initarg :game-server-data :type
                         (common-lisp:or game-server-data common-lisp:null)
                         :accessor %register-game-server-input-game-server-data
                         :initform common-lisp:nil)
                        (connection-info :initarg :connection-info :type
                         (common-lisp:or game-server-connection-info
                                         common-lisp:null)
                         :accessor %register-game-server-input-connection-info
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or game-server-instance-id
                                         common-lisp:null)
                         :accessor %register-game-server-input-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))
                        (game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %register-game-server-input-game-server-id
                         :initform
                         (common-lisp:error ":game-server-id is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %register-game-server-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'register-game-server-input
                    'make-register-game-server-input))
 (common-lisp:defun make-register-game-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-data connection-info
                     instance-id game-server-id game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'register-game-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-info))
      (common-lisp:list
       (common-lisp:cons "ConnectionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-data))
      (common-lisp:list
       (common-lisp:cons "GameServerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-game-server-output common-lisp:nil
                       ((game-server :initarg :game-server :type
                         (common-lisp:or game-server common-lisp:null)
                         :accessor %register-game-server-output-game-server
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-game-server-output
                    'make-register-game-server-output))
 (common-lisp:defun make-register-game-server-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server)
   (common-lisp:apply #'common-lisp:make-instance 'register-game-server-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server))
      (common-lisp:list
       (common-lisp:cons "GameServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-game-server-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-upload-credentials-input common-lisp:nil
                       ((build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %request-upload-credentials-input-build-id
                         :initform
                         (common-lisp:error ":build-id is required"))))
 (common-lisp:export
  (common-lisp:list 'request-upload-credentials-input
                    'make-request-upload-credentials-input))
 (common-lisp:defun make-request-upload-credentials-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'request-upload-credentials-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-upload-credentials-output common-lisp:nil
                       ((storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %request-upload-credentials-output-storage-location
                         :initform common-lisp:nil)
                        (upload-credentials :initarg :upload-credentials :type
                         (common-lisp:or aws-credentials common-lisp:null)
                         :accessor
                         %request-upload-credentials-output-upload-credentials
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'request-upload-credentials-output
                    'make-request-upload-credentials-output))
 (common-lisp:defun make-request-upload-credentials-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-location upload-credentials)
   (common-lisp:apply #'common-lisp:make-instance
                      'request-upload-credentials-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-credentials))
      (common-lisp:list
       (common-lisp:cons "UploadCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-upload-credentials-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-alias-input common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %resolve-alias-input-alias-id :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'resolve-alias-input 'make-resolve-alias-input))
 (common-lisp:defun make-resolve-alias-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolve-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolve-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolve-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-alias-output common-lisp:nil
                       ((fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %resolve-alias-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %resolve-alias-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resolve-alias-output 'make-resolve-alias-output))
 (common-lisp:defun make-resolve-alias-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolve-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolve-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolve-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-creation-limit-policy common-lisp:nil
                       ((policy-period-in-minutes :initarg
                         :policy-period-in-minutes :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %resource-creation-limit-policy-policy-period-in-minutes
                         :initform common-lisp:nil)
                        (new-game-sessions-per-creator :initarg
                         :new-game-sessions-per-creator :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %resource-creation-limit-policy-new-game-sessions-per-creator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-creation-limit-policy
                    'make-resource-creation-limit-policy))
 (common-lisp:defun make-resource-creation-limit-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-period-in-minutes
                     new-game-sessions-per-creator)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-creation-limit-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-creation-limit-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-creation-limit-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-game-sessions-per-creator))
      (common-lisp:list
       (common-lisp:cons "NewGameSessionsPerCreator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-period-in-minutes))
      (common-lisp:list
       (common-lisp:cons "PolicyPeriodInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-creation-limit-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-game-server-group-input common-lisp:nil
                       ((resume-actions :initarg :resume-actions :type
                         (common-lisp:or game-server-group-actions
                                         common-lisp:null)
                         :accessor
                         %resume-game-server-group-input-resume-actions
                         :initform
                         (common-lisp:error ":resume-actions is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %resume-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'resume-game-server-group-input
                    'make-resume-game-server-group-input))
 (common-lisp:defun make-resume-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resume-actions game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'resume-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resume-actions))
      (common-lisp:list
       (common-lisp:cons "ResumeActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %resume-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resume-game-server-group-output
                    'make-resume-game-server-group-output))
 (common-lisp:defun make-resume-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'resume-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass routing-strategy common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or free-text common-lisp:null) :accessor
                         %routing-strategy-message :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %routing-strategy-fleet-id :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or routing-strategy-type
                                         common-lisp:null)
                         :accessor %routing-strategy-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'routing-strategy 'make-routing-strategy))
 (common-lisp:defun make-routing-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message fleet-id type)
   (common-lisp:apply #'common-lisp:make-instance 'routing-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-strategy))
   common-lisp:nil))
(common-lisp:deftype routing-strategy-type () 'common-lisp:string)
(common-lisp:deftype rule-set-body () 'common-lisp:string)
(common-lisp:deftype rule-set-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass runtime-configuration common-lisp:nil
                       ((game-session-activation-timeout-seconds :initarg
                         :game-session-activation-timeout-seconds :type
                         (common-lisp:or
                          game-session-activation-timeout-seconds
                          common-lisp:null)
                         :accessor
                         %runtime-configuration-game-session-activation-timeout-seconds
                         :initform common-lisp:nil)
                        (max-concurrent-game-session-activations :initarg
                         :max-concurrent-game-session-activations :type
                         (common-lisp:or
                          max-concurrent-game-session-activations
                          common-lisp:null)
                         :accessor
                         %runtime-configuration-max-concurrent-game-session-activations
                         :initform common-lisp:nil)
                        (server-processes :initarg :server-processes :type
                         (common-lisp:or server-process-list common-lisp:null)
                         :accessor %runtime-configuration-server-processes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'runtime-configuration 'make-runtime-configuration))
 (common-lisp:defun make-runtime-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-activation-timeout-seconds
                     max-concurrent-game-session-activations server-processes)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          runtime-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          runtime-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-processes))
      (common-lisp:list
       (common-lisp:cons "ServerProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-game-session-activations))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentGameSessionActivations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-activation-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "GameSessionActivationTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          runtime-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((object-version :initarg :object-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3location-object-version :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3location-role-arn :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3location-key :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %s3location-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-version role-arn key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-version))
      (common-lisp:list
       (common-lisp:cons "ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype scaling-adjustment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scaling-policy common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %scaling-policy-location :initform
                         common-lisp:nil)
                        (update-status :initarg :update-status :type
                         (common-lisp:or location-update-status
                                         common-lisp:null)
                         :accessor %scaling-policy-update-status :initform
                         common-lisp:nil)
                        (target-configuration :initarg :target-configuration
                         :type
                         (common-lisp:or target-configuration common-lisp:null)
                         :accessor %scaling-policy-target-configuration
                         :initform common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %scaling-policy-policy-type :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %scaling-policy-metric-name :initform
                         common-lisp:nil)
                        (evaluation-periods :initarg :evaluation-periods :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %scaling-policy-evaluation-periods :initform
                         common-lisp:nil)
                        (threshold :initarg :threshold :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %scaling-policy-threshold :initform common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :type
                         (common-lisp:or comparison-operator-type
                                         common-lisp:null)
                         :accessor %scaling-policy-comparison-operator
                         :initform common-lisp:nil)
                        (scaling-adjustment-type :initarg
                         :scaling-adjustment-type :type
                         (common-lisp:or scaling-adjustment-type
                                         common-lisp:null)
                         :accessor %scaling-policy-scaling-adjustment-type
                         :initform common-lisp:nil)
                        (scaling-adjustment :initarg :scaling-adjustment :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %scaling-policy-scaling-adjustment :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or scaling-status-type common-lisp:null)
                         :accessor %scaling-policy-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %scaling-policy-name :initform
                         common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %scaling-policy-fleet-arn :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %scaling-policy-fleet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scaling-policy 'make-scaling-policy))
 (common-lisp:defun make-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location update-status
                     target-configuration policy-type metric-name
                     evaluation-periods threshold comparison-operator
                     scaling-adjustment-type scaling-adjustment status name
                     fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'scaling-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-adjustment))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-adjustment-type))
      (common-lisp:list
       (common-lisp:cons "ScalingAdjustmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scaling-policy-list ()
   '(trivial-types:proper-list scaling-policy))
 (common-lisp:defun |make-scaling-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scaling-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script common-lisp:nil
                       ((storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %script-storage-location :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %script-creation-time :initform common-lisp:nil)
                        (size-on-disk :initarg :size-on-disk :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor %script-size-on-disk :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %script-version :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %script-name :initform common-lisp:nil)
                        (script-arn :initarg :script-arn :type
                         (common-lisp:or script-arn common-lisp:null) :accessor
                         %script-script-arn :initform common-lisp:nil)
                        (script-id :initarg :script-id :type
                         (common-lisp:or script-id common-lisp:null) :accessor
                         %script-script-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'script 'make-script))
 (common-lisp:defun make-script
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-location creation-time
                     size-on-disk version name script-arn script-id)
   (common-lisp:apply #'common-lisp:make-instance 'script
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-arn))
      (common-lisp:list
       (common-lisp:cons "ScriptArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-on-disk))
      (common-lisp:list
       (common-lisp:cons "SizeOnDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script))
   common-lisp:nil))
(common-lisp:deftype script-arn () 'common-lisp:string)
(common-lisp:deftype script-id () 'common-lisp:string)
(common-lisp:deftype script-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype script-list () '(trivial-types:proper-list script))
 (common-lisp:defun |make-script-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list script))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-game-sessions-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %search-game-sessions-input-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %search-game-sessions-input-limit :initform
                         common-lisp:nil)
                        (sort-expression :initarg :sort-expression :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %search-game-sessions-input-sort-expression
                         :initform common-lisp:nil)
                        (filter-expression :initarg :filter-expression :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %search-game-sessions-input-filter-expression
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %search-game-sessions-input-location
                         :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %search-game-sessions-input-alias-id
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %search-game-sessions-input-fleet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-game-sessions-input
                    'make-search-game-sessions-input))
 (common-lisp:defun make-search-game-sessions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit sort-expression
                     filter-expression location alias-id fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'search-game-sessions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-expression))
      (common-lisp:list
       (common-lisp:cons "FilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-expression))
      (common-lisp:list
       (common-lisp:cons "SortExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-game-sessions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %search-game-sessions-output-next-token
                         :initform common-lisp:nil)
                        (game-sessions :initarg :game-sessions :type
                         (common-lisp:or game-session-list common-lisp:null)
                         :accessor %search-game-sessions-output-game-sessions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-game-sessions-output
                    'make-search-game-sessions-output))
 (common-lisp:defun make-search-game-sessions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token game-sessions)
   (common-lisp:apply #'common-lisp:make-instance 'search-game-sessions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-sessions))
      (common-lisp:list
       (common-lisp:cons "GameSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-game-sessions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-process common-lisp:nil
                       ((concurrent-executions :initarg :concurrent-executions
                         :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %server-process-concurrent-executions
                         :initform
                         (common-lisp:error
                          ":concurrent-executions is required"))
                        (parameters :initarg :parameters :type
                         (common-lisp:or launch-parameters-string-model
                                         common-lisp:null)
                         :accessor %server-process-parameters :initform
                         common-lisp:nil)
                        (launch-path :initarg :launch-path :type
                         (common-lisp:or launch-path-string-model
                                         common-lisp:null)
                         :accessor %server-process-launch-path :initform
                         (common-lisp:error ":launch-path is required"))))
 (common-lisp:export (common-lisp:list 'server-process 'make-server-process))
 (common-lisp:defun make-server-process
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key concurrent-executions parameters
                     launch-path)
   (common-lisp:apply #'common-lisp:make-instance 'server-process
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-process))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-process))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-path))
      (common-lisp:list
       (common-lisp:cons "LaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'concurrent-executions))
      (common-lisp:list
       (common-lisp:cons "ConcurrentExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-process))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-process-list ()
   '(trivial-types:proper-list server-process))
 (common-lisp:defun |make-server-process-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-process))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-sdk-version () 'common-lisp:string)
(common-lisp:deftype sns-arn-string-model () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-fleet-actions-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %start-fleet-actions-input-location
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or fleet-action-list common-lisp:null)
                         :accessor %start-fleet-actions-input-actions :initform
                         (common-lisp:error ":actions is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %start-fleet-actions-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-fleet-actions-input
                    'make-start-fleet-actions-input))
 (common-lisp:defun make-start-fleet-actions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location actions fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-fleet-actions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fleet-actions-output common-lisp:nil
                       ((fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %start-fleet-actions-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %start-fleet-actions-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-fleet-actions-output
                    'make-start-fleet-actions-output))
 (common-lisp:defun make-start-fleet-actions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-fleet-actions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fleet-actions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-game-session-placement-input common-lisp:nil
                       ((game-session-data :initarg :game-session-data :type
                         (common-lisp:or large-game-session-data
                                         common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-game-session-data
                         :initform common-lisp:nil)
                        (desired-player-sessions :initarg
                         :desired-player-sessions :type
                         (common-lisp:or desired-player-session-list
                                         common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-desired-player-sessions
                         :initform common-lisp:nil)
                        (player-latencies :initarg :player-latencies :type
                         (common-lisp:or player-latency-list common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-player-latencies
                         :initform common-lisp:nil)
                        (game-session-name :initarg :game-session-name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-game-session-name
                         :initform common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-maximum-player-session-count
                         :initform
                         (common-lisp:error
                          ":maximum-player-session-count is required"))
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-game-properties
                         :initform common-lisp:nil)
                        (game-session-queue-name :initarg
                         :game-session-queue-name :type
                         (common-lisp:or game-session-queue-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-game-session-queue-name
                         :initform
                         (common-lisp:error
                          ":game-session-queue-name is required"))
                        (placement-id :initarg :placement-id :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor
                         %start-game-session-placement-input-placement-id
                         :initform
                         (common-lisp:error ":placement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-game-session-placement-input
                    'make-start-game-session-placement-input))
 (common-lisp:defun make-start-game-session-placement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-data desired-player-sessions
                     player-latencies game-session-name
                     maximum-player-session-count game-properties
                     game-session-queue-name placement-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-game-session-placement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-id))
      (common-lisp:list
       (common-lisp:cons "PlacementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-name))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-name))
      (common-lisp:list
       (common-lisp:cons "GameSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'player-latencies))
      (common-lisp:list
       (common-lisp:cons "PlayerLatencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-player-sessions))
      (common-lisp:list
       (common-lisp:cons "DesiredPlayerSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-game-session-placement-output common-lisp:nil
                       ((game-session-placement :initarg
                         :game-session-placement :type
                         (common-lisp:or game-session-placement
                                         common-lisp:null)
                         :accessor
                         %start-game-session-placement-output-game-session-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-game-session-placement-output
                    'make-start-game-session-placement-output))
 (common-lisp:defun make-start-game-session-placement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-placement)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-game-session-placement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-placement))
      (common-lisp:list
       (common-lisp:cons "GameSessionPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-game-session-placement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-match-backfill-input common-lisp:nil
                       ((players :initarg :players :type
                         (common-lisp:or player-list common-lisp:null)
                         :accessor %start-match-backfill-input-players
                         :initform (common-lisp:error ":players is required"))
                        (game-session-arn :initarg :game-session-arn :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor %start-match-backfill-input-game-session-arn
                         :initform common-lisp:nil)
                        (configuration-name :initarg :configuration-name :type
                         (common-lisp:or matchmaking-configuration-name
                                         common-lisp:null)
                         :accessor
                         %start-match-backfill-input-configuration-name
                         :initform
                         (common-lisp:error ":configuration-name is required"))
                        (ticket-id :initarg :ticket-id :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %start-match-backfill-input-ticket-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-match-backfill-input
                    'make-start-match-backfill-input))
 (common-lisp:defun make-start-match-backfill-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key players game-session-arn
                     configuration-name ticket-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-match-backfill-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-id))
      (common-lisp:list
       (common-lisp:cons "TicketId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-arn))
      (common-lisp:list
       (common-lisp:cons "GameSessionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'players))
      (common-lisp:list
       (common-lisp:cons "Players"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-match-backfill-output common-lisp:nil
                       ((matchmaking-ticket :initarg :matchmaking-ticket :type
                         (common-lisp:or matchmaking-ticket common-lisp:null)
                         :accessor
                         %start-match-backfill-output-matchmaking-ticket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-match-backfill-output
                    'make-start-match-backfill-output))
 (common-lisp:defun make-start-match-backfill-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matchmaking-ticket)
   (common-lisp:apply #'common-lisp:make-instance 'start-match-backfill-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matchmaking-ticket))
      (common-lisp:list
       (common-lisp:cons "MatchmakingTicket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-match-backfill-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-matchmaking-input common-lisp:nil
                       ((players :initarg :players :type
                         (common-lisp:or player-list common-lisp:null)
                         :accessor %start-matchmaking-input-players :initform
                         (common-lisp:error ":players is required"))
                        (configuration-name :initarg :configuration-name :type
                         (common-lisp:or matchmaking-configuration-name
                                         common-lisp:null)
                         :accessor %start-matchmaking-input-configuration-name
                         :initform
                         (common-lisp:error ":configuration-name is required"))
                        (ticket-id :initarg :ticket-id :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %start-matchmaking-input-ticket-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-matchmaking-input 'make-start-matchmaking-input))
 (common-lisp:defun make-start-matchmaking-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key players configuration-name ticket-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-matchmaking-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-id))
      (common-lisp:list
       (common-lisp:cons "TicketId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'players))
      (common-lisp:list
       (common-lisp:cons "Players"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-matchmaking-output common-lisp:nil
                       ((matchmaking-ticket :initarg :matchmaking-ticket :type
                         (common-lisp:or matchmaking-ticket common-lisp:null)
                         :accessor %start-matchmaking-output-matchmaking-ticket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-matchmaking-output 'make-start-matchmaking-output))
 (common-lisp:defun make-start-matchmaking-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matchmaking-ticket)
   (common-lisp:apply #'common-lisp:make-instance 'start-matchmaking-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matchmaking-ticket))
      (common-lisp:list
       (common-lisp:cons "MatchmakingTicket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-matchmaking-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-fleet-actions-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %stop-fleet-actions-input-location :initform
                         common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or fleet-action-list common-lisp:null)
                         :accessor %stop-fleet-actions-input-actions :initform
                         (common-lisp:error ":actions is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %stop-fleet-actions-input-fleet-id :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-fleet-actions-input 'make-stop-fleet-actions-input))
 (common-lisp:defun make-stop-fleet-actions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location actions fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-fleet-actions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-fleet-actions-output common-lisp:nil
                       ((fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %stop-fleet-actions-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %stop-fleet-actions-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-fleet-actions-output
                    'make-stop-fleet-actions-output))
 (common-lisp:defun make-stop-fleet-actions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-fleet-actions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-fleet-actions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-game-session-placement-input common-lisp:nil
                       ((placement-id :initarg :placement-id :type
                         (common-lisp:or id-string-model common-lisp:null)
                         :accessor
                         %stop-game-session-placement-input-placement-id
                         :initform
                         (common-lisp:error ":placement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-game-session-placement-input
                    'make-stop-game-session-placement-input))
 (common-lisp:defun make-stop-game-session-placement-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key placement-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-game-session-placement-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-id))
      (common-lisp:list
       (common-lisp:cons "PlacementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-game-session-placement-output common-lisp:nil
                       ((game-session-placement :initarg
                         :game-session-placement :type
                         (common-lisp:or game-session-placement
                                         common-lisp:null)
                         :accessor
                         %stop-game-session-placement-output-game-session-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-game-session-placement-output
                    'make-stop-game-session-placement-output))
 (common-lisp:defun make-stop-game-session-placement-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-placement)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-game-session-placement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-placement))
      (common-lisp:list
       (common-lisp:cons "GameSessionPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-game-session-placement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-matchmaking-input common-lisp:nil
                       ((ticket-id :initarg :ticket-id :type
                         (common-lisp:or matchmaking-id-string-model
                                         common-lisp:null)
                         :accessor %stop-matchmaking-input-ticket-id :initform
                         (common-lisp:error ":ticket-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-matchmaking-input 'make-stop-matchmaking-input))
 (common-lisp:defun make-stop-matchmaking-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ticket-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-matchmaking-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ticket-id))
      (common-lisp:list
       (common-lisp:cons "TicketId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-matchmaking-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-matchmaking-output 'make-stop-matchmaking-output))
 (common-lisp:defun make-stop-matchmaking-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-matchmaking-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-matchmaking-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-zero-and-max-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-zero-and-max-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-model () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass suspend-game-server-group-input common-lisp:nil
                       ((suspend-actions :initarg :suspend-actions :type
                         (common-lisp:or game-server-group-actions
                                         common-lisp:null)
                         :accessor
                         %suspend-game-server-group-input-suspend-actions
                         :initform
                         (common-lisp:error ":suspend-actions is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %suspend-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'suspend-game-server-group-input
                    'make-suspend-game-server-group-input))
 (common-lisp:defun make-suspend-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suspend-actions game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'suspend-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suspend-actions))
      (common-lisp:list
       (common-lisp:cons "SuspendActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass suspend-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %suspend-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'suspend-game-server-group-output
                    'make-suspend-game-server-group-output))
 (common-lisp:defun make-suspend-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'suspend-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          suspend-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tagging-failed-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tagging-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tagging-failed-exception
                    'tagging-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass target-configuration common-lisp:nil
                       ((target-value :initarg :target-value :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %target-configuration-target-value :initform
                         (common-lisp:error ":target-value is required"))))
 (common-lisp:export
  (common-lisp:list 'target-configuration 'make-target-configuration))
 (common-lisp:defun make-target-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-value)
   (common-lisp:apply #'common-lisp:make-instance 'target-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-tracking-configuration common-lisp:nil
                       ((target-value :initarg :target-value :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor %target-tracking-configuration-target-value
                         :initform
                         (common-lisp:error ":target-value is required"))))
 (common-lisp:export
  (common-lisp:list 'target-tracking-configuration
                    'make-target-tracking-configuration))
 (common-lisp:defun make-target-tracking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-value)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-tracking-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition terminal-routing-strategy-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       terminal-routing-strategy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'terminal-routing-strategy-exception
                    'terminal-routing-strategy-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-region-exception
     (gamelift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-region-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-region-exception
                    'unsupported-region-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alias-input common-lisp:nil
                       ((routing-strategy :initarg :routing-strategy :type
                         (common-lisp:or routing-strategy common-lisp:null)
                         :accessor %update-alias-input-routing-strategy
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-alias-input-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-blank-and-length-constraint-string
                                         common-lisp:null)
                         :accessor %update-alias-input-name :initform
                         common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or alias-id-or-arn common-lisp:null)
                         :accessor %update-alias-input-alias-id :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-alias-input 'make-update-alias-input))
 (common-lisp:defun make-update-alias-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routing-strategy description name
                     alias-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-alias-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-strategy))
      (common-lisp:list
       (common-lisp:cons "RoutingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alias-output common-lisp:nil
                       ((alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %update-alias-output-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-alias-output 'make-update-alias-output))
 (common-lisp:defun make-update-alias-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias)
   (common-lisp:apply #'common-lisp:make-instance 'update-alias-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-build-input common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-build-input-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-build-input-name :initform
                         common-lisp:nil)
                        (build-id :initarg :build-id :type
                         (common-lisp:or build-id-or-arn common-lisp:null)
                         :accessor %update-build-input-build-id :initform
                         (common-lisp:error ":build-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-build-input 'make-update-build-input))
 (common-lisp:defun make-update-build-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name build-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-build-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-build-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-build-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-id))
      (common-lisp:list
       (common-lisp:cons "BuildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-build-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-build-output common-lisp:nil
                       ((build :initarg :build :type
                         (common-lisp:or build common-lisp:null) :accessor
                         %update-build-output-build :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-build-output 'make-update-build-output))
 (common-lisp:defun make-update-build-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build)
   (common-lisp:apply #'common-lisp:make-instance 'update-build-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-build-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-build-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build))
      (common-lisp:list
       (common-lisp:cons "Build"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-build-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-attributes-input common-lisp:nil
                       ((anywhere-configuration :initarg
                         :anywhere-configuration :type
                         (common-lisp:or anywhere-configuration
                                         common-lisp:null)
                         :accessor
                         %update-fleet-attributes-input-anywhere-configuration
                         :initform common-lisp:nil)
                        (metric-groups :initarg :metric-groups :type
                         (common-lisp:or metric-group-list common-lisp:null)
                         :accessor %update-fleet-attributes-input-metric-groups
                         :initform common-lisp:nil)
                        (resource-creation-limit-policy :initarg
                         :resource-creation-limit-policy :type
                         (common-lisp:or resource-creation-limit-policy
                                         common-lisp:null)
                         :accessor
                         %update-fleet-attributes-input-resource-creation-limit-policy
                         :initform common-lisp:nil)
                        (new-game-session-protection-policy :initarg
                         :new-game-session-protection-policy :type
                         (common-lisp:or protection-policy common-lisp:null)
                         :accessor
                         %update-fleet-attributes-input-new-game-session-protection-policy
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-fleet-attributes-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-fleet-attributes-input-name
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %update-fleet-attributes-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-fleet-attributes-input
                    'make-update-fleet-attributes-input))
 (common-lisp:defun make-update-fleet-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anywhere-configuration metric-groups
                     resource-creation-limit-policy
                     new-game-session-protection-policy description name
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-fleet-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-game-session-protection-policy))
      (common-lisp:list
       (common-lisp:cons "NewGameSessionProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-creation-limit-policy))
      (common-lisp:list
       (common-lisp:cons "ResourceCreationLimitPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-groups))
      (common-lisp:list
       (common-lisp:cons "MetricGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anywhere-configuration))
      (common-lisp:list
       (common-lisp:cons "AnywhereConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-attributes-output common-lisp:nil
                       ((fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %update-fleet-attributes-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %update-fleet-attributes-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-attributes-output
                    'make-update-fleet-attributes-output))
 (common-lisp:defun make-update-fleet-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-fleet-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-capacity-input common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %update-fleet-capacity-input-location
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %update-fleet-capacity-input-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor %update-fleet-capacity-input-min-size
                         :initform common-lisp:nil)
                        (desired-instances :initarg :desired-instances :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %update-fleet-capacity-input-desired-instances
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %update-fleet-capacity-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-fleet-capacity-input
                    'make-update-fleet-capacity-input))
 (common-lisp:defun make-update-fleet-capacity-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location max-size min-size
                     desired-instances fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-capacity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-instances))
      (common-lisp:list
       (common-lisp:cons "DesiredInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-capacity-output common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location-string-model
                                         common-lisp:null)
                         :accessor %update-fleet-capacity-output-location
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %update-fleet-capacity-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %update-fleet-capacity-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-capacity-output
                    'make-update-fleet-capacity-output))
 (common-lisp:defun make-update-fleet-capacity-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-capacity-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-capacity-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-port-settings-input common-lisp:nil
                       ((inbound-permission-revocations :initarg
                         :inbound-permission-revocations :type
                         (common-lisp:or ip-permissions-list common-lisp:null)
                         :accessor
                         %update-fleet-port-settings-input-inbound-permission-revocations
                         :initform common-lisp:nil)
                        (inbound-permission-authorizations :initarg
                         :inbound-permission-authorizations :type
                         (common-lisp:or ip-permissions-list common-lisp:null)
                         :accessor
                         %update-fleet-port-settings-input-inbound-permission-authorizations
                         :initform common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %update-fleet-port-settings-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-fleet-port-settings-input
                    'make-update-fleet-port-settings-input))
 (common-lisp:defun make-update-fleet-port-settings-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key inbound-permission-revocations
                     inbound-permission-authorizations fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-fleet-port-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-permission-authorizations))
      (common-lisp:list
       (common-lisp:cons "InboundPermissionAuthorizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inbound-permission-revocations))
      (common-lisp:list
       (common-lisp:cons "InboundPermissionRevocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-port-settings-output common-lisp:nil
                       ((fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %update-fleet-port-settings-output-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %update-fleet-port-settings-output-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-port-settings-output
                    'make-update-fleet-port-settings-output))
 (common-lisp:defun make-update-fleet-port-settings-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet-arn fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-fleet-port-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fleet-port-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-server-group-input common-lisp:nil
                       ((balancing-strategy :initarg :balancing-strategy :type
                         (common-lisp:or balancing-strategy common-lisp:null)
                         :accessor
                         %update-game-server-group-input-balancing-strategy
                         :initform common-lisp:nil)
                        (game-server-protection-policy :initarg
                         :game-server-protection-policy :type
                         (common-lisp:or game-server-protection-policy
                                         common-lisp:null)
                         :accessor
                         %update-game-server-group-input-game-server-protection-policy
                         :initform common-lisp:nil)
                        (instance-definitions :initarg :instance-definitions
                         :type
                         (common-lisp:or instance-definitions common-lisp:null)
                         :accessor
                         %update-game-server-group-input-instance-definitions
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %update-game-server-group-input-role-arn
                         :initform common-lisp:nil)
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %update-game-server-group-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-game-server-group-input
                    'make-update-game-server-group-input))
 (common-lisp:defun make-update-game-server-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key balancing-strategy
                     game-server-protection-policy instance-definitions
                     role-arn game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-game-server-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-definitions))
      (common-lisp:list
       (common-lisp:cons "InstanceDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-protection-policy))
      (common-lisp:list
       (common-lisp:cons "GameServerProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'balancing-strategy))
      (common-lisp:list
       (common-lisp:cons "BalancingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-server-group-output common-lisp:nil
                       ((game-server-group :initarg :game-server-group :type
                         (common-lisp:or game-server-group common-lisp:null)
                         :accessor
                         %update-game-server-group-output-game-server-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-game-server-group-output
                    'make-update-game-server-group-output))
 (common-lisp:defun make-update-game-server-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-game-server-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-group))
      (common-lisp:list
       (common-lisp:cons "GameServerGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-server-input common-lisp:nil
                       ((health-check :initarg :health-check :type
                         (common-lisp:or game-server-health-check
                                         common-lisp:null)
                         :accessor %update-game-server-input-health-check
                         :initform common-lisp:nil)
                        (utilization-status :initarg :utilization-status :type
                         (common-lisp:or game-server-utilization-status
                                         common-lisp:null)
                         :accessor %update-game-server-input-utilization-status
                         :initform common-lisp:nil)
                        (game-server-data :initarg :game-server-data :type
                         (common-lisp:or game-server-data common-lisp:null)
                         :accessor %update-game-server-input-game-server-data
                         :initform common-lisp:nil)
                        (game-server-id :initarg :game-server-id :type
                         (common-lisp:or game-server-id common-lisp:null)
                         :accessor %update-game-server-input-game-server-id
                         :initform
                         (common-lisp:error ":game-server-id is required"))
                        (game-server-group-name :initarg
                         :game-server-group-name :type
                         (common-lisp:or game-server-group-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %update-game-server-input-game-server-group-name
                         :initform
                         (common-lisp:error
                          ":game-server-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-game-server-input 'make-update-game-server-input))
 (common-lisp:defun make-update-game-server-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key health-check utilization-status
                     game-server-data game-server-id game-server-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-game-server-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-server-group-name))
      (common-lisp:list
       (common-lisp:cons "GameServerGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-id))
      (common-lisp:list
       (common-lisp:cons "GameServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server-data))
      (common-lisp:list
       (common-lisp:cons "GameServerData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization-status))
      (common-lisp:list
       (common-lisp:cons "UtilizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-server-output common-lisp:nil
                       ((game-server :initarg :game-server :type
                         (common-lisp:or game-server common-lisp:null)
                         :accessor %update-game-server-output-game-server
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-game-server-output
                    'make-update-game-server-output))
 (common-lisp:defun make-update-game-server-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-server)
   (common-lisp:apply #'common-lisp:make-instance 'update-game-server-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-server))
      (common-lisp:list
       (common-lisp:cons "GameServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-server-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-session-input common-lisp:nil
                       ((protection-policy :initarg :protection-policy :type
                         (common-lisp:or protection-policy common-lisp:null)
                         :accessor %update-game-session-input-protection-policy
                         :initform common-lisp:nil)
                        (player-session-creation-policy :initarg
                         :player-session-creation-policy :type
                         (common-lisp:or player-session-creation-policy
                                         common-lisp:null)
                         :accessor
                         %update-game-session-input-player-session-creation-policy
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-game-session-input-name :initform
                         common-lisp:nil)
                        (maximum-player-session-count :initarg
                         :maximum-player-session-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %update-game-session-input-maximum-player-session-count
                         :initform common-lisp:nil)
                        (game-session-id :initarg :game-session-id :type
                         (common-lisp:or arn-string-model common-lisp:null)
                         :accessor %update-game-session-input-game-session-id
                         :initform
                         (common-lisp:error ":game-session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-game-session-input
                    'make-update-game-session-input))
 (common-lisp:defun make-update-game-session-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protection-policy
                     player-session-creation-policy name
                     maximum-player-session-count game-session-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-game-session-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-id))
      (common-lisp:list
       (common-lisp:cons "GameSessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-player-session-count))
      (common-lisp:list
       (common-lisp:cons "MaximumPlayerSessionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-session-creation-policy))
      (common-lisp:list
       (common-lisp:cons "PlayerSessionCreationPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-policy))
      (common-lisp:list
       (common-lisp:cons "ProtectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-session-output common-lisp:nil
                       ((game-session :initarg :game-session :type
                         (common-lisp:or game-session common-lisp:null)
                         :accessor %update-game-session-output-game-session
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-game-session-output
                    'make-update-game-session-output))
 (common-lisp:defun make-update-game-session-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session)
   (common-lisp:apply #'common-lisp:make-instance 'update-game-session-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session))
      (common-lisp:list
       (common-lisp:cons "GameSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-session-queue-input common-lisp:nil
                       ((notification-target :initarg :notification-target
                         :type
                         (common-lisp:or queue-sns-arn-string-model
                                         common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-notification-target
                         :initform common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or queue-custom-event-data
                                         common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-custom-event-data
                         :initform common-lisp:nil)
                        (priority-configuration :initarg
                         :priority-configuration :type
                         (common-lisp:or priority-configuration
                                         common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-priority-configuration
                         :initform common-lisp:nil)
                        (filter-configuration :initarg :filter-configuration
                         :type
                         (common-lisp:or filter-configuration common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-filter-configuration
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or game-session-queue-destination-list
                                         common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-destinations
                         :initform common-lisp:nil)
                        (player-latency-policies :initarg
                         :player-latency-policies :type
                         (common-lisp:or player-latency-policy-list
                                         common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-player-latency-policies
                         :initform common-lisp:nil)
                        (timeout-in-seconds :initarg :timeout-in-seconds :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %update-game-session-queue-input-timeout-in-seconds
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or game-session-queue-name-or-arn
                                         common-lisp:null)
                         :accessor %update-game-session-queue-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-game-session-queue-input
                    'make-update-game-session-queue-input))
 (common-lisp:defun make-update-game-session-queue-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-target custom-event-data
                     priority-configuration filter-configuration destinations
                     player-latency-policies timeout-in-seconds name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-game-session-queue-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'player-latency-policies))
      (common-lisp:list
       (common-lisp:cons "PlayerLatencyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-configuration))
      (common-lisp:list
       (common-lisp:cons "FilterConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'priority-configuration))
      (common-lisp:list
       (common-lisp:cons "PriorityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-game-session-queue-output common-lisp:nil
                       ((game-session-queue :initarg :game-session-queue :type
                         (common-lisp:or game-session-queue common-lisp:null)
                         :accessor
                         %update-game-session-queue-output-game-session-queue
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-game-session-queue-output
                    'make-update-game-session-queue-output))
 (common-lisp:defun make-update-game-session-queue-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-session-queue)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-game-session-queue-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-queue))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-game-session-queue-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-matchmaking-configuration-input common-lisp:nil
                       ((flex-match-mode :initarg :flex-match-mode :type
                         (common-lisp:or flex-match-mode common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-flex-match-mode
                         :initform common-lisp:nil)
                        (backfill-mode :initarg :backfill-mode :type
                         (common-lisp:or backfill-mode common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-backfill-mode
                         :initform common-lisp:nil)
                        (game-session-data :initarg :game-session-data :type
                         (common-lisp:or game-session-data common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-game-session-data
                         :initform common-lisp:nil)
                        (game-properties :initarg :game-properties :type
                         (common-lisp:or game-property-list common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-game-properties
                         :initform common-lisp:nil)
                        (custom-event-data :initarg :custom-event-data :type
                         (common-lisp:or custom-event-data common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-custom-event-data
                         :initform common-lisp:nil)
                        (additional-player-count :initarg
                         :additional-player-count :type
                         (common-lisp:or whole-number common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-additional-player-count
                         :initform common-lisp:nil)
                        (notification-target :initarg :notification-target
                         :type
                         (common-lisp:or sns-arn-string-model common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-notification-target
                         :initform common-lisp:nil)
                        (rule-set-name :initarg :rule-set-name :type
                         (common-lisp:or matchmaking-rule-set-name
                                         common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-rule-set-name
                         :initform common-lisp:nil)
                        (acceptance-required :initarg :acceptance-required
                         :type (common-lisp:or boolean-model common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-acceptance-required
                         :initform common-lisp:nil)
                        (acceptance-timeout-seconds :initarg
                         :acceptance-timeout-seconds :type
                         (common-lisp:or matchmaking-acceptance-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-acceptance-timeout-seconds
                         :initform common-lisp:nil)
                        (request-timeout-seconds :initarg
                         :request-timeout-seconds :type
                         (common-lisp:or matchmaking-request-timeout-integer
                                         common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-request-timeout-seconds
                         :initform common-lisp:nil)
                        (game-session-queue-arns :initarg
                         :game-session-queue-arns :type
                         (common-lisp:or queue-arns-list common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-game-session-queue-arns
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-input-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or matchmaking-configuration-name
                                         common-lisp:null)
                         :accessor %update-matchmaking-configuration-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-matchmaking-configuration-input
                    'make-update-matchmaking-configuration-input))
 (common-lisp:defun make-update-matchmaking-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flex-match-mode backfill-mode
                     game-session-data game-properties custom-event-data
                     additional-player-count notification-target rule-set-name
                     acceptance-required acceptance-timeout-seconds
                     request-timeout-seconds game-session-queue-arns
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-matchmaking-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-session-queue-arns))
      (common-lisp:list
       (common-lisp:cons "GameSessionQueueArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "RequestTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceptance-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "AcceptanceTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-required))
      (common-lisp:list
       (common-lisp:cons "AcceptanceRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-name))
      (common-lisp:list
       (common-lisp:cons "RuleSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-target))
      (common-lisp:list
       (common-lisp:cons "NotificationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-player-count))
      (common-lisp:list
       (common-lisp:cons "AdditionalPlayerCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-event-data))
      (common-lisp:list
       (common-lisp:cons "CustomEventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-properties))
      (common-lisp:list
       (common-lisp:cons "GameProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-session-data))
      (common-lisp:list
       (common-lisp:cons "GameSessionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-mode))
      (common-lisp:list
       (common-lisp:cons "BackfillMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flex-match-mode))
      (common-lisp:list
       (common-lisp:cons "FlexMatchMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-matchmaking-configuration-output common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or matchmaking-configuration
                                         common-lisp:null)
                         :accessor
                         %update-matchmaking-configuration-output-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-matchmaking-configuration-output
                    'make-update-matchmaking-configuration-output))
 (common-lisp:defun make-update-matchmaking-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-matchmaking-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-matchmaking-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-runtime-configuration-input common-lisp:nil
                       ((runtime-configuration :initarg :runtime-configuration
                         :type
                         (common-lisp:or runtime-configuration
                                         common-lisp:null)
                         :accessor
                         %update-runtime-configuration-input-runtime-configuration
                         :initform
                         (common-lisp:error
                          ":runtime-configuration is required"))
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id-or-arn common-lisp:null)
                         :accessor %update-runtime-configuration-input-fleet-id
                         :initform
                         (common-lisp:error ":fleet-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-runtime-configuration-input
                    'make-update-runtime-configuration-input))
 (common-lisp:defun make-update-runtime-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-configuration fleet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-runtime-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "RuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-runtime-configuration-output common-lisp:nil
                       ((runtime-configuration :initarg :runtime-configuration
                         :type
                         (common-lisp:or runtime-configuration
                                         common-lisp:null)
                         :accessor
                         %update-runtime-configuration-output-runtime-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-runtime-configuration-output
                    'make-update-runtime-configuration-output))
 (common-lisp:defun make-update-runtime-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-runtime-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "RuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-runtime-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-script-input common-lisp:nil
                       ((zip-file :initarg :zip-file :type
                         (common-lisp:or zip-blob common-lisp:null) :accessor
                         %update-script-input-zip-file :initform
                         common-lisp:nil)
                        (storage-location :initarg :storage-location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %update-script-input-storage-location :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-script-input-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %update-script-input-name :initform
                         common-lisp:nil)
                        (script-id :initarg :script-id :type
                         (common-lisp:or script-id-or-arn common-lisp:null)
                         :accessor %update-script-input-script-id :initform
                         (common-lisp:error ":script-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-script-input 'make-update-script-input))
 (common-lisp:defun make-update-script-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zip-file storage-location version name
                     script-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-script-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-script-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-script-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-id))
      (common-lisp:list
       (common-lisp:cons "ScriptId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-location))
      (common-lisp:list
       (common-lisp:cons "StorageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-script-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-script-output common-lisp:nil
                       ((script :initarg :script :type
                         (common-lisp:or script common-lisp:null) :accessor
                         %update-script-output-script :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-script-output 'make-update-script-output))
 (common-lisp:defun make-update-script-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script)
   (common-lisp:apply #'common-lisp:make-instance 'update-script-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-script-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-script-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script))
      (common-lisp:list
       (common-lisp:cons "Script"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-script-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-matchmaking-rule-set-input common-lisp:nil
                       ((rule-set-body :initarg :rule-set-body :type
                         (common-lisp:or rule-set-body common-lisp:null)
                         :accessor
                         %validate-matchmaking-rule-set-input-rule-set-body
                         :initform
                         (common-lisp:error ":rule-set-body is required"))))
 (common-lisp:export
  (common-lisp:list 'validate-matchmaking-rule-set-input
                    'make-validate-matchmaking-rule-set-input))
 (common-lisp:defun make-validate-matchmaking-rule-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-set-body)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-matchmaking-rule-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-set-body))
      (common-lisp:list
       (common-lisp:cons "RuleSetBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-matchmaking-rule-set-output common-lisp:nil
                       ((valid :initarg :valid :type
                         (common-lisp:or boolean-model common-lisp:null)
                         :accessor %validate-matchmaking-rule-set-output-valid
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-matchmaking-rule-set-output
                    'make-validate-matchmaking-rule-set-output))
 (common-lisp:defun make-validate-matchmaking-rule-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key valid)
   (common-lisp:apply #'common-lisp:make-instance
                      'validate-matchmaking-rule-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "Valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-matchmaking-rule-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-peering-authorization common-lisp:nil
                       ((expiration-time :initarg :expiration-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-peering-authorization-expiration-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-peering-authorization-creation-time :initform
                         common-lisp:nil)
                        (peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-authorization-peer-vpc-id
                         :initform common-lisp:nil)
                        (peer-vpc-aws-account-id :initarg
                         :peer-vpc-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %vpc-peering-authorization-peer-vpc-aws-account-id
                         :initform common-lisp:nil)
                        (game-lift-aws-account-id :initarg
                         :game-lift-aws-account-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %vpc-peering-authorization-game-lift-aws-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-authorization
                    'make-vpc-peering-authorization))
 (common-lisp:defun make-vpc-peering-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration-time creation-time peer-vpc-id
                     peer-vpc-aws-account-id game-lift-aws-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-peering-authorization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'game-lift-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "GameLiftAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'peer-vpc-aws-account-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcAwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-authorization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-peering-authorization-list ()
   '(trivial-types:proper-list vpc-peering-authorization))
 (common-lisp:defun |make-vpc-peering-authorization-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-peering-authorization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-peering-connection common-lisp:nil
                       ((game-lift-vpc-id :initarg :game-lift-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-game-lift-vpc-id
                         :initform common-lisp:nil)
                        (peer-vpc-id :initarg :peer-vpc-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-peer-vpc-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or vpc-peering-connection-status
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-status :initform
                         common-lisp:nil)
                        (vpc-peering-connection-id :initarg
                         :vpc-peering-connection-id :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor
                         %vpc-peering-connection-vpc-peering-connection-id
                         :initform common-lisp:nil)
                        (ip-v4cidr-block :initarg :ip-v4cidr-block :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-ip-v4cidr-block
                         :initform common-lisp:nil)
                        (fleet-arn :initarg :fleet-arn :type
                         (common-lisp:or fleet-arn common-lisp:null) :accessor
                         %vpc-peering-connection-fleet-arn :initform
                         common-lisp:nil)
                        (fleet-id :initarg :fleet-id :type
                         (common-lisp:or fleet-id common-lisp:null) :accessor
                         %vpc-peering-connection-fleet-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection 'make-vpc-peering-connection))
 (common-lisp:defun make-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key game-lift-vpc-id peer-vpc-id status
                     vpc-peering-connection-id ip-v4cidr-block fleet-arn
                     fleet-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-peering-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-id))
      (common-lisp:list
       (common-lisp:cons "FleetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-arn))
      (common-lisp:list
       (common-lisp:cons "FleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4cidr-block))
      (common-lisp:list
       (common-lisp:cons "IpV4CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-vpc-id))
      (common-lisp:list
       (common-lisp:cons "PeerVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'game-lift-vpc-id))
      (common-lisp:list
       (common-lisp:cons "GameLiftVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-peering-connection-list ()
   '(trivial-types:proper-list vpc-peering-connection))
 (common-lisp:defun |make-vpc-peering-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-peering-connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-peering-connection-status common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-status-message
                         :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or non-zero-and-max-string
                                         common-lisp:null)
                         :accessor %vpc-peering-connection-status-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-peering-connection-status
                    'make-vpc-peering-connection-status))
 (common-lisp:defun make-vpc-peering-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-peering-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-peering-connection-status))
   common-lisp:nil))
(common-lisp:deftype vpc-subnet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-subnets () '(trivial-types:proper-list vpc-subnet))
 (common-lisp:defun |make-vpc-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-subnet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype weighted-capacity () 'common-lisp:string)
(common-lisp:deftype whole-number () 'common-lisp:integer)
(common-lisp:deftype zip-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defun accept-match
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ticket-id player-ids acceptance-type)
   (common-lisp:declare
    (common-lisp:ignorable ticket-id player-ids acceptance-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-match-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptMatch"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-match))
(common-lisp:progn
 (common-lisp:defun claim-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name game-server-id
                     game-server-data)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name game-server-id
     game-server-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-claim-game-server-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ClaimGameServer"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'claim-game-server))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description routing-strategy tags)
   (common-lisp:declare
    (common-lisp:ignorable name description routing-strategy tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAlias"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-build
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version storage-location
                     operating-system tags server-sdk-version)
   (common-lisp:declare
    (common-lisp:ignorable name version storage-location operating-system tags
     server-sdk-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-build-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateBuild"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-build))
(common-lisp:progn
 (common-lisp:defun create-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description build-id script-id
                     server-launch-path server-launch-parameters log-paths
                     ec2instance-type ec2inbound-permissions
                     new-game-session-protection-policy runtime-configuration
                     resource-creation-limit-policy metric-groups
                     peer-vpc-aws-account-id peer-vpc-id fleet-type
                     instance-role-arn certificate-configuration locations tags
                     compute-type anywhere-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name description build-id script-id
     server-launch-path server-launch-parameters log-paths ec2instance-type
     ec2inbound-permissions new-game-session-protection-policy
     runtime-configuration resource-creation-limit-policy metric-groups
     peer-vpc-aws-account-id peer-vpc-id fleet-type instance-role-arn
     certificate-configuration locations tags compute-type
     anywhere-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFleet"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet))
(common-lisp:progn
 (common-lisp:defun create-fleet-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id locations)
   (common-lisp:declare (common-lisp:ignorable fleet-id locations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-locations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFleetLocations"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet-locations))
(common-lisp:progn
 (common-lisp:defun create-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name role-arn min-size
                     max-size launch-template instance-definitions
                     auto-scaling-policy balancing-strategy
                     game-server-protection-policy vpc-subnets tags)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name role-arn min-size max-size
     launch-template instance-definitions auto-scaling-policy
     balancing-strategy game-server-protection-policy vpc-subnets tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-game-server-group))
(common-lisp:progn
 (common-lisp:defun create-game-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id alias-id
                     maximum-player-session-count name game-properties
                     creator-id game-session-id idempotency-token
                     game-session-data location)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id alias-id maximum-player-session-count name
     game-properties creator-id game-session-id idempotency-token
     game-session-data location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-game-session-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGameSession"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-game-session))
(common-lisp:progn
 (common-lisp:defun create-game-session-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name timeout-in-seconds
                     player-latency-policies destinations filter-configuration
                     priority-configuration custom-event-data
                     notification-target tags)
   (common-lisp:declare
    (common-lisp:ignorable name timeout-in-seconds player-latency-policies
     destinations filter-configuration priority-configuration custom-event-data
     notification-target tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-game-session-queue-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGameSessionQueue"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-game-session-queue))
(common-lisp:progn
 (common-lisp:defun create-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location-name tags)
   (common-lisp:declare (common-lisp:ignorable location-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-location-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateLocation"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-location))
(common-lisp:progn
 (common-lisp:defun create-matchmaking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description game-session-queue-arns
                     request-timeout-seconds acceptance-timeout-seconds
                     acceptance-required rule-set-name notification-target
                     additional-player-count custom-event-data game-properties
                     game-session-data backfill-mode flex-match-mode tags)
   (common-lisp:declare
    (common-lisp:ignorable name description game-session-queue-arns
     request-timeout-seconds acceptance-timeout-seconds acceptance-required
     rule-set-name notification-target additional-player-count
     custom-event-data game-properties game-session-data backfill-mode
     flex-match-mode tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-matchmaking-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateMatchmakingConfiguration"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-matchmaking-configuration))
(common-lisp:progn
 (common-lisp:defun create-matchmaking-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name rule-set-body tags)
   (common-lisp:declare (common-lisp:ignorable name rule-set-body tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-matchmaking-rule-set-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateMatchmakingRuleSet"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-matchmaking-rule-set))
(common-lisp:progn
 (common-lisp:defun create-player-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-session-id player-id player-data)
   (common-lisp:declare
    (common-lisp:ignorable game-session-id player-id player-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-player-session-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePlayerSession"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-player-session))
(common-lisp:progn
 (common-lisp:defun create-player-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-session-id player-ids
                     player-data-map)
   (common-lisp:declare
    (common-lisp:ignorable game-session-id player-ids player-data-map))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-player-sessions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePlayerSessions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-player-sessions))
(common-lisp:progn
 (common-lisp:defun create-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version storage-location zip-file
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name version storage-location zip-file tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-script-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateScript"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-script))
(common-lisp:progn
 (common-lisp:defun create-vpc-peering-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-lift-aws-account-id peer-vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable game-lift-aws-account-id peer-vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpc-peering-authorization-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVpcPeeringAuthorization"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-peering-authorization))
(common-lisp:progn
 (common-lisp:defun create-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id peer-vpc-aws-account-id
                     peer-vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id peer-vpc-aws-account-id peer-vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpc-peering-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVpcPeeringConnection"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id)
   (common-lisp:declare (common-lisp:ignorable alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAlias"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-build
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key build-id)
   (common-lisp:declare (common-lisp:ignorable build-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-build-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteBuild"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-build))
(common-lisp:progn
 (common-lisp:defun delete-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFleet"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet))
(common-lisp:progn
 (common-lisp:defun delete-fleet-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id locations)
   (common-lisp:declare (common-lisp:ignorable fleet-id locations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-locations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFleetLocations"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet-locations))
(common-lisp:progn
 (common-lisp:defun delete-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name delete-option)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name delete-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-game-server-group))
(common-lisp:progn
 (common-lisp:defun delete-game-session-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-game-session-queue-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteGameSessionQueue"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-game-session-queue))
(common-lisp:progn
 (common-lisp:defun delete-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location-name)
   (common-lisp:declare (common-lisp:ignorable location-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-location-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteLocation"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-location))
(common-lisp:progn
 (common-lisp:defun delete-matchmaking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-matchmaking-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteMatchmakingConfiguration"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-matchmaking-configuration))
(common-lisp:progn
 (common-lisp:defun delete-matchmaking-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-matchmaking-rule-set-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteMatchmakingRuleSet"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-matchmaking-rule-set))
(common-lisp:progn
 (common-lisp:defun delete-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name fleet-id)
   (common-lisp:declare (common-lisp:ignorable name fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteScalingPolicy"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scaling-policy))
(common-lisp:progn
 (common-lisp:defun delete-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key script-id)
   (common-lisp:declare (common-lisp:ignorable script-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-script-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteScript"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-script))
(common-lisp:progn
 (common-lisp:defun delete-vpc-peering-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-lift-aws-account-id peer-vpc-id)
   (common-lisp:declare
    (common-lisp:ignorable game-lift-aws-account-id peer-vpc-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpc-peering-authorization-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVpcPeeringAuthorization"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-peering-authorization))
(common-lisp:progn
 (common-lisp:defun delete-vpc-peering-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id vpc-peering-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id vpc-peering-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpc-peering-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVpcPeeringConnection"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-peering-connection))
(common-lisp:progn
 (common-lisp:defun deregister-compute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id compute-name)
   (common-lisp:declare (common-lisp:ignorable fleet-id compute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-compute-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterCompute"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-compute))
(common-lisp:progn
 (common-lisp:defun deregister-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name game-server-id)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name game-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-game-server-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterGameServer"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-game-server))
(common-lisp:progn
 (common-lisp:defun describe-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id)
   (common-lisp:declare (common-lisp:ignorable alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAlias"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-alias))
(common-lisp:progn
 (common-lisp:defun describe-build
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key build-id)
   (common-lisp:declare (common-lisp:ignorable build-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-build-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeBuild"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-build))
(common-lisp:progn
 (common-lisp:defun describe-compute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id compute-name)
   (common-lisp:declare (common-lisp:ignorable fleet-id compute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-compute-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCompute"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-compute))
(common-lisp:progn
 (common-lisp:defun describe-ec2instance-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ec2instance-type location)
   (common-lisp:declare (common-lisp:ignorable ec2instance-type location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-ec2instance-limits-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEC2InstanceLimits"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ec2instance-limits))
(common-lisp:progn
 (common-lisp:defun describe-fleet-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-ids limit next-token)
   (common-lisp:declare (common-lisp:ignorable fleet-ids limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-attributes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetAttributes"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-attributes))
(common-lisp:progn
 (common-lisp:defun describe-fleet-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-ids limit next-token)
   (common-lisp:declare (common-lisp:ignorable fleet-ids limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-capacity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetCapacity"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-capacity))
(common-lisp:progn
 (common-lisp:defun describe-fleet-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id start-time end-time limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id start-time end-time limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetEvents"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-events))
(common-lisp:progn
 (common-lisp:defun describe-fleet-location-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id locations limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id locations limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-location-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetLocationAttributes"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-location-attributes))
(common-lisp:progn
 (common-lisp:defun describe-fleet-location-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id location)
   (common-lisp:declare (common-lisp:ignorable fleet-id location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-location-capacity-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetLocationCapacity"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-location-capacity))
(common-lisp:progn
 (common-lisp:defun describe-fleet-location-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id location)
   (common-lisp:declare (common-lisp:ignorable fleet-id location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-location-utilization-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetLocationUtilization"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-location-utilization))
(common-lisp:progn
 (common-lisp:defun describe-fleet-port-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id location)
   (common-lisp:declare (common-lisp:ignorable fleet-id location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-port-settings-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetPortSettings"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-port-settings))
(common-lisp:progn
 (common-lisp:defun describe-fleet-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-ids limit next-token)
   (common-lisp:declare (common-lisp:ignorable fleet-ids limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleet-utilization-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleetUtilization"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleet-utilization))
(common-lisp:progn
 (common-lisp:defun describe-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name game-server-id)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name game-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-game-server-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameServer"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-server))
(common-lisp:progn
 (common-lisp:defun describe-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name)
   (common-lisp:declare (common-lisp:ignorable game-server-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-server-group))
(common-lisp:progn
 (common-lisp:defun describe-game-server-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name instance-ids limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name instance-ids limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-game-server-instances-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameServerInstances"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-server-instances))
(common-lisp:progn
 (common-lisp:defun describe-game-session-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id game-session-id alias-id
                     location status-filter limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id game-session-id alias-id location
     status-filter limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-game-session-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameSessionDetails"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-session-details))
(common-lisp:progn
 (common-lisp:defun describe-game-session-placement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key placement-id)
   (common-lisp:declare (common-lisp:ignorable placement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-game-session-placement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameSessionPlacement"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-session-placement))
(common-lisp:progn
 (common-lisp:defun describe-game-session-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names limit next-token)
   (common-lisp:declare (common-lisp:ignorable names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-game-session-queues-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameSessionQueues"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-session-queues))
(common-lisp:progn
 (common-lisp:defun describe-game-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id game-session-id alias-id
                     location status-filter limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id game-session-id alias-id location
     status-filter limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-game-sessions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeGameSessions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-game-sessions))
(common-lisp:progn
 (common-lisp:defun describe-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id instance-id limit next-token
                     location)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id instance-id limit next-token location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstances"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instances))
(common-lisp:progn
 (common-lisp:defun describe-matchmaking
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ticket-ids)
   (common-lisp:declare (common-lisp:ignorable ticket-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-matchmaking-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMatchmaking"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-matchmaking))
(common-lisp:progn
 (common-lisp:defun describe-matchmaking-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names rule-set-name limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable names rule-set-name limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-matchmaking-configurations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMatchmakingConfigurations"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-matchmaking-configurations))
(common-lisp:progn
 (common-lisp:defun describe-matchmaking-rule-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names limit next-token)
   (common-lisp:declare (common-lisp:ignorable names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-matchmaking-rule-sets-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMatchmakingRuleSets"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-matchmaking-rule-sets))
(common-lisp:progn
 (common-lisp:defun describe-player-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-session-id player-id
                     player-session-id player-session-status-filter limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable game-session-id player-id player-session-id
     player-session-status-filter limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-player-sessions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePlayerSessions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-player-sessions))
(common-lisp:progn
 (common-lisp:defun describe-runtime-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-runtime-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeRuntimeConfiguration"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-runtime-configuration))
(common-lisp:progn
 (common-lisp:defun describe-scaling-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id status-filter limit next-token
                     location)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id status-filter limit next-token location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scaling-policies-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeScalingPolicies"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-scaling-policies))
(common-lisp:progn
 (common-lisp:defun describe-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key script-id)
   (common-lisp:declare (common-lisp:ignorable script-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-script-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeScript"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-script))
(common-lisp:progn
 (common-lisp:defun describe-vpc-peering-authorizations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'gamelift-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DescribeVpcPeeringAuthorizations" :params
                                `(("Action"
                                   ,@"DescribeVpcPeeringAuthorizations")
                                  ("Version" ,@"2015-10-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-vpc-peering-authorizations))
(common-lisp:progn
 (common-lisp:defun describe-vpc-peering-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-peering-connections-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeVpcPeeringConnections"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-peering-connections))
(common-lisp:progn
 (common-lisp:defun get-compute-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id compute-name)
   (common-lisp:declare (common-lisp:ignorable fleet-id compute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-compute-access-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetComputeAccess"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compute-access))
(common-lisp:progn
 (common-lisp:defun get-compute-auth-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id compute-name)
   (common-lisp:declare (common-lisp:ignorable fleet-id compute-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-compute-auth-token-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetComputeAuthToken"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compute-auth-token))
(common-lisp:progn
 (common-lisp:defun get-game-session-log-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-session-id)
   (common-lisp:declare (common-lisp:ignorable game-session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-game-session-log-url-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetGameSessionLogUrl"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-game-session-log-url))
(common-lisp:progn
 (common-lisp:defun get-instance-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id instance-id)
   (common-lisp:declare (common-lisp:ignorable fleet-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-access-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetInstanceAccess"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-access))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key routing-strategy-type name limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable routing-strategy-type name limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAliases"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-builds
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status limit next-token)
   (common-lisp:declare (common-lisp:ignorable status limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-builds-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListBuilds"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-builds))
(common-lisp:progn
 (common-lisp:defun list-compute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id location limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id location limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compute-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCompute"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compute))
(common-lisp:progn
 (common-lisp:defun list-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key build-id script-id limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable build-id script-id limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fleets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFleets"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fleets))
(common-lisp:progn
 (common-lisp:defun list-game-server-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-game-server-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGameServerGroups"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-game-server-groups))
(common-lisp:progn
 (common-lisp:defun list-game-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name sort-order limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name sort-order limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-game-servers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListGameServers"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-game-servers))
(common-lisp:progn
 (common-lisp:defun list-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters limit next-token)
   (common-lisp:declare (common-lisp:ignorable filters limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-locations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListLocations"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-locations))
(common-lisp:progn
 (common-lisp:defun list-scripts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scripts-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListScripts"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scripts))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-scaling-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name fleet-id scaling-adjustment
                     scaling-adjustment-type threshold comparison-operator
                     evaluation-periods metric-name policy-type
                     target-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name fleet-id scaling-adjustment
     scaling-adjustment-type threshold comparison-operator evaluation-periods
     metric-name policy-type target-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-scaling-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutScalingPolicy"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-scaling-policy))
(common-lisp:progn
 (common-lisp:defun register-compute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id compute-name certificate-path
                     dns-name ip-address location)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id compute-name certificate-path dns-name
     ip-address location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-compute-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterCompute"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-compute))
(common-lisp:progn
 (common-lisp:defun register-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name game-server-id
                     instance-id connection-info game-server-data)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name game-server-id instance-id
     connection-info game-server-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-game-server-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterGameServer"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-game-server))
(common-lisp:progn
 (common-lisp:defun request-upload-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key build-id)
   (common-lisp:declare (common-lisp:ignorable build-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-request-upload-credentials-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RequestUploadCredentials"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'request-upload-credentials))
(common-lisp:progn
 (common-lisp:defun resolve-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id)
   (common-lisp:declare (common-lisp:ignorable alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resolve-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResolveAlias"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resolve-alias))
(common-lisp:progn
 (common-lisp:defun resume-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name resume-actions)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name resume-actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResumeGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-game-server-group))
(common-lisp:progn
 (common-lisp:defun search-game-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id alias-id location
                     filter-expression sort-expression limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id alias-id location filter-expression
     sort-expression limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-game-sessions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SearchGameSessions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-game-sessions))
(common-lisp:progn
 (common-lisp:defun start-fleet-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id actions location)
   (common-lisp:declare (common-lisp:ignorable fleet-id actions location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-fleet-actions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFleetActions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fleet-actions))
(common-lisp:progn
 (common-lisp:defun start-game-session-placement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key placement-id game-session-queue-name
                     game-properties maximum-player-session-count
                     game-session-name player-latencies desired-player-sessions
                     game-session-data)
   (common-lisp:declare
    (common-lisp:ignorable placement-id game-session-queue-name game-properties
     maximum-player-session-count game-session-name player-latencies
     desired-player-sessions game-session-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-game-session-placement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartGameSessionPlacement"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-game-session-placement))
(common-lisp:progn
 (common-lisp:defun start-match-backfill
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ticket-id configuration-name
                     game-session-arn players)
   (common-lisp:declare
    (common-lisp:ignorable ticket-id configuration-name game-session-arn
     players))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-match-backfill-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartMatchBackfill"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-match-backfill))
(common-lisp:progn
 (common-lisp:defun start-matchmaking
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ticket-id configuration-name players)
   (common-lisp:declare
    (common-lisp:ignorable ticket-id configuration-name players))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-matchmaking-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartMatchmaking"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-matchmaking))
(common-lisp:progn
 (common-lisp:defun stop-fleet-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id actions location)
   (common-lisp:declare (common-lisp:ignorable fleet-id actions location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-fleet-actions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopFleetActions"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-fleet-actions))
(common-lisp:progn
 (common-lisp:defun stop-game-session-placement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key placement-id)
   (common-lisp:declare (common-lisp:ignorable placement-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-game-session-placement-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopGameSessionPlacement"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-game-session-placement))
(common-lisp:progn
 (common-lisp:defun stop-matchmaking
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ticket-id)
   (common-lisp:declare (common-lisp:ignorable ticket-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-matchmaking-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopMatchmaking"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-matchmaking))
(common-lisp:progn
 (common-lisp:defun suspend-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name suspend-actions)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name suspend-actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-suspend-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SuspendGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'suspend-game-server-group))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id name description
                     routing-strategy)
   (common-lisp:declare
    (common-lisp:ignorable alias-id name description routing-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alias-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAlias"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-alias))
(common-lisp:progn
 (common-lisp:defun update-build
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key build-id name version)
   (common-lisp:declare (common-lisp:ignorable build-id name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-build-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateBuild"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-build))
(common-lisp:progn
 (common-lisp:defun update-fleet-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id name description
                     new-game-session-protection-policy
                     resource-creation-limit-policy metric-groups
                     anywhere-configuration)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id name description
     new-game-session-protection-policy resource-creation-limit-policy
     metric-groups anywhere-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-attributes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFleetAttributes"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet-attributes))
(common-lisp:progn
 (common-lisp:defun update-fleet-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id desired-instances min-size
                     max-size location)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id desired-instances min-size max-size
     location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-capacity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFleetCapacity"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet-capacity))
(common-lisp:progn
 (common-lisp:defun update-fleet-port-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id
                     inbound-permission-authorizations
                     inbound-permission-revocations)
   (common-lisp:declare
    (common-lisp:ignorable fleet-id inbound-permission-authorizations
     inbound-permission-revocations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-port-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFleetPortSettings"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet-port-settings))
(common-lisp:progn
 (common-lisp:defun update-game-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name game-server-id
                     game-server-data utilization-status health-check)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name game-server-id
     game-server-data utilization-status health-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-game-server-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateGameServer"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-game-server))
(common-lisp:progn
 (common-lisp:defun update-game-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-server-group-name role-arn
                     instance-definitions game-server-protection-policy
                     balancing-strategy)
   (common-lisp:declare
    (common-lisp:ignorable game-server-group-name role-arn instance-definitions
     game-server-protection-policy balancing-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-game-server-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateGameServerGroup"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-game-server-group))
(common-lisp:progn
 (common-lisp:defun update-game-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key game-session-id
                     maximum-player-session-count name
                     player-session-creation-policy protection-policy)
   (common-lisp:declare
    (common-lisp:ignorable game-session-id maximum-player-session-count name
     player-session-creation-policy protection-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-game-session-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateGameSession"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-game-session))
(common-lisp:progn
 (common-lisp:defun update-game-session-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name timeout-in-seconds
                     player-latency-policies destinations filter-configuration
                     priority-configuration custom-event-data
                     notification-target)
   (common-lisp:declare
    (common-lisp:ignorable name timeout-in-seconds player-latency-policies
     destinations filter-configuration priority-configuration custom-event-data
     notification-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-game-session-queue-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateGameSessionQueue"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-game-session-queue))
(common-lisp:progn
 (common-lisp:defun update-matchmaking-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description game-session-queue-arns
                     request-timeout-seconds acceptance-timeout-seconds
                     acceptance-required rule-set-name notification-target
                     additional-player-count custom-event-data game-properties
                     game-session-data backfill-mode flex-match-mode)
   (common-lisp:declare
    (common-lisp:ignorable name description game-session-queue-arns
     request-timeout-seconds acceptance-timeout-seconds acceptance-required
     rule-set-name notification-target additional-player-count
     custom-event-data game-properties game-session-data backfill-mode
     flex-match-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-matchmaking-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateMatchmakingConfiguration"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-matchmaking-configuration))
(common-lisp:progn
 (common-lisp:defun update-runtime-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-id runtime-configuration)
   (common-lisp:declare (common-lisp:ignorable fleet-id runtime-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-runtime-configuration-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRuntimeConfiguration"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-runtime-configuration))
(common-lisp:progn
 (common-lisp:defun update-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key script-id name version storage-location
                     zip-file)
   (common-lisp:declare
    (common-lisp:ignorable script-id name version storage-location zip-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-script-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateScript"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-script))
(common-lisp:progn
 (common-lisp:defun validate-matchmaking-rule-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-set-body)
   (common-lisp:declare (common-lisp:ignorable rule-set-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-matchmaking-rule-set-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'gamelift-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ValidateMatchmakingRuleSet"
                                                        "2015-10-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-matchmaking-rule-set))
