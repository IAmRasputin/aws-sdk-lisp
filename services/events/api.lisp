;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/events/api
  (:use)
  (:nicknames #:aws/events)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/events/api)
(common-lisp:progn
 (common-lisp:defclass events-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "events" :protocol :json))
 (common-lisp:export 'events-request))
(common-lisp:progn
 (common-lisp:define-condition events-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'events-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("IllegalStatusException" . illegal-status-exception)
    ("InternalException" . internal-exception)
    ("InvalidEventPatternException" . invalid-event-pattern-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ManagedRuleException" . managed-rule-exception)
    ("OperationDisabledException" . operation-disabled-exception)
    ("PolicyLengthExceededException" . policy-length-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass activate-event-source-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %activate-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'activate-event-source-request
                    'make-activate-event-source-request))
 (common-lisp:defun make-activate-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'activate-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          activate-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          activate-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          activate-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass api-destination common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %api-destination-last-modified-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %api-destination-creation-time :initform
                         common-lisp:nil)
                        (invocation-rate-limit-per-second :initarg
                         :invocation-rate-limit-per-second :type
                         (common-lisp:or
                          api-destination-invocation-rate-limit-per-second
                          common-lisp:null)
                         :accessor
                         %api-destination-invocation-rate-limit-per-second
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or api-destination-http-method
                                         common-lisp:null)
                         :accessor %api-destination-http-method :initform
                         common-lisp:nil)
                        (invocation-endpoint :initarg :invocation-endpoint
                         :type (common-lisp:or https-endpoint common-lisp:null)
                         :accessor %api-destination-invocation-endpoint
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %api-destination-connection-arn :initform
                         common-lisp:nil)
                        (api-destination-state :initarg :api-destination-state
                         :type
                         (common-lisp:or api-destination-state
                                         common-lisp:null)
                         :accessor %api-destination-api-destination-state
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %api-destination-name :initform
                         common-lisp:nil)
                        (api-destination-arn :initarg :api-destination-arn
                         :type
                         (common-lisp:or api-destination-arn common-lisp:null)
                         :accessor %api-destination-api-destination-arn
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'api-destination 'make-api-destination))
 (common-lisp:defun make-api-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     invocation-rate-limit-per-second http-method
                     invocation-endpoint connection-arn api-destination-state
                     name api-destination-arn)
   (common-lisp:apply #'common-lisp:make-instance 'api-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-destination-arn))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-destination-state))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-endpoint))
      (common-lisp:list
       (common-lisp:cons "InvocationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-rate-limit-per-second))
      (common-lisp:list
       (common-lisp:cons "InvocationRateLimitPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-destination))
   common-lisp:nil))
(common-lisp:deftype api-destination-arn () 'common-lisp:string)
(common-lisp:deftype api-destination-description () 'common-lisp:string)
(common-lisp:deftype api-destination-http-method () 'common-lisp:string)
(common-lisp:deftype api-destination-invocation-rate-limit-per-second ()
  'common-lisp:integer)
(common-lisp:deftype api-destination-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype api-destination-response-list ()
   '(trivial-types:proper-list api-destination))
 (common-lisp:defun |make-api-destination-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list api-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype api-destination-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass archive common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %archive-creation-time :initform common-lisp:nil)
                        (event-count :initarg :event-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %archive-event-count :initform common-lisp:nil)
                        (size-bytes :initarg :size-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %archive-size-bytes :initform common-lisp:nil)
                        (retention-days :initarg :retention-days :type
                         (common-lisp:or retention-days common-lisp:null)
                         :accessor %archive-retention-days :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or archive-state-reason common-lisp:null)
                         :accessor %archive-state-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or archive-state common-lisp:null)
                         :accessor %archive-state :initform common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %archive-event-source-arn :initform common-lisp:nil)
                        (archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %archive-archive-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'archive 'make-archive))
 (common-lisp:defun make-archive
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time event-count size-bytes
                     retention-days state-reason state event-source-arn
                     archive-name)
   (common-lisp:apply #'common-lisp:make-instance 'archive
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-days))
      (common-lisp:list
       (common-lisp:cons "RetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-count))
      (common-lisp:list
       (common-lisp:cons "EventCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive))
   common-lisp:nil))
(common-lisp:deftype archive-arn () 'common-lisp:string)
(common-lisp:deftype archive-description () 'common-lisp:string)
(common-lisp:deftype archive-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype archive-response-list ()
   '(trivial-types:proper-list archive))
 (common-lisp:defun |make-archive-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list archive))
   aws-sdk/generator/shape::members))
(common-lisp:deftype archive-state () 'common-lisp:string)
(common-lisp:deftype archive-state-reason () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype assign-public-ip () 'common-lisp:string)
(common-lisp:deftype auth-header-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-vpc-configuration common-lisp:nil
                       ((assign-public-ip :initarg :assign-public-ip :type
                         (common-lisp:or assign-public-ip common-lisp:null)
                         :accessor %aws-vpc-configuration-assign-public-ip
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-vpc-configuration-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-vpc-configuration-subnets :initform
                         (common-lisp:error ":subnets is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-vpc-configuration 'make-aws-vpc-configuration))
 (common-lisp:defun make-aws-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assign-public-ip security-groups subnets)
   (common-lisp:apply #'common-lisp:make-instance 'aws-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "AssignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-array-properties common-lisp:nil
                       ((size :initarg :size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-array-properties-size :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-array-properties 'make-batch-array-properties))
 (common-lisp:defun make-batch-array-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size)
   (common-lisp:apply #'common-lisp:make-instance 'batch-array-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-array-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-parameters common-lisp:nil
                       ((retry-strategy :initarg :retry-strategy :type
                         (common-lisp:or batch-retry-strategy common-lisp:null)
                         :accessor %batch-parameters-retry-strategy :initform
                         common-lisp:nil)
                        (array-properties :initarg :array-properties :type
                         (common-lisp:or batch-array-properties
                                         common-lisp:null)
                         :accessor %batch-parameters-array-properties :initform
                         common-lisp:nil)
                        (job-name :initarg :job-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-parameters-job-name :initform
                         (common-lisp:error ":job-name is required"))
                        (job-definition :initarg :job-definition :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-parameters-job-definition :initform
                         (common-lisp:error ":job-definition is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-parameters 'make-batch-parameters))
 (common-lisp:defun make-batch-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retry-strategy array-properties job-name
                     job-definition)
   (common-lisp:apply #'common-lisp:make-instance 'batch-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition))
      (common-lisp:list
       (common-lisp:cons "JobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-properties))
      (common-lisp:list
       (common-lisp:cons "ArrayProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-retry-strategy common-lisp:nil
                       ((attempts :initarg :attempts :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-retry-strategy-attempts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-retry-strategy 'make-batch-retry-strategy))
 (common-lisp:defun make-batch-retry-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attempts)
   (common-lisp:apply #'common-lisp:make-instance 'batch-retry-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempts))
      (common-lisp:list
       (common-lisp:cons "Attempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-retry-strategy))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-replay-request common-lisp:nil
                       ((replay-name :initarg :replay-name :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %cancel-replay-request-replay-name :initform
                         (common-lisp:error ":replay-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-replay-request 'make-cancel-replay-request))
 (common-lisp:defun make-cancel-replay-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replay-name)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-replay-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-name))
      (common-lisp:list
       (common-lisp:cons "ReplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-replay-response common-lisp:nil
                       ((state-reason :initarg :state-reason :type
                         (common-lisp:or replay-state-reason common-lisp:null)
                         :accessor %cancel-replay-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or replay-state common-lisp:null)
                         :accessor %cancel-replay-response-state :initform
                         common-lisp:nil)
                        (replay-arn :initarg :replay-arn :type
                         (common-lisp:or replay-arn common-lisp:null) :accessor
                         %cancel-replay-response-replay-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-replay-response 'make-cancel-replay-response))
 (common-lisp:defun make-cancel-replay-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-reason state replay-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-replay-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-arn))
      (common-lisp:list
       (common-lisp:cons "ReplayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replay-response))
   common-lisp:nil))
(common-lisp:deftype capacity-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-strategy ()
   '(trivial-types:proper-list capacity-provider-strategy-item))
 (common-lisp:defun |make-capacity-provider-strategy|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capacity-provider-strategy-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-provider-strategy-item common-lisp:nil
                       ((base :initarg :|base| :type
                         (common-lisp:or capacity-provider-strategy-item-base
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-base
                         :initform common-lisp:nil)
                        (weight :initarg :|weight| :type
                         (common-lisp:or capacity-provider-strategy-item-weight
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-weight
                         :initform common-lisp:nil)
                        (capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         %capacity-provider-strategy-item-capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required"))))
 (common-lisp:export
  (common-lisp:list 'capacity-provider-strategy-item
                    'make-capacity-provider-strategy-item))
 (common-lisp:defun make-capacity-provider-strategy-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key base weight capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-provider-strategy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-strategy-item-base ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-strategy-item-weight ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'concurrent-modification-exception)))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %condition-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %condition-key :initform
                         (common-lisp:error ":key is required"))
                        (type :initarg :type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %condition-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defun make-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key type)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((last-authorized-time :initarg :last-authorized-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %connection-last-authorized-time :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connection-last-modified-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connection-creation-time :initform common-lisp:nil)
                        (authorization-type :initarg :authorization-type :type
                         (common-lisp:or connection-authorization-type
                                         common-lisp:null)
                         :accessor %connection-authorization-type :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or connection-state-reason
                                         common-lisp:null)
                         :accessor %connection-state-reason :initform
                         common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor %connection-connection-state :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %connection-name :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %connection-connection-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defun make-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-authorized-time last-modified-time
                     creation-time authorization-type state-reason
                     connection-state name connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "AuthorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authorized-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthorizedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-api-key-auth-response-parameters
                       common-lisp:nil
                       ((api-key-name :initarg :api-key-name :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-api-key-auth-response-parameters-api-key-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-api-key-auth-response-parameters
                    'make-connection-api-key-auth-response-parameters))
 (common-lisp:defun make-connection-api-key-auth-response-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-key-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-api-key-auth-response-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-api-key-auth-response-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-api-key-auth-response-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-name))
      (common-lisp:list
       (common-lisp:cons "ApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-api-key-auth-response-parameters))
   common-lisp:nil))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-auth-response-parameters common-lisp:nil
                       ((invocation-http-parameters :initarg
                         :invocation-http-parameters :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-auth-response-parameters-invocation-http-parameters
                         :initform common-lisp:nil)
                        (api-key-auth-parameters :initarg
                         :api-key-auth-parameters :type
                         (common-lisp:or
                          connection-api-key-auth-response-parameters
                          common-lisp:null)
                         :accessor
                         %connection-auth-response-parameters-api-key-auth-parameters
                         :initform common-lisp:nil)
                        (oauth-parameters :initarg :oauth-parameters :type
                         (common-lisp:or connection-oauth-response-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-auth-response-parameters-oauth-parameters
                         :initform common-lisp:nil)
                        (basic-auth-parameters :initarg :basic-auth-parameters
                         :type
                         (common-lisp:or
                          connection-basic-auth-response-parameters
                          common-lisp:null)
                         :accessor
                         %connection-auth-response-parameters-basic-auth-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-auth-response-parameters
                    'make-connection-auth-response-parameters))
 (common-lisp:defun make-connection-auth-response-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-http-parameters
                     api-key-auth-parameters oauth-parameters
                     basic-auth-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-auth-response-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-auth-response-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-auth-response-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "BasicAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-key-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "ApiKeyAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-http-parameters))
      (common-lisp:list
       (common-lisp:cons "InvocationHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-auth-response-parameters))
   common-lisp:nil))
(common-lisp:deftype connection-authorization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-basic-auth-response-parameters
                       common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-basic-auth-response-parameters-username
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-basic-auth-response-parameters
                    'make-connection-basic-auth-response-parameters))
 (common-lisp:defun make-connection-basic-auth-response-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-basic-auth-response-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-basic-auth-response-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-basic-auth-response-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-basic-auth-response-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-body-parameter common-lisp:nil
                       ((is-value-secret :initarg :is-value-secret :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %connection-body-parameter-is-value-secret :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connection-body-parameter-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %connection-body-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-body-parameter
                    'make-connection-body-parameter))
 (common-lisp:defun make-connection-body-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-value-secret value key)
   (common-lisp:apply #'common-lisp:make-instance 'connection-body-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-body-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-body-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-value-secret))
      (common-lisp:list
       (common-lisp:cons "IsValueSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-body-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-body-parameters-list ()
   '(trivial-types:proper-list connection-body-parameter))
 (common-lisp:defun |make-connection-body-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connection-body-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-header-parameter common-lisp:nil
                       ((is-value-secret :initarg :is-value-secret :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %connection-header-parameter-is-value-secret :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or header-value common-lisp:null)
                         :accessor %connection-header-parameter-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or header-key common-lisp:null) :accessor
                         %connection-header-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-header-parameter
                    'make-connection-header-parameter))
 (common-lisp:defun make-connection-header-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-value-secret value key)
   (common-lisp:apply #'common-lisp:make-instance 'connection-header-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-header-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-header-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-value-secret))
      (common-lisp:list
       (common-lisp:cons "IsValueSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-header-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-header-parameters-list ()
   '(trivial-types:proper-list connection-header-parameter))
 (common-lisp:defun |make-connection-header-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connection-header-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connection-http-parameters common-lisp:nil
                       ((body-parameters :initarg :body-parameters :type
                         (common-lisp:or connection-body-parameters-list
                                         common-lisp:null)
                         :accessor %connection-http-parameters-body-parameters
                         :initform common-lisp:nil)
                        (query-string-parameters :initarg
                         :query-string-parameters :type
                         (common-lisp:or
                          connection-query-string-parameters-list
                          common-lisp:null)
                         :accessor
                         %connection-http-parameters-query-string-parameters
                         :initform common-lisp:nil)
                        (header-parameters :initarg :header-parameters :type
                         (common-lisp:or connection-header-parameters-list
                                         common-lisp:null)
                         :accessor
                         %connection-http-parameters-header-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-http-parameters
                    'make-connection-http-parameters))
 (common-lisp:defun make-connection-http-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key body-parameters query-string-parameters
                     header-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'connection-http-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-http-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-http-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-parameters))
      (common-lisp:list
       (common-lisp:cons "HeaderParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryStringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-parameters))
      (common-lisp:list
       (common-lisp:cons "BodyParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-http-parameters))
   common-lisp:nil))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-oauth-client-response-parameters
                       common-lisp:nil
                       ((client-id :initarg :client-id :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-oauth-client-response-parameters-client-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-oauth-client-response-parameters
                    'make-connection-oauth-client-response-parameters))
 (common-lisp:defun make-connection-oauth-client-response-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-oauth-client-response-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-client-response-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-client-response-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-client-response-parameters))
   common-lisp:nil))
(common-lisp:deftype connection-oauth-http-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-oauth-response-parameters common-lisp:nil
                       ((oauth-http-parameters :initarg :oauth-http-parameters
                         :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %connection-oauth-response-parameters-oauth-http-parameters
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or connection-oauth-http-method
                                         common-lisp:null)
                         :accessor
                         %connection-oauth-response-parameters-http-method
                         :initform common-lisp:nil)
                        (authorization-endpoint :initarg
                         :authorization-endpoint :type
                         (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %connection-oauth-response-parameters-authorization-endpoint
                         :initform common-lisp:nil)
                        (client-parameters :initarg :client-parameters :type
                         (common-lisp:or
                          connection-oauth-client-response-parameters
                          common-lisp:null)
                         :accessor
                         %connection-oauth-response-parameters-client-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-oauth-response-parameters
                    'make-connection-oauth-response-parameters))
 (common-lisp:defun make-connection-oauth-response-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oauth-http-parameters http-method
                     authorization-endpoint client-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-oauth-response-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-response-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-response-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-parameters))
      (common-lisp:list
       (common-lisp:cons "ClientParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth-http-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-oauth-response-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-query-string-parameter common-lisp:nil
                       ((is-value-secret :initarg :is-value-secret :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %connection-query-string-parameter-is-value-secret
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or query-string-value common-lisp:null)
                         :accessor %connection-query-string-parameter-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or query-string-key common-lisp:null)
                         :accessor %connection-query-string-parameter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-query-string-parameter
                    'make-connection-query-string-parameter))
 (common-lisp:defun make-connection-query-string-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-value-secret value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-query-string-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-query-string-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-query-string-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-value-secret))
      (common-lisp:list
       (common-lisp:cons "IsValueSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-query-string-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-query-string-parameters-list ()
   '(trivial-types:proper-list connection-query-string-parameter))
 (common-lisp:defun |make-connection-query-string-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connection-query-string-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connection-response-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:deftype connection-state-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-api-destination-request common-lisp:nil
                       ((invocation-rate-limit-per-second :initarg
                         :invocation-rate-limit-per-second :type
                         (common-lisp:or
                          api-destination-invocation-rate-limit-per-second
                          common-lisp:null)
                         :accessor
                         %create-api-destination-request-invocation-rate-limit-per-second
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or api-destination-http-method
                                         common-lisp:null)
                         :accessor %create-api-destination-request-http-method
                         :initform
                         (common-lisp:error ":http-method is required"))
                        (invocation-endpoint :initarg :invocation-endpoint
                         :type (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %create-api-destination-request-invocation-endpoint
                         :initform
                         (common-lisp:error
                          ":invocation-endpoint is required"))
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %create-api-destination-request-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))
                        (description :initarg :description :type
                         (common-lisp:or api-destination-description
                                         common-lisp:null)
                         :accessor %create-api-destination-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %create-api-destination-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-api-destination-request
                    'make-create-api-destination-request))
 (common-lisp:defun make-create-api-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-rate-limit-per-second
                     http-method invocation-endpoint connection-arn description
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-api-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-endpoint))
      (common-lisp:list
       (common-lisp:cons "InvocationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-rate-limit-per-second))
      (common-lisp:list
       (common-lisp:cons "InvocationRateLimitPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-api-destination-response common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-api-destination-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-api-destination-response-creation-time
                         :initform common-lisp:nil)
                        (api-destination-state :initarg :api-destination-state
                         :type
                         (common-lisp:or api-destination-state
                                         common-lisp:null)
                         :accessor
                         %create-api-destination-response-api-destination-state
                         :initform common-lisp:nil)
                        (api-destination-arn :initarg :api-destination-arn
                         :type
                         (common-lisp:or api-destination-arn common-lisp:null)
                         :accessor
                         %create-api-destination-response-api-destination-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-api-destination-response
                    'make-create-api-destination-response))
 (common-lisp:defun make-create-api-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     api-destination-state api-destination-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-api-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-destination-arn))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-destination-state))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-api-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-archive-request common-lisp:nil
                       ((retention-days :initarg :retention-days :type
                         (common-lisp:or retention-days common-lisp:null)
                         :accessor %create-archive-request-retention-days
                         :initform common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %create-archive-request-event-pattern
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or archive-description common-lisp:null)
                         :accessor %create-archive-request-description
                         :initform common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-archive-request-event-source-arn :initform
                         (common-lisp:error ":event-source-arn is required"))
                        (archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %create-archive-request-archive-name
                         :initform
                         (common-lisp:error ":archive-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-archive-request 'make-create-archive-request))
 (common-lisp:defun make-create-archive-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention-days event-pattern description
                     event-source-arn archive-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-archive-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-days))
      (common-lisp:list
       (common-lisp:cons "RetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-archive-response common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-archive-response-creation-time :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or archive-state-reason common-lisp:null)
                         :accessor %create-archive-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or archive-state common-lisp:null)
                         :accessor %create-archive-response-state :initform
                         common-lisp:nil)
                        (archive-arn :initarg :archive-arn :type
                         (common-lisp:or archive-arn common-lisp:null)
                         :accessor %create-archive-response-archive-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-archive-response 'make-create-archive-response))
 (common-lisp:defun make-create-archive-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time state-reason state
                     archive-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-archive-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-arn))
      (common-lisp:list
       (common-lisp:cons "ArchiveArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-api-key-auth-request-parameters
                       common-lisp:nil
                       ((api-key-value :initarg :api-key-value :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-api-key-auth-request-parameters-api-key-value
                         :initform
                         (common-lisp:error ":api-key-value is required"))
                        (api-key-name :initarg :api-key-name :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-api-key-auth-request-parameters-api-key-name
                         :initform
                         (common-lisp:error ":api-key-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-api-key-auth-request-parameters
                    'make-create-connection-api-key-auth-request-parameters))
 (common-lisp:defun make-create-connection-api-key-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-key-value api-key-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-api-key-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-api-key-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-api-key-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-name))
      (common-lisp:list
       (common-lisp:cons "ApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-value))
      (common-lisp:list
       (common-lisp:cons "ApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-api-key-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-auth-request-parameters
                       common-lisp:nil
                       ((invocation-http-parameters :initarg
                         :invocation-http-parameters :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-auth-request-parameters-invocation-http-parameters
                         :initform common-lisp:nil)
                        (api-key-auth-parameters :initarg
                         :api-key-auth-parameters :type
                         (common-lisp:or
                          create-connection-api-key-auth-request-parameters
                          common-lisp:null)
                         :accessor
                         %create-connection-auth-request-parameters-api-key-auth-parameters
                         :initform common-lisp:nil)
                        (oauth-parameters :initarg :oauth-parameters :type
                         (common-lisp:or
                          create-connection-oauth-request-parameters
                          common-lisp:null)
                         :accessor
                         %create-connection-auth-request-parameters-oauth-parameters
                         :initform common-lisp:nil)
                        (basic-auth-parameters :initarg :basic-auth-parameters
                         :type
                         (common-lisp:or
                          create-connection-basic-auth-request-parameters
                          common-lisp:null)
                         :accessor
                         %create-connection-auth-request-parameters-basic-auth-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connection-auth-request-parameters
                    'make-create-connection-auth-request-parameters))
 (common-lisp:defun make-create-connection-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-http-parameters
                     api-key-auth-parameters oauth-parameters
                     basic-auth-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "BasicAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-key-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "ApiKeyAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-http-parameters))
      (common-lisp:list
       (common-lisp:cons "InvocationHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-basic-auth-request-parameters
                       common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-basic-auth-request-parameters-password
                         :initform (common-lisp:error ":password is required"))
                        (username :initarg :username :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-basic-auth-request-parameters-username
                         :initform
                         (common-lisp:error ":username is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-basic-auth-request-parameters
                    'make-create-connection-basic-auth-request-parameters))
 (common-lisp:defun make-create-connection-basic-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password username)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-basic-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-basic-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-basic-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-basic-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-oauth-client-request-parameters
                       common-lisp:nil
                       ((client-secret :initarg :client-secret :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-oauth-client-request-parameters-client-secret
                         :initform
                         (common-lisp:error ":client-secret is required"))
                        (client-id :initarg :client-id :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-oauth-client-request-parameters-client-id
                         :initform
                         (common-lisp:error ":client-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-oauth-client-request-parameters
                    'make-create-connection-oauth-client-request-parameters))
 (common-lisp:defun make-create-connection-oauth-client-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-secret client-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-oauth-client-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-client-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-client-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-client-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-oauth-request-parameters
                       common-lisp:nil
                       ((oauth-http-parameters :initarg :oauth-http-parameters
                         :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %create-connection-oauth-request-parameters-oauth-http-parameters
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or connection-oauth-http-method
                                         common-lisp:null)
                         :accessor
                         %create-connection-oauth-request-parameters-http-method
                         :initform
                         (common-lisp:error ":http-method is required"))
                        (authorization-endpoint :initarg
                         :authorization-endpoint :type
                         (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %create-connection-oauth-request-parameters-authorization-endpoint
                         :initform
                         (common-lisp:error
                          ":authorization-endpoint is required"))
                        (client-parameters :initarg :client-parameters :type
                         (common-lisp:or
                          create-connection-oauth-client-request-parameters
                          common-lisp:null)
                         :accessor
                         %create-connection-oauth-request-parameters-client-parameters
                         :initform
                         (common-lisp:error
                          ":client-parameters is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-oauth-request-parameters
                    'make-create-connection-oauth-request-parameters))
 (common-lisp:defun make-create-connection-oauth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oauth-http-parameters http-method
                     authorization-endpoint client-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-oauth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-parameters))
      (common-lisp:list
       (common-lisp:cons "ClientParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth-http-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-oauth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-request common-lisp:nil
                       ((auth-parameters :initarg :auth-parameters :type
                         (common-lisp:or
                          create-connection-auth-request-parameters
                          common-lisp:null)
                         :accessor %create-connection-request-auth-parameters
                         :initform
                         (common-lisp:error ":auth-parameters is required"))
                        (authorization-type :initarg :authorization-type :type
                         (common-lisp:or connection-authorization-type
                                         common-lisp:null)
                         :accessor
                         %create-connection-request-authorization-type
                         :initform
                         (common-lisp:error ":authorization-type is required"))
                        (description :initarg :description :type
                         (common-lisp:or connection-description
                                         common-lisp:null)
                         :accessor %create-connection-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %create-connection-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defun make-create-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-parameters authorization-type
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "AuthorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "AuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-response common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-connection-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-connection-response-creation-time :initform
                         common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor %create-connection-response-connection-state
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %create-connection-response-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defun make-create-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     connection-state connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-request common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %create-endpoint-request-role-arn :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %create-endpoint-request-event-buses
                         :initform
                         (common-lisp:error ":event-buses is required"))
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor %create-endpoint-request-replication-config
                         :initform common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %create-endpoint-request-routing-config
                         :initform
                         (common-lisp:error ":routing-config is required"))
                        (description :initarg :description :type
                         (common-lisp:or endpoint-description common-lisp:null)
                         :accessor %create-endpoint-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %create-endpoint-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-request 'make-create-endpoint-request))
 (common-lisp:defun make-create-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn event-buses replication-config
                     routing-config description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or endpoint-state common-lisp:null)
                         :accessor %create-endpoint-response-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %create-endpoint-response-role-arn :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %create-endpoint-response-event-buses
                         :initform common-lisp:nil)
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor %create-endpoint-response-replication-config
                         :initform common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %create-endpoint-response-routing-config
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or endpoint-arn common-lisp:null)
                         :accessor %create-endpoint-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %create-endpoint-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-response 'make-create-endpoint-response))
 (common-lisp:defun make-create-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state role-arn event-buses
                     replication-config routing-config arn name)
   (common-lisp:apply #'common-lisp:make-instance 'create-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-bus-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-event-bus-request-tags :initform
                         common-lisp:nil)
                        (event-source-name :initarg :event-source-name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %create-event-bus-request-event-source-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or event-bus-name common-lisp:null)
                         :accessor %create-event-bus-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-event-bus-request 'make-create-event-bus-request))
 (common-lisp:defun make-create-event-bus-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags event-source-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-bus-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-name))
      (common-lisp:list
       (common-lisp:cons "EventSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-bus-response common-lisp:nil
                       ((event-bus-arn :initarg :event-bus-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-event-bus-response-event-bus-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-event-bus-response
                    'make-create-event-bus-response))
 (common-lisp:defun make-create-event-bus-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-event-bus-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-arn))
      (common-lisp:list
       (common-lisp:cons "EventBusArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-bus-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-event-source-request common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-partner-event-source-request-account :initform
                         (common-lisp:error ":account is required"))
                        (name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %create-partner-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-partner-event-source-request
                    'make-create-partner-event-source-request))
 (common-lisp:defun make-create-partner-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-event-source-response common-lisp:nil
                       ((event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-partner-event-source-response-event-source-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-partner-event-source-response
                    'make-create-partner-event-source-response))
 (common-lisp:defun make-create-partner-event-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-source-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-event-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-event-source-response))
   common-lisp:nil))
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:deftype database () 'common-lisp:string)
(common-lisp:deftype db-user () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deactivate-event-source-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %deactivate-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'deactivate-event-source-request
                    'make-deactivate-event-source-request))
 (common-lisp:defun make-deactivate-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'deactivate-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dead-letter-config common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %dead-letter-config-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dead-letter-config 'make-dead-letter-config))
 (common-lisp:defun make-dead-letter-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'dead-letter-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deauthorize-connection-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %deauthorize-connection-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'deauthorize-connection-request
                    'make-deauthorize-connection-request))
 (common-lisp:defun make-deauthorize-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'deauthorize-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deauthorize-connection-response common-lisp:nil
                       ((last-authorized-time :initarg :last-authorized-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %deauthorize-connection-response-last-authorized-time
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deauthorize-connection-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deauthorize-connection-response-creation-time
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor
                         %deauthorize-connection-response-connection-state
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %deauthorize-connection-response-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deauthorize-connection-response
                    'make-deauthorize-connection-response))
 (common-lisp:defun make-deauthorize-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-authorized-time last-modified-time
                     creation-time connection-state connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'deauthorize-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authorized-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthorizedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deauthorize-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-destination-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %delete-api-destination-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-api-destination-request
                    'make-delete-api-destination-request))
 (common-lisp:defun make-delete-api-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-api-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-api-destination-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-api-destination-response
                    'make-delete-api-destination-response))
 (common-lisp:defun make-delete-api-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-api-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-api-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-archive-request common-lisp:nil
                       ((archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %delete-archive-request-archive-name
                         :initform
                         (common-lisp:error ":archive-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-archive-request 'make-delete-archive-request))
 (common-lisp:defun make-delete-archive-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key archive-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-archive-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-archive-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-archive-response 'make-delete-archive-response))
 (common-lisp:defun make-delete-archive-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-archive-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %delete-connection-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defun make-delete-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-response common-lisp:nil
                       ((last-authorized-time :initarg :last-authorized-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %delete-connection-response-last-authorized-time
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-connection-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delete-connection-response-creation-time :initform
                         common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor %delete-connection-response-connection-state
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %delete-connection-response-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defun make-delete-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-authorized-time last-modified-time
                     creation-time connection-state connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authorized-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthorizedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %delete-endpoint-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-request 'make-delete-endpoint-request))
 (common-lisp:defun make-delete-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-response 'make-delete-endpoint-response))
 (common-lisp:defun make-delete-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-bus-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-bus-name common-lisp:null)
                         :accessor %delete-event-bus-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-bus-request 'make-delete-event-bus-request))
 (common-lisp:defun make-delete-event-bus-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-event-bus-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-bus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-bus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-bus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-partner-event-source-request common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-partner-event-source-request-account :initform
                         (common-lisp:error ":account is required"))
                        (name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %delete-partner-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-partner-event-source-request
                    'make-delete-partner-event-source-request))
 (common-lisp:defun make-delete-partner-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-partner-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partner-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partner-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partner-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-request common-lisp:nil
                       ((force :initarg :force :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-rule-request-force :initform common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %delete-rule-request-event-bus-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %delete-rule-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defun make-delete-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force event-bus-name name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-api-destination-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %describe-api-destination-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-api-destination-request
                    'make-describe-api-destination-request))
 (common-lisp:defun make-describe-api-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-api-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-api-destination-response common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-api-destination-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-api-destination-response-creation-time
                         :initform common-lisp:nil)
                        (invocation-rate-limit-per-second :initarg
                         :invocation-rate-limit-per-second :type
                         (common-lisp:or
                          api-destination-invocation-rate-limit-per-second
                          common-lisp:null)
                         :accessor
                         %describe-api-destination-response-invocation-rate-limit-per-second
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or api-destination-http-method
                                         common-lisp:null)
                         :accessor
                         %describe-api-destination-response-http-method
                         :initform common-lisp:nil)
                        (invocation-endpoint :initarg :invocation-endpoint
                         :type (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %describe-api-destination-response-invocation-endpoint
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %describe-api-destination-response-connection-arn
                         :initform common-lisp:nil)
                        (api-destination-state :initarg :api-destination-state
                         :type
                         (common-lisp:or api-destination-state
                                         common-lisp:null)
                         :accessor
                         %describe-api-destination-response-api-destination-state
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or api-destination-description
                                         common-lisp:null)
                         :accessor
                         %describe-api-destination-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %describe-api-destination-response-name
                         :initform common-lisp:nil)
                        (api-destination-arn :initarg :api-destination-arn
                         :type
                         (common-lisp:or api-destination-arn common-lisp:null)
                         :accessor
                         %describe-api-destination-response-api-destination-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-api-destination-response
                    'make-describe-api-destination-response))
 (common-lisp:defun make-describe-api-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     invocation-rate-limit-per-second http-method
                     invocation-endpoint connection-arn api-destination-state
                     description name api-destination-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-api-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-destination-arn))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-destination-state))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-endpoint))
      (common-lisp:list
       (common-lisp:cons "InvocationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-rate-limit-per-second))
      (common-lisp:list
       (common-lisp:cons "InvocationRateLimitPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-api-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-archive-request common-lisp:nil
                       ((archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %describe-archive-request-archive-name
                         :initform
                         (common-lisp:error ":archive-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-archive-request 'make-describe-archive-request))
 (common-lisp:defun make-describe-archive-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key archive-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-archive-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-archive-response common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-archive-response-creation-time :initform
                         common-lisp:nil)
                        (event-count :initarg :event-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-archive-response-event-count :initform
                         common-lisp:nil)
                        (size-bytes :initarg :size-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %describe-archive-response-size-bytes :initform
                         common-lisp:nil)
                        (retention-days :initarg :retention-days :type
                         (common-lisp:or retention-days common-lisp:null)
                         :accessor %describe-archive-response-retention-days
                         :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or archive-state-reason common-lisp:null)
                         :accessor %describe-archive-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or archive-state common-lisp:null)
                         :accessor %describe-archive-response-state :initform
                         common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %describe-archive-response-event-pattern
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or archive-description common-lisp:null)
                         :accessor %describe-archive-response-description
                         :initform common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-archive-response-event-source-arn :initform
                         common-lisp:nil)
                        (archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %describe-archive-response-archive-name
                         :initform common-lisp:nil)
                        (archive-arn :initarg :archive-arn :type
                         (common-lisp:or archive-arn common-lisp:null)
                         :accessor %describe-archive-response-archive-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-archive-response
                    'make-describe-archive-response))
 (common-lisp:defun make-describe-archive-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time event-count size-bytes
                     retention-days state-reason state event-pattern
                     description event-source-arn archive-name archive-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-archive-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-arn))
      (common-lisp:list
       (common-lisp:cons "ArchiveArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-days))
      (common-lisp:list
       (common-lisp:cons "RetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-bytes))
      (common-lisp:list
       (common-lisp:cons "SizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-count))
      (common-lisp:list
       (common-lisp:cons "EventCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-archive-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %describe-connection-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-connection-request
                    'make-describe-connection-request))
 (common-lisp:defun make-describe-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-response common-lisp:nil
                       ((last-authorized-time :initarg :last-authorized-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %describe-connection-response-last-authorized-time
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-connection-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-connection-response-creation-time :initform
                         common-lisp:nil)
                        (auth-parameters :initarg :auth-parameters :type
                         (common-lisp:or connection-auth-response-parameters
                                         common-lisp:null)
                         :accessor
                         %describe-connection-response-auth-parameters
                         :initform common-lisp:nil)
                        (secret-arn :initarg :secret-arn :type
                         (common-lisp:or secrets-manager-secret-arn
                                         common-lisp:null)
                         :accessor %describe-connection-response-secret-arn
                         :initform common-lisp:nil)
                        (authorization-type :initarg :authorization-type :type
                         (common-lisp:or connection-authorization-type
                                         common-lisp:null)
                         :accessor
                         %describe-connection-response-authorization-type
                         :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or connection-state-reason
                                         common-lisp:null)
                         :accessor %describe-connection-response-state-reason
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor
                         %describe-connection-response-connection-state
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or connection-description
                                         common-lisp:null)
                         :accessor %describe-connection-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %describe-connection-response-name :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %describe-connection-response-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-response
                    'make-describe-connection-response))
 (common-lisp:defun make-describe-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-authorized-time last-modified-time
                     creation-time auth-parameters secret-arn
                     authorization-type state-reason connection-state
                     description name connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "AuthorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "AuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authorized-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthorizedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-request common-lisp:nil
                       ((home-region :initarg :home-region :type
                         (common-lisp:or home-region common-lisp:null)
                         :accessor %describe-endpoint-request-home-region
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %describe-endpoint-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-request
                    'make-describe-endpoint-request))
 (common-lisp:defun make-describe-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key home-region name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-response common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-endpoint-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-endpoint-response-creation-time :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or endpoint-state-reason
                                         common-lisp:null)
                         :accessor %describe-endpoint-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or endpoint-state common-lisp:null)
                         :accessor %describe-endpoint-response-state :initform
                         common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or endpoint-url common-lisp:null)
                         :accessor %describe-endpoint-response-endpoint-url
                         :initform common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :type
                         (common-lisp:or endpoint-id common-lisp:null)
                         :accessor %describe-endpoint-response-endpoint-id
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %describe-endpoint-response-role-arn
                         :initform common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %describe-endpoint-response-event-buses
                         :initform common-lisp:nil)
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor
                         %describe-endpoint-response-replication-config
                         :initform common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %describe-endpoint-response-routing-config
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or endpoint-arn common-lisp:null)
                         :accessor %describe-endpoint-response-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or endpoint-description common-lisp:null)
                         :accessor %describe-endpoint-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %describe-endpoint-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-response
                    'make-describe-endpoint-response))
 (common-lisp:defun make-describe-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     state-reason state endpoint-url endpoint-id role-arn
                     event-buses replication-config routing-config arn
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-bus-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %describe-event-bus-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-bus-request
                    'make-describe-event-bus-request))
 (common-lisp:defun make-describe-event-bus-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-event-bus-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-bus-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-bus-response-policy :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-bus-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-bus-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-bus-response
                    'make-describe-event-bus-response))
 (common-lisp:defun make-describe-event-bus-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy arn name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-event-bus-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-bus-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-source-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %describe-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-event-source-request
                    'make-describe-event-source-request))
 (common-lisp:defun make-describe-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-source-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or event-source-state common-lisp:null)
                         :accessor %describe-event-source-response-state
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-source-response-name :initform
                         common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-event-source-response-expiration-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-event-source-response-creation-time
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-source-response-created-by :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-source-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-source-response
                    'make-describe-event-source-response))
 (common-lisp:defun make-describe-event-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name expiration-time creation-time
                     created-by arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-partner-event-source-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %describe-partner-event-source-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-partner-event-source-request
                    'make-describe-partner-event-source-request))
 (common-lisp:defun make-describe-partner-event-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-partner-event-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-partner-event-source-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-partner-event-source-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-partner-event-source-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-partner-event-source-response
                    'make-describe-partner-event-source-response))
 (common-lisp:defun make-describe-partner-event-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-partner-event-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-partner-event-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replay-request common-lisp:nil
                       ((replay-name :initarg :replay-name :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %describe-replay-request-replay-name
                         :initform
                         (common-lisp:error ":replay-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-replay-request 'make-describe-replay-request))
 (common-lisp:defun make-describe-replay-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replay-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-replay-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-name))
      (common-lisp:list
       (common-lisp:cons "ReplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replay-response common-lisp:nil
                       ((replay-end-time :initarg :replay-end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-replay-response-replay-end-time :initform
                         common-lisp:nil)
                        (replay-start-time :initarg :replay-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-replay-response-replay-start-time :initform
                         common-lisp:nil)
                        (event-last-replayed-time :initarg
                         :event-last-replayed-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-replay-response-event-last-replayed-time
                         :initform common-lisp:nil)
                        (event-end-time :initarg :event-end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-replay-response-event-end-time :initform
                         common-lisp:nil)
                        (event-start-time :initarg :event-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-replay-response-event-start-time :initform
                         common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or replay-destination common-lisp:null)
                         :accessor %describe-replay-response-destination
                         :initform common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-replay-response-event-source-arn :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or replay-state-reason common-lisp:null)
                         :accessor %describe-replay-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or replay-state common-lisp:null)
                         :accessor %describe-replay-response-state :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or replay-description common-lisp:null)
                         :accessor %describe-replay-response-description
                         :initform common-lisp:nil)
                        (replay-arn :initarg :replay-arn :type
                         (common-lisp:or replay-arn common-lisp:null) :accessor
                         %describe-replay-response-replay-arn :initform
                         common-lisp:nil)
                        (replay-name :initarg :replay-name :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %describe-replay-response-replay-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-replay-response 'make-describe-replay-response))
 (common-lisp:defun make-describe-replay-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replay-end-time replay-start-time
                     event-last-replayed-time event-end-time event-start-time
                     destination event-source-arn state-reason state
                     description replay-arn replay-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-replay-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-name))
      (common-lisp:list
       (common-lisp:cons "ReplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-arn))
      (common-lisp:list
       (common-lisp:cons "ReplayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-start-time))
      (common-lisp:list
       (common-lisp:cons "EventStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-end-time))
      (common-lisp:list
       (common-lisp:cons "EventEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-last-replayed-time))
      (common-lisp:list
       (common-lisp:cons "EventLastReplayedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-start-time))
      (common-lisp:list
       (common-lisp:cons "ReplayStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-end-time))
      (common-lisp:list
       (common-lisp:cons "ReplayEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replay-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rule-request common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %describe-rule-request-event-bus-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %describe-rule-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-rule-request 'make-describe-rule-request))
 (common-lisp:defun make-describe-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rule-response common-lisp:nil
                       ((created-by :initarg :created-by :type
                         (common-lisp:or created-by common-lisp:null) :accessor
                         %describe-rule-response-created-by :initform
                         common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name common-lisp:null)
                         :accessor %describe-rule-response-event-bus-name
                         :initform common-lisp:nil)
                        (managed-by :initarg :managed-by :type
                         (common-lisp:or managed-by common-lisp:null) :accessor
                         %describe-rule-response-managed-by :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-rule-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or rule-description common-lisp:null)
                         :accessor %describe-rule-response-description
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or rule-state common-lisp:null) :accessor
                         %describe-rule-response-state :initform
                         common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %describe-rule-response-schedule-expression
                         :initform common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %describe-rule-response-event-pattern
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %describe-rule-response-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %describe-rule-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-rule-response 'make-describe-rule-response))
 (common-lisp:defun make-describe-rule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-by event-bus-name managed-by
                     role-arn description state schedule-expression
                     event-pattern arn name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-by))
      (common-lisp:list
       (common-lisp:cons "ManagedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-rule-request common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %disable-rule-request-event-bus-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %disable-rule-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-rule-request 'make-disable-rule-request))
 (common-lisp:defun make-disable-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name name)
   (common-lisp:apply #'common-lisp:make-instance 'disable-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-parameters common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %ecs-parameters-tags :initform common-lisp:nil)
                        (reference-id :initarg :reference-id :type
                         (common-lisp:or reference-id common-lisp:null)
                         :accessor %ecs-parameters-reference-id :initform
                         common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %ecs-parameters-propagate-tags :initform
                         common-lisp:nil)
                        (placement-strategy :initarg :placement-strategy :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor %ecs-parameters-placement-strategy :initform
                         common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor %ecs-parameters-placement-constraints
                         :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ecs-parameters-enable-execute-command :initform
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :enable-ecsmanaged-tags :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ecs-parameters-enable-ecsmanaged-tags :initform
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %ecs-parameters-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-parameters-group :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ecs-parameters-platform-version :initform
                         common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %ecs-parameters-network-configuration
                         :initform common-lisp:nil)
                        (launch-type :initarg :launch-type :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %ecs-parameters-launch-type :initform
                         common-lisp:nil)
                        (task-count :initarg :task-count :type
                         (common-lisp:or limit-min1 common-lisp:null) :accessor
                         %ecs-parameters-task-count :initform common-lisp:nil)
                        (task-definition-arn :initarg :task-definition-arn
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %ecs-parameters-task-definition-arn :initform
                         (common-lisp:error
                          ":task-definition-arn is required"))))
 (common-lisp:export (common-lisp:list 'ecs-parameters 'make-ecs-parameters))
 (common-lisp:defun make-ecs-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags reference-id propagate-tags
                     placement-strategy placement-constraints
                     enable-execute-command enable-ecsmanaged-tags
                     capacity-provider-strategy group platform-version
                     network-configuration launch-type task-count
                     task-definition-arn)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-count))
      (common-lisp:list
       (common-lisp:cons "TaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "LaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "CapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "EnableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "EnableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "PropagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-rule-request common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %enable-rule-request-event-bus-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %enable-rule-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-rule-request 'make-enable-rule-request))
 (common-lisp:defun make-enable-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name name)
   (common-lisp:apply #'common-lisp:make-instance 'enable-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %endpoint-last-modified-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %endpoint-creation-time :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or endpoint-state-reason
                                         common-lisp:null)
                         :accessor %endpoint-state-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or endpoint-state common-lisp:null)
                         :accessor %endpoint-state :initform common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or endpoint-url common-lisp:null)
                         :accessor %endpoint-endpoint-url :initform
                         common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :type
                         (common-lisp:or endpoint-id common-lisp:null)
                         :accessor %endpoint-endpoint-id :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %endpoint-role-arn :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %endpoint-event-buses :initform
                         common-lisp:nil)
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor %endpoint-replication-config :initform
                         common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %endpoint-routing-config :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or endpoint-arn common-lisp:null)
                         :accessor %endpoint-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or endpoint-description common-lisp:null)
                         :accessor %endpoint-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %endpoint-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     state-reason state endpoint-url endpoint-id role-arn
                     event-buses replication-config routing-config arn
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:deftype endpoint-arn () 'common-lisp:string)
(common-lisp:deftype endpoint-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass endpoint-event-bus common-lisp:nil
                       ((event-bus-arn :initarg :event-bus-arn :type
                         (common-lisp:or non-partner-event-bus-arn
                                         common-lisp:null)
                         :accessor %endpoint-event-bus-event-bus-arn :initform
                         (common-lisp:error ":event-bus-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'endpoint-event-bus 'make-endpoint-event-bus))
 (common-lisp:defun make-endpoint-event-bus
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-arn)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-event-bus
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-event-bus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-event-bus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-arn))
      (common-lisp:list
       (common-lisp:cons "EventBusArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-event-bus))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-event-bus-list ()
   '(trivial-types:proper-list endpoint-event-bus))
 (common-lisp:defun |make-endpoint-event-bus-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-event-bus))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype endpoint-list () '(trivial-types:proper-list endpoint))
 (common-lisp:defun |make-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-name () 'common-lisp:string)
(common-lisp:deftype endpoint-state () 'common-lisp:string)
(common-lisp:deftype endpoint-state-reason () 'common-lisp:string)
(common-lisp:deftype endpoint-url () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bus common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-bus-policy :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-bus-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-bus-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-bus 'make-event-bus))
 (common-lisp:defun make-event-bus
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy arn name)
   (common-lisp:apply #'common-lisp:make-instance 'event-bus
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-bus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-bus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-bus))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-bus-list () '(trivial-types:proper-list event-bus))
 (common-lisp:defun |make-event-bus-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-bus))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-bus-name () 'common-lisp:string)
(common-lisp:deftype event-bus-name-or-arn () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:deftype event-pattern () 'common-lisp:string)
(common-lisp:deftype event-resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-resource-list ()
   '(trivial-types:proper-list event-resource))
 (common-lisp:defun |make-event-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-source common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or event-source-state common-lisp:null)
                         :accessor %event-source-state :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-name :initform common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-source-expiration-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-source-creation-time :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-created-by :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-source 'make-event-source))
 (common-lisp:defun make-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name expiration-time creation-time
                     created-by arn)
   (common-lisp:apply #'common-lisp:make-instance 'event-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-source-list ()
   '(trivial-types:proper-list event-source))
 (common-lisp:defun |make-event-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-source-name () 'common-lisp:string)
(common-lisp:deftype event-source-name-prefix () 'common-lisp:string)
(common-lisp:deftype event-source-state () 'common-lisp:string)
(common-lisp:deftype event-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failover-config common-lisp:nil
                       ((secondary :initarg :secondary :type
                         (common-lisp:or secondary common-lisp:null) :accessor
                         %failover-config-secondary :initform
                         (common-lisp:error ":secondary is required"))
                        (primary :initarg :primary :type
                         (common-lisp:or primary common-lisp:null) :accessor
                         %failover-config-primary :initform
                         (common-lisp:error ":primary is required"))))
 (common-lisp:export (common-lisp:list 'failover-config 'make-failover-config))
 (common-lisp:defun make-failover-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary primary)
   (common-lisp:apply #'common-lisp:make-instance 'failover-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary))
      (common-lisp:list
       (common-lisp:cons "Secondary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-config))
   common-lisp:nil))
(common-lisp:deftype header-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-header-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:deftype health-check () 'common-lisp:string)
(common-lisp:deftype home-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-parameters common-lisp:nil
                       ((query-string-parameters :initarg
                         :query-string-parameters :type
                         (common-lisp:or query-string-parameters-map
                                         common-lisp:null)
                         :accessor %http-parameters-query-string-parameters
                         :initform common-lisp:nil)
                        (header-parameters :initarg :header-parameters :type
                         (common-lisp:or header-parameters-map
                                         common-lisp:null)
                         :accessor %http-parameters-header-parameters :initform
                         common-lisp:nil)
                        (path-parameter-values :initarg :path-parameter-values
                         :type
                         (common-lisp:or path-parameter-list common-lisp:null)
                         :accessor %http-parameters-path-parameter-values
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'http-parameters 'make-http-parameters))
 (common-lisp:defun make-http-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string-parameters header-parameters
                     path-parameter-values)
   (common-lisp:apply #'common-lisp:make-instance 'http-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-parameter-values))
      (common-lisp:list
       (common-lisp:cons "PathParameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-parameters))
      (common-lisp:list
       (common-lisp:cons "HeaderParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-string-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryStringParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-parameters))
   common-lisp:nil))
(common-lisp:deftype https-endpoint () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition illegal-status-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'illegal-status-exception)))
(common-lisp:progn
 (common-lisp:defclass input-transformer common-lisp:nil
                       ((input-template :initarg :input-template :type
                         (common-lisp:or transformer-input common-lisp:null)
                         :accessor %input-transformer-input-template :initform
                         (common-lisp:error ":input-template is required"))
                        (input-paths-map :initarg :input-paths-map :type
                         (common-lisp:or transformer-paths common-lisp:null)
                         :accessor %input-transformer-input-paths-map :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-transformer 'make-input-transformer))
 (common-lisp:defun make-input-transformer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-template input-paths-map)
   (common-lisp:apply #'common-lisp:make-instance 'input-transformer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-transformer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-transformer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-paths-map))
      (common-lisp:list
       (common-lisp:cons "InputPathsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-template))
      (common-lisp:list
       (common-lisp:cons "InputTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-transformer))
   common-lisp:nil))
(common-lisp:deftype input-transformer-path-key () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-pattern-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-event-pattern-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-state-exception)))
(common-lisp:progn
 (common-lisp:defclass kinesis-parameters common-lisp:nil
                       ((partition-key-path :initarg :partition-key-path :type
                         (common-lisp:or target-partition-key-path
                                         common-lisp:null)
                         :accessor %kinesis-parameters-partition-key-path
                         :initform
                         (common-lisp:error
                          ":partition-key-path is required"))))
 (common-lisp:export
  (common-lisp:list 'kinesis-parameters 'make-kinesis-parameters))
 (common-lisp:defun make-kinesis-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partition-key-path)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-key-path))
      (common-lisp:list
       (common-lisp:cons "PartitionKeyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-parameters))
   common-lisp:nil))
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-max100 () 'common-lisp:integer)
(common-lisp:deftype limit-min1 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-api-destinations-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-api-destinations-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-api-destinations-request-next-token :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %list-api-destinations-request-connection-arn
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %list-api-destinations-request-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-api-destinations-request
                    'make-list-api-destinations-request))
 (common-lisp:defun make-list-api-destinations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token connection-arn
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-api-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-api-destinations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-api-destinations-response-next-token :initform
                         common-lisp:nil)
                        (api-destinations :initarg :api-destinations :type
                         (common-lisp:or api-destination-response-list
                                         common-lisp:null)
                         :accessor
                         %list-api-destinations-response-api-destinations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-api-destinations-response
                    'make-list-api-destinations-response))
 (common-lisp:defun make-list-api-destinations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token api-destinations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-api-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-destinations))
      (common-lisp:list
       (common-lisp:cons "ApiDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-api-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archives-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-archives-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-archives-request-next-token :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or archive-state common-lisp:null)
                         :accessor %list-archives-request-state :initform
                         common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-archives-request-event-source-arn :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %list-archives-request-name-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-archives-request 'make-list-archives-request))
 (common-lisp:defun make-list-archives-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token state event-source-arn
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-archives-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archives-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-archives-response-next-token :initform
                         common-lisp:nil)
                        (archives :initarg :archives :type
                         (common-lisp:or archive-response-list
                                         common-lisp:null)
                         :accessor %list-archives-response-archives :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-archives-response 'make-list-archives-response))
 (common-lisp:defun make-list-archives-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token archives)
   (common-lisp:apply #'common-lisp:make-instance 'list-archives-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archives))
      (common-lisp:list
       (common-lisp:cons "Archives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archives-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-connections-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-request-next-token :initform
                         common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor %list-connections-request-connection-state
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %list-connections-request-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connections-request 'make-list-connections-request))
 (common-lisp:defun make-list-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token connection-state
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-response-next-token :initform
                         common-lisp:nil)
                        (connections :initarg :connections :type
                         (common-lisp:or connection-response-list
                                         common-lisp:null)
                         :accessor %list-connections-response-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connections-response
                    'make-list-connections-response))
 (common-lisp:defun make-list-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connections)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-endpoints-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-endpoints-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-endpoints-request-next-token :initform
                         common-lisp:nil)
                        (home-region :initarg :home-region :type
                         (common-lisp:or home-region common-lisp:null)
                         :accessor %list-endpoints-request-home-region
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %list-endpoints-request-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-endpoints-request 'make-list-endpoints-request))
 (common-lisp:defun make-list-endpoints-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token home-region
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-endpoints-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-endpoints-response-next-token :initform
                         common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or endpoint-list common-lisp:null)
                         :accessor %list-endpoints-response-endpoints :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-endpoints-response 'make-list-endpoints-response))
 (common-lisp:defun make-list-endpoints-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token endpoints)
   (common-lisp:apply #'common-lisp:make-instance 'list-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-buses-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-event-buses-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-buses-request-next-token :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or event-bus-name common-lisp:null)
                         :accessor %list-event-buses-request-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-buses-request 'make-list-event-buses-request))
 (common-lisp:defun make-list-event-buses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-buses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-buses-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-buses-response-next-token :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or event-bus-list common-lisp:null)
                         :accessor %list-event-buses-response-event-buses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-buses-response
                    'make-list-event-buses-response))
 (common-lisp:defun make-list-event-buses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-buses)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-buses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-buses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-sources-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-event-sources-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-sources-request-next-token :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or event-source-name-prefix
                                         common-lisp:null)
                         :accessor %list-event-sources-request-name-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-sources-request
                    'make-list-event-sources-request))
 (common-lisp:defun make-list-event-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-sources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-sources-response-next-token :initform
                         common-lisp:nil)
                        (event-sources :initarg :event-sources :type
                         (common-lisp:or event-source-list common-lisp:null)
                         :accessor %list-event-sources-response-event-sources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-sources-response
                    'make-list-event-sources-response))
 (common-lisp:defun make-list-event-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-sources)
   (common-lisp:apply #'common-lisp:make-instance 'list-event-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-sources))
      (common-lisp:list
       (common-lisp:cons "EventSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-event-source-accounts-request
                       common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor
                         %list-partner-event-source-accounts-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-event-source-accounts-request-next-token
                         :initform common-lisp:nil)
                        (event-source-name :initarg :event-source-name :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor
                         %list-partner-event-source-accounts-request-event-source-name
                         :initform
                         (common-lisp:error
                          ":event-source-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-partner-event-source-accounts-request
                    'make-list-partner-event-source-accounts-request))
 (common-lisp:defun make-list-partner-event-source-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token event-source-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-event-source-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-name))
      (common-lisp:list
       (common-lisp:cons "EventSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-event-source-accounts-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-event-source-accounts-response-next-token
                         :initform common-lisp:nil)
                        (partner-event-source-accounts :initarg
                         :partner-event-source-accounts :type
                         (common-lisp:or partner-event-source-account-list
                                         common-lisp:null)
                         :accessor
                         %list-partner-event-source-accounts-response-partner-event-source-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-partner-event-source-accounts-response
                    'make-list-partner-event-source-accounts-response))
 (common-lisp:defun make-list-partner-event-source-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token partner-event-source-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-event-source-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partner-event-source-accounts))
      (common-lisp:list
       (common-lisp:cons "PartnerEventSourceAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-source-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-event-sources-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-partner-event-sources-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-event-sources-request-next-token
                         :initform common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or partner-event-source-name-prefix
                                         common-lisp:null)
                         :accessor
                         %list-partner-event-sources-request-name-prefix
                         :initform
                         (common-lisp:error ":name-prefix is required"))))
 (common-lisp:export
  (common-lisp:list 'list-partner-event-sources-request
                    'make-list-partner-event-sources-request))
 (common-lisp:defun make-list-partner-event-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token name-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-event-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-event-sources-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-event-sources-response-next-token
                         :initform common-lisp:nil)
                        (partner-event-sources :initarg :partner-event-sources
                         :type
                         (common-lisp:or partner-event-source-list
                                         common-lisp:null)
                         :accessor
                         %list-partner-event-sources-response-partner-event-sources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-partner-event-sources-response
                    'make-list-partner-event-sources-response))
 (common-lisp:defun make-list-partner-event-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token partner-event-sources)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-event-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partner-event-sources))
      (common-lisp:list
       (common-lisp:cons "PartnerEventSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-event-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replays-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-replays-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-replays-request-next-token :initform
                         common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-replays-request-event-source-arn :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or replay-state common-lisp:null)
                         :accessor %list-replays-request-state :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %list-replays-request-name-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-replays-request 'make-list-replays-request))
 (common-lisp:defun make-list-replays-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token event-source-arn state
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-replays-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-replays-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-replays-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-replays-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replays-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-replays-response-next-token :initform
                         common-lisp:nil)
                        (replays :initarg :replays :type
                         (common-lisp:or replay-list common-lisp:null)
                         :accessor %list-replays-response-replays :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-replays-response 'make-list-replays-response))
 (common-lisp:defun make-list-replays-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token replays)
   (common-lisp:apply #'common-lisp:make-instance 'list-replays-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-replays-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-replays-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replays))
      (common-lisp:list
       (common-lisp:cons "Replays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-replays-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rule-names-by-target-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-rule-names-by-target-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-rule-names-by-target-request-next-token
                         :initform common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor
                         %list-rule-names-by-target-request-event-bus-name
                         :initform common-lisp:nil)
                        (target-arn :initarg :target-arn :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         %list-rule-names-by-target-request-target-arn
                         :initform
                         (common-lisp:error ":target-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-rule-names-by-target-request
                    'make-list-rule-names-by-target-request))
 (common-lisp:defun make-list-rule-names-by-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token event-bus-name
                     target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-names-by-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rule-names-by-target-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-rule-names-by-target-response-next-token
                         :initform common-lisp:nil)
                        (rule-names :initarg :rule-names :type
                         (common-lisp:or rule-name-list common-lisp:null)
                         :accessor
                         %list-rule-names-by-target-response-rule-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rule-names-by-target-response
                    'make-list-rule-names-by-target-response))
 (common-lisp:defun make-list-rule-names-by-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rule-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rule-names-by-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-names))
      (common-lisp:list
       (common-lisp:cons "RuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-names-by-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rules-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-rules-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-rules-request-next-token :initform
                         common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %list-rules-request-event-bus-name :initform
                         common-lisp:nil)
                        (name-prefix :initarg :name-prefix :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %list-rules-request-name-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rules-request 'make-list-rules-request))
 (common-lisp:defun make-list-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token event-bus-name
                     name-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-prefix))
      (common-lisp:list
       (common-lisp:cons "NamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rules-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-rules-response-next-token :initform
                         common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or rule-response-list common-lisp:null)
                         :accessor %list-rules-response-rules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rules-response 'make-list-rules-response))
 (common-lisp:defun make-list-rules-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rules)
   (common-lisp:apply #'common-lisp:make-instance 'list-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-by-rule-request common-lisp:nil
                       ((limit :initarg :limit :type
                         (common-lisp:or limit-max100 common-lisp:null)
                         :accessor %list-targets-by-rule-request-limit
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-by-rule-request-next-token :initform
                         common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %list-targets-by-rule-request-event-bus-name
                         :initform common-lisp:nil)
                        (rule :initarg :rule :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %list-targets-by-rule-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'list-targets-by-rule-request
                    'make-list-targets-by-rule-request))
 (common-lisp:defun make-list-targets-by-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit next-token event-bus-name rule)
   (common-lisp:apply #'common-lisp:make-instance 'list-targets-by-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-by-rule-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-by-rule-response-next-token :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor %list-targets-by-rule-response-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-targets-by-rule-response
                    'make-list-targets-by-rule-response))
 (common-lisp:defun make-list-targets-by-rule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-by-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-by-rule-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype managed-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition managed-rule-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'managed-rule-exception)))
(common-lisp:deftype maximum-event-age-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts () 'common-lisp:integer)
(common-lisp:deftype message-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((awsvpc-configuration :initarg :|awsvpcConfiguration|
                         :type
                         (common-lisp:or aws-vpc-configuration
                                         common-lisp:null)
                         :accessor %network-configuration-awsvpc-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defun make-network-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key awsvpc-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsvpc-configuration))
      (common-lisp:list
       (common-lisp:cons "awsvpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-partner-event-bus-arn () 'common-lisp:string)
(common-lisp:deftype non-partner-event-bus-name () 'common-lisp:string)
(common-lisp:deftype non-partner-event-bus-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-disabled-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-disabled-exception)))
(common-lisp:progn
 (common-lisp:defclass partner-event-source common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %partner-event-source-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %partner-event-source-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'partner-event-source 'make-partner-event-source))
 (common-lisp:defun make-partner-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance 'partner-event-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partner-event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partner-event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partner-event-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partner-event-source-account common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or event-source-state common-lisp:null)
                         :accessor %partner-event-source-account-state
                         :initform common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %partner-event-source-account-expiration-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %partner-event-source-account-creation-time :initform
                         common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %partner-event-source-account-account :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'partner-event-source-account
                    'make-partner-event-source-account))
 (common-lisp:defun make-partner-event-source-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state expiration-time creation-time
                     account)
   (common-lisp:apply #'common-lisp:make-instance 'partner-event-source-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partner-event-source-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partner-event-source-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partner-event-source-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partner-event-source-account-list ()
   '(trivial-types:proper-list partner-event-source-account))
 (common-lisp:defun |make-partner-event-source-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            partner-event-source-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partner-event-source-list ()
   '(trivial-types:proper-list partner-event-source))
 (common-lisp:defun |make-partner-event-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partner-event-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partner-event-source-name-prefix () 'common-lisp:string)
(common-lisp:deftype path-parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-parameter-list ()
   '(trivial-types:proper-list path-parameter))
 (common-lisp:defun |make-path-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-constraint common-lisp:nil
                       ((expression :initarg :|expression| :type
                         (common-lisp:or placement-constraint-expression
                                         common-lisp:null)
                         :accessor %placement-constraint-expression :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or placement-constraint-type
                                         common-lisp:null)
                         :accessor %placement-constraint-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-constraint 'make-placement-constraint))
 (common-lisp:defun make-placement-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression type)
   (common-lisp:apply #'common-lisp:make-instance 'placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-constraint))
   common-lisp:nil))
(common-lisp:deftype placement-constraint-expression () 'common-lisp:string)
(common-lisp:deftype placement-constraint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-constraints ()
   '(trivial-types:proper-list placement-constraint))
 (common-lisp:defun |make-placement-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype placement-strategies ()
   '(trivial-types:proper-list placement-strategy))
 (common-lisp:defun |make-placement-strategies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-strategy common-lisp:nil
                       ((field :initarg :|field| :type
                         (common-lisp:or placement-strategy-field
                                         common-lisp:null)
                         :accessor %placement-strategy-field :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or placement-strategy-type
                                         common-lisp:null)
                         :accessor %placement-strategy-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-strategy 'make-placement-strategy))
 (common-lisp:defun make-placement-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field type)
   (common-lisp:apply #'common-lisp:make-instance 'placement-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-strategy))
   common-lisp:nil))
(common-lisp:deftype placement-strategy-field () 'common-lisp:string)
(common-lisp:deftype placement-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-length-exceeded-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'policy-length-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass primary common-lisp:nil
                       ((health-check :initarg :health-check :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor %primary-health-check :initform
                         (common-lisp:error ":health-check is required"))))
 (common-lisp:export (common-lisp:list 'primary 'make-primary))
 (common-lisp:defun make-primary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key health-check)
   (common-lisp:apply #'common-lisp:make-instance 'primary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input primary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input primary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input primary))
   common-lisp:nil))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype propagate-tags () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-events-request common-lisp:nil
                       ((endpoint-id :initarg :endpoint-id :type
                         (common-lisp:or endpoint-id common-lisp:null)
                         :accessor %put-events-request-endpoint-id :initform
                         common-lisp:nil)
                        (entries :initarg :entries :type
                         (common-lisp:or put-events-request-entry-list
                                         common-lisp:null)
                         :accessor %put-events-request-entries :initform
                         (common-lisp:error ":entries is required"))))
 (common-lisp:export
  (common-lisp:list 'put-events-request 'make-put-events-request))
 (common-lisp:defun make-put-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint-id entries)
   (common-lisp:apply #'common-lisp:make-instance 'put-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-events-request-entry common-lisp:nil
                       ((trace-header :initarg :trace-header :type
                         (common-lisp:or trace-header common-lisp:null)
                         :accessor %put-events-request-entry-trace-header
                         :initform common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or non-partner-event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %put-events-request-entry-event-bus-name
                         :initform common-lisp:nil)
                        (detail :initarg :detail :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-events-request-entry-detail :initform
                         common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-events-request-entry-detail-type :initform
                         common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or event-resource-list common-lisp:null)
                         :accessor %put-events-request-entry-resources
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-events-request-entry-source :initform
                         common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or event-time common-lisp:null) :accessor
                         %put-events-request-entry-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-events-request-entry 'make-put-events-request-entry))
 (common-lisp:defun make-put-events-request-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trace-header event-bus-name detail
                     detail-type resources source time)
   (common-lisp:apply #'common-lisp:make-instance 'put-events-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-header))
      (common-lisp:list
       (common-lisp:cons "TraceHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-events-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-events-request-entry-list ()
   '(trivial-types:proper-list put-events-request-entry))
 (common-lisp:defun |make-put-events-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-events-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-events-response common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or put-events-result-entry-list
                                         common-lisp:null)
                         :accessor %put-events-response-entries :initform
                         common-lisp:nil)
                        (failed-entry-count :initarg :failed-entry-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %put-events-response-failed-entry-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-events-response 'make-put-events-response))
 (common-lisp:defun make-put-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries failed-entry-count)
   (common-lisp:apply #'common-lisp:make-instance 'put-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-events-result-entry common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %put-events-result-entry-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %put-events-result-entry-error-code :initform
                         common-lisp:nil)
                        (event-id :initarg :event-id :type
                         (common-lisp:or event-id common-lisp:null) :accessor
                         %put-events-result-entry-event-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-events-result-entry 'make-put-events-result-entry))
 (common-lisp:defun make-put-events-result-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code event-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-events-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-events-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-events-result-entry-list ()
   '(trivial-types:proper-list put-events-result-entry))
 (common-lisp:defun |make-put-events-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list put-events-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-partner-events-request common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or put-partner-events-request-entry-list
                                         common-lisp:null)
                         :accessor %put-partner-events-request-entries
                         :initform
                         (common-lisp:error ":entries is required"))))
 (common-lisp:export
  (common-lisp:list 'put-partner-events-request
                    'make-put-partner-events-request))
 (common-lisp:defun make-put-partner-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries)
   (common-lisp:apply #'common-lisp:make-instance 'put-partner-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-partner-events-request-entry common-lisp:nil
                       ((detail :initarg :detail :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-partner-events-request-entry-detail :initform
                         common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-partner-events-request-entry-detail-type
                         :initform common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or event-resource-list common-lisp:null)
                         :accessor %put-partner-events-request-entry-resources
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or event-source-name common-lisp:null)
                         :accessor %put-partner-events-request-entry-source
                         :initform common-lisp:nil)
                        (time :initarg :time :type
                         (common-lisp:or event-time common-lisp:null) :accessor
                         %put-partner-events-request-entry-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-partner-events-request-entry
                    'make-put-partner-events-request-entry))
 (common-lisp:defun make-put-partner-events-request-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detail detail-type resources source time)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-partner-events-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-partner-events-request-entry-list ()
   '(trivial-types:proper-list put-partner-events-request-entry))
 (common-lisp:defun |make-put-partner-events-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-partner-events-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-partner-events-response common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or put-partner-events-result-entry-list
                                         common-lisp:null)
                         :accessor %put-partner-events-response-entries
                         :initform common-lisp:nil)
                        (failed-entry-count :initarg :failed-entry-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %put-partner-events-response-failed-entry-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-partner-events-response
                    'make-put-partner-events-response))
 (common-lisp:defun make-put-partner-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries failed-entry-count)
   (common-lisp:apply #'common-lisp:make-instance 'put-partner-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-partner-events-result-entry common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %put-partner-events-result-entry-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %put-partner-events-result-entry-error-code :initform
                         common-lisp:nil)
                        (event-id :initarg :event-id :type
                         (common-lisp:or event-id common-lisp:null) :accessor
                         %put-partner-events-result-entry-event-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-partner-events-result-entry
                    'make-put-partner-events-result-entry))
 (common-lisp:defun make-put-partner-events-result-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code event-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-partner-events-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-partner-events-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-partner-events-result-entry-list ()
   '(trivial-types:proper-list put-partner-events-result-entry))
 (common-lisp:defun |make-put-partner-events-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-partner-events-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-permission-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-permission-request-policy :initform
                         common-lisp:nil)
                        (condition :initarg :condition :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         %put-permission-request-condition :initform
                         common-lisp:nil)
                        (statement-id :initarg :statement-id :type
                         (common-lisp:or statement-id common-lisp:null)
                         :accessor %put-permission-request-statement-id
                         :initform common-lisp:nil)
                        (principal :initarg :principal :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         %put-permission-request-principal :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %put-permission-request-action :initform
                         common-lisp:nil)
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or non-partner-event-bus-name
                                         common-lisp:null)
                         :accessor %put-permission-request-event-bus-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-permission-request 'make-put-permission-request))
 (common-lisp:defun make-put-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy condition statement-id principal
                     action event-bus-name)
   (common-lisp:apply #'common-lisp:make-instance 'put-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rule-request common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %put-rule-request-event-bus-name :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-rule-request-tags :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %put-rule-request-role-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or rule-description common-lisp:null)
                         :accessor %put-rule-request-description :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or rule-state common-lisp:null) :accessor
                         %put-rule-request-state :initform common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %put-rule-request-event-pattern :initform
                         common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %put-rule-request-schedule-expression
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %put-rule-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-rule-request 'make-put-rule-request))
 (common-lisp:defun make-put-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name tags role-arn description
                     state event-pattern schedule-expression name)
   (common-lisp:apply #'common-lisp:make-instance 'put-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rule-response common-lisp:nil
                       ((rule-arn :initarg :rule-arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %put-rule-response-rule-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-rule-response 'make-put-rule-response))
 (common-lisp:defun make-put-rule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-targets-request common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or target-list common-lisp:null)
                         :accessor %put-targets-request-targets :initform
                         (common-lisp:error ":targets is required"))
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %put-targets-request-event-bus-name
                         :initform common-lisp:nil)
                        (rule :initarg :rule :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %put-targets-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'put-targets-request 'make-put-targets-request))
 (common-lisp:defun make-put-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets event-bus-name rule)
   (common-lisp:apply #'common-lisp:make-instance 'put-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-targets-response common-lisp:nil
                       ((failed-entries :initarg :failed-entries :type
                         (common-lisp:or put-targets-result-entry-list
                                         common-lisp:null)
                         :accessor %put-targets-response-failed-entries
                         :initform common-lisp:nil)
                        (failed-entry-count :initarg :failed-entry-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %put-targets-response-failed-entry-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-targets-response 'make-put-targets-response))
 (common-lisp:defun make-put-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-entries failed-entry-count)
   (common-lisp:apply #'common-lisp:make-instance 'put-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entries))
      (common-lisp:list
       (common-lisp:cons "FailedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-targets-result-entry common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %put-targets-result-entry-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %put-targets-result-entry-error-code :initform
                         common-lisp:nil)
                        (target-id :initarg :target-id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %put-targets-result-entry-target-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-targets-result-entry 'make-put-targets-result-entry))
 (common-lisp:defun make-put-targets-result-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code target-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-targets-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-targets-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype put-targets-result-entry-list ()
   '(trivial-types:proper-list put-targets-result-entry))
 (common-lisp:defun |make-put-targets-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-targets-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-string-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-string-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-string-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype query-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-data-parameters common-lisp:nil
                       ((sqls :initarg :sqls :type
                         (common-lisp:or sqls common-lisp:null) :accessor
                         %redshift-data-parameters-sqls :initform
                         common-lisp:nil)
                        (with-event :initarg :with-event :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %redshift-data-parameters-with-event :initform
                         common-lisp:nil)
                        (statement-name :initarg :statement-name :type
                         (common-lisp:or statement-name common-lisp:null)
                         :accessor %redshift-data-parameters-statement-name
                         :initform common-lisp:nil)
                        (sql :initarg :sql :type
                         (common-lisp:or sql common-lisp:null) :accessor
                         %redshift-data-parameters-sql :initform
                         common-lisp:nil)
                        (db-user :initarg :db-user :type
                         (common-lisp:or db-user common-lisp:null) :accessor
                         %redshift-data-parameters-db-user :initform
                         common-lisp:nil)
                        (database :initarg :database :type
                         (common-lisp:or database common-lisp:null) :accessor
                         %redshift-data-parameters-database :initform
                         (common-lisp:error ":database is required"))
                        (secret-manager-arn :initarg :secret-manager-arn :type
                         (common-lisp:or redshift-secret-manager-arn
                                         common-lisp:null)
                         :accessor %redshift-data-parameters-secret-manager-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'redshift-data-parameters 'make-redshift-data-parameters))
 (common-lisp:defun make-redshift-data-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sqls with-event statement-name sql
                     db-user database secret-manager-arn)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-data-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-manager-arn))
      (common-lisp:list
       (common-lisp:cons "SecretManagerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "Sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-event))
      (common-lisp:list
       (common-lisp:cons "WithEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqls))
      (common-lisp:list
       (common-lisp:cons "Sqls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-parameters))
   common-lisp:nil))
(common-lisp:deftype redshift-secret-manager-arn () 'common-lisp:string)
(common-lisp:deftype reference-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-permission-request common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or non-partner-event-bus-name
                                         common-lisp:null)
                         :accessor %remove-permission-request-event-bus-name
                         :initform common-lisp:nil)
                        (remove-all-permissions :initarg
                         :remove-all-permissions :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %remove-permission-request-remove-all-permissions
                         :initform common-lisp:nil)
                        (statement-id :initarg :statement-id :type
                         (common-lisp:or statement-id common-lisp:null)
                         :accessor %remove-permission-request-statement-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defun make-remove-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name remove-all-permissions
                     statement-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "StatementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-all-permissions))
      (common-lisp:list
       (common-lisp:cons "RemoveAllPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-targets-request common-lisp:nil
                       ((force :initarg :force :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %remove-targets-request-force :initform
                         common-lisp:nil)
                        (ids :initarg :ids :type
                         (common-lisp:or target-id-list common-lisp:null)
                         :accessor %remove-targets-request-ids :initform
                         (common-lisp:error ":ids is required"))
                        (event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name-or-arn
                                         common-lisp:null)
                         :accessor %remove-targets-request-event-bus-name
                         :initform common-lisp:nil)
                        (rule :initarg :rule :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %remove-targets-request-rule :initform
                         (common-lisp:error ":rule is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-targets-request 'make-remove-targets-request))
 (common-lisp:defun make-remove-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force ids event-bus-name rule)
   (common-lisp:apply #'common-lisp:make-instance 'remove-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "Ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-targets-response common-lisp:nil
                       ((failed-entries :initarg :failed-entries :type
                         (common-lisp:or remove-targets-result-entry-list
                                         common-lisp:null)
                         :accessor %remove-targets-response-failed-entries
                         :initform common-lisp:nil)
                        (failed-entry-count :initarg :failed-entry-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %remove-targets-response-failed-entry-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-targets-response 'make-remove-targets-response))
 (common-lisp:defun make-remove-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-entries failed-entry-count)
   (common-lisp:apply #'common-lisp:make-instance 'remove-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entry-count))
      (common-lisp:list
       (common-lisp:cons "FailedEntryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entries))
      (common-lisp:list
       (common-lisp:cons "FailedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-targets-result-entry common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %remove-targets-result-entry-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %remove-targets-result-entry-error-code :initform
                         common-lisp:nil)
                        (target-id :initarg :target-id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %remove-targets-result-entry-target-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-targets-result-entry
                    'make-remove-targets-result-entry))
 (common-lisp:defun make-remove-targets-result-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code target-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-targets-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-targets-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remove-targets-result-entry-list ()
   '(trivial-types:proper-list remove-targets-result-entry))
 (common-lisp:defun |make-remove-targets-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remove-targets-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replay common-lisp:nil
                       ((replay-end-time :initarg :replay-end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replay-replay-end-time :initform common-lisp:nil)
                        (replay-start-time :initarg :replay-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replay-replay-start-time :initform common-lisp:nil)
                        (event-last-replayed-time :initarg
                         :event-last-replayed-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replay-event-last-replayed-time :initform
                         common-lisp:nil)
                        (event-end-time :initarg :event-end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replay-event-end-time :initform common-lisp:nil)
                        (event-start-time :initarg :event-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replay-event-start-time :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or replay-state-reason common-lisp:null)
                         :accessor %replay-state-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or replay-state common-lisp:null)
                         :accessor %replay-state :initform common-lisp:nil)
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %replay-event-source-arn :initform common-lisp:nil)
                        (replay-name :initarg :replay-name :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %replay-replay-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'replay 'make-replay))
 (common-lisp:defun make-replay
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replay-end-time replay-start-time
                     event-last-replayed-time event-end-time event-start-time
                     state-reason state event-source-arn replay-name)
   (common-lisp:apply #'common-lisp:make-instance 'replay
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replay))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replay))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-name))
      (common-lisp:list
       (common-lisp:cons "ReplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-start-time))
      (common-lisp:list
       (common-lisp:cons "EventStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-end-time))
      (common-lisp:list
       (common-lisp:cons "EventEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-last-replayed-time))
      (common-lisp:list
       (common-lisp:cons "EventLastReplayedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-start-time))
      (common-lisp:list
       (common-lisp:cons "ReplayStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-end-time))
      (common-lisp:list
       (common-lisp:cons "ReplayEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replay))
   common-lisp:nil))
(common-lisp:deftype replay-arn () 'common-lisp:string)
(common-lisp:deftype replay-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replay-destination common-lisp:nil
                       ((filter-arns :initarg :filter-arns :type
                         (common-lisp:or replay-destination-filters
                                         common-lisp:null)
                         :accessor %replay-destination-filter-arns :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %replay-destination-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'replay-destination 'make-replay-destination))
 (common-lisp:defun make-replay-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-arns arn)
   (common-lisp:apply #'common-lisp:make-instance 'replay-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replay-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replay-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-arns))
      (common-lisp:list
       (common-lisp:cons "FilterArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replay-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replay-destination-filters ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-replay-destination-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replay-list () '(trivial-types:proper-list replay))
 (common-lisp:defun |make-replay-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replay))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replay-name () 'common-lisp:string)
(common-lisp:deftype replay-state () 'common-lisp:string)
(common-lisp:deftype replay-state-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-config common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or replication-state common-lisp:null)
                         :accessor %replication-config-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-config 'make-replication-config))
 (common-lisp:defun make-replication-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance 'replication-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-config))
   common-lisp:nil))
(common-lisp:deftype replication-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (events-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype retention-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass retry-policy common-lisp:nil
                       ((maximum-event-age-in-seconds :initarg
                         :maximum-event-age-in-seconds :type
                         (common-lisp:or maximum-event-age-in-seconds
                                         common-lisp:null)
                         :accessor %retry-policy-maximum-event-age-in-seconds
                         :initform common-lisp:nil)
                        (maximum-retry-attempts :initarg
                         :maximum-retry-attempts :type
                         (common-lisp:or maximum-retry-attempts
                                         common-lisp:null)
                         :accessor %retry-policy-maximum-retry-attempts
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'retry-policy 'make-retry-policy))
 (common-lisp:defun make-retry-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-event-age-in-seconds
                     maximum-retry-attempts)
   (common-lisp:apply #'common-lisp:make-instance 'retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-event-age-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumEventAgeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retry-policy))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype route () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass routing-config common-lisp:nil
                       ((failover-config :initarg :failover-config :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor %routing-config-failover-config :initform
                         (common-lisp:error ":failover-config is required"))))
 (common-lisp:export (common-lisp:list 'routing-config 'make-routing-config))
 (common-lisp:defun make-routing-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failover-config)
   (common-lisp:apply #'common-lisp:make-instance 'routing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-config))
      (common-lisp:list
       (common-lisp:cons "FailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((event-bus-name :initarg :event-bus-name :type
                         (common-lisp:or event-bus-name common-lisp:null)
                         :accessor %rule-event-bus-name :initform
                         common-lisp:nil)
                        (managed-by :initarg :managed-by :type
                         (common-lisp:or managed-by common-lisp:null) :accessor
                         %rule-managed-by :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %rule-role-arn :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %rule-schedule-expression :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or rule-description common-lisp:null)
                         :accessor %rule-description :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or rule-state common-lisp:null) :accessor
                         %rule-state :initform common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %rule-event-pattern :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %rule-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %rule-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defun make-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bus-name managed-by role-arn
                     schedule-expression description state event-pattern arn
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-by))
      (common-lisp:list
       (common-lisp:cons "ManagedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bus-name))
      (common-lisp:list
       (common-lisp:cons "EventBusName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-description () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-name-list () '(trivial-types:proper-list rule-name))
 (common-lisp:defun |make-rule-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-response-list () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rule-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-command-parameters common-lisp:nil
                       ((run-command-targets :initarg :run-command-targets
                         :type
                         (common-lisp:or run-command-targets common-lisp:null)
                         :accessor %run-command-parameters-run-command-targets
                         :initform
                         (common-lisp:error
                          ":run-command-targets is required"))))
 (common-lisp:export
  (common-lisp:list 'run-command-parameters 'make-run-command-parameters))
 (common-lisp:defun make-run-command-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key run-command-targets)
   (common-lisp:apply #'common-lisp:make-instance 'run-command-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-command-targets))
      (common-lisp:list
       (common-lisp:cons "RunCommandTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-command-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-command-target common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or run-command-target-values
                                         common-lisp:null)
                         :accessor %run-command-target-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or run-command-target-key
                                         common-lisp:null)
                         :accessor %run-command-target-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'run-command-target 'make-run-command-target))
 (common-lisp:defun make-run-command-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'run-command-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-command-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-command-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-command-target))
   common-lisp:nil))
(common-lisp:deftype run-command-target-key () 'common-lisp:string)
(common-lisp:deftype run-command-target-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype run-command-target-values ()
   '(trivial-types:proper-list run-command-target-value))
 (common-lisp:defun |make-run-command-target-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            run-command-target-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype run-command-targets ()
   '(trivial-types:proper-list run-command-target))
 (common-lisp:defun |make-run-command-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list run-command-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sage-maker-pipeline-parameter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or sage-maker-pipeline-parameter-value
                                         common-lisp:null)
                         :accessor %sage-maker-pipeline-parameter-value
                         :initform (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or sage-maker-pipeline-parameter-name
                                         common-lisp:null)
                         :accessor %sage-maker-pipeline-parameter-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'sage-maker-pipeline-parameter
                    'make-sage-maker-pipeline-parameter))
 (common-lisp:defun make-sage-maker-pipeline-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-pipeline-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sage-maker-pipeline-parameter-list ()
   '(trivial-types:proper-list sage-maker-pipeline-parameter))
 (common-lisp:defun |make-sage-maker-pipeline-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sage-maker-pipeline-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sage-maker-pipeline-parameter-name () 'common-lisp:string)
(common-lisp:deftype sage-maker-pipeline-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sage-maker-pipeline-parameters common-lisp:nil
                       ((pipeline-parameter-list :initarg
                         :pipeline-parameter-list :type
                         (common-lisp:or sage-maker-pipeline-parameter-list
                                         common-lisp:null)
                         :accessor
                         %sage-maker-pipeline-parameters-pipeline-parameter-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sage-maker-pipeline-parameters
                    'make-sage-maker-pipeline-parameters))
 (common-lisp:defun make-sage-maker-pipeline-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-parameter-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-pipeline-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-parameter-list))
      (common-lisp:list
       (common-lisp:cons "PipelineParameterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-pipeline-parameters))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass secondary common-lisp:nil
                       ((route :initarg :route :type
                         (common-lisp:or route common-lisp:null) :accessor
                         %secondary-route :initform
                         (common-lisp:error ":route is required"))))
 (common-lisp:export (common-lisp:list 'secondary 'make-secondary))
 (common-lisp:defun make-secondary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route)
   (common-lisp:apply #'common-lisp:make-instance 'secondary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input secondary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input secondary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input secondary))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-secret-arn () 'common-lisp:string)
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sqls () '(trivial-types:proper-list sql))
 (common-lisp:defun |make-sqls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sqs-parameters common-lisp:nil
                       ((message-group-id :initarg :message-group-id :type
                         (common-lisp:or message-group-id common-lisp:null)
                         :accessor %sqs-parameters-message-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sqs-parameters 'make-sqs-parameters))
 (common-lisp:defun make-sqs-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'sqs-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sqs-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sqs-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-group-id))
      (common-lisp:list
       (common-lisp:cons "MessageGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sqs-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replay-request common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or replay-destination common-lisp:null)
                         :accessor %start-replay-request-destination :initform
                         (common-lisp:error ":destination is required"))
                        (event-end-time :initarg :event-end-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-replay-request-event-end-time :initform
                         (common-lisp:error ":event-end-time is required"))
                        (event-start-time :initarg :event-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-replay-request-event-start-time :initform
                         (common-lisp:error ":event-start-time is required"))
                        (event-source-arn :initarg :event-source-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-replay-request-event-source-arn :initform
                         (common-lisp:error ":event-source-arn is required"))
                        (description :initarg :description :type
                         (common-lisp:or replay-description common-lisp:null)
                         :accessor %start-replay-request-description :initform
                         common-lisp:nil)
                        (replay-name :initarg :replay-name :type
                         (common-lisp:or replay-name common-lisp:null)
                         :accessor %start-replay-request-replay-name :initform
                         (common-lisp:error ":replay-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-replay-request 'make-start-replay-request))
 (common-lisp:defun make-start-replay-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination event-end-time
                     event-start-time event-source-arn description replay-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-replay-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-replay-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-replay-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-name))
      (common-lisp:list
       (common-lisp:cons "ReplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source-arn))
      (common-lisp:list
       (common-lisp:cons "EventSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-start-time))
      (common-lisp:list
       (common-lisp:cons "EventStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-end-time))
      (common-lisp:list
       (common-lisp:cons "EventEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-replay-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replay-response common-lisp:nil
                       ((replay-start-time :initarg :replay-start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-replay-response-replay-start-time :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or replay-state-reason common-lisp:null)
                         :accessor %start-replay-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or replay-state common-lisp:null)
                         :accessor %start-replay-response-state :initform
                         common-lisp:nil)
                        (replay-arn :initarg :replay-arn :type
                         (common-lisp:or replay-arn common-lisp:null) :accessor
                         %start-replay-response-replay-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-replay-response 'make-start-replay-response))
 (common-lisp:defun make-start-replay-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replay-start-time state-reason state
                     replay-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-replay-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replay-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replay-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-arn))
      (common-lisp:list
       (common-lisp:cons "ReplayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-start-time))
      (common-lisp:list
       (common-lisp:cons "ReplayStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replay-response))
   common-lisp:nil))
(common-lisp:deftype statement-id () 'common-lisp:string)
(common-lisp:deftype statement-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target common-lisp:nil
                       ((retry-policy :initarg :retry-policy :type
                         (common-lisp:or retry-policy common-lisp:null)
                         :accessor %target-retry-policy :initform
                         common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or dead-letter-config common-lisp:null)
                         :accessor %target-dead-letter-config :initform
                         common-lisp:nil)
                        (sage-maker-pipeline-parameters :initarg
                         :sage-maker-pipeline-parameters :type
                         (common-lisp:or sage-maker-pipeline-parameters
                                         common-lisp:null)
                         :accessor %target-sage-maker-pipeline-parameters
                         :initform common-lisp:nil)
                        (redshift-data-parameters :initarg
                         :redshift-data-parameters :type
                         (common-lisp:or redshift-data-parameters
                                         common-lisp:null)
                         :accessor %target-redshift-data-parameters :initform
                         common-lisp:nil)
                        (http-parameters :initarg :http-parameters :type
                         (common-lisp:or http-parameters common-lisp:null)
                         :accessor %target-http-parameters :initform
                         common-lisp:nil)
                        (sqs-parameters :initarg :sqs-parameters :type
                         (common-lisp:or sqs-parameters common-lisp:null)
                         :accessor %target-sqs-parameters :initform
                         common-lisp:nil)
                        (batch-parameters :initarg :batch-parameters :type
                         (common-lisp:or batch-parameters common-lisp:null)
                         :accessor %target-batch-parameters :initform
                         common-lisp:nil)
                        (ecs-parameters :initarg :ecs-parameters :type
                         (common-lisp:or ecs-parameters common-lisp:null)
                         :accessor %target-ecs-parameters :initform
                         common-lisp:nil)
                        (run-command-parameters :initarg
                         :run-command-parameters :type
                         (common-lisp:or run-command-parameters
                                         common-lisp:null)
                         :accessor %target-run-command-parameters :initform
                         common-lisp:nil)
                        (kinesis-parameters :initarg :kinesis-parameters :type
                         (common-lisp:or kinesis-parameters common-lisp:null)
                         :accessor %target-kinesis-parameters :initform
                         common-lisp:nil)
                        (input-transformer :initarg :input-transformer :type
                         (common-lisp:or input-transformer common-lisp:null)
                         :accessor %target-input-transformer :initform
                         common-lisp:nil)
                        (input-path :initarg :input-path :type
                         (common-lisp:or target-input-path common-lisp:null)
                         :accessor %target-input-path :initform
                         common-lisp:nil)
                        (input :initarg :input :type
                         (common-lisp:or target-input common-lisp:null)
                         :accessor %target-input :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %target-role-arn :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or target-arn common-lisp:null) :accessor
                         %target-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %target-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defun make-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retry-policy dead-letter-config
                     sage-maker-pipeline-parameters redshift-data-parameters
                     http-parameters sqs-parameters batch-parameters
                     ecs-parameters run-command-parameters kinesis-parameters
                     input-transformer input-path input role-arn arn id)
   (common-lisp:apply #'common-lisp:make-instance 'target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-path))
      (common-lisp:list
       (common-lisp:cons "InputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-transformer))
      (common-lisp:list
       (common-lisp:cons "InputTransformer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-parameters))
      (common-lisp:list
       (common-lisp:cons "KinesisParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'run-command-parameters))
      (common-lisp:list
       (common-lisp:cons "RunCommandParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-parameters))
      (common-lisp:list
       (common-lisp:cons "EcsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-parameters))
      (common-lisp:list
       (common-lisp:cons "BatchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-parameters))
      (common-lisp:list
       (common-lisp:cons "SqsParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-parameters))
      (common-lisp:list
       (common-lisp:cons "HttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-data-parameters))
      (common-lisp:list
       (common-lisp:cons "RedshiftDataParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "SageMakerPipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "RetryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:deftype target-arn () 'common-lisp:string)
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-id-list () '(trivial-types:proper-list target-id))
 (common-lisp:defun |make-target-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-input () 'common-lisp:string)
(common-lisp:deftype target-input-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-list () '(trivial-types:proper-list target))
 (common-lisp:defun |make-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-partition-key-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-event-pattern-request common-lisp:nil
                       ((event :initarg :event :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %test-event-pattern-request-event :initform
                         (common-lisp:error ":event is required"))
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %test-event-pattern-request-event-pattern
                         :initform
                         (common-lisp:error ":event-pattern is required"))))
 (common-lisp:export
  (common-lisp:list 'test-event-pattern-request
                    'make-test-event-pattern-request))
 (common-lisp:defun make-test-event-pattern-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event event-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'test-event-pattern-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-event-pattern-response common-lisp:nil
                       ((result :initarg :result :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %test-event-pattern-response-result :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-event-pattern-response
                    'make-test-event-pattern-response))
 (common-lisp:defun make-test-event-pattern-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result)
   (common-lisp:apply #'common-lisp:make-instance 'test-event-pattern-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-event-pattern-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype trace-header () 'common-lisp:string)
(common-lisp:deftype transformer-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transformer-paths () 'common-lisp:hash-table)
 (common-lisp:defun |make-transformer-paths|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-destination-request common-lisp:nil
                       ((invocation-rate-limit-per-second :initarg
                         :invocation-rate-limit-per-second :type
                         (common-lisp:or
                          api-destination-invocation-rate-limit-per-second
                          common-lisp:null)
                         :accessor
                         %update-api-destination-request-invocation-rate-limit-per-second
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or api-destination-http-method
                                         common-lisp:null)
                         :accessor %update-api-destination-request-http-method
                         :initform common-lisp:nil)
                        (invocation-endpoint :initarg :invocation-endpoint
                         :type (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %update-api-destination-request-invocation-endpoint
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %update-api-destination-request-connection-arn
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or api-destination-description
                                         common-lisp:null)
                         :accessor %update-api-destination-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or api-destination-name common-lisp:null)
                         :accessor %update-api-destination-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-api-destination-request
                    'make-update-api-destination-request))
 (common-lisp:defun make-update-api-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-rate-limit-per-second
                     http-method invocation-endpoint connection-arn description
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-api-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-endpoint))
      (common-lisp:list
       (common-lisp:cons "InvocationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-rate-limit-per-second))
      (common-lisp:list
       (common-lisp:cons "InvocationRateLimitPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-api-destination-response common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-api-destination-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-api-destination-response-creation-time
                         :initform common-lisp:nil)
                        (api-destination-state :initarg :api-destination-state
                         :type
                         (common-lisp:or api-destination-state
                                         common-lisp:null)
                         :accessor
                         %update-api-destination-response-api-destination-state
                         :initform common-lisp:nil)
                        (api-destination-arn :initarg :api-destination-arn
                         :type
                         (common-lisp:or api-destination-arn common-lisp:null)
                         :accessor
                         %update-api-destination-response-api-destination-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-api-destination-response
                    'make-update-api-destination-response))
 (common-lisp:defun make-update-api-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time creation-time
                     api-destination-state api-destination-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-api-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-destination-arn))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-destination-state))
      (common-lisp:list
       (common-lisp:cons "ApiDestinationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-api-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-archive-request common-lisp:nil
                       ((retention-days :initarg :retention-days :type
                         (common-lisp:or retention-days common-lisp:null)
                         :accessor %update-archive-request-retention-days
                         :initform common-lisp:nil)
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %update-archive-request-event-pattern
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or archive-description common-lisp:null)
                         :accessor %update-archive-request-description
                         :initform common-lisp:nil)
                        (archive-name :initarg :archive-name :type
                         (common-lisp:or archive-name common-lisp:null)
                         :accessor %update-archive-request-archive-name
                         :initform
                         (common-lisp:error ":archive-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-archive-request 'make-update-archive-request))
 (common-lisp:defun make-update-archive-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention-days event-pattern description
                     archive-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-archive-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-name))
      (common-lisp:list
       (common-lisp:cons "ArchiveName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-days))
      (common-lisp:list
       (common-lisp:cons "RetentionDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-archive-response common-lisp:nil
                       ((creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-archive-response-creation-time :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or archive-state-reason common-lisp:null)
                         :accessor %update-archive-response-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or archive-state common-lisp:null)
                         :accessor %update-archive-response-state :initform
                         common-lisp:nil)
                        (archive-arn :initarg :archive-arn :type
                         (common-lisp:or archive-arn common-lisp:null)
                         :accessor %update-archive-response-archive-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-archive-response 'make-update-archive-response))
 (common-lisp:defun make-update-archive-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time state-reason state
                     archive-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-archive-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-arn))
      (common-lisp:list
       (common-lisp:cons "ArchiveArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-api-key-auth-request-parameters
                       common-lisp:nil
                       ((api-key-value :initarg :api-key-value :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-api-key-auth-request-parameters-api-key-value
                         :initform common-lisp:nil)
                        (api-key-name :initarg :api-key-name :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-api-key-auth-request-parameters-api-key-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-api-key-auth-request-parameters
                    'make-update-connection-api-key-auth-request-parameters))
 (common-lisp:defun make-update-connection-api-key-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-key-value api-key-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-api-key-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-api-key-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-api-key-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-name))
      (common-lisp:list
       (common-lisp:cons "ApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-value))
      (common-lisp:list
       (common-lisp:cons "ApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-api-key-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-auth-request-parameters
                       common-lisp:nil
                       ((invocation-http-parameters :initarg
                         :invocation-http-parameters :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-auth-request-parameters-invocation-http-parameters
                         :initform common-lisp:nil)
                        (api-key-auth-parameters :initarg
                         :api-key-auth-parameters :type
                         (common-lisp:or
                          update-connection-api-key-auth-request-parameters
                          common-lisp:null)
                         :accessor
                         %update-connection-auth-request-parameters-api-key-auth-parameters
                         :initform common-lisp:nil)
                        (oauth-parameters :initarg :oauth-parameters :type
                         (common-lisp:or
                          update-connection-oauth-request-parameters
                          common-lisp:null)
                         :accessor
                         %update-connection-auth-request-parameters-oauth-parameters
                         :initform common-lisp:nil)
                        (basic-auth-parameters :initarg :basic-auth-parameters
                         :type
                         (common-lisp:or
                          update-connection-basic-auth-request-parameters
                          common-lisp:null)
                         :accessor
                         %update-connection-auth-request-parameters-basic-auth-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-auth-request-parameters
                    'make-update-connection-auth-request-parameters))
 (common-lisp:defun make-update-connection-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-http-parameters
                     api-key-auth-parameters oauth-parameters
                     basic-auth-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "BasicAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-key-auth-parameters))
      (common-lisp:list
       (common-lisp:cons "ApiKeyAuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocation-http-parameters))
      (common-lisp:list
       (common-lisp:cons "InvocationHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-basic-auth-request-parameters
                       common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-basic-auth-request-parameters-password
                         :initform common-lisp:nil)
                        (username :initarg :username :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-basic-auth-request-parameters-username
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-basic-auth-request-parameters
                    'make-update-connection-basic-auth-request-parameters))
 (common-lisp:defun make-update-connection-basic-auth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password username)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-basic-auth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-basic-auth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-basic-auth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-basic-auth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-oauth-client-request-parameters
                       common-lisp:nil
                       ((client-secret :initarg :client-secret :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-oauth-client-request-parameters-client-secret
                         :initform common-lisp:nil)
                        (client-id :initarg :client-id :type
                         (common-lisp:or auth-header-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-oauth-client-request-parameters-client-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-oauth-client-request-parameters
                    'make-update-connection-oauth-client-request-parameters))
 (common-lisp:defun make-update-connection-oauth-client-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-secret client-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-oauth-client-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-client-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-client-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-client-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-oauth-request-parameters
                       common-lisp:nil
                       ((oauth-http-parameters :initarg :oauth-http-parameters
                         :type
                         (common-lisp:or connection-http-parameters
                                         common-lisp:null)
                         :accessor
                         %update-connection-oauth-request-parameters-oauth-http-parameters
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or connection-oauth-http-method
                                         common-lisp:null)
                         :accessor
                         %update-connection-oauth-request-parameters-http-method
                         :initform common-lisp:nil)
                        (authorization-endpoint :initarg
                         :authorization-endpoint :type
                         (common-lisp:or https-endpoint common-lisp:null)
                         :accessor
                         %update-connection-oauth-request-parameters-authorization-endpoint
                         :initform common-lisp:nil)
                        (client-parameters :initarg :client-parameters :type
                         (common-lisp:or
                          update-connection-oauth-client-request-parameters
                          common-lisp:null)
                         :accessor
                         %update-connection-oauth-request-parameters-client-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-oauth-request-parameters
                    'make-update-connection-oauth-request-parameters))
 (common-lisp:defun make-update-connection-oauth-request-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oauth-http-parameters http-method
                     authorization-endpoint client-parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-oauth-request-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-parameters))
      (common-lisp:list
       (common-lisp:cons "ClientParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth-http-parameters))
      (common-lisp:list
       (common-lisp:cons "OAuthHttpParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-oauth-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-request common-lisp:nil
                       ((auth-parameters :initarg :auth-parameters :type
                         (common-lisp:or
                          update-connection-auth-request-parameters
                          common-lisp:null)
                         :accessor %update-connection-request-auth-parameters
                         :initform common-lisp:nil)
                        (authorization-type :initarg :authorization-type :type
                         (common-lisp:or connection-authorization-type
                                         common-lisp:null)
                         :accessor
                         %update-connection-request-authorization-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or connection-description
                                         common-lisp:null)
                         :accessor %update-connection-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %update-connection-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defun make-update-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-parameters authorization-type
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-type))
      (common-lisp:list
       (common-lisp:cons "AuthorizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "AuthParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-response common-lisp:nil
                       ((last-authorized-time :initarg :last-authorized-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %update-connection-response-last-authorized-time
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-connection-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-connection-response-creation-time :initform
                         common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor %update-connection-response-connection-state
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %update-connection-response-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-response
                    'make-update-connection-response))
 (common-lisp:defun make-update-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-authorized-time last-modified-time
                     creation-time connection-state connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authorized-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthorizedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-endpoint-request common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %update-endpoint-request-role-arn :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %update-endpoint-request-event-buses
                         :initform common-lisp:nil)
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor %update-endpoint-request-replication-config
                         :initform common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %update-endpoint-request-routing-config
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or endpoint-description common-lisp:null)
                         :accessor %update-endpoint-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %update-endpoint-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-request 'make-update-endpoint-request))
 (common-lisp:defun make-update-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn event-buses replication-config
                     routing-config description name)
   (common-lisp:apply #'common-lisp:make-instance 'update-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-endpoint-response common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or endpoint-state common-lisp:null)
                         :accessor %update-endpoint-response-state :initform
                         common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or endpoint-url common-lisp:null)
                         :accessor %update-endpoint-response-endpoint-url
                         :initform common-lisp:nil)
                        (endpoint-id :initarg :endpoint-id :type
                         (common-lisp:or endpoint-id common-lisp:null)
                         :accessor %update-endpoint-response-endpoint-id
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %update-endpoint-response-role-arn :initform
                         common-lisp:nil)
                        (event-buses :initarg :event-buses :type
                         (common-lisp:or endpoint-event-bus-list
                                         common-lisp:null)
                         :accessor %update-endpoint-response-event-buses
                         :initform common-lisp:nil)
                        (replication-config :initarg :replication-config :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor %update-endpoint-response-replication-config
                         :initform common-lisp:nil)
                        (routing-config :initarg :routing-config :type
                         (common-lisp:or routing-config common-lisp:null)
                         :accessor %update-endpoint-response-routing-config
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or endpoint-arn common-lisp:null)
                         :accessor %update-endpoint-response-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or endpoint-name common-lisp:null)
                         :accessor %update-endpoint-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-response 'make-update-endpoint-response))
 (common-lisp:defun make-update-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state endpoint-url endpoint-id role-arn
                     event-buses replication-config routing-config arn name)
   (common-lisp:apply #'common-lisp:make-instance 'update-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-config))
      (common-lisp:list
       (common-lisp:cons "RoutingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-buses))
      (common-lisp:list
       (common-lisp:cons "EventBuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-id))
      (common-lisp:list
       (common-lisp:cons "EndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun activate-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-event-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ActivateEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'activate-event-source))
(common-lisp:progn
 (common-lisp:defun cancel-replay
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replay-name)
   (common-lisp:declare (common-lisp:ignorable replay-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-replay-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelReplay"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-replay))
(common-lisp:progn
 (common-lisp:defun create-api-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description connection-arn
                     invocation-endpoint http-method
                     invocation-rate-limit-per-second)
   (common-lisp:declare
    (common-lisp:ignorable name description connection-arn invocation-endpoint
     http-method invocation-rate-limit-per-second))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-api-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApiDestination"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-api-destination))
(common-lisp:progn
 (common-lisp:defun create-archive
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key archive-name event-source-arn description
                     event-pattern retention-days)
   (common-lisp:declare
    (common-lisp:ignorable archive-name event-source-arn description
     event-pattern retention-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-archive-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateArchive"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-archive))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description authorization-type
                     auth-parameters)
   (common-lisp:declare
    (common-lisp:ignorable name description authorization-type
     auth-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConnection"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description routing-config
                     replication-config event-buses role-arn)
   (common-lisp:declare
    (common-lisp:ignorable name description routing-config replication-config
     event-buses role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateEndpoint"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-endpoint))
(common-lisp:progn
 (common-lisp:defun create-event-bus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-source-name tags)
   (common-lisp:declare (common-lisp:ignorable name event-source-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-bus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateEventBus"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-bus))
(common-lisp:progn
 (common-lisp:defun create-partner-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name account)
   (common-lisp:declare (common-lisp:ignorable name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-partner-event-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePartnerEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partner-event-source))
(common-lisp:progn
 (common-lisp:defun deactivate-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-event-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeactivateEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-event-source))
(common-lisp:progn
 (common-lisp:defun deauthorize-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deauthorize-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeauthorizeConnection"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deauthorize-connection))
(common-lisp:progn
 (common-lisp:defun delete-api-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-api-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApiDestination"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-api-destination))
(common-lisp:progn
 (common-lisp:defun delete-archive
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key archive-name)
   (common-lisp:declare (common-lisp:ignorable archive-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-archive-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteArchive"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-archive))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConnection"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEndpoint"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-event-bus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-bus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEventBus"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-bus))
(common-lisp:progn
 (common-lisp:defun delete-partner-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name account)
   (common-lisp:declare (common-lisp:ignorable name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-partner-event-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePartnerEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-partner-event-source))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-bus-name force)
   (common-lisp:declare (common-lisp:ignorable name event-bus-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun describe-api-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-api-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeApiDestination"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-api-destination))
(common-lisp:progn
 (common-lisp:defun describe-archive
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key archive-name)
   (common-lisp:declare (common-lisp:ignorable archive-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-archive-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeArchive"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-archive))
(common-lisp:progn
 (common-lisp:defun describe-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConnection"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connection))
(common-lisp:progn
 (common-lisp:defun describe-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name home-region)
   (common-lisp:declare (common-lisp:ignorable name home-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEndpoint"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-event-bus
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-event-bus-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEventBus"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-event-bus))
(common-lisp:progn
 (common-lisp:defun describe-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-event-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-event-source))
(common-lisp:progn
 (common-lisp:defun describe-partner-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-partner-event-source-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePartnerEventSource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-partner-event-source))
(common-lisp:progn
 (common-lisp:defun describe-replay
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replay-name)
   (common-lisp:declare (common-lisp:ignorable replay-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-replay-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeReplay"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-replay))
(common-lisp:progn
 (common-lisp:defun describe-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-bus-name)
   (common-lisp:declare (common-lisp:ignorable name event-bus-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-rule))
(common-lisp:progn
 (common-lisp:defun disable-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-bus-name)
   (common-lisp:declare (common-lisp:ignorable name event-bus-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-rule))
(common-lisp:progn
 (common-lisp:defun enable-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name event-bus-name)
   (common-lisp:declare (common-lisp:ignorable name event-bus-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-rule))
(common-lisp:progn
 (common-lisp:defun list-api-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix connection-arn next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix connection-arn next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-api-destinations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApiDestinations"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-api-destinations))
(common-lisp:progn
 (common-lisp:defun list-archives
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix event-source-arn state
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix event-source-arn state next-token
     limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-archives-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListArchives"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-archives))
(common-lisp:progn
 (common-lisp:defun list-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix connection-state next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix connection-state next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListConnections"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connections))
(common-lisp:progn
 (common-lisp:defun list-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix home-region next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix home-region next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEndpoints"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-endpoints))
(common-lisp:progn
 (common-lisp:defun list-event-buses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix next-token limit)
   (common-lisp:declare (common-lisp:ignorable name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-buses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEventBuses"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-buses))
(common-lisp:progn
 (common-lisp:defun list-event-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix next-token limit)
   (common-lisp:declare (common-lisp:ignorable name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEventSources"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-sources))
(common-lisp:progn
 (common-lisp:defun list-partner-event-source-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-source-name next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable event-source-name next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-partner-event-source-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPartnerEventSourceAccounts"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-partner-event-source-accounts))
(common-lisp:progn
 (common-lisp:defun list-partner-event-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix next-token limit)
   (common-lisp:declare (common-lisp:ignorable name-prefix next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-partner-event-sources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPartnerEventSources"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-partner-event-sources))
(common-lisp:progn
 (common-lisp:defun list-replays
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix state event-source-arn
                     next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix state event-source-arn next-token
     limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-replays-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListReplays"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-replays))
(common-lisp:progn
 (common-lisp:defun list-rule-names-by-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-arn event-bus-name next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable target-arn event-bus-name next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-rule-names-by-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRuleNamesByTarget"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rule-names-by-target))
(common-lisp:progn
 (common-lisp:defun list-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-prefix event-bus-name next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable name-prefix event-bus-name next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRules"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-targets-by-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule event-bus-name next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable rule event-bus-name next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-by-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTargetsByRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-targets-by-rule))
(common-lisp:progn
 (common-lisp:defun put-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries endpoint-id)
   (common-lisp:declare (common-lisp:ignorable entries endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutEvents"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-events))
(common-lisp:progn
 (common-lisp:defun put-partner-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-partner-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutPartnerEvents"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-partner-events))
(common-lisp:progn
 (common-lisp:defun put-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-bus-name action principal
                     statement-id condition policy)
   (common-lisp:declare
    (common-lisp:ignorable event-bus-name action principal statement-id
     condition policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutPermission"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-permission))
(common-lisp:progn
 (common-lisp:defun put-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name schedule-expression event-pattern
                     state description role-arn tags event-bus-name)
   (common-lisp:declare
    (common-lisp:ignorable name schedule-expression event-pattern state
     description role-arn tags event-bus-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutRule"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-rule))
(common-lisp:progn
 (common-lisp:defun put-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule event-bus-name targets)
   (common-lisp:declare (common-lisp:ignorable rule event-bus-name targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutTargets"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-targets))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key statement-id remove-all-permissions
                     event-bus-name)
   (common-lisp:declare
    (common-lisp:ignorable statement-id remove-all-permissions event-bus-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemovePermission"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun remove-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule event-bus-name ids force)
   (common-lisp:declare (common-lisp:ignorable rule event-bus-name ids force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTargets"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-targets))
(common-lisp:progn
 (common-lisp:defun start-replay
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replay-name description event-source-arn
                     event-start-time event-end-time destination)
   (common-lisp:declare
    (common-lisp:ignorable replay-name description event-source-arn
     event-start-time event-end-time destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-replay-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartReplay"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-replay))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-event-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-pattern event)
   (common-lisp:declare (common-lisp:ignorable event-pattern event))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-event-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TestEventPattern"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-event-pattern))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-api-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description connection-arn
                     invocation-endpoint http-method
                     invocation-rate-limit-per-second)
   (common-lisp:declare
    (common-lisp:ignorable name description connection-arn invocation-endpoint
     http-method invocation-rate-limit-per-second))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-api-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApiDestination"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-api-destination))
(common-lisp:progn
 (common-lisp:defun update-archive
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key archive-name description event-pattern
                     retention-days)
   (common-lisp:declare
    (common-lisp:ignorable archive-name description event-pattern
     retention-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-archive-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateArchive"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-archive))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description authorization-type
                     auth-parameters)
   (common-lisp:declare
    (common-lisp:ignorable name description authorization-type
     auth-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConnection"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description routing-config
                     replication-config event-buses role-arn)
   (common-lisp:declare
    (common-lisp:ignorable name description routing-config replication-config
     event-buses role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'events-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateEndpoint"
                                                        "2015-10-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint))
