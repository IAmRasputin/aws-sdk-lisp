;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ecs/api
  (:use)
  (:nicknames #:aws/ecs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ecs/api)
(common-lisp:progn
 (common-lisp:defclass ecs-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ecs" :protocol :json))
 (common-lisp:export 'ecs-request))
(common-lisp:progn
 (common-lisp:define-condition ecs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ecs-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AttributeLimitExceededException" . attribute-limit-exceeded-exception)
    ("BlockedException" . blocked-exception)
    ("ClientException" . client-exception)
    ("ClusterContainsContainerInstancesException"
     . cluster-contains-container-instances-exception)
    ("ClusterContainsServicesException" . cluster-contains-services-exception)
    ("ClusterContainsTasksException" . cluster-contains-tasks-exception)
    ("ClusterNotFoundException" . cluster-not-found-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MissingVersionException" . missing-version-exception)
    ("NamespaceNotFoundException" . namespace-not-found-exception)
    ("NoUpdateAvailableException" . no-update-available-exception)
    ("PlatformTaskDefinitionIncompatibilityException"
     . platform-task-definition-incompatibility-exception)
    ("PlatformUnknownException" . platform-unknown-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerException" . server-exception)
    ("ServiceNotActiveException" . service-not-active-exception)
    ("ServiceNotFoundException" . service-not-found-exception)
    ("TargetNotConnectedException" . target-not-connected-exception)
    ("TargetNotFoundException" . target-not-found-exception)
    ("TaskSetNotFoundException" . task-set-not-found-exception)
    ("UnsupportedFeatureException" . unsupported-feature-exception)
    ("UpdateInProgressException" . update-in-progress-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:deftype agent-update-status () 'common-lisp:string)
(common-lisp:deftype application-protocol () 'common-lisp:string)
(common-lisp:deftype assign-public-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachment common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or attachment-details common-lisp:null)
                         :accessor %attachment-details :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attachment-status :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attachment-type :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attachment-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attachment 'make-attachment))
 (common-lisp:defun make-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details status type id)
   (common-lisp:apply #'common-lisp:make-instance 'attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-details ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-attachment-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attachment-state-change common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attachment-state-change-status :initform
                         (common-lisp:error ":status is required"))
                        (attachment-arn :initarg :|attachmentArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attachment-state-change-attachment-arn :initform
                         (common-lisp:error ":attachmentarn is required"))))
 (common-lisp:export
  (common-lisp:list 'attachment-state-change 'make-attachment-state-change))
 (common-lisp:defun make-attachment-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status attachment-arn)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-arn))
      (common-lisp:list
       (common-lisp:cons "attachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attachment-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-state-changes ()
   '(trivial-types:proper-list attachment-state-change))
 (common-lisp:defun |make-attachment-state-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attachments () '(trivial-types:proper-list attachment))
 (common-lisp:defun |make-attachments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((target-id :initarg :|targetId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attribute-target-id :initform common-lisp:nil)
                        (target-type :initarg :|targetType| :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %attribute-target-type :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attribute-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %attribute-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defun make-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-id target-type value name)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "targetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition attribute-limit-exceeded-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'attribute-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group-provider common-lisp:nil
                       ((managed-termination-protection :initarg
                         :|managedTerminationProtection| :type
                         (common-lisp:or managed-termination-protection
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-group-provider-managed-termination-protection
                         :initform common-lisp:nil)
                        (managed-scaling :initarg :|managedScaling| :type
                         (common-lisp:or managed-scaling common-lisp:null)
                         :accessor %auto-scaling-group-provider-managed-scaling
                         :initform common-lisp:nil)
                        (auto-scaling-group-arn :initarg :|autoScalingGroupArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %auto-scaling-group-provider-auto-scaling-group-arn
                         :initform
                         (common-lisp:error
                          ":autoscalinggrouparn is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-provider
                    'make-auto-scaling-group-provider))
 (common-lisp:defun make-auto-scaling-group-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-termination-protection
                     managed-scaling auto-scaling-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-group-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-arn))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-scaling))
      (common-lisp:list
       (common-lisp:cons "managedScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-termination-protection))
      (common-lisp:list
       (common-lisp:cons "managedTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-group-provider-update common-lisp:nil
                       ((managed-termination-protection :initarg
                         :|managedTerminationProtection| :type
                         (common-lisp:or managed-termination-protection
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-group-provider-update-managed-termination-protection
                         :initform common-lisp:nil)
                        (managed-scaling :initarg :|managedScaling| :type
                         (common-lisp:or managed-scaling common-lisp:null)
                         :accessor
                         %auto-scaling-group-provider-update-managed-scaling
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-group-provider-update
                    'make-auto-scaling-group-provider-update))
 (common-lisp:defun make-auto-scaling-group-provider-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-termination-protection
                     managed-scaling)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-group-provider-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-scaling))
      (common-lisp:list
       (common-lisp:cons "managedScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managed-termination-protection))
      (common-lisp:list
       (common-lisp:cons "managedTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-group-provider-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-vpc-configuration common-lisp:nil
                       ((assign-public-ip :initarg :|assignPublicIp| :type
                         (common-lisp:or assign-public-ip common-lisp:null)
                         :accessor %aws-vpc-configuration-assign-public-ip
                         :initform common-lisp:nil)
                        (security-groups :initarg :|securityGroups| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-vpc-configuration-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :|subnets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-vpc-configuration-subnets :initform
                         (common-lisp:error ":subnets is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-vpc-configuration 'make-aws-vpc-configuration))
 (common-lisp:defun make-aws-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assign-public-ip security-groups subnets)
   (common-lisp:apply #'common-lisp:make-instance 'aws-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "assignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition blocked-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blocked-exception)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype cpuarchitecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass capacity-provider common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %capacity-provider-tags :initform common-lisp:nil)
                        (update-status-reason :initarg :|updateStatusReason|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %capacity-provider-update-status-reason
                         :initform common-lisp:nil)
                        (update-status :initarg :|updateStatus| :type
                         (common-lisp:or capacity-provider-update-status
                                         common-lisp:null)
                         :accessor %capacity-provider-update-status :initform
                         common-lisp:nil)
                        (auto-scaling-group-provider :initarg
                         :|autoScalingGroupProvider| :type
                         (common-lisp:or auto-scaling-group-provider
                                         common-lisp:null)
                         :accessor
                         %capacity-provider-auto-scaling-group-provider
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or capacity-provider-status
                                         common-lisp:null)
                         :accessor %capacity-provider-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %capacity-provider-name :initform common-lisp:nil)
                        (capacity-provider-arn :initarg :|capacityProviderArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %capacity-provider-capacity-provider-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'capacity-provider 'make-capacity-provider))
 (common-lisp:defun make-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags update-status-reason update-status
                     auto-scaling-group-provider status name
                     capacity-provider-arn)
   (common-lisp:apply #'common-lisp:make-instance 'capacity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-arn))
      (common-lisp:list
       (common-lisp:cons "capacityProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "updateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-status-reason))
      (common-lisp:list
       (common-lisp:cons "updateStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-provider))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-field-list ()
   '(trivial-types:proper-list capacity-provider-field))
 (common-lisp:defun |make-capacity-provider-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-provider-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capacity-provider-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-provider-strategy ()
   '(trivial-types:proper-list capacity-provider-strategy-item))
 (common-lisp:defun |make-capacity-provider-strategy|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capacity-provider-strategy-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass capacity-provider-strategy-item common-lisp:nil
                       ((base :initarg :|base| :type
                         (common-lisp:or capacity-provider-strategy-item-base
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-base
                         :initform common-lisp:nil)
                        (weight :initarg :|weight| :type
                         (common-lisp:or capacity-provider-strategy-item-weight
                                         common-lisp:null)
                         :accessor %capacity-provider-strategy-item-weight
                         :initform common-lisp:nil)
                        (capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %capacity-provider-strategy-item-capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required"))))
 (common-lisp:export
  (common-lisp:list 'capacity-provider-strategy-item
                    'make-capacity-provider-strategy-item))
 (common-lisp:defun make-capacity-provider-strategy-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key base weight capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'capacity-provider-strategy-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capacity-provider-strategy-item))
   common-lisp:nil))
(common-lisp:deftype capacity-provider-strategy-item-base ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-strategy-item-weight ()
  'common-lisp:integer)
(common-lisp:deftype capacity-provider-update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capacity-providers ()
   '(trivial-types:proper-list capacity-provider))
 (common-lisp:defun |make-capacity-providers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capacity-provider))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition client-exception
     (ecs-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       client-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-exception 'client-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cluster common-lisp:nil
                       ((service-connect-defaults :initarg
                         :|serviceConnectDefaults| :type
                         (common-lisp:or cluster-service-connect-defaults
                                         common-lisp:null)
                         :accessor %cluster-service-connect-defaults :initform
                         common-lisp:nil)
                        (attachments-status :initarg :|attachmentsStatus| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-attachments-status :initform common-lisp:nil)
                        (attachments :initarg :|attachments| :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor %cluster-attachments :initform
                         common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :|defaultCapacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %cluster-default-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (capacity-providers :initarg :|capacityProviders| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %cluster-capacity-providers :initform
                         common-lisp:nil)
                        (settings :initarg :|settings| :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor %cluster-settings :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %cluster-tags :initform common-lisp:nil)
                        (statistics :initarg :|statistics| :type
                         (common-lisp:or statistics common-lisp:null) :accessor
                         %cluster-statistics :initform common-lisp:nil)
                        (active-services-count :initarg :|activeServicesCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %cluster-active-services-count :initform
                         common-lisp:nil)
                        (pending-tasks-count :initarg :|pendingTasksCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %cluster-pending-tasks-count :initform
                         common-lisp:nil)
                        (running-tasks-count :initarg :|runningTasksCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %cluster-running-tasks-count :initform
                         common-lisp:nil)
                        (registered-container-instances-count :initarg
                         :|registeredContainerInstancesCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %cluster-registered-container-instances-count
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-status :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor %cluster-configuration :initform
                         common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-name :initform common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-cluster-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster 'make-cluster))
 (common-lisp:defun make-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-defaults
                     attachments-status attachments
                     default-capacity-provider-strategy capacity-providers
                     settings tags statistics active-services-count
                     pending-tasks-count running-tasks-count
                     registered-container-instances-count status configuration
                     cluster-name cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-container-instances-count))
      (common-lisp:list
       (common-lisp:cons "registeredContainerInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "runningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-tasks-count))
      (common-lisp:list
       (common-lisp:cons "pendingTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-services-count))
      (common-lisp:list
       (common-lisp:cons "activeServicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments-status))
      (common-lisp:list
       (common-lisp:cons "attachmentsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-configuration common-lisp:nil
                       ((execute-command-configuration :initarg
                         :|executeCommandConfiguration| :type
                         (common-lisp:or execute-command-configuration
                                         common-lisp:null)
                         :accessor
                         %cluster-configuration-execute-command-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-configuration 'make-cluster-configuration))
 (common-lisp:defun make-cluster-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execute-command-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-configuration))
      (common-lisp:list
       (common-lisp:cons "executeCommandConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-container-instances-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cluster-contains-container-instances-exception)))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-services-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-contains-services-exception)))
(common-lisp:progn
 (common-lisp:define-condition cluster-contains-tasks-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-contains-tasks-exception)))
(common-lisp:deftype cluster-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-field-list ()
   '(trivial-types:proper-list cluster-field))
 (common-lisp:defun |make-cluster-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cluster-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cluster-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass cluster-service-connect-defaults common-lisp:nil
                       ((namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-service-connect-defaults-namespace :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cluster-service-connect-defaults
                    'make-cluster-service-connect-defaults))
 (common-lisp:defun make-cluster-service-connect-defaults
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-service-connect-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-service-connect-defaults-request common-lisp:nil
                       ((namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-service-connect-defaults-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))))
 (common-lisp:export
  (common-lisp:list 'cluster-service-connect-defaults-request
                    'make-cluster-service-connect-defaults-request))
 (common-lisp:defun make-cluster-service-connect-defaults-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'cluster-service-connect-defaults-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-service-connect-defaults-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-setting common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cluster-setting-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or cluster-setting-name common-lisp:null)
                         :accessor %cluster-setting-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-setting 'make-cluster-setting))
 (common-lisp:defun make-cluster-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-setting))
   common-lisp:nil))
(common-lisp:deftype cluster-setting-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cluster-settings ()
   '(trivial-types:proper-list cluster-setting))
 (common-lisp:defun |make-cluster-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype clusters () '(trivial-types:proper-list cluster))
 (common-lisp:defun |make-clusters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cluster))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compatibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatibility-list ()
   '(trivial-types:proper-list compatibility))
 (common-lisp:defun |make-compatibility-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatibility))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connectivity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container common-lisp:nil
                       ((gpu-ids :initarg :|gpuIds| :type
                         (common-lisp:or gpu-ids common-lisp:null) :accessor
                         %container-gpu-ids :initform common-lisp:nil)
                        (memory-reservation :initarg :|memoryReservation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-memory-reservation :initform
                         common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-memory :initform common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-cpu :initform common-lisp:nil)
                        (managed-agents :initarg :|managedAgents| :type
                         (common-lisp:or managed-agents common-lisp:null)
                         :accessor %container-managed-agents :initform
                         common-lisp:nil)
                        (health-status :initarg :|healthStatus| :type
                         (common-lisp:or health-status common-lisp:null)
                         :accessor %container-health-status :initform
                         common-lisp:nil)
                        (network-interfaces :initarg :|networkInterfaces| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor %container-network-interfaces :initform
                         common-lisp:nil)
                        (network-bindings :initarg :|networkBindings| :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor %container-network-bindings :initform
                         common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-reason :initform common-lisp:nil)
                        (exit-code :initarg :|exitCode| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-exit-code :initform
                         common-lisp:nil)
                        (last-status :initarg :|lastStatus| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-last-status :initform common-lisp:nil)
                        (runtime-id :initarg :|runtimeId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-runtime-id :initform common-lisp:nil)
                        (image-digest :initarg :|imageDigest| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-image-digest :initform common-lisp:nil)
                        (image :initarg :|image| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-image :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-name :initform common-lisp:nil)
                        (task-arn :initarg :|taskArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-task-arn :initform common-lisp:nil)
                        (container-arn :initarg :|containerArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-container-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defun make-container
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gpu-ids memory-reservation memory cpu
                     managed-agents health-status network-interfaces
                     network-bindings reason exit-code last-status runtime-id
                     image-digest image name task-arn container-arn)
   (common-lisp:apply #'common-lisp:make-instance 'container
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arn))
      (common-lisp:list
       (common-lisp:cons "containerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agents))
      (common-lisp:list
       (common-lisp:cons "managedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gpu-ids))
      (common-lisp:list
       (common-lisp:cons "gpuIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:deftype container-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-definition common-lisp:nil
                       ((firelens-configuration :initarg
                         :|firelensConfiguration| :type
                         (common-lisp:or firelens-configuration
                                         common-lisp:null)
                         :accessor %container-definition-firelens-configuration
                         :initform common-lisp:nil)
                        (resource-requirements :initarg :|resourceRequirements|
                         :type
                         (common-lisp:or resource-requirements
                                         common-lisp:null)
                         :accessor %container-definition-resource-requirements
                         :initform common-lisp:nil)
                        (system-controls :initarg :|systemControls| :type
                         (common-lisp:or system-controls common-lisp:null)
                         :accessor %container-definition-system-controls
                         :initform common-lisp:nil)
                        (health-check :initarg :|healthCheck| :type
                         (common-lisp:or health-check common-lisp:null)
                         :accessor %container-definition-health-check :initform
                         common-lisp:nil)
                        (log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or log-configuration common-lisp:null)
                         :accessor %container-definition-log-configuration
                         :initform common-lisp:nil)
                        (ulimits :initarg :|ulimits| :type
                         (common-lisp:or ulimit-list common-lisp:null)
                         :accessor %container-definition-ulimits :initform
                         common-lisp:nil)
                        (docker-labels :initarg :|dockerLabels| :type
                         (common-lisp:or docker-labels-map common-lisp:null)
                         :accessor %container-definition-docker-labels
                         :initform common-lisp:nil)
                        (pseudo-terminal :initarg :|pseudoTerminal| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %container-definition-pseudo-terminal
                         :initform common-lisp:nil)
                        (interactive :initarg :|interactive| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %container-definition-interactive :initform
                         common-lisp:nil)
                        (docker-security-options :initarg
                         :|dockerSecurityOptions| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %container-definition-docker-security-options
                         :initform common-lisp:nil)
                        (extra-hosts :initarg :|extraHosts| :type
                         (common-lisp:or host-entry-list common-lisp:null)
                         :accessor %container-definition-extra-hosts :initform
                         common-lisp:nil)
                        (dns-search-domains :initarg :|dnsSearchDomains| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-definition-dns-search-domains
                         :initform common-lisp:nil)
                        (dns-servers :initarg :|dnsServers| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-definition-dns-servers :initform
                         common-lisp:nil)
                        (readonly-root-filesystem :initarg
                         :|readonlyRootFilesystem| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %container-definition-readonly-root-filesystem
                         :initform common-lisp:nil)
                        (privileged :initarg :|privileged| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %container-definition-privileged :initform
                         common-lisp:nil)
                        (disable-networking :initarg :|disableNetworking| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %container-definition-disable-networking
                         :initform common-lisp:nil)
                        (working-directory :initarg :|workingDirectory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-definition-working-directory :initform
                         common-lisp:nil)
                        (user :initarg :|user| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-definition-user :initform common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-definition-hostname :initform
                         common-lisp:nil)
                        (stop-timeout :initarg :|stopTimeout| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-definition-stop-timeout :initform
                         common-lisp:nil)
                        (start-timeout :initarg :|startTimeout| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-definition-start-timeout
                         :initform common-lisp:nil)
                        (depends-on :initarg :|dependsOn| :type
                         (common-lisp:or container-dependencies
                                         common-lisp:null)
                         :accessor %container-definition-depends-on :initform
                         common-lisp:nil)
                        (secrets :initarg :|secrets| :type
                         (common-lisp:or secret-list common-lisp:null)
                         :accessor %container-definition-secrets :initform
                         common-lisp:nil)
                        (linux-parameters :initarg :|linuxParameters| :type
                         (common-lisp:or linux-parameters common-lisp:null)
                         :accessor %container-definition-linux-parameters
                         :initform common-lisp:nil)
                        (volumes-from :initarg :|volumesFrom| :type
                         (common-lisp:or volume-from-list common-lisp:null)
                         :accessor %container-definition-volumes-from :initform
                         common-lisp:nil)
                        (mount-points :initarg :|mountPoints| :type
                         (common-lisp:or mount-point-list common-lisp:null)
                         :accessor %container-definition-mount-points :initform
                         common-lisp:nil)
                        (environment-files :initarg :|environmentFiles| :type
                         (common-lisp:or environment-files common-lisp:null)
                         :accessor %container-definition-environment-files
                         :initform common-lisp:nil)
                        (environment :initarg :|environment| :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor %container-definition-environment :initform
                         common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-definition-command :initform
                         common-lisp:nil)
                        (entry-point :initarg :|entryPoint| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-definition-entry-point :initform
                         common-lisp:nil)
                        (essential :initarg :|essential| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %container-definition-essential :initform
                         common-lisp:nil)
                        (port-mappings :initarg :|portMappings| :type
                         (common-lisp:or port-mapping-list common-lisp:null)
                         :accessor %container-definition-port-mappings
                         :initform common-lisp:nil)
                        (links :initarg :|links| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-definition-links :initform
                         common-lisp:nil)
                        (memory-reservation :initarg :|memoryReservation| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-definition-memory-reservation
                         :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-definition-memory :initform
                         common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %container-definition-cpu :initform common-lisp:nil)
                        (repository-credentials :initarg
                         :|repositoryCredentials| :type
                         (common-lisp:or repository-credentials
                                         common-lisp:null)
                         :accessor %container-definition-repository-credentials
                         :initform common-lisp:nil)
                        (image :initarg :|image| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-definition-image :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-definition-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-definition 'make-container-definition))
 (common-lisp:defun make-container-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key firelens-configuration
                     resource-requirements system-controls health-check
                     log-configuration ulimits docker-labels pseudo-terminal
                     interactive docker-security-options extra-hosts
                     dns-search-domains dns-servers readonly-root-filesystem
                     privileged disable-networking working-directory user
                     hostname stop-timeout start-timeout depends-on secrets
                     linux-parameters volumes-from mount-points
                     environment-files environment command entry-point
                     essential port-mappings links memory-reservation memory
                     cpu repository-credentials image name)
   (common-lisp:apply #'common-lisp:make-instance 'container-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-credentials))
      (common-lisp:list
       (common-lisp:cons "repositoryCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "portMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'essential))
      (common-lisp:list
       (common-lisp:cons "essential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "environmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "mountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes-from))
      (common-lisp:list
       (common-lisp:cons "volumesFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-parameters))
      (common-lisp:list
       (common-lisp:cons "linuxParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets))
      (common-lisp:list
       (common-lisp:cons "secrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on))
      (common-lisp:list
       (common-lisp:cons "dependsOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout))
      (common-lisp:list
       (common-lisp:cons "startTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timeout))
      (common-lisp:list
       (common-lisp:cons "stopTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "workingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-networking))
      (common-lisp:list
       (common-lisp:cons "disableNetworking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-root-filesystem))
      (common-lisp:list
       (common-lisp:cons "readonlyRootFilesystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-servers))
      (common-lisp:list
       (common-lisp:cons "dnsServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-search-domains))
      (common-lisp:list
       (common-lisp:cons "dnsSearchDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-hosts))
      (common-lisp:list
       (common-lisp:cons "extraHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-security-options))
      (common-lisp:list
       (common-lisp:cons "dockerSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pseudo-terminal))
      (common-lisp:list
       (common-lisp:cons "pseudoTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-labels))
      (common-lisp:list
       (common-lisp:cons "dockerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ulimits))
      (common-lisp:list
       (common-lisp:cons "ulimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-controls))
      (common-lisp:list
       (common-lisp:cons "systemControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "resourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firelens-configuration))
      (common-lisp:list
       (common-lisp:cons "firelensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-definitions ()
   '(trivial-types:proper-list container-definition))
 (common-lisp:defun |make-container-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype container-dependencies ()
   '(trivial-types:proper-list container-dependency))
 (common-lisp:defun |make-container-dependencies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-dependency common-lisp:nil
                       ((condition :initarg :|condition| :type
                         (common-lisp:or container-condition common-lisp:null)
                         :accessor %container-dependency-condition :initform
                         (common-lisp:error ":condition is required"))
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-dependency-container-name :initform
                         (common-lisp:error ":containername is required"))))
 (common-lisp:export
  (common-lisp:list 'container-dependency 'make-container-dependency))
 (common-lisp:defun make-container-dependency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key condition container-name)
   (common-lisp:apply #'common-lisp:make-instance 'container-dependency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-dependency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass container-instance common-lisp:nil
                       ((health-status :initarg :|healthStatus| :type
                         (common-lisp:or container-instance-health-status
                                         common-lisp:null)
                         :accessor %container-instance-health-status :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %container-instance-tags :initform common-lisp:nil)
                        (attachments :initarg :|attachments| :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor %container-instance-attachments :initform
                         common-lisp:nil)
                        (registered-at :initarg :|registeredAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %container-instance-registered-at :initform
                         common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %container-instance-attributes :initform
                         common-lisp:nil)
                        (agent-update-status :initarg :|agentUpdateStatus|
                         :type
                         (common-lisp:or agent-update-status common-lisp:null)
                         :accessor %container-instance-agent-update-status
                         :initform common-lisp:nil)
                        (pending-tasks-count :initarg :|pendingTasksCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %container-instance-pending-tasks-count
                         :initform common-lisp:nil)
                        (running-tasks-count :initarg :|runningTasksCount|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %container-instance-running-tasks-count
                         :initform common-lisp:nil)
                        (agent-connected :initarg :|agentConnected| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %container-instance-agent-connected :initform
                         common-lisp:nil)
                        (status-reason :initarg :|statusReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-instance-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-instance-status :initform common-lisp:nil)
                        (registered-resources :initarg :|registeredResources|
                         :type (common-lisp:or resources common-lisp:null)
                         :accessor %container-instance-registered-resources
                         :initform common-lisp:nil)
                        (remaining-resources :initarg :|remainingResources|
                         :type (common-lisp:or resources common-lisp:null)
                         :accessor %container-instance-remaining-resources
                         :initform common-lisp:nil)
                        (version-info :initarg :|versionInfo| :type
                         (common-lisp:or version-info common-lisp:null)
                         :accessor %container-instance-version-info :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %container-instance-version :initform common-lisp:nil)
                        (capacity-provider-name :initarg
                         :|capacityProviderName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-instance-capacity-provider-name :initform
                         common-lisp:nil)
                        (ec2instance-id :initarg :|ec2InstanceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-instance-ec2instance-id :initform
                         common-lisp:nil)
                        (container-instance-arn :initarg
                         :|containerInstanceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-instance-container-instance-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-instance 'make-container-instance))
 (common-lisp:defun make-container-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key health-status tags attachments
                     registered-at attributes agent-update-status
                     pending-tasks-count running-tasks-count agent-connected
                     status-reason status registered-resources
                     remaining-resources version-info version
                     capacity-provider-name ec2instance-id
                     container-instance-arn)
   (common-lisp:apply #'common-lisp:make-instance 'container-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-name))
      (common-lisp:list
       (common-lisp:cons "capacityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-info))
      (common-lisp:list
       (common-lisp:cons "versionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining-resources))
      (common-lisp:list
       (common-lisp:cons "remainingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-resources))
      (common-lisp:list
       (common-lisp:cons "registeredResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-connected))
      (common-lisp:list
       (common-lisp:cons "agentConnected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "runningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-tasks-count))
      (common-lisp:list
       (common-lisp:cons "pendingTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-update-status))
      (common-lisp:list
       (common-lisp:cons "agentUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-instance))
   common-lisp:nil))
(common-lisp:deftype container-instance-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-instance-field-list ()
   '(trivial-types:proper-list container-instance-field))
 (common-lisp:defun |make-container-instance-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-instance-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-instance-health-status common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or instance-health-check-result-list
                                         common-lisp:null)
                         :accessor %container-instance-health-status-details
                         :initform common-lisp:nil)
                        (overall-status :initarg :|overallStatus| :type
                         (common-lisp:or instance-health-check-state
                                         common-lisp:null)
                         :accessor
                         %container-instance-health-status-overall-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-instance-health-status
                    'make-container-instance-health-status))
 (common-lisp:defun make-container-instance-health-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details overall-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'container-instance-health-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overall-status))
      (common-lisp:list
       (common-lisp:cons "overallStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-instance-health-status))
   common-lisp:nil))
(common-lisp:deftype container-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-instances ()
   '(trivial-types:proper-list container-instance))
 (common-lisp:defun |make-container-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-override common-lisp:nil
                       ((resource-requirements :initarg :|resourceRequirements|
                         :type
                         (common-lisp:or resource-requirements
                                         common-lisp:null)
                         :accessor %container-override-resource-requirements
                         :initform common-lisp:nil)
                        (memory-reservation :initarg :|memoryReservation| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-override-memory-reservation
                         :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-override-memory :initform
                         common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-override-cpu :initform
                         common-lisp:nil)
                        (environment-files :initarg :|environmentFiles| :type
                         (common-lisp:or environment-files common-lisp:null)
                         :accessor %container-override-environment-files
                         :initform common-lisp:nil)
                        (environment :initarg :|environment| :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor %container-override-environment :initform
                         common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %container-override-command :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-override-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-override 'make-container-override))
 (common-lisp:defun make-container-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-requirements memory-reservation
                     memory cpu environment-files environment command name)
   (common-lisp:apply #'common-lisp:make-instance 'container-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "environmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "memoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "resourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-overrides ()
   '(trivial-types:proper-list container-override))
 (common-lisp:defun |make-container-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass container-state-change common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-state-change-status :initform
                         common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-state-change-reason :initform
                         common-lisp:nil)
                        (network-bindings :initarg :|networkBindings| :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor %container-state-change-network-bindings
                         :initform common-lisp:nil)
                        (exit-code :initarg :|exitCode| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %container-state-change-exit-code :initform
                         common-lisp:nil)
                        (runtime-id :initarg :|runtimeId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-state-change-runtime-id :initform
                         common-lisp:nil)
                        (image-digest :initarg :|imageDigest| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-state-change-image-digest :initform
                         common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %container-state-change-container-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-state-change 'make-container-state-change))
 (common-lisp:defun make-container-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status reason network-bindings exit-code
                     runtime-id image-digest container-name)
   (common-lisp:apply #'common-lisp:make-instance 'container-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "imageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-state-changes ()
   '(trivial-types:proper-list container-state-change))
 (common-lisp:defun |make-container-state-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype containers () '(trivial-types:proper-list container))
 (common-lisp:defun |make-containers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-capacity-provider-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-capacity-provider-request-tags :initform
                         common-lisp:nil)
                        (auto-scaling-group-provider :initarg
                         :|autoScalingGroupProvider| :type
                         (common-lisp:or auto-scaling-group-provider
                                         common-lisp:null)
                         :accessor
                         %create-capacity-provider-request-auto-scaling-group-provider
                         :initform
                         (common-lisp:error
                          ":autoscalinggroupprovider is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-capacity-provider-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-capacity-provider-request
                    'make-create-capacity-provider-request))
 (common-lisp:defun make-create-capacity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags auto-scaling-group-provider name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         %create-capacity-provider-response-capacity-provider
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-capacity-provider-response
                    'make-create-capacity-provider-response))
 (common-lisp:defun make-create-capacity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-request common-lisp:nil
                       ((service-connect-defaults :initarg
                         :|serviceConnectDefaults| :type
                         (common-lisp:or
                          cluster-service-connect-defaults-request
                          common-lisp:null)
                         :accessor
                         %create-cluster-request-service-connect-defaults
                         :initform common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :|defaultCapacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %create-cluster-request-default-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (capacity-providers :initarg :|capacityProviders| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-cluster-request-capacity-providers
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor %create-cluster-request-configuration
                         :initform common-lisp:nil)
                        (settings :initarg :|settings| :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor %create-cluster-request-settings :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-cluster-request-tags :initform
                         common-lisp:nil)
                        (cluster-name :initarg :|clusterName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-cluster-request-cluster-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-request 'make-create-cluster-request))
 (common-lisp:defun make-create-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-defaults
                     default-capacity-provider-strategy capacity-providers
                     configuration settings tags cluster-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "clusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %create-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-cluster-response 'make-create-cluster-response))
 (common-lisp:defun make-create-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-request common-lisp:nil
                       ((service-connect-configuration :initarg
                         :|serviceConnectConfiguration| :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-service-connect-configuration
                         :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-service-request-enable-execute-command
                         :initform common-lisp:nil)
                        (propagate-tags :initarg :|propagateTags| :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %create-service-request-propagate-tags
                         :initform common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :|enableECSManagedTags| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-service-request-enable-ecsmanaged-tags
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-service-request-tags :initform
                         common-lisp:nil)
                        (deployment-controller :initarg :|deploymentController|
                         :type
                         (common-lisp:or deployment-controller
                                         common-lisp:null)
                         :accessor
                         %create-service-request-deployment-controller
                         :initform common-lisp:nil)
                        (scheduling-strategy :initarg :|schedulingStrategy|
                         :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor %create-service-request-scheduling-strategy
                         :initform common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :|healthCheckGracePeriodSeconds| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %create-service-request-health-check-grace-period-seconds
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-network-configuration
                         :initform common-lisp:nil)
                        (placement-strategy :initarg :|placementStrategy| :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor %create-service-request-placement-strategy
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         %create-service-request-placement-constraints
                         :initform common-lisp:nil)
                        (deployment-configuration :initarg
                         :|deploymentConfiguration| :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-deployment-configuration
                         :initform common-lisp:nil)
                        (role :initarg :|role| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-role :initform
                         common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-platform-version :initform
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %create-service-request-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %create-service-request-launch-type
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-client-token :initform
                         common-lisp:nil)
                        (desired-count :initarg :|desiredCount| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %create-service-request-desired-count
                         :initform common-lisp:nil)
                        (service-registries :initarg :|serviceRegistries| :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor %create-service-request-service-registries
                         :initform common-lisp:nil)
                        (load-balancers :initarg :|loadBalancers| :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %create-service-request-load-balancers
                         :initform common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-task-definition :initform
                         common-lisp:nil)
                        (service-name :initarg :|serviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-service-name :initform
                         (common-lisp:error ":servicename is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-service-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-service-request 'make-create-service-request))
 (common-lisp:defun make-create-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-configuration
                     enable-execute-command propagate-tags
                     enable-ecsmanaged-tags tags deployment-controller
                     scheduling-strategy health-check-grace-period-seconds
                     network-configuration placement-strategy
                     placement-constraints deployment-configuration role
                     platform-version capacity-provider-strategy launch-type
                     client-token desired-count service-registries
                     load-balancers task-definition service-name cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "deploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-response common-lisp:nil
                       ((service :initarg :|service| :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %create-service-response-service :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-service-response 'make-create-service-response))
 (common-lisp:defun make-create-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-task-set-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-task-set-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-client-token :initform
                         common-lisp:nil)
                        (scale :initarg :|scale| :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         %create-task-set-request-scale :initform
                         common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-platform-version :initform
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %create-task-set-request-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %create-task-set-request-launch-type
                         :initform common-lisp:nil)
                        (service-registries :initarg :|serviceRegistries| :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor %create-task-set-request-service-registries
                         :initform common-lisp:nil)
                        (load-balancers :initarg :|loadBalancers| :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %create-task-set-request-load-balancers
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %create-task-set-request-network-configuration
                         :initform common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-task-definition :initform
                         (common-lisp:error ":taskdefinition is required"))
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-external-id :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-cluster :initform
                         (common-lisp:error ":cluster is required"))
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-task-set-request-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'create-task-set-request 'make-create-task-set-request))
 (common-lisp:defun make-create-task-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token scale platform-version
                     capacity-provider-strategy launch-type service-registries
                     load-balancers network-configuration task-definition
                     external-id cluster service)
   (common-lisp:apply #'common-lisp:make-instance 'create-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-task-set-response common-lisp:nil
                       ((task-set :initarg :|taskSet| :type
                         (common-lisp:or task-set common-lisp:null) :accessor
                         %create-task-set-response-task-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-task-set-response 'make-create-task-set-response))
 (common-lisp:defun make-create-task-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-set)
   (common-lisp:apply #'common-lisp:make-instance 'create-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-setting-request common-lisp:nil
                       ((principal-arn :initarg :|principalArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-account-setting-request-principal-arn
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor %delete-account-setting-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-account-setting-request
                    'make-delete-account-setting-request))
 (common-lisp:defun make-delete-account-setting-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-account-setting-response common-lisp:nil
                       ((setting :initarg :|setting| :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %delete-account-setting-response-setting :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-account-setting-response
                    'make-delete-account-setting-response))
 (common-lisp:defun make-delete-account-setting-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-account-setting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-setting-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attributes-request common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %delete-attributes-request-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-attributes-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-attributes-request
                    'make-delete-attributes-request))
 (common-lisp:defun make-delete-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attributes-response common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %delete-attributes-response-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-attributes-response
                    'make-delete-attributes-response))
 (common-lisp:defun make-delete-attributes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-capacity-provider-request common-lisp:nil
                       ((capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-capacity-provider-request-capacity-provider
                         :initform
                         (common-lisp:error ":capacityprovider is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-provider-request
                    'make-delete-capacity-provider-request))
 (common-lisp:defun make-delete-capacity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         %delete-capacity-provider-response-capacity-provider
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-capacity-provider-response
                    'make-delete-capacity-provider-response))
 (common-lisp:defun make-delete-capacity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-request common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-cluster-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-request 'make-delete-cluster-request))
 (common-lisp:defun make-delete-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %delete-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cluster-response 'make-delete-cluster-response))
 (common-lisp:defun make-delete-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-request common-lisp:nil
                       ((force :initarg :|force| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %delete-service-request-force :initform
                         common-lisp:nil)
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-service-request-service :initform
                         (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-service-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-service-request 'make-delete-service-request))
 (common-lisp:defun make-delete-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force service cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-response common-lisp:nil
                       ((service :initarg :|service| :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %delete-service-response-service :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-service-response 'make-delete-service-response))
 (common-lisp:defun make-delete-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-definitions-request common-lisp:nil
                       ((task-definitions :initarg :|taskDefinitions| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %delete-task-definitions-request-task-definitions
                         :initform
                         (common-lisp:error ":taskdefinitions is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-task-definitions-request
                    'make-delete-task-definitions-request))
 (common-lisp:defun make-delete-task-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definitions)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-task-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definitions))
      (common-lisp:list
       (common-lisp:cons "taskDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-definitions-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %delete-task-definitions-response-failures :initform
                         common-lisp:nil)
                        (task-definitions :initarg :|taskDefinitions| :type
                         (common-lisp:or task-definition-list common-lisp:null)
                         :accessor
                         %delete-task-definitions-response-task-definitions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-task-definitions-response
                    'make-delete-task-definitions-response))
 (common-lisp:defun make-delete-task-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures task-definitions)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-task-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definitions))
      (common-lisp:list
       (common-lisp:cons "taskDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-set-request common-lisp:nil
                       ((force :initarg :|force| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %delete-task-set-request-force :initform
                         common-lisp:nil)
                        (task-set :initarg :|taskSet| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-task-set-request-task-set :initform
                         (common-lisp:error ":taskset is required"))
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-task-set-request-service :initform
                         (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-task-set-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-task-set-request 'make-delete-task-set-request))
 (common-lisp:defun make-delete-task-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force task-set service cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-task-set-response common-lisp:nil
                       ((task-set :initarg :|taskSet| :type
                         (common-lisp:or task-set common-lisp:null) :accessor
                         %delete-task-set-response-task-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-task-set-response 'make-delete-task-set-response))
 (common-lisp:defun make-delete-task-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-set)
   (common-lisp:apply #'common-lisp:make-instance 'delete-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((service-connect-resources :initarg
                         :|serviceConnectResources| :type
                         (common-lisp:or service-connect-service-resource-list
                                         common-lisp:null)
                         :accessor %deployment-service-connect-resources
                         :initform common-lisp:nil)
                        (service-connect-configuration :initarg
                         :|serviceConnectConfiguration| :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor %deployment-service-connect-configuration
                         :initform common-lisp:nil)
                        (rollout-state-reason :initarg :|rolloutStateReason|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %deployment-rollout-state-reason :initform
                         common-lisp:nil)
                        (rollout-state :initarg :|rolloutState| :type
                         (common-lisp:or deployment-rollout-state
                                         common-lisp:null)
                         :accessor %deployment-rollout-state :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %deployment-network-configuration :initform
                         common-lisp:nil)
                        (platform-family :initarg :|platformFamily| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-platform-family :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-platform-version :initform
                         common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %deployment-launch-type :initform
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %deployment-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-updated-at :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %deployment-created-at :initform common-lisp:nil)
                        (failed-tasks :initarg :|failedTasks| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %deployment-failed-tasks :initform common-lisp:nil)
                        (running-count :initarg :|runningCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %deployment-running-count :initform common-lisp:nil)
                        (pending-count :initarg :|pendingCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %deployment-pending-count :initform common-lisp:nil)
                        (desired-count :initarg :|desiredCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %deployment-desired-count :initform common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-task-definition :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-status :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deployment-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defun make-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-resources
                     service-connect-configuration rollout-state-reason
                     rollout-state network-configuration platform-family
                     platform-version launch-type capacity-provider-strategy
                     updated-at created-at failed-tasks running-count
                     pending-count desired-count task-definition status id)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-tasks))
      (common-lisp:list
       (common-lisp:cons "failedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollout-state))
      (common-lisp:list
       (common-lisp:cons "rolloutState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollout-state-reason))
      (common-lisp:list
       (common-lisp:cons "rolloutStateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-resources))
      (common-lisp:list
       (common-lisp:cons "serviceConnectResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-alarms common-lisp:nil
                       ((rollback :initarg :|rollback| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-alarms-rollback :initform
                         (common-lisp:error ":rollback is required"))
                        (enable :initarg :|enable| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-alarms-enable :initform
                         (common-lisp:error ":enable is required"))
                        (alarm-names :initarg :|alarmNames| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %deployment-alarms-alarm-names :initform
                         (common-lisp:error ":alarmnames is required"))))
 (common-lisp:export
  (common-lisp:list 'deployment-alarms 'make-deployment-alarms))
 (common-lisp:defun make-deployment-alarms
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollback enable alarm-names)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-alarms
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-alarms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-alarms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-names))
      (common-lisp:list
       (common-lisp:cons "alarmNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-alarms))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-circuit-breaker common-lisp:nil
                       ((rollback :initarg :|rollback| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-circuit-breaker-rollback :initform
                         (common-lisp:error ":rollback is required"))
                        (enable :initarg :|enable| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deployment-circuit-breaker-enable :initform
                         (common-lisp:error ":enable is required"))))
 (common-lisp:export
  (common-lisp:list 'deployment-circuit-breaker
                    'make-deployment-circuit-breaker))
 (common-lisp:defun make-deployment-circuit-breaker
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollback enable)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-circuit-breaker
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-circuit-breaker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-configuration common-lisp:nil
                       ((alarms :initarg :|alarms| :type
                         (common-lisp:or deployment-alarms common-lisp:null)
                         :accessor %deployment-configuration-alarms :initform
                         common-lisp:nil)
                        (minimum-healthy-percent :initarg
                         :|minimumHealthyPercent| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %deployment-configuration-minimum-healthy-percent
                         :initform common-lisp:nil)
                        (maximum-percent :initarg :|maximumPercent| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %deployment-configuration-maximum-percent
                         :initform common-lisp:nil)
                        (deployment-circuit-breaker :initarg
                         :|deploymentCircuitBreaker| :type
                         (common-lisp:or deployment-circuit-breaker
                                         common-lisp:null)
                         :accessor
                         %deployment-configuration-deployment-circuit-breaker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-configuration 'make-deployment-configuration))
 (common-lisp:defun make-deployment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarms minimum-healthy-percent
                     maximum-percent deployment-circuit-breaker)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-circuit-breaker))
      (common-lisp:list
       (common-lisp:cons "deploymentCircuitBreaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-percent))
      (common-lisp:list
       (common-lisp:cons "maximumPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-percent))
      (common-lisp:list
       (common-lisp:cons "minimumHealthyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-controller common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or deployment-controller-type
                                         common-lisp:null)
                         :accessor %deployment-controller-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'deployment-controller 'make-deployment-controller))
 (common-lisp:defun make-deployment-controller
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-controller
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-controller))
   common-lisp:nil))
(common-lisp:deftype deployment-controller-type () 'common-lisp:string)
(common-lisp:deftype deployment-rollout-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployments () '(trivial-types:proper-list deployment))
 (common-lisp:defun |make-deployments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deregister-container-instance-request common-lisp:nil
                       ((force :initarg :|force| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %deregister-container-instance-request-force
                         :initform common-lisp:nil)
                        (container-instance :initarg :|containerInstance| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deregister-container-instance-request-container-instance
                         :initform
                         (common-lisp:error ":containerinstance is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deregister-container-instance-request-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-container-instance-request
                    'make-deregister-container-instance-request))
 (common-lisp:defun make-deregister-container-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force container-instance cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-container-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-container-instance-response common-lisp:nil
                       ((container-instance :initarg :|containerInstance| :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         %deregister-container-instance-response-container-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-container-instance-response
                    'make-deregister-container-instance-response))
 (common-lisp:defun make-deregister-container-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-container-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-container-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-definition-request common-lisp:nil
                       ((task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %deregister-task-definition-request-task-definition
                         :initform
                         (common-lisp:error ":taskdefinition is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-task-definition-request
                    'make-deregister-task-definition-request))
 (common-lisp:defun make-deregister-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-definition-response common-lisp:nil
                       ((task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         %deregister-task-definition-response-task-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-task-definition-response
                    'make-deregister-task-definition-response))
 (common-lisp:defun make-deregister-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-capacity-providers-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-capacity-providers-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %describe-capacity-providers-request-max-results
                         :initform common-lisp:nil)
                        (include :initarg :|include| :type
                         (common-lisp:or capacity-provider-field-list
                                         common-lisp:null)
                         :accessor %describe-capacity-providers-request-include
                         :initform common-lisp:nil)
                        (capacity-providers :initarg :|capacityProviders| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %describe-capacity-providers-request-capacity-providers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-capacity-providers-request
                    'make-describe-capacity-providers-request))
 (common-lisp:defun make-describe-capacity-providers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results include
                     capacity-providers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-capacity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-capacity-providers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-capacity-providers-response-next-token
                         :initform common-lisp:nil)
                        (failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-capacity-providers-response-failures
                         :initform common-lisp:nil)
                        (capacity-providers :initarg :|capacityProviders| :type
                         (common-lisp:or capacity-providers common-lisp:null)
                         :accessor
                         %describe-capacity-providers-response-capacity-providers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-capacity-providers-response
                    'make-describe-capacity-providers-response))
 (common-lisp:defun make-describe-capacity-providers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token failures capacity-providers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-capacity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-capacity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or cluster-field-list common-lisp:null)
                         :accessor %describe-clusters-request-include :initform
                         common-lisp:nil)
                        (clusters :initarg :|clusters| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-clusters-request-clusters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-request
                    'make-describe-clusters-request))
 (common-lisp:defun make-describe-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include clusters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-clusters-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-clusters-response-failures :initform
                         common-lisp:nil)
                        (clusters :initarg :|clusters| :type
                         (common-lisp:or clusters common-lisp:null) :accessor
                         %describe-clusters-response-clusters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-clusters-response
                    'make-describe-clusters-response))
 (common-lisp:defun make-describe-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures clusters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clusters))
      (common-lisp:list
       (common-lisp:cons "clusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-container-instances-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or container-instance-field-list
                                         common-lisp:null)
                         :accessor
                         %describe-container-instances-request-include
                         :initform common-lisp:nil)
                        (container-instances :initarg :|containerInstances|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %describe-container-instances-request-container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-container-instances-request-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-container-instances-request
                    'make-describe-container-instances-request))
 (common-lisp:defun make-describe-container-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include container-instances cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-container-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-container-instances-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-container-instances-response-failures
                         :initform common-lisp:nil)
                        (container-instances :initarg :|containerInstances|
                         :type
                         (common-lisp:or container-instances common-lisp:null)
                         :accessor
                         %describe-container-instances-response-container-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-container-instances-response
                    'make-describe-container-instances-response))
 (common-lisp:defun make-describe-container-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures container-instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-container-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-container-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or service-field-list common-lisp:null)
                         :accessor %describe-services-request-include :initform
                         common-lisp:nil)
                        (services :initarg :|services| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-services-request-services
                         :initform (common-lisp:error ":services is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-services-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-services-request
                    'make-describe-services-request))
 (common-lisp:defun make-describe-services-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include services cluster)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-services-response-failures :initform
                         common-lisp:nil)
                        (services :initarg :|services| :type
                         (common-lisp:or services common-lisp:null) :accessor
                         %describe-services-response-services :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-services-response
                    'make-describe-services-response))
 (common-lisp:defun make-describe-services-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures services)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-definition-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or task-definition-field-list
                                         common-lisp:null)
                         :accessor %describe-task-definition-request-include
                         :initform common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-task-definition-request-task-definition
                         :initform
                         (common-lisp:error ":taskdefinition is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-task-definition-request
                    'make-describe-task-definition-request))
 (common-lisp:defun make-describe-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include task-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-definition-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-task-definition-response-tags :initform
                         common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         %describe-task-definition-response-task-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-task-definition-response
                    'make-describe-task-definition-response))
 (common-lisp:defun make-describe-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags task-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-sets-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or task-set-field-list common-lisp:null)
                         :accessor %describe-task-sets-request-include
                         :initform common-lisp:nil)
                        (task-sets :initarg :|taskSets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-task-sets-request-task-sets
                         :initform common-lisp:nil)
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-task-sets-request-service :initform
                         (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-task-sets-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-task-sets-request
                    'make-describe-task-sets-request))
 (common-lisp:defun make-describe-task-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include task-sets service cluster)
   (common-lisp:apply #'common-lisp:make-instance 'describe-task-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-task-sets-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-task-sets-response-failures :initform
                         common-lisp:nil)
                        (task-sets :initarg :|taskSets| :type
                         (common-lisp:or task-sets common-lisp:null) :accessor
                         %describe-task-sets-response-task-sets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-task-sets-response
                    'make-describe-task-sets-response))
 (common-lisp:defun make-describe-task-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures task-sets)
   (common-lisp:apply #'common-lisp:make-instance 'describe-task-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-task-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tasks-request common-lisp:nil
                       ((include :initarg :|include| :type
                         (common-lisp:or task-field-list common-lisp:null)
                         :accessor %describe-tasks-request-include :initform
                         common-lisp:nil)
                        (tasks :initarg :|tasks| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-tasks-request-tasks :initform
                         (common-lisp:error ":tasks is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-tasks-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tasks-request 'make-describe-tasks-request))
 (common-lisp:defun make-describe-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include tasks cluster)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tasks-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %describe-tasks-response-failures :initform
                         common-lisp:nil)
                        (tasks :initarg :|tasks| :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         %describe-tasks-response-tasks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tasks-response 'make-describe-tasks-response))
 (common-lisp:defun make-describe-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures tasks)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tasks-response))
   common-lisp:nil))
(common-lisp:deftype desired-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((permissions :initarg :|permissions| :type
                         (common-lisp:or device-cgroup-permissions
                                         common-lisp:null)
                         :accessor %device-permissions :initform
                         common-lisp:nil)
                        (container-path :initarg :|containerPath| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-container-path :initform common-lisp:nil)
                        (host-path :initarg :|hostPath| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-host-path :initform
                         (common-lisp:error ":hostpath is required"))))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defun make-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions container-path host-path)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-path))
      (common-lisp:list
       (common-lisp:cons "hostPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-cgroup-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-cgroup-permissions ()
   '(trivial-types:proper-list device-cgroup-permission))
 (common-lisp:defun |make-device-cgroup-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            device-cgroup-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype devices-list () '(trivial-types:proper-list device))
 (common-lisp:defun |make-devices-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass discover-poll-endpoint-request common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %discover-poll-endpoint-request-cluster :initform
                         common-lisp:nil)
                        (container-instance :initarg :|containerInstance| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %discover-poll-endpoint-request-container-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'discover-poll-endpoint-request
                    'make-discover-poll-endpoint-request))
 (common-lisp:defun make-discover-poll-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster container-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-poll-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discover-poll-endpoint-response common-lisp:nil
                       ((service-connect-endpoint :initarg
                         :|serviceConnectEndpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %discover-poll-endpoint-response-service-connect-endpoint
                         :initform common-lisp:nil)
                        (telemetry-endpoint :initarg :|telemetryEndpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %discover-poll-endpoint-response-telemetry-endpoint
                         :initform common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %discover-poll-endpoint-response-endpoint :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'discover-poll-endpoint-response
                    'make-discover-poll-endpoint-response))
 (common-lisp:defun make-discover-poll-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-endpoint
                     telemetry-endpoint endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'discover-poll-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-endpoint))
      (common-lisp:list
       (common-lisp:cons "telemetryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-endpoint))
      (common-lisp:list
       (common-lisp:cons "serviceConnectEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-poll-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype docker-labels-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-docker-labels-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass docker-volume-configuration common-lisp:nil
                       ((labels :initarg :|labels| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %docker-volume-configuration-labels :initform
                         common-lisp:nil)
                        (driver-opts :initarg :|driverOpts| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %docker-volume-configuration-driver-opts :initform
                         common-lisp:nil)
                        (driver :initarg :|driver| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %docker-volume-configuration-driver :initform
                         common-lisp:nil)
                        (autoprovision :initarg :|autoprovision| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %docker-volume-configuration-autoprovision
                         :initform common-lisp:nil)
                        (scope :initarg :|scope| :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         %docker-volume-configuration-scope :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'docker-volume-configuration
                    'make-docker-volume-configuration))
 (common-lisp:defun make-docker-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key labels driver-opts driver autoprovision
                     scope)
   (common-lisp:apply #'common-lisp:make-instance 'docker-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autoprovision))
      (common-lisp:list
       (common-lisp:cons "autoprovision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver))
      (common-lisp:list
       (common-lisp:cons "driver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver-opts))
      (common-lisp:list
       (common-lisp:cons "driverOpts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          docker-volume-configuration))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass efsauthorization-config common-lisp:nil
                       ((iam :initarg :|iam| :type
                         (common-lisp:or efsauthorization-config-iam
                                         common-lisp:null)
                         :accessor %efsauthorization-config-iam :initform
                         common-lisp:nil)
                        (access-point-id :initarg :|accessPointId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %efsauthorization-config-access-point-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'efsauthorization-config 'make-efsauthorization-config))
 (common-lisp:defun make-efsauthorization-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam access-point-id)
   (common-lisp:apply #'common-lisp:make-instance 'efsauthorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "accessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efsauthorization-config))
   common-lisp:nil))
(common-lisp:deftype efsauthorization-config-iam () 'common-lisp:string)
(common-lisp:deftype efstransit-encryption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efsvolume-configuration common-lisp:nil
                       ((authorization-config :initarg :|authorizationConfig|
                         :type
                         (common-lisp:or efsauthorization-config
                                         common-lisp:null)
                         :accessor
                         %efsvolume-configuration-authorization-config
                         :initform common-lisp:nil)
                        (transit-encryption-port :initarg
                         :|transitEncryptionPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %efsvolume-configuration-transit-encryption-port
                         :initform common-lisp:nil)
                        (transit-encryption :initarg :|transitEncryption| :type
                         (common-lisp:or efstransit-encryption
                                         common-lisp:null)
                         :accessor %efsvolume-configuration-transit-encryption
                         :initform common-lisp:nil)
                        (root-directory :initarg :|rootDirectory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %efsvolume-configuration-root-directory :initform
                         common-lisp:nil)
                        (file-system-id :initarg :|fileSystemId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %efsvolume-configuration-file-system-id :initform
                         (common-lisp:error ":filesystemid is required"))))
 (common-lisp:export
  (common-lisp:list 'efsvolume-configuration 'make-efsvolume-configuration))
 (common-lisp:defun make-efsvolume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authorization-config
                     transit-encryption-port transit-encryption root-directory
                     file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'efsvolume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "rootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-encryption))
      (common-lisp:list
       (common-lisp:cons "transitEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-port))
      (common-lisp:list
       (common-lisp:cons "transitEncryptionPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efsvolume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-file common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or environment-file-type
                                         common-lisp:null)
                         :accessor %environment-file-type :initform
                         (common-lisp:error ":type is required"))
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %environment-file-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'environment-file 'make-environment-file))
 (common-lisp:defun make-environment-file
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value)
   (common-lisp:apply #'common-lisp:make-instance 'environment-file
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-file))
   common-lisp:nil))
(common-lisp:deftype environment-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-files ()
   '(trivial-types:proper-list environment-file))
 (common-lisp:defun |make-environment-files|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-file))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype environment-variables ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-environment-variables|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ephemeral-storage common-lisp:nil
                       ((size-in-gi-b :initarg :|sizeInGiB| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ephemeral-storage-size-in-gi-b :initform
                         (common-lisp:error ":sizeingib is required"))))
 (common-lisp:export
  (common-lisp:list 'ephemeral-storage 'make-ephemeral-storage))
 (common-lisp:defun make-ephemeral-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size-in-gi-b)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeral-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gi-b))
      (common-lisp:list
       (common-lisp:cons "sizeInGiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeral-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-configuration common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or execute-command-log-configuration
                                         common-lisp:null)
                         :accessor
                         %execute-command-configuration-log-configuration
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or execute-command-logging
                                         common-lisp:null)
                         :accessor %execute-command-configuration-logging
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-configuration-kms-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-command-configuration
                    'make-execute-command-configuration))
 (common-lisp:defun make-execute-command-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration logging kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-command-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-log-configuration common-lisp:nil
                       ((s3key-prefix :initarg :|s3KeyPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-log-configuration-s3key-prefix
                         :initform common-lisp:nil)
                        (s3encryption-enabled :initarg :|s3EncryptionEnabled|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %execute-command-log-configuration-s3encryption-enabled
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :|s3BucketName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-log-configuration-s3bucket-name
                         :initform common-lisp:nil)
                        (cloud-watch-encryption-enabled :initarg
                         :|cloudWatchEncryptionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %execute-command-log-configuration-cloud-watch-encryption-enabled
                         :initform common-lisp:nil)
                        (cloud-watch-log-group-name :initarg
                         :|cloudWatchLogGroupName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-log-configuration-cloud-watch-log-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-command-log-configuration
                    'make-execute-command-log-configuration))
 (common-lisp:defun make-execute-command-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key-prefix s3encryption-enabled
                     s3bucket-name cloud-watch-encryption-enabled
                     cloud-watch-log-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-command-log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "cloudWatchEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "s3EncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-log-configuration))
   common-lisp:nil))
(common-lisp:deftype execute-command-logging () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-command-request common-lisp:nil
                       ((task :initarg :|task| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-request-task :initform
                         (common-lisp:error ":task is required"))
                        (interactive :initarg :|interactive| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %execute-command-request-interactive :initform
                         (common-lisp:error ":interactive is required"))
                        (command :initarg :|command| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-request-command :initform
                         (common-lisp:error ":command is required"))
                        (container :initarg :|container| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-request-container :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-command-request 'make-execute-command-request))
 (common-lisp:defun make-execute-command-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task interactive command container
                     cluster)
   (common-lisp:apply #'common-lisp:make-instance 'execute-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-command-response common-lisp:nil
                       ((task-arn :initarg :|taskArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-response-task-arn :initform
                         common-lisp:nil)
                        (session :initarg :|session| :type
                         (common-lisp:or session common-lisp:null) :accessor
                         %execute-command-response-session :initform
                         common-lisp:nil)
                        (interactive :initarg :|interactive| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %execute-command-response-interactive :initform
                         common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-response-container-name :initform
                         common-lisp:nil)
                        (container-arn :initarg :|containerArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-response-container-arn :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %execute-command-response-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-command-response 'make-execute-command-response))
 (common-lisp:defun make-execute-command-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-arn session interactive
                     container-name container-arn cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'execute-command-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arn))
      (common-lisp:list
       (common-lisp:cons "containerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-command-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fsx-windows-file-server-authorization-config
                       common-lisp:nil
                       ((domain :initarg :|domain| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fsx-windows-file-server-authorization-config-domain
                         :initform (common-lisp:error ":domain is required"))
                        (credentials-parameter :initarg :|credentialsParameter|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %fsx-windows-file-server-authorization-config-credentials-parameter
                         :initform
                         (common-lisp:error
                          ":credentialsparameter is required"))))
 (common-lisp:export
  (common-lisp:list 'fsx-windows-file-server-authorization-config
                    'make-fsx-windows-file-server-authorization-config))
 (common-lisp:defun make-fsx-windows-file-server-authorization-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain credentials-parameter)
   (common-lisp:apply #'common-lisp:make-instance
                      'fsx-windows-file-server-authorization-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "credentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-authorization-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fsx-windows-file-server-volume-configuration
                       common-lisp:nil
                       ((authorization-config :initarg :|authorizationConfig|
                         :type
                         (common-lisp:or
                          fsx-windows-file-server-authorization-config
                          common-lisp:null)
                         :accessor
                         %fsx-windows-file-server-volume-configuration-authorization-config
                         :initform
                         (common-lisp:error
                          ":authorizationconfig is required"))
                        (root-directory :initarg :|rootDirectory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fsx-windows-file-server-volume-configuration-root-directory
                         :initform
                         (common-lisp:error ":rootdirectory is required"))
                        (file-system-id :initarg :|fileSystemId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fsx-windows-file-server-volume-configuration-file-system-id
                         :initform
                         (common-lisp:error ":filesystemid is required"))))
 (common-lisp:export
  (common-lisp:list 'fsx-windows-file-server-volume-configuration
                    'make-fsx-windows-file-server-volume-configuration))
 (common-lisp:defun make-fsx-windows-file-server-volume-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authorization-config root-directory
                     file-system-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'fsx-windows-file-server-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "fileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "rootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "authorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fsx-windows-file-server-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failure common-lisp:nil
                       ((detail :initarg :|detail| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-detail :initform common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-reason :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failure 'make-failure))
 (common-lisp:defun make-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detail reason arn)
   (common-lisp:apply #'common-lisp:make-instance 'failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failures () '(trivial-types:proper-list failure))
 (common-lisp:defun |make-failures|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firelens-configuration common-lisp:nil
                       ((options :initarg :|options| :type
                         (common-lisp:or firelens-configuration-options-map
                                         common-lisp:null)
                         :accessor %firelens-configuration-options :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or firelens-configuration-type
                                         common-lisp:null)
                         :accessor %firelens-configuration-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'firelens-configuration 'make-firelens-configuration))
 (common-lisp:defun make-firelens-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key options type)
   (common-lisp:apply #'common-lisp:make-instance 'firelens-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firelens-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firelens-configuration-options-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-firelens-configuration-options-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype firelens-configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-task-protection-request common-lisp:nil
                       ((tasks :initarg :|tasks| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-task-protection-request-tasks :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-task-protection-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'get-task-protection-request
                    'make-get-task-protection-request))
 (common-lisp:defun make-get-task-protection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tasks cluster)
   (common-lisp:apply #'common-lisp:make-instance 'get-task-protection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-task-protection-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %get-task-protection-response-failures :initform
                         common-lisp:nil)
                        (protected-tasks :initarg :|protectedTasks| :type
                         (common-lisp:or protected-tasks common-lisp:null)
                         :accessor
                         %get-task-protection-response-protected-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-task-protection-response
                    'make-get-task-protection-response))
 (common-lisp:defun make-get-task-protection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures protected-tasks)
   (common-lisp:apply #'common-lisp:make-instance 'get-task-protection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-tasks))
      (common-lisp:list
       (common-lisp:cons "protectedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-task-protection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gpu-ids () '(trivial-types:proper-list string))
 (common-lisp:defun |make-gpu-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass health-check common-lisp:nil
                       ((start-period :initarg :|startPeriod| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %health-check-start-period :initform
                         common-lisp:nil)
                        (retries :initarg :|retries| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %health-check-retries :initform
                         common-lisp:nil)
                        (timeout :initarg :|timeout| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %health-check-timeout :initform
                         common-lisp:nil)
                        (interval :initarg :|interval| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %health-check-interval :initform
                         common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %health-check-command :initform
                         (common-lisp:error ":command is required"))))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defun make-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-period retries timeout interval
                     command)
   (common-lisp:apply #'common-lisp:make-instance 'health-check
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-period))
      (common-lisp:list
       (common-lisp:cons "startPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check))
   common-lisp:nil))
(common-lisp:deftype health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass host-entry common-lisp:nil
                       ((ip-address :initarg :|ipAddress| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %host-entry-ip-address :initform
                         (common-lisp:error ":ipaddress is required"))
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %host-entry-hostname :initform
                         (common-lisp:error ":hostname is required"))))
 (common-lisp:export (common-lisp:list 'host-entry 'make-host-entry))
 (common-lisp:defun make-host-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address hostname)
   (common-lisp:apply #'common-lisp:make-instance 'host-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-entry-list ()
   '(trivial-types:proper-list host-entry))
 (common-lisp:defun |make-host-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass host-volume-properties common-lisp:nil
                       ((source-path :initarg :|sourcePath| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %host-volume-properties-source-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'host-volume-properties 'make-host-volume-properties))
 (common-lisp:defun make-host-volume-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-path)
   (common-lisp:apply #'common-lisp:make-instance 'host-volume-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "sourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          host-volume-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inference-accelerator common-lisp:nil
                       ((device-type :initarg :|deviceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inference-accelerator-device-type :initform
                         (common-lisp:error ":devicetype is required"))
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inference-accelerator-device-name :initform
                         (common-lisp:error ":devicename is required"))))
 (common-lisp:export
  (common-lisp:list 'inference-accelerator 'make-inference-accelerator))
 (common-lisp:defun make-inference-accelerator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type device-name)
   (common-lisp:apply #'common-lisp:make-instance 'inference-accelerator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inference-accelerator-override common-lisp:nil
                       ((device-type :initarg :|deviceType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inference-accelerator-override-device-type :initform
                         common-lisp:nil)
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %inference-accelerator-override-device-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inference-accelerator-override
                    'make-inference-accelerator-override))
 (common-lisp:defun make-inference-accelerator-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'inference-accelerator-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-accelerator-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inference-accelerator-overrides ()
   '(trivial-types:proper-list inference-accelerator-override))
 (common-lisp:defun |make-inference-accelerator-overrides|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-accelerator-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inference-accelerators ()
   '(trivial-types:proper-list inference-accelerator))
 (common-lisp:defun |make-inference-accelerators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inference-accelerator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-health-check-result common-lisp:nil
                       ((last-status-change :initarg :|lastStatusChange| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-health-check-result-last-status-change
                         :initform common-lisp:nil)
                        (last-updated :initarg :|lastUpdated| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %instance-health-check-result-last-updated :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or instance-health-check-state
                                         common-lisp:null)
                         :accessor %instance-health-check-result-status
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or instance-health-check-type
                                         common-lisp:null)
                         :accessor %instance-health-check-result-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-health-check-result
                    'make-instance-health-check-result))
 (common-lisp:defun make-instance-health-check-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-status-change last-updated status
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'instance-health-check-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "lastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "lastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-check-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-check-result-list ()
   '(trivial-types:proper-list instance-health-check-result))
 (common-lisp:defun |make-instance-health-check-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-health-check-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-health-check-state () 'common-lisp:string)
(common-lisp:deftype instance-health-check-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:deftype ipc-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kernel-capabilities common-lisp:nil
                       ((drop :initarg :|drop| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %kernel-capabilities-drop :initform
                         common-lisp:nil)
                        (add :initarg :|add| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %kernel-capabilities-add :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kernel-capabilities 'make-kernel-capabilities))
 (common-lisp:defun make-kernel-capabilities
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drop add)
   (common-lisp:apply #'common-lisp:make-instance 'kernel-capabilities
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop))
      (common-lisp:list
       (common-lisp:cons "drop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kernel-capabilities))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-value-pair common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %key-value-pair-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %key-value-pair-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'key-value-pair 'make-key-value-pair))
 (common-lisp:defun make-key-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-value-pair))
   common-lisp:nil))
(common-lisp:deftype launch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass linux-parameters common-lisp:nil
                       ((swappiness :initarg :|swappiness| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %linux-parameters-swappiness :initform
                         common-lisp:nil)
                        (max-swap :initarg :|maxSwap| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %linux-parameters-max-swap :initform
                         common-lisp:nil)
                        (tmpfs :initarg :|tmpfs| :type
                         (common-lisp:or tmpfs-list common-lisp:null) :accessor
                         %linux-parameters-tmpfs :initform common-lisp:nil)
                        (shared-memory-size :initarg :|sharedMemorySize| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %linux-parameters-shared-memory-size
                         :initform common-lisp:nil)
                        (init-process-enabled :initarg :|initProcessEnabled|
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %linux-parameters-init-process-enabled
                         :initform common-lisp:nil)
                        (devices :initarg :|devices| :type
                         (common-lisp:or devices-list common-lisp:null)
                         :accessor %linux-parameters-devices :initform
                         common-lisp:nil)
                        (capabilities :initarg :|capabilities| :type
                         (common-lisp:or kernel-capabilities common-lisp:null)
                         :accessor %linux-parameters-capabilities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'linux-parameters 'make-linux-parameters))
 (common-lisp:defun make-linux-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key swappiness max-swap tmpfs
                     shared-memory-size init-process-enabled devices
                     capabilities)
   (common-lisp:apply #'common-lisp:make-instance 'linux-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input linux-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input linux-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'init-process-enabled))
      (common-lisp:list
       (common-lisp:cons "initProcessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-memory-size))
      (common-lisp:list
       (common-lisp:cons "sharedMemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmpfs))
      (common-lisp:list
       (common-lisp:cons "tmpfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-swap))
      (common-lisp:list
       (common-lisp:cons "maxSwap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'swappiness))
      (common-lisp:list
       (common-lisp:cons "swappiness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input linux-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-settings-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-account-settings-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-account-settings-request-next-token :initform
                         common-lisp:nil)
                        (effective-settings :initarg :|effectiveSettings| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-account-settings-request-effective-settings
                         :initform common-lisp:nil)
                        (principal-arn :initarg :|principalArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-account-settings-request-principal-arn :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-account-settings-request-value :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor %list-account-settings-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-account-settings-request
                    'make-list-account-settings-request))
 (common-lisp:defun make-list-account-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token effective-settings
                     principal-arn value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-settings))
      (common-lisp:list
       (common-lisp:cons "effectiveSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-account-settings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-account-settings-response-next-token :initform
                         common-lisp:nil)
                        (settings :initarg :|settings| :type
                         (common-lisp:or settings common-lisp:null) :accessor
                         %list-account-settings-response-settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-account-settings-response
                    'make-list-account-settings-response))
 (common-lisp:defun make-list-account-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-account-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attributes-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %list-attributes-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-attributes-request-next-token :initform
                         common-lisp:nil)
                        (attribute-value :initarg :|attributeValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-attributes-request-attribute-value :initform
                         common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-attributes-request-attribute-name :initform
                         common-lisp:nil)
                        (target-type :initarg :|targetType| :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %list-attributes-request-target-type
                         :initform
                         (common-lisp:error ":targettype is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-attributes-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-attributes-request 'make-list-attributes-request))
 (common-lisp:defun make-list-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token attribute-value
                     attribute-name target-type cluster)
   (common-lisp:apply #'common-lisp:make-instance 'list-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "attributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attributes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-attributes-response-next-token :initform
                         common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %list-attributes-response-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-attributes-response 'make-list-attributes-response))
 (common-lisp:defun make-list-attributes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token attributes)
   (common-lisp:apply #'common-lisp:make-instance 'list-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %list-clusters-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-clusters-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-request 'make-list-clusters-request))
 (common-lisp:defun make-list-clusters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-clusters-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-clusters-response-next-token :initform
                         common-lisp:nil)
                        (cluster-arns :initarg :|clusterArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-clusters-response-cluster-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-clusters-response 'make-list-clusters-response))
 (common-lisp:defun make-list-clusters-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token cluster-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-clusters-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arns))
      (common-lisp:list
       (common-lisp:cons "clusterArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-clusters-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-instances-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or container-instance-status
                                         common-lisp:null)
                         :accessor %list-container-instances-request-status
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %list-container-instances-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-container-instances-request-next-token :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-container-instances-request-filter :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-container-instances-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-container-instances-request
                    'make-list-container-instances-request))
 (common-lisp:defun make-list-container-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status max-results next-token filter
                     cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-container-instances-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-container-instances-response-next-token
                         :initform common-lisp:nil)
                        (container-instance-arns :initarg
                         :|containerInstanceArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-container-instances-response-container-instance-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-container-instances-response
                    'make-list-container-instances-response))
 (common-lisp:defun make-list-container-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token container-instance-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-container-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arns))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-container-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-by-namespace-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %list-services-by-namespace-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-by-namespace-request-next-token
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-by-namespace-request-namespace
                         :initform
                         (common-lisp:error ":namespace is required"))))
 (common-lisp:export
  (common-lisp:list 'list-services-by-namespace-request
                    'make-list-services-by-namespace-request))
 (common-lisp:defun make-list-services-by-namespace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-services-by-namespace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-by-namespace-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-by-namespace-response-next-token
                         :initform common-lisp:nil)
                        (service-arns :initarg :|serviceArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-services-by-namespace-response-service-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-services-by-namespace-response
                    'make-list-services-by-namespace-response))
 (common-lisp:defun make-list-services-by-namespace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token service-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-services-by-namespace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arns))
      (common-lisp:list
       (common-lisp:cons "serviceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-by-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-request common-lisp:nil
                       ((scheduling-strategy :initarg :|schedulingStrategy|
                         :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor %list-services-request-scheduling-strategy
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %list-services-request-launch-type :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %list-services-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-request-next-token :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-services-request 'make-list-services-request))
 (common-lisp:defun make-list-services-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduling-strategy launch-type
                     max-results next-token cluster)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-response-next-token :initform
                         common-lisp:nil)
                        (service-arns :initarg :|serviceArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-services-response-service-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-services-response 'make-list-services-response))
 (common-lisp:defun make-list-services-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token service-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arns))
      (common-lisp:list
       (common-lisp:cons "serviceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definition-families-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %list-task-definition-families-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definition-families-request-next-token
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or task-definition-family-status
                                         common-lisp:null)
                         :accessor
                         %list-task-definition-families-request-status
                         :initform common-lisp:nil)
                        (family-prefix :initarg :|familyPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definition-families-request-family-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-task-definition-families-request
                    'make-list-task-definition-families-request))
 (common-lisp:defun make-list-task-definition-families-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token status
                     family-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definition-families-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family-prefix))
      (common-lisp:list
       (common-lisp:cons "familyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definition-families-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definition-families-response-next-token
                         :initform common-lisp:nil)
                        (families :initarg :|families| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-task-definition-families-response-families
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-task-definition-families-response
                    'make-list-task-definition-families-response))
 (common-lisp:defun make-list-task-definition-families-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token families)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definition-families-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'families))
      (common-lisp:list
       (common-lisp:cons "families"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definition-families-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definitions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %list-task-definitions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definitions-request-next-token :initform
                         common-lisp:nil)
                        (sort :initarg :|sort| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-task-definitions-request-sort :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or task-definition-status
                                         common-lisp:null)
                         :accessor %list-task-definitions-request-status
                         :initform common-lisp:nil)
                        (family-prefix :initarg :|familyPrefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definitions-request-family-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-task-definitions-request
                    'make-list-task-definitions-request))
 (common-lisp:defun make-list-task-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token sort status
                     family-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family-prefix))
      (common-lisp:list
       (common-lisp:cons "familyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-task-definitions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-task-definitions-response-next-token :initform
                         common-lisp:nil)
                        (task-definition-arns :initarg :|taskDefinitionArns|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %list-task-definitions-response-task-definition-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-task-definitions-response
                    'make-list-task-definitions-response))
 (common-lisp:defun make-list-task-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token task-definition-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-task-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-definition-arns))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-task-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tasks-request common-lisp:nil
                       ((launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %list-tasks-request-launch-type :initform
                         common-lisp:nil)
                        (desired-status :initarg :|desiredStatus| :type
                         (common-lisp:or desired-status common-lisp:null)
                         :accessor %list-tasks-request-desired-status :initform
                         common-lisp:nil)
                        (service-name :initarg :|serviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-service-name :initform
                         common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-started-by :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %list-tasks-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-next-token :initform
                         common-lisp:nil)
                        (family :initarg :|family| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-family :initform common-lisp:nil)
                        (container-instance :initarg :|containerInstance| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-container-instance :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tasks-request 'make-list-tasks-request))
 (common-lisp:defun make-list-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-type desired-status service-name
                     started-by max-results next-token family
                     container-instance cluster)
   (common-lisp:apply #'common-lisp:make-instance 'list-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-status))
      (common-lisp:list
       (common-lisp:cons "desiredStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tasks-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tasks-response-next-token :initform
                         common-lisp:nil)
                        (task-arns :initarg :|taskArns| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-tasks-response-task-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tasks-response 'make-list-tasks-response))
 (common-lisp:defun make-list-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token task-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arns))
      (common-lisp:list
       (common-lisp:cons "taskArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((container-port :initarg :|containerPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %load-balancer-container-port :initform
                         common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %load-balancer-container-name :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :|loadBalancerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %load-balancer-load-balancer-name :initform
                         common-lisp:nil)
                        (target-group-arn :initarg :|targetGroupArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %load-balancer-target-group-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defun make-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-port container-name
                     load-balancer-name target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "targetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancers ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun |make-load-balancers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-configuration common-lisp:nil
                       ((secret-options :initarg :|secretOptions| :type
                         (common-lisp:or secret-list common-lisp:null)
                         :accessor %log-configuration-secret-options :initform
                         common-lisp:nil)
                        (options :initarg :|options| :type
                         (common-lisp:or log-configuration-options-map
                                         common-lisp:null)
                         :accessor %log-configuration-options :initform
                         common-lisp:nil)
                        (log-driver :initarg :|logDriver| :type
                         (common-lisp:or log-driver common-lisp:null) :accessor
                         %log-configuration-log-driver :initform
                         (common-lisp:error ":logdriver is required"))))
 (common-lisp:export
  (common-lisp:list 'log-configuration 'make-log-configuration))
 (common-lisp:defun make-log-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-options options log-driver)
   (common-lisp:apply #'common-lisp:make-instance 'log-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-driver))
      (common-lisp:list
       (common-lisp:cons "logDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-options))
      (common-lisp:list
       (common-lisp:cons "secretOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-configuration-options-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-log-configuration-options-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype log-driver () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass managed-agent common-lisp:nil
                       ((last-status :initarg :|lastStatus| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-agent-last-status :initform common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-agent-reason :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or managed-agent-name common-lisp:null)
                         :accessor %managed-agent-name :initform
                         common-lisp:nil)
                        (last-started-at :initarg :|lastStartedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %managed-agent-last-started-at :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'managed-agent 'make-managed-agent))
 (common-lisp:defun make-managed-agent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-status reason name last-started-at)
   (common-lisp:apply #'common-lisp:make-instance 'managed-agent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-started-at))
      (common-lisp:list
       (common-lisp:cons "lastStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-agent))
   common-lisp:nil))
(common-lisp:deftype managed-agent-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass managed-agent-state-change common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-agent-state-change-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-agent-state-change-status :initform
                         (common-lisp:error ":status is required"))
                        (managed-agent-name :initarg :|managedAgentName| :type
                         (common-lisp:or managed-agent-name common-lisp:null)
                         :accessor
                         %managed-agent-state-change-managed-agent-name
                         :initform
                         (common-lisp:error ":managedagentname is required"))
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %managed-agent-state-change-container-name :initform
                         (common-lisp:error ":containername is required"))))
 (common-lisp:export
  (common-lisp:list 'managed-agent-state-change
                    'make-managed-agent-state-change))
 (common-lisp:defun make-managed-agent-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason status managed-agent-name
                     container-name)
   (common-lisp:apply #'common-lisp:make-instance 'managed-agent-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agent-name))
      (common-lisp:list
       (common-lisp:cons "managedAgentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-agent-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-agent-state-changes ()
   '(trivial-types:proper-list managed-agent-state-change))
 (common-lisp:defun |make-managed-agent-state-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-agent-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype managed-agents ()
   '(trivial-types:proper-list managed-agent))
 (common-lisp:defun |make-managed-agents|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-agent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass managed-scaling common-lisp:nil
                       ((instance-warmup-period :initarg
                         :|instanceWarmupPeriod| :type
                         (common-lisp:or managed-scaling-instance-warmup-period
                                         common-lisp:null)
                         :accessor %managed-scaling-instance-warmup-period
                         :initform common-lisp:nil)
                        (maximum-scaling-step-size :initarg
                         :|maximumScalingStepSize| :type
                         (common-lisp:or managed-scaling-step-size
                                         common-lisp:null)
                         :accessor %managed-scaling-maximum-scaling-step-size
                         :initform common-lisp:nil)
                        (minimum-scaling-step-size :initarg
                         :|minimumScalingStepSize| :type
                         (common-lisp:or managed-scaling-step-size
                                         common-lisp:null)
                         :accessor %managed-scaling-minimum-scaling-step-size
                         :initform common-lisp:nil)
                        (target-capacity :initarg :|targetCapacity| :type
                         (common-lisp:or managed-scaling-target-capacity
                                         common-lisp:null)
                         :accessor %managed-scaling-target-capacity :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or managed-scaling-status
                                         common-lisp:null)
                         :accessor %managed-scaling-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'managed-scaling 'make-managed-scaling))
 (common-lisp:defun make-managed-scaling
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-warmup-period
                     maximum-scaling-step-size minimum-scaling-step-size
                     target-capacity status)
   (common-lisp:apply #'common-lisp:make-instance 'managed-scaling
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-scaling))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-scaling))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-capacity))
      (common-lisp:list
       (common-lisp:cons "targetCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-scaling-step-size))
      (common-lisp:list
       (common-lisp:cons "minimumScalingStepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-scaling-step-size))
      (common-lisp:list
       (common-lisp:cons "maximumScalingStepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-warmup-period))
      (common-lisp:list
       (common-lisp:cons "instanceWarmupPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-scaling))
   common-lisp:nil))
(common-lisp:deftype managed-scaling-instance-warmup-period ()
  'common-lisp:integer)
(common-lisp:deftype managed-scaling-status () 'common-lisp:string)
(common-lisp:deftype managed-scaling-step-size () 'common-lisp:integer)
(common-lisp:deftype managed-scaling-target-capacity () 'common-lisp:integer)
(common-lisp:deftype managed-termination-protection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition missing-version-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'missing-version-exception)))
(common-lisp:progn
 (common-lisp:defclass mount-point common-lisp:nil
                       ((read-only :initarg :|readOnly| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %mount-point-read-only :initform
                         common-lisp:nil)
                        (container-path :initarg :|containerPath| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %mount-point-container-path :initform common-lisp:nil)
                        (source-volume :initarg :|sourceVolume| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %mount-point-source-volume :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mount-point 'make-mount-point))
 (common-lisp:defun make-mount-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-only container-path source-volume)
   (common-lisp:apply #'common-lisp:make-instance 'mount-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mount-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mount-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "sourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mount-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mount-point-list ()
   '(trivial-types:proper-list mount-point))
 (common-lisp:defun |make-mount-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mount-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition namespace-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'namespace-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass network-binding common-lisp:nil
                       ((host-port-range :initarg :|hostPortRange| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-binding-host-port-range :initform
                         common-lisp:nil)
                        (container-port-range :initarg :|containerPortRange|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %network-binding-container-port-range
                         :initform common-lisp:nil)
                        (protocol :initarg :|protocol| :type
                         (common-lisp:or transport-protocol common-lisp:null)
                         :accessor %network-binding-protocol :initform
                         common-lisp:nil)
                        (host-port :initarg :|hostPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %network-binding-host-port :initform
                         common-lisp:nil)
                        (container-port :initarg :|containerPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %network-binding-container-port :initform
                         common-lisp:nil)
                        (bind-ip :initarg :|bindIP| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-binding-bind-ip :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network-binding 'make-network-binding))
 (common-lisp:defun make-network-binding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-port-range container-port-range
                     protocol host-port container-port bind-ip)
   (common-lisp:apply #'common-lisp:make-instance 'network-binding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-binding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-binding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bind-ip))
      (common-lisp:list
       (common-lisp:cons "bindIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "hostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-port-range))
      (common-lisp:list
       (common-lisp:cons "containerPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port-range))
      (common-lisp:list
       (common-lisp:cons "hostPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-binding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-bindings ()
   '(trivial-types:proper-list network-binding))
 (common-lisp:defun |make-network-bindings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-binding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((awsvpc-configuration :initarg :|awsvpcConfiguration|
                         :type
                         (common-lisp:or aws-vpc-configuration
                                         common-lisp:null)
                         :accessor %network-configuration-awsvpc-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defun make-network-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key awsvpc-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsvpc-configuration))
      (common-lisp:list
       (common-lisp:cons "awsvpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((ipv6address :initarg :|ipv6Address| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-interface-ipv6address :initform
                         common-lisp:nil)
                        (private-ipv4address :initarg :|privateIpv4Address|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %network-interface-private-ipv4address
                         :initform common-lisp:nil)
                        (attachment-id :initarg :|attachmentId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-interface-attachment-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defun make-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6address private-ipv4address
                     attachment-id)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "attachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "privateIpv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun |make-network-interfaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-update-available-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-update-available-exception)))
(common-lisp:deftype osfamily () 'common-lisp:string)
(common-lisp:deftype pid-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass placement-constraint common-lisp:nil
                       ((expression :initarg :|expression| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %placement-constraint-expression :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or placement-constraint-type
                                         common-lisp:null)
                         :accessor %placement-constraint-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-constraint 'make-placement-constraint))
 (common-lisp:defun make-placement-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression type)
   (common-lisp:apply #'common-lisp:make-instance 'placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-constraint))
   common-lisp:nil))
(common-lisp:deftype placement-constraint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype placement-constraints ()
   '(trivial-types:proper-list placement-constraint))
 (common-lisp:defun |make-placement-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype placement-strategies ()
   '(trivial-types:proper-list placement-strategy))
 (common-lisp:defun |make-placement-strategies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list placement-strategy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass placement-strategy common-lisp:nil
                       ((field :initarg :|field| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %placement-strategy-field :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or placement-strategy-type
                                         common-lisp:null)
                         :accessor %placement-strategy-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'placement-strategy 'make-placement-strategy))
 (common-lisp:defun make-placement-strategy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key field type)
   (common-lisp:apply #'common-lisp:make-instance 'placement-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input placement-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input placement-strategy))
   common-lisp:nil))
(common-lisp:deftype placement-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-device common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or platform-device-type common-lisp:null)
                         :accessor %platform-device-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-device-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'platform-device 'make-platform-device))
 (common-lisp:defun make-platform-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'platform-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-device))
   common-lisp:nil))
(common-lisp:deftype platform-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-devices ()
   '(trivial-types:proper-list platform-device))
 (common-lisp:defun |make-platform-devices|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-device))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition platform-task-definition-incompatibility-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'platform-task-definition-incompatibility-exception)))
(common-lisp:progn
 (common-lisp:define-condition platform-unknown-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'platform-unknown-exception)))
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((container-port-range :initarg :|containerPortRange|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %port-mapping-container-port-range :initform
                         common-lisp:nil)
                        (app-protocol :initarg :|appProtocol| :type
                         (common-lisp:or application-protocol common-lisp:null)
                         :accessor %port-mapping-app-protocol :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %port-mapping-name :initform common-lisp:nil)
                        (protocol :initarg :|protocol| :type
                         (common-lisp:or transport-protocol common-lisp:null)
                         :accessor %port-mapping-protocol :initform
                         common-lisp:nil)
                        (host-port :initarg :|hostPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %port-mapping-host-port :initform
                         common-lisp:nil)
                        (container-port :initarg :|containerPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %port-mapping-container-port :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defun make-port-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-port-range app-protocol name
                     protocol host-port container-port)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "hostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-protocol))
      (common-lisp:list
       (common-lisp:cons "appProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-port-range))
      (common-lisp:list
       (common-lisp:cons "containerPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-mapping-list ()
   '(trivial-types:proper-list port-mapping))
 (common-lisp:defun |make-port-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype propagate-tags () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-task common-lisp:nil
                       ((expiration-date :initarg :|expirationDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %protected-task-expiration-date :initform
                         common-lisp:nil)
                        (protection-enabled :initarg :|protectionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %protected-task-protection-enabled :initform
                         common-lisp:nil)
                        (task-arn :initarg :|taskArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %protected-task-task-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'protected-task 'make-protected-task))
 (common-lisp:defun make-protected-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration-date protection-enabled
                     task-arn)
   (common-lisp:apply #'common-lisp:make-instance 'protected-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-enabled))
      (common-lisp:list
       (common-lisp:cons "protectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "expirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-tasks ()
   '(trivial-types:proper-list protected-task))
 (common-lisp:defun |make-protected-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass proxy-configuration common-lisp:nil
                       ((properties :initarg :|properties| :type
                         (common-lisp:or proxy-configuration-properties
                                         common-lisp:null)
                         :accessor %proxy-configuration-properties :initform
                         common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %proxy-configuration-container-name :initform
                         (common-lisp:error ":containername is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or proxy-configuration-type
                                         common-lisp:null)
                         :accessor %proxy-configuration-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'proxy-configuration 'make-proxy-configuration))
 (common-lisp:defun make-proxy-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key properties container-name type)
   (common-lisp:apply #'common-lisp:make-instance 'proxy-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input proxy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input proxy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype proxy-configuration-properties ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-proxy-configuration-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype proxy-configuration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-account-setting-default-request common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-account-setting-default-request-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor %put-account-setting-default-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-default-request
                    'make-put-account-setting-default-request))
 (common-lisp:defun make-put-account-setting-default-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-setting-default-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-default-response common-lisp:nil
                       ((setting :initarg :|setting| :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %put-account-setting-default-response-setting
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-default-response
                    'make-put-account-setting-default-response))
 (common-lisp:defun make-put-account-setting-default-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-account-setting-default-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-default-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-request common-lisp:nil
                       ((principal-arn :initarg :|principalArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-account-setting-request-principal-arn :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-account-setting-request-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor %put-account-setting-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-request
                    'make-put-account-setting-request))
 (common-lisp:defun make-put-account-setting-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-arn value name)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-account-setting-response common-lisp:nil
                       ((setting :initarg :|setting| :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %put-account-setting-response-setting :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-account-setting-response
                    'make-put-account-setting-response))
 (common-lisp:defun make-put-account-setting-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting)
   (common-lisp:apply #'common-lisp:make-instance 'put-account-setting-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting))
      (common-lisp:list
       (common-lisp:cons "setting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-account-setting-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-attributes-request common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %put-attributes-request-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-attributes-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-attributes-request 'make-put-attributes-request))
 (common-lisp:defun make-put-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes cluster)
   (common-lisp:apply #'common-lisp:make-instance 'put-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-attributes-response common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %put-attributes-response-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-attributes-response 'make-put-attributes-response))
 (common-lisp:defun make-put-attributes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance 'put-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-capacity-providers-request common-lisp:nil
                       ((default-capacity-provider-strategy :initarg
                         :|defaultCapacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %put-cluster-capacity-providers-request-default-capacity-provider-strategy
                         :initform
                         (common-lisp:error
                          ":defaultcapacityproviderstrategy is required"))
                        (capacity-providers :initarg :|capacityProviders| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %put-cluster-capacity-providers-request-capacity-providers
                         :initform
                         (common-lisp:error ":capacityproviders is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-cluster-capacity-providers-request-cluster
                         :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'put-cluster-capacity-providers-request
                    'make-put-cluster-capacity-providers-request))
 (common-lisp:defun make-put-cluster-capacity-providers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-capacity-provider-strategy
                     capacity-providers cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-cluster-capacity-providers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "capacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "defaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-cluster-capacity-providers-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %put-cluster-capacity-providers-response-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-cluster-capacity-providers-response
                    'make-put-cluster-capacity-providers-response))
 (common-lisp:defun make-put-cluster-capacity-providers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-cluster-capacity-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-cluster-capacity-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-container-instance-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %register-container-instance-request-tags :initform
                         common-lisp:nil)
                        (platform-devices :initarg :|platformDevices| :type
                         (common-lisp:or platform-devices common-lisp:null)
                         :accessor
                         %register-container-instance-request-platform-devices
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %register-container-instance-request-attributes
                         :initform common-lisp:nil)
                        (container-instance-arn :initarg
                         :|containerInstanceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-container-instance-request-container-instance-arn
                         :initform common-lisp:nil)
                        (version-info :initarg :|versionInfo| :type
                         (common-lisp:or version-info common-lisp:null)
                         :accessor
                         %register-container-instance-request-version-info
                         :initform common-lisp:nil)
                        (total-resources :initarg :|totalResources| :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         %register-container-instance-request-total-resources
                         :initform common-lisp:nil)
                        (instance-identity-document-signature :initarg
                         :|instanceIdentityDocumentSignature| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-container-instance-request-instance-identity-document-signature
                         :initform common-lisp:nil)
                        (instance-identity-document :initarg
                         :|instanceIdentityDocument| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-container-instance-request-instance-identity-document
                         :initform common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-container-instance-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-container-instance-request
                    'make-register-container-instance-request))
 (common-lisp:defun make-register-container-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags platform-devices attributes
                     container-instance-arn version-info total-resources
                     instance-identity-document-signature
                     instance-identity-document cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-identity-document))
      (common-lisp:list
       (common-lisp:cons "instanceIdentityDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-identity-document-signature))
      (common-lisp:list
       (common-lisp:cons "instanceIdentityDocumentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-resources))
      (common-lisp:list
       (common-lisp:cons "totalResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-info))
      (common-lisp:list
       (common-lisp:cons "versionInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-devices))
      (common-lisp:list
       (common-lisp:cons "platformDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-container-instance-response common-lisp:nil
                       ((container-instance :initarg :|containerInstance| :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         %register-container-instance-response-container-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-container-instance-response
                    'make-register-container-instance-response))
 (common-lisp:defun make-register-container-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-container-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-definition-request common-lisp:nil
                       ((runtime-platform :initarg :|runtimePlatform| :type
                         (common-lisp:or runtime-platform common-lisp:null)
                         :accessor
                         %register-task-definition-request-runtime-platform
                         :initform common-lisp:nil)
                        (ephemeral-storage :initarg :|ephemeralStorage| :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor
                         %register-task-definition-request-ephemeral-storage
                         :initform common-lisp:nil)
                        (inference-accelerators :initarg
                         :|inferenceAccelerators| :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor
                         %register-task-definition-request-inference-accelerators
                         :initform common-lisp:nil)
                        (proxy-configuration :initarg :|proxyConfiguration|
                         :type
                         (common-lisp:or proxy-configuration common-lisp:null)
                         :accessor
                         %register-task-definition-request-proxy-configuration
                         :initform common-lisp:nil)
                        (ipc-mode :initarg :|ipcMode| :type
                         (common-lisp:or ipc-mode common-lisp:null) :accessor
                         %register-task-definition-request-ipc-mode :initform
                         common-lisp:nil)
                        (pid-mode :initarg :|pidMode| :type
                         (common-lisp:or pid-mode common-lisp:null) :accessor
                         %register-task-definition-request-pid-mode :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %register-task-definition-request-tags :initform
                         common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-task-definition-request-memory :initform
                         common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-task-definition-request-cpu :initform
                         common-lisp:nil)
                        (requires-compatibilities :initarg
                         :|requiresCompatibilities| :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor
                         %register-task-definition-request-requires-compatibilities
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or task-definition-placement-constraints
                                         common-lisp:null)
                         :accessor
                         %register-task-definition-request-placement-constraints
                         :initform common-lisp:nil)
                        (volumes :initarg :|volumes| :type
                         (common-lisp:or volume-list common-lisp:null)
                         :accessor %register-task-definition-request-volumes
                         :initform common-lisp:nil)
                        (container-definitions :initarg :|containerDefinitions|
                         :type
                         (common-lisp:or container-definitions
                                         common-lisp:null)
                         :accessor
                         %register-task-definition-request-container-definitions
                         :initform
                         (common-lisp:error
                          ":containerdefinitions is required"))
                        (network-mode :initarg :|networkMode| :type
                         (common-lisp:or network-mode common-lisp:null)
                         :accessor
                         %register-task-definition-request-network-mode
                         :initform common-lisp:nil)
                        (execution-role-arn :initarg :|executionRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-task-definition-request-execution-role-arn
                         :initform common-lisp:nil)
                        (task-role-arn :initarg :|taskRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-task-definition-request-task-role-arn
                         :initform common-lisp:nil)
                        (family :initarg :|family| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %register-task-definition-request-family :initform
                         (common-lisp:error ":family is required"))))
 (common-lisp:export
  (common-lisp:list 'register-task-definition-request
                    'make-register-task-definition-request))
 (common-lisp:defun make-register-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-platform ephemeral-storage
                     inference-accelerators proxy-configuration ipc-mode
                     pid-mode tags memory cpu requires-compatibilities
                     placement-constraints volumes container-definitions
                     network-mode execution-role-arn task-role-arn family)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "networkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "containerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "requiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "pidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "ipcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "proxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-platform))
      (common-lisp:list
       (common-lisp:cons "runtimePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-definition-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %register-task-definition-response-tags :initform
                         common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or task-definition common-lisp:null)
                         :accessor
                         %register-task-definition-response-task-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-task-definition-response
                    'make-register-task-definition-response))
 (common-lisp:defun make-register-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags task-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-credentials common-lisp:nil
                       ((credentials-parameter :initarg :|credentialsParameter|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %repository-credentials-credentials-parameter
                         :initform
                         (common-lisp:error
                          ":credentialsparameter is required"))))
 (common-lisp:export
  (common-lisp:list 'repository-credentials 'make-repository-credentials))
 (common-lisp:defun make-repository-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credentials-parameter)
   (common-lisp:apply #'common-lisp:make-instance 'repository-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "credentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype requires-attributes ()
   '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-requires-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((string-set-value :initarg :|stringSetValue| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %resource-string-set-value :initform
                         common-lisp:nil)
                        (integer-value :initarg :|integerValue| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %resource-integer-value :initform common-lisp:nil)
                        (long-value :initarg :|longValue| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %resource-long-value :initform common-lisp:nil)
                        (double-value :initarg :|doubleValue| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %resource-double-value :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defun make-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key string-set-value integer-value long-value
                     double-value type name)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-set-value))
      (common-lisp:list
       (common-lisp:cons "stringSetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass resource-requirement common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-requirement-type :initform
                         (common-lisp:error ":type is required"))
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-requirement-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-requirement 'make-resource-requirement))
 (common-lisp:defun make-resource-requirement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value)
   (common-lisp:apply #'common-lisp:make-instance 'resource-requirement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-requirement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-requirement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-requirement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-requirements ()
   '(trivial-types:proper-list resource-requirement))
 (common-lisp:defun |make-resource-requirements|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-requirement))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass run-task-request common-lisp:nil
                       ((task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-task-definition :initform
                         (common-lisp:error ":taskdefinition is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %run-task-request-tags :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-started-by :initform
                         common-lisp:nil)
                        (reference-id :initarg :|referenceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-reference-id :initform
                         common-lisp:nil)
                        (propagate-tags :initarg :|propagateTags| :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %run-task-request-propagate-tags :initform
                         common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-platform-version :initform
                         common-lisp:nil)
                        (placement-strategy :initarg :|placementStrategy| :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor %run-task-request-placement-strategy
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor %run-task-request-placement-constraints
                         :initform common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor %run-task-request-overrides :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %run-task-request-network-configuration
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %run-task-request-launch-type :initform
                         common-lisp:nil)
                        (group :initarg :|group| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-group :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %run-task-request-enable-execute-command :initform
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :|enableECSManagedTags| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %run-task-request-enable-ecsmanaged-tags :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %run-task-request-count :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %run-task-request-cluster :initform common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %run-task-request-capacity-provider-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'run-task-request 'make-run-task-request))
 (common-lisp:defun make-run-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition tags started-by
                     reference-id propagate-tags platform-version
                     placement-strategy placement-constraints overrides
                     network-configuration launch-type group
                     enable-execute-command enable-ecsmanaged-tags count
                     cluster capacity-provider-strategy)
   (common-lisp:apply #'common-lisp:make-instance 'run-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-task-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %run-task-response-failures :initform common-lisp:nil)
                        (tasks :initarg :|tasks| :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         %run-task-response-tasks :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'run-task-response 'make-run-task-response))
 (common-lisp:defun make-run-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures tasks)
   (common-lisp:apply #'common-lisp:make-instance 'run-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass runtime-platform common-lisp:nil
                       ((operating-system-family :initarg
                         :|operatingSystemFamily| :type
                         (common-lisp:or osfamily common-lisp:null) :accessor
                         %runtime-platform-operating-system-family :initform
                         common-lisp:nil)
                        (cpu-architecture :initarg :|cpuArchitecture| :type
                         (common-lisp:or cpuarchitecture common-lisp:null)
                         :accessor %runtime-platform-cpu-architecture :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'runtime-platform 'make-runtime-platform))
 (common-lisp:defun make-runtime-platform
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operating-system-family cpu-architecture)
   (common-lisp:apply #'common-lisp:make-instance 'runtime-platform
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-architecture))
      (common-lisp:list
       (common-lisp:cons "cpuArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-system-family))
      (common-lisp:list
       (common-lisp:cons "operatingSystemFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scale common-lisp:nil
                       ((unit :initarg :|unit| :type
                         (common-lisp:or scale-unit common-lisp:null) :accessor
                         %scale-unit :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %scale-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scale 'make-scale))
 (common-lisp:defun make-scale
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit value)
   (common-lisp:apply #'common-lisp:make-instance 'scale
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scale))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scale))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scale))
   common-lisp:nil))
(common-lisp:deftype scale-unit () 'common-lisp:string)
(common-lisp:deftype scheduling-strategy () 'common-lisp:string)
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass secret common-lisp:nil
                       ((value-from :initarg :|valueFrom| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %secret-value-from :initform
                         (common-lisp:error ":valuefrom is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %secret-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'secret 'make-secret))
 (common-lisp:defun make-secret
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-from name)
   (common-lisp:apply #'common-lisp:make-instance 'secret
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "valueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input secret))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secret-list () '(trivial-types:proper-list secret))
 (common-lisp:defun |make-secret-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list secret))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition server-exception
     (ecs-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-exception 'server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %service-enable-execute-command :initform
                         common-lisp:nil)
                        (propagate-tags :initarg :|propagateTags| :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %service-propagate-tags :initform
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :|enableECSManagedTags| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %service-enable-ecsmanaged-tags :initform
                         common-lisp:nil)
                        (created-by :initarg :|createdBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-created-by :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %service-tags :initform common-lisp:nil)
                        (deployment-controller :initarg :|deploymentController|
                         :type
                         (common-lisp:or deployment-controller
                                         common-lisp:null)
                         :accessor %service-deployment-controller :initform
                         common-lisp:nil)
                        (scheduling-strategy :initarg :|schedulingStrategy|
                         :type
                         (common-lisp:or scheduling-strategy common-lisp:null)
                         :accessor %service-scheduling-strategy :initform
                         common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :|healthCheckGracePeriodSeconds| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %service-health-check-grace-period-seconds
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %service-network-configuration :initform
                         common-lisp:nil)
                        (placement-strategy :initarg :|placementStrategy| :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor %service-placement-strategy :initform
                         common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor %service-placement-constraints :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-created-at :initform common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or service-events common-lisp:null)
                         :accessor %service-events :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-role-arn :initform common-lisp:nil)
                        (deployments :initarg :|deployments| :type
                         (common-lisp:or deployments common-lisp:null)
                         :accessor %service-deployments :initform
                         common-lisp:nil)
                        (task-sets :initarg :|taskSets| :type
                         (common-lisp:or task-sets common-lisp:null) :accessor
                         %service-task-sets :initform common-lisp:nil)
                        (deployment-configuration :initarg
                         :|deploymentConfiguration| :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor %service-deployment-configuration :initform
                         common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-task-definition :initform common-lisp:nil)
                        (platform-family :initarg :|platformFamily| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-platform-family :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-platform-version :initform common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %service-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %service-launch-type :initform
                         common-lisp:nil)
                        (pending-count :initarg :|pendingCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %service-pending-count :initform common-lisp:nil)
                        (running-count :initarg :|runningCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %service-running-count :initform common-lisp:nil)
                        (desired-count :initarg :|desiredCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %service-desired-count :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-status :initform common-lisp:nil)
                        (service-registries :initarg :|serviceRegistries| :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor %service-service-registries :initform
                         common-lisp:nil)
                        (load-balancers :initarg :|loadBalancers| :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %service-load-balancers :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-cluster-arn :initform common-lisp:nil)
                        (service-name :initarg :|serviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-service-name :initform common-lisp:nil)
                        (service-arn :initarg :|serviceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-service-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defun make-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-execute-command propagate-tags
                     enable-ecsmanaged-tags created-by tags
                     deployment-controller scheduling-strategy
                     health-check-grace-period-seconds network-configuration
                     placement-strategy placement-constraints created-at events
                     role-arn deployments task-sets deployment-configuration
                     task-definition platform-family platform-version
                     capacity-provider-strategy launch-type pending-count
                     running-count desired-count status service-registries
                     load-balancers cluster-arn service-name service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "serviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-sets))
      (common-lisp:list
       (common-lisp:cons "taskSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "schedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "deploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-connect-client-alias common-lisp:nil
                       ((dns-name :initarg :|dnsName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-client-alias-dns-name :initform
                         common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %service-connect-client-alias-port :initform
                         (common-lisp:error ":port is required"))))
 (common-lisp:export
  (common-lisp:list 'service-connect-client-alias
                    'make-service-connect-client-alias))
 (common-lisp:defun make-service-connect-client-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns-name port)
   (common-lisp:apply #'common-lisp:make-instance 'service-connect-client-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "dnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-client-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-client-alias-list ()
   '(trivial-types:proper-list service-connect-client-alias))
 (common-lisp:defun |make-service-connect-client-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-connect-client-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-connect-configuration common-lisp:nil
                       ((log-configuration :initarg :|logConfiguration| :type
                         (common-lisp:or log-configuration common-lisp:null)
                         :accessor
                         %service-connect-configuration-log-configuration
                         :initform common-lisp:nil)
                        (services :initarg :|services| :type
                         (common-lisp:or service-connect-service-list
                                         common-lisp:null)
                         :accessor %service-connect-configuration-services
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-configuration-namespace :initform
                         common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %service-connect-configuration-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'service-connect-configuration
                    'make-service-connect-configuration))
 (common-lisp:defun make-service-connect-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-configuration services namespace
                     enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "logConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-connect-service common-lisp:nil
                       ((ingress-port-override :initarg :|ingressPortOverride|
                         :type (common-lisp:or port-number common-lisp:null)
                         :accessor
                         %service-connect-service-ingress-port-override
                         :initform common-lisp:nil)
                        (client-aliases :initarg :|clientAliases| :type
                         (common-lisp:or service-connect-client-alias-list
                                         common-lisp:null)
                         :accessor %service-connect-service-client-aliases
                         :initform common-lisp:nil)
                        (discovery-name :initarg :|discoveryName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-service-discovery-name :initform
                         common-lisp:nil)
                        (port-name :initarg :|portName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-service-port-name :initform
                         (common-lisp:error ":portname is required"))))
 (common-lisp:export
  (common-lisp:list 'service-connect-service 'make-service-connect-service))
 (common-lisp:defun make-service-connect-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingress-port-override client-aliases
                     discovery-name port-name)
   (common-lisp:apply #'common-lisp:make-instance 'service-connect-service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "portName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-name))
      (common-lisp:list
       (common-lisp:cons "discoveryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-aliases))
      (common-lisp:list
       (common-lisp:cons "clientAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-port-override))
      (common-lisp:list
       (common-lisp:cons "ingressPortOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-service-list ()
   '(trivial-types:proper-list service-connect-service))
 (common-lisp:defun |make-service-connect-service-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-connect-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-connect-service-resource common-lisp:nil
                       ((discovery-arn :initarg :|discoveryArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-service-resource-discovery-arn
                         :initform common-lisp:nil)
                        (discovery-name :initarg :|discoveryName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-connect-service-resource-discovery-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-connect-service-resource
                    'make-service-connect-service-resource))
 (common-lisp:defun make-service-connect-service-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key discovery-arn discovery-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-connect-service-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-name))
      (common-lisp:list
       (common-lisp:cons "discoveryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-arn))
      (common-lisp:list
       (common-lisp:cons "discoveryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-connect-service-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-connect-service-resource-list ()
   '(trivial-types:proper-list service-connect-service-resource))
 (common-lisp:defun |make-service-connect-service-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-connect-service-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-event common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-event-message :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-event-created-at :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-event-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-event 'make-service-event))
 (common-lisp:defun make-service-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message created-at id)
   (common-lisp:apply #'common-lisp:make-instance 'service-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-events ()
   '(trivial-types:proper-list service-event))
 (common-lisp:defun |make-service-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-field-list ()
   '(trivial-types:proper-list service-field))
 (common-lisp:defun |make-service-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-not-active-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-not-active-exception)))
(common-lisp:progn
 (common-lisp:define-condition service-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype service-registries ()
   '(trivial-types:proper-list service-registry))
 (common-lisp:defun |make-service-registries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-registry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-registry common-lisp:nil
                       ((container-port :initarg :|containerPort| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %service-registry-container-port :initform
                         common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-registry-container-name :initform
                         common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %service-registry-port :initform
                         common-lisp:nil)
                        (registry-arn :initarg :|registryArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-registry-registry-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-registry 'make-service-registry))
 (common-lisp:defun make-service-registry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-port container-name port
                     registry-arn)
   (common-lisp:apply #'common-lisp:make-instance 'service-registry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-registry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-registry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "registryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-registry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype services () '(trivial-types:proper-list service))
 (common-lisp:defun |make-services|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((token-value :initarg :|tokenValue| :type
                         (common-lisp:or sensitive-string common-lisp:null)
                         :accessor %session-token-value :initform
                         common-lisp:nil)
                        (stream-url :initarg :|streamUrl| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %session-stream-url :initform common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %session-session-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defun make-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token-value stream-url session-id)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "streamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "tokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass setting common-lisp:nil
                       ((principal-arn :initarg :|principalArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %setting-principal-arn :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %setting-value :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or setting-name common-lisp:null)
                         :accessor %setting-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'setting 'make-setting))
 (common-lisp:defun make-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-arn value name)
   (common-lisp:apply #'common-lisp:make-instance 'setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setting))
   common-lisp:nil))
(common-lisp:deftype setting-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype settings () '(trivial-types:proper-list setting))
 (common-lisp:defun |make-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype stability-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-task-request common-lisp:nil
                       ((task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-task-request-task-definition :initform
                         (common-lisp:error ":taskdefinition is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %start-task-request-tags :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-task-request-started-by :initform
                         common-lisp:nil)
                        (reference-id :initarg :|referenceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-task-request-reference-id :initform
                         common-lisp:nil)
                        (propagate-tags :initarg :|propagateTags| :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %start-task-request-propagate-tags :initform
                         common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor %start-task-request-overrides :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %start-task-request-network-configuration
                         :initform common-lisp:nil)
                        (group :initarg :|group| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-task-request-group :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %start-task-request-enable-execute-command :initform
                         common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :|enableECSManagedTags| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %start-task-request-enable-ecsmanaged-tags :initform
                         common-lisp:nil)
                        (container-instances :initarg :|containerInstances|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %start-task-request-container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-task-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-task-request 'make-start-task-request))
 (common-lisp:defun make-start-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition tags started-by
                     reference-id propagate-tags overrides
                     network-configuration group enable-execute-command
                     enable-ecsmanaged-tags container-instances cluster)
   (common-lisp:apply #'common-lisp:make-instance 'start-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "referenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-task-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %start-task-response-failures :initform
                         common-lisp:nil)
                        (tasks :initarg :|tasks| :type
                         (common-lisp:or tasks common-lisp:null) :accessor
                         %start-task-response-tasks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-task-response 'make-start-task-response))
 (common-lisp:defun make-start-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures tasks)
   (common-lisp:apply #'common-lisp:make-instance 'start-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statistics ()
   '(trivial-types:proper-list key-value-pair))
 (common-lisp:defun |make-statistics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stop-task-request common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-task-request-reason :initform common-lisp:nil)
                        (task :initarg :|task| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-task-request-task :initform
                         (common-lisp:error ":task is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-task-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-task-request 'make-stop-task-request))
 (common-lisp:defun make-stop-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason task cluster)
   (common-lisp:apply #'common-lisp:make-instance 'stop-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-task-response common-lisp:nil
                       ((task :initarg :|task| :type
                         (common-lisp:or task common-lisp:null) :accessor
                         %stop-task-response-task :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-task-response 'make-stop-task-response))
 (common-lisp:defun make-stop-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task)
   (common-lisp:apply #'common-lisp:make-instance 'stop-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-task-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass submit-attachment-state-changes-request common-lisp:nil
                       ((attachments :initarg :|attachments| :type
                         (common-lisp:or attachment-state-changes
                                         common-lisp:null)
                         :accessor
                         %submit-attachment-state-changes-request-attachments
                         :initform
                         (common-lisp:error ":attachments is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-attachment-state-changes-request-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-attachment-state-changes-request
                    'make-submit-attachment-state-changes-request))
 (common-lisp:defun make-submit-attachment-state-changes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachments cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-attachment-state-changes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-attachment-state-changes-response common-lisp:nil
                       ((acknowledgment :initarg :|acknowledgment| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-attachment-state-changes-response-acknowledgment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-attachment-state-changes-response
                    'make-submit-attachment-state-changes-response))
 (common-lisp:defun make-submit-attachment-state-changes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acknowledgment)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-attachment-state-changes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-attachment-state-changes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-container-state-change-request common-lisp:nil
                       ((network-bindings :initarg :|networkBindings| :type
                         (common-lisp:or network-bindings common-lisp:null)
                         :accessor
                         %submit-container-state-change-request-network-bindings
                         :initform common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-reason
                         :initform common-lisp:nil)
                        (exit-code :initarg :|exitCode| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %submit-container-state-change-request-exit-code
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-status
                         :initform common-lisp:nil)
                        (runtime-id :initarg :|runtimeId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-runtime-id
                         :initform common-lisp:nil)
                        (container-name :initarg :|containerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-container-name
                         :initform common-lisp:nil)
                        (task :initarg :|task| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-task :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-request-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-container-state-change-request
                    'make-submit-container-state-change-request))
 (common-lisp:defun make-submit-container-state-change-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-bindings reason exit-code status
                     runtime-id container-name task cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-container-state-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-id))
      (common-lisp:list
       (common-lisp:cons "runtimeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "exitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-bindings))
      (common-lisp:list
       (common-lisp:cons "networkBindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-container-state-change-response common-lisp:nil
                       ((acknowledgment :initarg :|acknowledgment| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-container-state-change-response-acknowledgment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-container-state-change-response
                    'make-submit-container-state-change-response))
 (common-lisp:defun make-submit-container-state-change-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acknowledgment)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-container-state-change-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-container-state-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-task-state-change-request common-lisp:nil
                       ((execution-stopped-at :initarg :|executionStoppedAt|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %submit-task-state-change-request-execution-stopped-at
                         :initform common-lisp:nil)
                        (pull-stopped-at :initarg :|pullStoppedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %submit-task-state-change-request-pull-stopped-at
                         :initform common-lisp:nil)
                        (pull-started-at :initarg :|pullStartedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %submit-task-state-change-request-pull-started-at
                         :initform common-lisp:nil)
                        (managed-agents :initarg :|managedAgents| :type
                         (common-lisp:or managed-agent-state-changes
                                         common-lisp:null)
                         :accessor
                         %submit-task-state-change-request-managed-agents
                         :initform common-lisp:nil)
                        (attachments :initarg :|attachments| :type
                         (common-lisp:or attachment-state-changes
                                         common-lisp:null)
                         :accessor
                         %submit-task-state-change-request-attachments
                         :initform common-lisp:nil)
                        (containers :initarg :|containers| :type
                         (common-lisp:or container-state-changes
                                         common-lisp:null)
                         :accessor %submit-task-state-change-request-containers
                         :initform common-lisp:nil)
                        (reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-task-state-change-request-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-task-state-change-request-status :initform
                         common-lisp:nil)
                        (task :initarg :|task| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-task-state-change-request-task :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-task-state-change-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-task-state-change-request
                    'make-submit-task-state-change-request))
 (common-lisp:defun make-submit-task-state-change-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution-stopped-at pull-stopped-at
                     pull-started-at managed-agents attachments containers
                     reason status task cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-task-state-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-agents))
      (common-lisp:list
       (common-lisp:cons "managedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-started-at))
      (common-lisp:list
       (common-lisp:cons "pullStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-stopped-at))
      (common-lisp:list
       (common-lisp:cons "pullStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-stopped-at))
      (common-lisp:list
       (common-lisp:cons "executionStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-task-state-change-response common-lisp:nil
                       ((acknowledgment :initarg :|acknowledgment| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-task-state-change-response-acknowledgment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'submit-task-state-change-response
                    'make-submit-task-state-change-response))
 (common-lisp:defun make-submit-task-state-change-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key acknowledgment)
   (common-lisp:apply #'common-lisp:make-instance
                      'submit-task-state-change-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledgment))
      (common-lisp:list
       (common-lisp:cons "acknowledgment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-task-state-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass system-control common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %system-control-value :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %system-control-namespace :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'system-control 'make-system-control))
 (common-lisp:defun make-system-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value namespace)
   (common-lisp:apply #'common-lisp:make-instance 'system-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input system-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input system-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input system-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype system-controls ()
   '(trivial-types:proper-list system-control))
 (common-lisp:defun |make-system-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list system-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-not-connected-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-not-connected-exception)))
(common-lisp:progn
 (common-lisp:define-condition target-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-not-found-exception)))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task common-lisp:nil
                       ((ephemeral-storage :initarg :|ephemeralStorage| :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor %task-ephemeral-storage :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %task-version :initform common-lisp:nil)
                        (task-definition-arn :initarg :|taskDefinitionArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %task-task-definition-arn :initform
                         common-lisp:nil)
                        (task-arn :initarg :|taskArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-task-arn :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %task-tags :initform common-lisp:nil)
                        (stopping-at :initarg :|stoppingAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-stopping-at :initform common-lisp:nil)
                        (stopped-reason :initarg :|stoppedReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-stopped-reason :initform common-lisp:nil)
                        (stopped-at :initarg :|stoppedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-stopped-at :initform common-lisp:nil)
                        (stop-code :initarg :|stopCode| :type
                         (common-lisp:or task-stop-code common-lisp:null)
                         :accessor %task-stop-code :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-started-by :initform common-lisp:nil)
                        (started-at :initarg :|startedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-started-at :initform common-lisp:nil)
                        (pull-stopped-at :initarg :|pullStoppedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-pull-stopped-at :initform common-lisp:nil)
                        (pull-started-at :initarg :|pullStartedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-pull-started-at :initform common-lisp:nil)
                        (platform-family :initarg :|platformFamily| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-platform-family :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-platform-version :initform common-lisp:nil)
                        (overrides :initarg :|overrides| :type
                         (common-lisp:or task-override common-lisp:null)
                         :accessor %task-overrides :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-memory :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %task-launch-type :initform common-lisp:nil)
                        (last-status :initarg :|lastStatus| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-last-status :initform common-lisp:nil)
                        (inference-accelerators :initarg
                         :|inferenceAccelerators| :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor %task-inference-accelerators :initform
                         common-lisp:nil)
                        (health-status :initarg :|healthStatus| :type
                         (common-lisp:or health-status common-lisp:null)
                         :accessor %task-health-status :initform
                         common-lisp:nil)
                        (group :initarg :|group| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-group :initform common-lisp:nil)
                        (execution-stopped-at :initarg :|executionStoppedAt|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %task-execution-stopped-at :initform
                         common-lisp:nil)
                        (enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %task-enable-execute-command :initform
                         common-lisp:nil)
                        (desired-status :initarg :|desiredStatus| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-desired-status :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-created-at :initform common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-cpu :initform common-lisp:nil)
                        (containers :initarg :|containers| :type
                         (common-lisp:or containers common-lisp:null) :accessor
                         %task-containers :initform common-lisp:nil)
                        (container-instance-arn :initarg
                         :|containerInstanceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-container-instance-arn :initform
                         common-lisp:nil)
                        (connectivity-at :initarg :|connectivityAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-connectivity-at :initform common-lisp:nil)
                        (connectivity :initarg :|connectivity| :type
                         (common-lisp:or connectivity common-lisp:null)
                         :accessor %task-connectivity :initform
                         common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-cluster-arn :initform common-lisp:nil)
                        (capacity-provider-name :initarg
                         :|capacityProviderName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-capacity-provider-name :initform
                         common-lisp:nil)
                        (availability-zone :initarg :|availabilityZone| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-availability-zone :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %task-attributes :initform common-lisp:nil)
                        (attachments :initarg :|attachments| :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor %task-attachments :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task 'make-task))
 (common-lisp:defun make-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeral-storage version
                     task-definition-arn task-arn tags stopping-at
                     stopped-reason stopped-at stop-code started-by started-at
                     pull-stopped-at pull-started-at platform-family
                     platform-version overrides memory launch-type last-status
                     inference-accelerators health-status group
                     execution-stopped-at enable-execute-command desired-status
                     created-at cpu containers container-instance-arn
                     connectivity-at connectivity cluster-arn
                     capacity-provider-name availability-zone attributes
                     attachments)
   (common-lisp:apply #'common-lisp:make-instance 'task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-name))
      (common-lisp:list
       (common-lisp:cons "capacityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity))
      (common-lisp:list
       (common-lisp:cons "connectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity-at))
      (common-lisp:list
       (common-lisp:cons "connectivityAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "containerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-status))
      (common-lisp:list
       (common-lisp:cons "desiredStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-stopped-at))
      (common-lisp:list
       (common-lisp:cons "executionStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-started-at))
      (common-lisp:list
       (common-lisp:cons "pullStartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-stopped-at))
      (common-lisp:list
       (common-lisp:cons "pullStoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-code))
      (common-lisp:list
       (common-lisp:cons "stopCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-at))
      (common-lisp:list
       (common-lisp:cons "stoppedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-reason))
      (common-lisp:list
       (common-lisp:cons "stoppedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-at))
      (common-lisp:list
       (common-lisp:cons "stoppingAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "taskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-definition common-lisp:nil
                       ((ephemeral-storage :initarg :|ephemeralStorage| :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor %task-definition-ephemeral-storage :initform
                         common-lisp:nil)
                        (registered-by :initarg :|registeredBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-registered-by :initform
                         common-lisp:nil)
                        (deregistered-at :initarg :|deregisteredAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-definition-deregistered-at :initform
                         common-lisp:nil)
                        (registered-at :initarg :|registeredAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-definition-registered-at :initform
                         common-lisp:nil)
                        (proxy-configuration :initarg :|proxyConfiguration|
                         :type
                         (common-lisp:or proxy-configuration common-lisp:null)
                         :accessor %task-definition-proxy-configuration
                         :initform common-lisp:nil)
                        (ipc-mode :initarg :|ipcMode| :type
                         (common-lisp:or ipc-mode common-lisp:null) :accessor
                         %task-definition-ipc-mode :initform common-lisp:nil)
                        (pid-mode :initarg :|pidMode| :type
                         (common-lisp:or pid-mode common-lisp:null) :accessor
                         %task-definition-pid-mode :initform common-lisp:nil)
                        (inference-accelerators :initarg
                         :|inferenceAccelerators| :type
                         (common-lisp:or inference-accelerators
                                         common-lisp:null)
                         :accessor %task-definition-inference-accelerators
                         :initform common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-memory :initform common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-cpu :initform common-lisp:nil)
                        (requires-compatibilities :initarg
                         :|requiresCompatibilities| :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor %task-definition-requires-compatibilities
                         :initform common-lisp:nil)
                        (runtime-platform :initarg :|runtimePlatform| :type
                         (common-lisp:or runtime-platform common-lisp:null)
                         :accessor %task-definition-runtime-platform :initform
                         common-lisp:nil)
                        (compatibilities :initarg :|compatibilities| :type
                         (common-lisp:or compatibility-list common-lisp:null)
                         :accessor %task-definition-compatibilities :initform
                         common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or task-definition-placement-constraints
                                         common-lisp:null)
                         :accessor %task-definition-placement-constraints
                         :initform common-lisp:nil)
                        (requires-attributes :initarg :|requiresAttributes|
                         :type
                         (common-lisp:or requires-attributes common-lisp:null)
                         :accessor %task-definition-requires-attributes
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or task-definition-status
                                         common-lisp:null)
                         :accessor %task-definition-status :initform
                         common-lisp:nil)
                        (volumes :initarg :|volumes| :type
                         (common-lisp:or volume-list common-lisp:null)
                         :accessor %task-definition-volumes :initform
                         common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %task-definition-revision :initform common-lisp:nil)
                        (network-mode :initarg :|networkMode| :type
                         (common-lisp:or network-mode common-lisp:null)
                         :accessor %task-definition-network-mode :initform
                         common-lisp:nil)
                        (execution-role-arn :initarg :|executionRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-execution-role-arn :initform
                         common-lisp:nil)
                        (task-role-arn :initarg :|taskRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-task-role-arn :initform
                         common-lisp:nil)
                        (family :initarg :|family| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-family :initform common-lisp:nil)
                        (container-definitions :initarg :|containerDefinitions|
                         :type
                         (common-lisp:or container-definitions
                                         common-lisp:null)
                         :accessor %task-definition-container-definitions
                         :initform common-lisp:nil)
                        (task-definition-arn :initarg :|taskDefinitionArn|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %task-definition-task-definition-arn
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task-definition 'make-task-definition))
 (common-lisp:defun make-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeral-storage registered-by
                     deregistered-at registered-at proxy-configuration ipc-mode
                     pid-mode inference-accelerators memory cpu
                     requires-compatibilities runtime-platform compatibilities
                     placement-constraints requires-attributes status volumes
                     revision network-mode execution-role-arn task-role-arn
                     family container-definitions task-definition-arn)
   (common-lisp:apply #'common-lisp:make-instance 'task-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "taskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "containerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "networkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires-attributes))
      (common-lisp:list
       (common-lisp:cons "requiresAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibilities))
      (common-lisp:list
       (common-lisp:cons "compatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-platform))
      (common-lisp:list
       (common-lisp:cons "runtimePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "requiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "inferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "pidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "ipcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "proxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deregistered-at))
      (common-lisp:list
       (common-lisp:cons "deregisteredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-by))
      (common-lisp:list
       (common-lisp:cons "registeredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-definition))
   common-lisp:nil))
(common-lisp:deftype task-definition-family-status () 'common-lisp:string)
(common-lisp:deftype task-definition-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-definition-field-list ()
   '(trivial-types:proper-list task-definition-field))
 (common-lisp:defun |make-task-definition-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-definition-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype task-definition-list ()
   '(trivial-types:proper-list task-definition))
 (common-lisp:defun |make-task-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-definition-placement-constraint common-lisp:nil
                       ((expression :initarg :|expression| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-definition-placement-constraint-expression
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or
                          task-definition-placement-constraint-type
                          common-lisp:null)
                         :accessor %task-definition-placement-constraint-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'task-definition-placement-constraint
                    'make-task-definition-placement-constraint))
 (common-lisp:defun make-task-definition-placement-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression type)
   (common-lisp:apply #'common-lisp:make-instance
                      'task-definition-placement-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-definition-placement-constraint))
   common-lisp:nil))
(common-lisp:deftype task-definition-placement-constraint-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-definition-placement-constraints ()
   '(trivial-types:proper-list task-definition-placement-constraint))
 (common-lisp:defun |make-task-definition-placement-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            task-definition-placement-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-definition-status () 'common-lisp:string)
(common-lisp:deftype task-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-field-list ()
   '(trivial-types:proper-list task-field))
 (common-lisp:defun |make-task-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-override common-lisp:nil
                       ((ephemeral-storage :initarg :|ephemeralStorage| :type
                         (common-lisp:or ephemeral-storage common-lisp:null)
                         :accessor %task-override-ephemeral-storage :initform
                         common-lisp:nil)
                        (task-role-arn :initarg :|taskRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-override-task-role-arn :initform
                         common-lisp:nil)
                        (memory :initarg :|memory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-override-memory :initform common-lisp:nil)
                        (execution-role-arn :initarg :|executionRoleArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-override-execution-role-arn :initform
                         common-lisp:nil)
                        (inference-accelerator-overrides :initarg
                         :|inferenceAcceleratorOverrides| :type
                         (common-lisp:or inference-accelerator-overrides
                                         common-lisp:null)
                         :accessor
                         %task-override-inference-accelerator-overrides
                         :initform common-lisp:nil)
                        (cpu :initarg :|cpu| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-override-cpu :initform common-lisp:nil)
                        (container-overrides :initarg :|containerOverrides|
                         :type
                         (common-lisp:or container-overrides common-lisp:null)
                         :accessor %task-override-container-overrides :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task-override 'make-task-override))
 (common-lisp:defun make-task-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeral-storage task-role-arn memory
                     execution-role-arn inference-accelerator-overrides cpu
                     container-overrides)
   (common-lisp:apply #'common-lisp:make-instance 'task-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-overrides))
      (common-lisp:list
       (common-lisp:cons "containerOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerator-overrides))
      (common-lisp:list
       (common-lisp:cons "inferenceAcceleratorOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "executionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "taskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeral-storage))
      (common-lisp:list
       (common-lisp:cons "ephemeralStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-set common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %task-set-tags :initform common-lisp:nil)
                        (stability-status-at :initarg :|stabilityStatusAt|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %task-set-stability-status-at :initform
                         common-lisp:nil)
                        (stability-status :initarg :|stabilityStatus| :type
                         (common-lisp:or stability-status common-lisp:null)
                         :accessor %task-set-stability-status :initform
                         common-lisp:nil)
                        (scale :initarg :|scale| :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         %task-set-scale :initform common-lisp:nil)
                        (service-registries :initarg :|serviceRegistries| :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor %task-set-service-registries :initform
                         common-lisp:nil)
                        (load-balancers :initarg :|loadBalancers| :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %task-set-load-balancers :initform
                         common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %task-set-network-configuration :initform
                         common-lisp:nil)
                        (platform-family :initarg :|platformFamily| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-platform-family :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-platform-version :initform common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor %task-set-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (launch-type :initarg :|launchType| :type
                         (common-lisp:or launch-type common-lisp:null)
                         :accessor %task-set-launch-type :initform
                         common-lisp:nil)
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-set-updated-at :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %task-set-created-at :initform common-lisp:nil)
                        (running-count :initarg :|runningCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %task-set-running-count :initform common-lisp:nil)
                        (pending-count :initarg :|pendingCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %task-set-pending-count :initform common-lisp:nil)
                        (computed-desired-count :initarg
                         :|computedDesiredCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %task-set-computed-desired-count :initform
                         common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-task-definition :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-status :initform common-lisp:nil)
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-external-id :initform common-lisp:nil)
                        (started-by :initarg :|startedBy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-started-by :initform common-lisp:nil)
                        (cluster-arn :initarg :|clusterArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-cluster-arn :initform common-lisp:nil)
                        (service-arn :initarg :|serviceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-service-arn :initform common-lisp:nil)
                        (task-set-arn :initarg :|taskSetArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-task-set-arn :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %task-set-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'task-set 'make-task-set))
 (common-lisp:defun make-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags stability-status-at stability-status
                     scale service-registries load-balancers
                     network-configuration platform-family platform-version
                     capacity-provider-strategy launch-type updated-at
                     created-at running-count pending-count
                     computed-desired-count task-definition status external-id
                     started-by cluster-arn service-arn task-set-arn id)
   (common-lisp:apply #'common-lisp:make-instance 'task-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set-arn))
      (common-lisp:list
       (common-lisp:cons "taskSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "serviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "clusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "startedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'computed-desired-count))
      (common-lisp:list
       (common-lisp:cons "computedDesiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-count))
      (common-lisp:list
       (common-lisp:cons "pendingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-count))
      (common-lisp:list
       (common-lisp:cons "runningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "launchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-family))
      (common-lisp:list
       (common-lisp:cons "platformFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stability-status))
      (common-lisp:list
       (common-lisp:cons "stabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stability-status-at))
      (common-lisp:list
       (common-lisp:cons "stabilityStatusAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-set))
   common-lisp:nil))
(common-lisp:deftype task-set-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-set-field-list ()
   '(trivial-types:proper-list task-set-field))
 (common-lisp:defun |make-task-set-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-set-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition task-set-not-found-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'task-set-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype task-sets () '(trivial-types:proper-list task-set))
 (common-lisp:defun |make-task-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-stop-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tasks () '(trivial-types:proper-list task))
 (common-lisp:defun |make-tasks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tmpfs common-lisp:nil
                       ((mount-options :initarg :|mountOptions| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %tmpfs-mount-options :initform
                         common-lisp:nil)
                        (size :initarg :|size| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %tmpfs-size :initform
                         (common-lisp:error ":size is required"))
                        (container-path :initarg :|containerPath| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tmpfs-container-path :initform
                         (common-lisp:error ":containerpath is required"))))
 (common-lisp:export (common-lisp:list 'tmpfs 'make-tmpfs))
 (common-lisp:defun make-tmpfs
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mount-options size container-path)
   (common-lisp:apply #'common-lisp:make-instance 'tmpfs
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tmpfs))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tmpfs))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "containerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-options))
      (common-lisp:list
       (common-lisp:cons "mountOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tmpfs))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tmpfs-list () '(trivial-types:proper-list tmpfs))
 (common-lisp:defun |make-tmpfs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tmpfs))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transport-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ulimit common-lisp:nil
                       ((hard-limit :initarg :|hardLimit| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ulimit-hard-limit :initform
                         (common-lisp:error ":hardlimit is required"))
                        (soft-limit :initarg :|softLimit| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ulimit-soft-limit :initform
                         (common-lisp:error ":softlimit is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or ulimit-name common-lisp:null)
                         :accessor %ulimit-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'ulimit 'make-ulimit))
 (common-lisp:defun make-ulimit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hard-limit soft-limit name)
   (common-lisp:apply #'common-lisp:make-instance 'ulimit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ulimit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ulimit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-limit))
      (common-lisp:list
       (common-lisp:cons "softLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-limit))
      (common-lisp:list
       (common-lisp:cons "hardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ulimit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ulimit-list () '(trivial-types:proper-list ulimit))
 (common-lisp:defun |make-ulimit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ulimit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ulimit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-feature-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-feature-exception)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-provider-request common-lisp:nil
                       ((auto-scaling-group-provider :initarg
                         :|autoScalingGroupProvider| :type
                         (common-lisp:or auto-scaling-group-provider-update
                                         common-lisp:null)
                         :accessor
                         %update-capacity-provider-request-auto-scaling-group-provider
                         :initform
                         (common-lisp:error
                          ":autoscalinggroupprovider is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-capacity-provider-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-capacity-provider-request
                    'make-update-capacity-provider-request))
 (common-lisp:defun make-update-capacity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-group-provider name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-group-provider))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroupProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-capacity-provider-response common-lisp:nil
                       ((capacity-provider :initarg :|capacityProvider| :type
                         (common-lisp:or capacity-provider common-lisp:null)
                         :accessor
                         %update-capacity-provider-response-capacity-provider
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-capacity-provider-response
                    'make-update-capacity-provider-response))
 (common-lisp:defun make-update-capacity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-capacity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "capacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-capacity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-request common-lisp:nil
                       ((service-connect-defaults :initarg
                         :|serviceConnectDefaults| :type
                         (common-lisp:or
                          cluster-service-connect-defaults-request
                          common-lisp:null)
                         :accessor
                         %update-cluster-request-service-connect-defaults
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or cluster-configuration
                                         common-lisp:null)
                         :accessor %update-cluster-request-configuration
                         :initform common-lisp:nil)
                        (settings :initarg :|settings| :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor %update-cluster-request-settings :initform
                         common-lisp:nil)
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-request 'make-update-cluster-request))
 (common-lisp:defun make-update-cluster-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-defaults configuration
                     settings cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-defaults))
      (common-lisp:list
       (common-lisp:cons "serviceConnectDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %update-cluster-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-response 'make-update-cluster-response))
 (common-lisp:defun make-update-cluster-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-cluster-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-settings-request common-lisp:nil
                       ((settings :initarg :|settings| :type
                         (common-lisp:or cluster-settings common-lisp:null)
                         :accessor %update-cluster-settings-request-settings
                         :initform (common-lisp:error ":settings is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-cluster-settings-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-cluster-settings-request
                    'make-update-cluster-settings-request))
 (common-lisp:defun make-update-cluster-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cluster-settings-response common-lisp:nil
                       ((cluster :initarg :|cluster| :type
                         (common-lisp:or cluster common-lisp:null) :accessor
                         %update-cluster-settings-response-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-cluster-settings-response
                    'make-update-cluster-settings-response))
 (common-lisp:defun make-update-cluster-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cluster-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cluster-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-agent-request common-lisp:nil
                       ((container-instance :initarg :|containerInstance| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-container-agent-request-container-instance
                         :initform
                         (common-lisp:error ":containerinstance is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-container-agent-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-container-agent-request
                    'make-update-container-agent-request))
 (common-lisp:defun make-update-container-agent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-instance cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-agent-response common-lisp:nil
                       ((container-instance :initarg :|containerInstance| :type
                         (common-lisp:or container-instance common-lisp:null)
                         :accessor
                         %update-container-agent-response-container-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-container-agent-response
                    'make-update-container-agent-response))
 (common-lisp:defun make-update-container-agent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instance))
      (common-lisp:list
       (common-lisp:cons "containerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-instances-state-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or container-instance-status
                                         common-lisp:null)
                         :accessor
                         %update-container-instances-state-request-status
                         :initform (common-lisp:error ":status is required"))
                        (container-instances :initarg :|containerInstances|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %update-container-instances-state-request-container-instances
                         :initform
                         (common-lisp:error ":containerinstances is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-container-instances-state-request-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-container-instances-state-request
                    'make-update-container-instances-state-request))
 (common-lisp:defun make-update-container-instances-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status container-instances cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-instances-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-container-instances-state-response
                       common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %update-container-instances-state-response-failures
                         :initform common-lisp:nil)
                        (container-instances :initarg :|containerInstances|
                         :type
                         (common-lisp:or container-instances common-lisp:null)
                         :accessor
                         %update-container-instances-state-response-container-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-container-instances-state-response
                    'make-update-container-instances-state-response))
 (common-lisp:defun make-update-container-instances-state-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures container-instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-container-instances-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-instances))
      (common-lisp:list
       (common-lisp:cons "containerInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-instances-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition update-in-progress-exception
     (ecs-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'update-in-progress-exception)))
(common-lisp:progn
 (common-lisp:defclass update-service-primary-task-set-request common-lisp:nil
                       ((primary-task-set :initarg :|primaryTaskSet| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-primary-task-set-request-primary-task-set
                         :initform
                         (common-lisp:error ":primarytaskset is required"))
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-primary-task-set-request-service
                         :initform (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-primary-task-set-request-cluster
                         :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-service-primary-task-set-request
                    'make-update-service-primary-task-set-request))
 (common-lisp:defun make-update-service-primary-task-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key primary-task-set service cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-primary-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-task-set))
      (common-lisp:list
       (common-lisp:cons "primaryTaskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-primary-task-set-response common-lisp:nil
                       ((task-set :initarg :|taskSet| :type
                         (common-lisp:or task-set common-lisp:null) :accessor
                         %update-service-primary-task-set-response-task-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-service-primary-task-set-response
                    'make-update-service-primary-task-set-response))
 (common-lisp:defun make-update-service-primary-task-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-set)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-primary-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-primary-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-request common-lisp:nil
                       ((service-connect-configuration :initarg
                         :|serviceConnectConfiguration| :type
                         (common-lisp:or service-connect-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-service-connect-configuration
                         :initform common-lisp:nil)
                        (service-registries :initarg :|serviceRegistries| :type
                         (common-lisp:or service-registries common-lisp:null)
                         :accessor %update-service-request-service-registries
                         :initform common-lisp:nil)
                        (propagate-tags :initarg :|propagateTags| :type
                         (common-lisp:or propagate-tags common-lisp:null)
                         :accessor %update-service-request-propagate-tags
                         :initform common-lisp:nil)
                        (load-balancers :initarg :|loadBalancers| :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %update-service-request-load-balancers
                         :initform common-lisp:nil)
                        (enable-ecsmanaged-tags :initarg
                         :|enableECSManagedTags| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %update-service-request-enable-ecsmanaged-tags
                         :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :|enableExecuteCommand| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         %update-service-request-enable-execute-command
                         :initform common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :|healthCheckGracePeriodSeconds| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %update-service-request-health-check-grace-period-seconds
                         :initform common-lisp:nil)
                        (force-new-deployment :initarg :|forceNewDeployment|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %update-service-request-force-new-deployment
                         :initform common-lisp:nil)
                        (platform-version :initarg :|platformVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-request-platform-version :initform
                         common-lisp:nil)
                        (placement-strategy :initarg :|placementStrategy| :type
                         (common-lisp:or placement-strategies common-lisp:null)
                         :accessor %update-service-request-placement-strategy
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :|placementConstraints|
                         :type
                         (common-lisp:or placement-constraints
                                         common-lisp:null)
                         :accessor
                         %update-service-request-placement-constraints
                         :initform common-lisp:nil)
                        (network-configuration :initarg :|networkConfiguration|
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-network-configuration
                         :initform common-lisp:nil)
                        (deployment-configuration :initarg
                         :|deploymentConfiguration| :type
                         (common-lisp:or deployment-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-deployment-configuration
                         :initform common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :|capacityProviderStrategy| :type
                         (common-lisp:or capacity-provider-strategy
                                         common-lisp:null)
                         :accessor
                         %update-service-request-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (task-definition :initarg :|taskDefinition| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-request-task-definition :initform
                         common-lisp:nil)
                        (desired-count :initarg :|desiredCount| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor %update-service-request-desired-count
                         :initform common-lisp:nil)
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-request-service :initform
                         (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-service-request-cluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-service-request 'make-update-service-request))
 (common-lisp:defun make-update-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-connect-configuration
                     service-registries propagate-tags load-balancers
                     enable-ecsmanaged-tags enable-execute-command
                     health-check-grace-period-seconds force-new-deployment
                     platform-version placement-strategy placement-constraints
                     network-configuration deployment-configuration
                     capacity-provider-strategy task-definition desired-count
                     service cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "desiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "taskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "capacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "deploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "networkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "placementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-strategy))
      (common-lisp:list
       (common-lisp:cons "placementStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "platformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-new-deployment))
      (common-lisp:list
       (common-lisp:cons "forceNewDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "healthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "enableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecsmanaged-tags))
      (common-lisp:list
       (common-lisp:cons "enableECSManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "propagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "serviceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-connect-configuration))
      (common-lisp:list
       (common-lisp:cons "serviceConnectConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-response common-lisp:nil
                       ((service :initarg :|service| :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %update-service-response-service :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-service-response 'make-update-service-response))
 (common-lisp:defun make-update-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-protection-request common-lisp:nil
                       ((expires-in-minutes :initarg :|expiresInMinutes| :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %update-task-protection-request-expires-in-minutes
                         :initform common-lisp:nil)
                        (protection-enabled :initarg :|protectionEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-task-protection-request-protection-enabled
                         :initform
                         (common-lisp:error ":protectionenabled is required"))
                        (tasks :initarg :|tasks| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-task-protection-request-tasks
                         :initform (common-lisp:error ":tasks is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-task-protection-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-task-protection-request
                    'make-update-task-protection-request))
 (common-lisp:defun make-update-task-protection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires-in-minutes protection-enabled
                     tasks cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-task-protection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protection-enabled))
      (common-lisp:list
       (common-lisp:cons "protectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-minutes))
      (common-lisp:list
       (common-lisp:cons "expiresInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-protection-response common-lisp:nil
                       ((failures :initarg :|failures| :type
                         (common-lisp:or failures common-lisp:null) :accessor
                         %update-task-protection-response-failures :initform
                         common-lisp:nil)
                        (protected-tasks :initarg :|protectedTasks| :type
                         (common-lisp:or protected-tasks common-lisp:null)
                         :accessor
                         %update-task-protection-response-protected-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-task-protection-response
                    'make-update-task-protection-response))
 (common-lisp:defun make-update-task-protection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failures protected-tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-task-protection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-tasks))
      (common-lisp:list
       (common-lisp:cons "protectedTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-protection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-set-request common-lisp:nil
                       ((scale :initarg :|scale| :type
                         (common-lisp:or scale common-lisp:null) :accessor
                         %update-task-set-request-scale :initform
                         (common-lisp:error ":scale is required"))
                        (task-set :initarg :|taskSet| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-task-set-request-task-set :initform
                         (common-lisp:error ":taskset is required"))
                        (service :initarg :|service| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-task-set-request-service :initform
                         (common-lisp:error ":service is required"))
                        (cluster :initarg :|cluster| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-task-set-request-cluster :initform
                         (common-lisp:error ":cluster is required"))))
 (common-lisp:export
  (common-lisp:list 'update-task-set-request 'make-update-task-set-request))
 (common-lisp:defun make-update-task-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scale task-set service cluster)
   (common-lisp:apply #'common-lisp:make-instance 'update-task-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-task-set-response common-lisp:nil
                       ((task-set :initarg :|taskSet| :type
                         (common-lisp:or task-set common-lisp:null) :accessor
                         %update-task-set-response-task-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-task-set-response 'make-update-task-set-response))
 (common-lisp:defun make-update-task-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-set)
   (common-lisp:apply #'common-lisp:make-instance 'update-task-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-set))
      (common-lisp:list
       (common-lisp:cons "taskSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-task-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass version-info common-lisp:nil
                       ((docker-version :initarg :|dockerVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %version-info-docker-version :initform
                         common-lisp:nil)
                        (agent-hash :initarg :|agentHash| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %version-info-agent-hash :initform common-lisp:nil)
                        (agent-version :initarg :|agentVersion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %version-info-agent-version :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'version-info 'make-version-info))
 (common-lisp:defun make-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key docker-version agent-hash agent-version)
   (common-lisp:apply #'common-lisp:make-instance 'version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-hash))
      (common-lisp:list
       (common-lisp:cons "agentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-version))
      (common-lisp:list
       (common-lisp:cons "dockerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((fsx-windows-file-server-volume-configuration :initarg
                         :|fsxWindowsFileServerVolumeConfiguration| :type
                         (common-lisp:or
                          fsx-windows-file-server-volume-configuration
                          common-lisp:null)
                         :accessor
                         %volume-fsx-windows-file-server-volume-configuration
                         :initform common-lisp:nil)
                        (efs-volume-configuration :initarg
                         :|efsVolumeConfiguration| :type
                         (common-lisp:or efsvolume-configuration
                                         common-lisp:null)
                         :accessor %volume-efs-volume-configuration :initform
                         common-lisp:nil)
                        (docker-volume-configuration :initarg
                         :|dockerVolumeConfiguration| :type
                         (common-lisp:or docker-volume-configuration
                                         common-lisp:null)
                         :accessor %volume-docker-volume-configuration
                         :initform common-lisp:nil)
                        (host :initarg :|host| :type
                         (common-lisp:or host-volume-properties
                                         common-lisp:null)
                         :accessor %volume-host :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %volume-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defun make-volume
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     fsx-windows-file-server-volume-configuration
                     efs-volume-configuration docker-volume-configuration host
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "dockerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'efs-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "efsVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fsx-windows-file-server-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "fsxWindowsFileServerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume-from common-lisp:nil
                       ((read-only :initarg :|readOnly| :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor %volume-from-read-only :initform
                         common-lisp:nil)
                        (source-container :initarg :|sourceContainer| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %volume-from-source-container :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'volume-from 'make-volume-from))
 (common-lisp:defun make-volume-from
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-only source-container)
   (common-lisp:apply #'common-lisp:make-instance 'volume-from
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-from))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-from))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-container))
      (common-lisp:list
       (common-lisp:cons "sourceContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "readOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-from))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-from-list ()
   '(trivial-types:proper-list volume-from))
 (common-lisp:defun |make-volume-from-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-from))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype volume-list () '(trivial-types:proper-list volume))
 (common-lisp:defun |make-volume-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name auto-scaling-group-provider tags)
   (common-lisp:declare
    (common-lisp:ignorable name auto-scaling-group-provider tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCapacityProvider"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-capacity-provider))
(common-lisp:progn
 (common-lisp:defun create-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name tags settings configuration
                     capacity-providers default-capacity-provider-strategy
                     service-connect-defaults)
   (common-lisp:declare
    (common-lisp:ignorable cluster-name tags settings configuration
     capacity-providers default-capacity-provider-strategy
     service-connect-defaults))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCluster"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cluster))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service-name task-definition
                     load-balancers service-registries desired-count
                     client-token launch-type capacity-provider-strategy
                     platform-version role deployment-configuration
                     placement-constraints placement-strategy
                     network-configuration health-check-grace-period-seconds
                     scheduling-strategy deployment-controller tags
                     enable-ecsmanaged-tags propagate-tags
                     enable-execute-command service-connect-configuration)
   (common-lisp:declare
    (common-lisp:ignorable cluster service-name task-definition load-balancers
     service-registries desired-count client-token launch-type
     capacity-provider-strategy platform-version role deployment-configuration
     placement-constraints placement-strategy network-configuration
     health-check-grace-period-seconds scheduling-strategy
     deployment-controller tags enable-ecsmanaged-tags propagate-tags
     enable-execute-command service-connect-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateService"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service cluster external-id
                     task-definition network-configuration load-balancers
                     service-registries launch-type capacity-provider-strategy
                     platform-version scale client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable service cluster external-id task-definition
     network-configuration load-balancers service-registries launch-type
     capacity-provider-strategy platform-version scale client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateTaskSet"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-task-set))
(common-lisp:progn
 (common-lisp:defun delete-account-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name principal-arn)
   (common-lisp:declare (common-lisp:ignorable name principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAccountSetting"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-setting))
(common-lisp:progn
 (common-lisp:defun delete-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attributes)
   (common-lisp:declare (common-lisp:ignorable cluster attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAttributes"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-attributes))
(common-lisp:progn
 (common-lisp:defun delete-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-provider)
   (common-lisp:declare (common-lisp:ignorable capacity-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCapacityProvider"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-capacity-provider))
(common-lisp:progn
 (common-lisp:defun delete-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster)
   (common-lisp:declare (common-lisp:ignorable cluster))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCluster"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cluster))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service force)
   (common-lisp:declare (common-lisp:ignorable cluster service force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteService"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-task-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definitions)
   (common-lisp:declare (common-lisp:ignorable task-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-task-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTaskDefinitions"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-task-definitions))
(common-lisp:progn
 (common-lisp:defun delete-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-set force)
   (common-lisp:declare (common-lisp:ignorable cluster service task-set force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTaskSet"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-task-set))
(common-lisp:progn
 (common-lisp:defun deregister-container-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance force)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instance force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-container-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterContainerInstance"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-container-instance))
(common-lisp:progn
 (common-lisp:defun deregister-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definition)
   (common-lisp:declare (common-lisp:ignorable task-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-task-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterTaskDefinition"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-task-definition))
(common-lisp:progn
 (common-lisp:defun describe-capacity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-providers include max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable capacity-providers include max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-capacity-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCapacityProviders"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-capacity-providers))
(common-lisp:progn
 (common-lisp:defun describe-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key clusters include)
   (common-lisp:declare (common-lisp:ignorable clusters include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClusters"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-clusters))
(common-lisp:progn
 (common-lisp:defun describe-container-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances include)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-container-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeContainerInstances"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-container-instances))
(common-lisp:progn
 (common-lisp:defun describe-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster services include)
   (common-lisp:declare (common-lisp:ignorable cluster services include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServices"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-services))
(common-lisp:progn
 (common-lisp:defun describe-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-definition include)
   (common-lisp:declare (common-lisp:ignorable task-definition include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-task-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTaskDefinition"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-task-definition))
(common-lisp:progn
 (common-lisp:defun describe-task-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-sets include)
   (common-lisp:declare
    (common-lisp:ignorable cluster service task-sets include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-task-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTaskSets"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-task-sets))
(common-lisp:progn
 (common-lisp:defun describe-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks include)
   (common-lisp:declare (common-lisp:ignorable cluster tasks include))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTasks"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tasks))
(common-lisp:progn
 (common-lisp:defun discover-poll-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key container-instance cluster)
   (common-lisp:declare (common-lisp:ignorable container-instance cluster))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-discover-poll-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DiscoverPollEndpoint"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'discover-poll-endpoint))
(common-lisp:progn
 (common-lisp:defun execute-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container command interactive
                     task)
   (common-lisp:declare
    (common-lisp:ignorable cluster container command interactive task))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ExecuteCommand"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-command))
(common-lisp:progn
 (common-lisp:defun get-task-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks)
   (common-lisp:declare (common-lisp:ignorable cluster tasks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-task-protection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetTaskProtection"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-task-protection))
(common-lisp:progn
 (common-lisp:defun list-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value principal-arn
                     effective-settings next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable name value principal-arn effective-settings
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAccountSettings"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-account-settings))
(common-lisp:progn
 (common-lisp:defun list-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster target-type attribute-name
                     attribute-value next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable cluster target-type attribute-name attribute-value
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAttributes"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-attributes))
(common-lisp:progn
 (common-lisp:defun list-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListClusters"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-clusters))
(common-lisp:progn
 (common-lisp:defun list-container-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster filter next-token max-results
                     status)
   (common-lisp:declare
    (common-lisp:ignorable cluster filter next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-container-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListContainerInstances"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-container-instances))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster next-token max-results
                     launch-type scheduling-strategy)
   (common-lisp:declare
    (common-lisp:ignorable cluster next-token max-results launch-type
     scheduling-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServices"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-services-by-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable namespace next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-services-by-namespace-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServicesByNamespace"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services-by-namespace))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-task-definition-families
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family-prefix status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable family-prefix status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-task-definition-families-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTaskDefinitionFamilies"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-task-definition-families))
(common-lisp:progn
 (common-lisp:defun list-task-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family-prefix status sort next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable family-prefix status sort next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-task-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTaskDefinitions"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-task-definitions))
(common-lisp:progn
 (common-lisp:defun list-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance family
                     next-token max-results started-by service-name
                     desired-status launch-type)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instance family next-token
     max-results started-by service-name desired-status launch-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTasks"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tasks))
(common-lisp:progn
 (common-lisp:defun put-account-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value principal-arn)
   (common-lisp:declare (common-lisp:ignorable name value principal-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-account-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAccountSetting"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-account-setting))
(common-lisp:progn
 (common-lisp:defun put-account-setting-default
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name value)
   (common-lisp:declare (common-lisp:ignorable name value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-account-setting-default-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAccountSettingDefault"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-account-setting-default))
(common-lisp:progn
 (common-lisp:defun put-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attributes)
   (common-lisp:declare (common-lisp:ignorable cluster attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAttributes"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-attributes))
(common-lisp:progn
 (common-lisp:defun put-cluster-capacity-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster capacity-providers
                     default-capacity-provider-strategy)
   (common-lisp:declare
    (common-lisp:ignorable cluster capacity-providers
     default-capacity-provider-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-cluster-capacity-providers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutClusterCapacityProviders"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-cluster-capacity-providers))
(common-lisp:progn
 (common-lisp:defun register-container-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster instance-identity-document
                     instance-identity-document-signature total-resources
                     version-info container-instance-arn attributes
                     platform-devices tags)
   (common-lisp:declare
    (common-lisp:ignorable cluster instance-identity-document
     instance-identity-document-signature total-resources version-info
     container-instance-arn attributes platform-devices tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-container-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterContainerInstance"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-container-instance))
(common-lisp:progn
 (common-lisp:defun register-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key family task-role-arn execution-role-arn
                     network-mode container-definitions volumes
                     placement-constraints requires-compatibilities cpu memory
                     tags pid-mode ipc-mode proxy-configuration
                     inference-accelerators ephemeral-storage runtime-platform)
   (common-lisp:declare
    (common-lisp:ignorable family task-role-arn execution-role-arn network-mode
     container-definitions volumes placement-constraints
     requires-compatibilities cpu memory tags pid-mode ipc-mode
     proxy-configuration inference-accelerators ephemeral-storage
     runtime-platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-task-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterTaskDefinition"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-task-definition))
(common-lisp:progn
 (common-lisp:defun run-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key capacity-provider-strategy cluster count
                     enable-ecsmanaged-tags enable-execute-command group
                     launch-type network-configuration overrides
                     placement-constraints placement-strategy platform-version
                     propagate-tags reference-id started-by tags
                     task-definition)
   (common-lisp:declare
    (common-lisp:ignorable capacity-provider-strategy cluster count
     enable-ecsmanaged-tags enable-execute-command group launch-type
     network-configuration overrides placement-constraints placement-strategy
     platform-version propagate-tags reference-id started-by tags
     task-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RunTask"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'run-task))
(common-lisp:progn
 (common-lisp:defun start-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances
                     enable-ecsmanaged-tags enable-execute-command group
                     network-configuration overrides propagate-tags
                     reference-id started-by tags task-definition)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances enable-ecsmanaged-tags
     enable-execute-command group network-configuration overrides
     propagate-tags reference-id started-by tags task-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartTask"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-task))
(common-lisp:progn
 (common-lisp:defun stop-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task reason)
   (common-lisp:declare (common-lisp:ignorable cluster task reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopTask"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-task))
(common-lisp:progn
 (common-lisp:defun submit-attachment-state-changes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster attachments)
   (common-lisp:declare (common-lisp:ignorable cluster attachments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-attachment-state-changes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SubmitAttachmentStateChanges"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-attachment-state-changes))
(common-lisp:progn
 (common-lisp:defun submit-container-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task container-name runtime-id
                     status exit-code reason network-bindings)
   (common-lisp:declare
    (common-lisp:ignorable cluster task container-name runtime-id status
     exit-code reason network-bindings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-submit-container-state-change-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SubmitContainerStateChange"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-container-state-change))
(common-lisp:progn
 (common-lisp:defun submit-task-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster task status reason containers
                     attachments managed-agents pull-started-at pull-stopped-at
                     execution-stopped-at)
   (common-lisp:declare
    (common-lisp:ignorable cluster task status reason containers attachments
     managed-agents pull-started-at pull-stopped-at execution-stopped-at))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-submit-task-state-change-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SubmitTaskStateChange"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-task-state-change))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-capacity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name auto-scaling-group-provider)
   (common-lisp:declare
    (common-lisp:ignorable name auto-scaling-group-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-capacity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCapacityProvider"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-capacity-provider))
(common-lisp:progn
 (common-lisp:defun update-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster settings configuration
                     service-connect-defaults)
   (common-lisp:declare
    (common-lisp:ignorable cluster settings configuration
     service-connect-defaults))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCluster"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster))
(common-lisp:progn
 (common-lisp:defun update-cluster-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster settings)
   (common-lisp:declare (common-lisp:ignorable cluster settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cluster-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateClusterSettings"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cluster-settings))
(common-lisp:progn
 (common-lisp:defun update-container-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instance)
   (common-lisp:declare (common-lisp:ignorable cluster container-instance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-container-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateContainerAgent"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-container-agent))
(common-lisp:progn
 (common-lisp:defun update-container-instances-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster container-instances status)
   (common-lisp:declare
    (common-lisp:ignorable cluster container-instances status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-container-instances-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateContainerInstancesState"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-container-instances-state))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service desired-count
                     task-definition capacity-provider-strategy
                     deployment-configuration network-configuration
                     placement-constraints placement-strategy platform-version
                     force-new-deployment health-check-grace-period-seconds
                     enable-execute-command enable-ecsmanaged-tags
                     load-balancers propagate-tags service-registries
                     service-connect-configuration)
   (common-lisp:declare
    (common-lisp:ignorable cluster service desired-count task-definition
     capacity-provider-strategy deployment-configuration network-configuration
     placement-constraints placement-strategy platform-version
     force-new-deployment health-check-grace-period-seconds
     enable-execute-command enable-ecsmanaged-tags load-balancers
     propagate-tags service-registries service-connect-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateService"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-service-primary-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service primary-task-set)
   (common-lisp:declare
    (common-lisp:ignorable cluster service primary-task-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-primary-task-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateServicePrimaryTaskSet"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-primary-task-set))
(common-lisp:progn
 (common-lisp:defun update-task-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster tasks protection-enabled
                     expires-in-minutes)
   (common-lisp:declare
    (common-lisp:ignorable cluster tasks protection-enabled
     expires-in-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-task-protection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateTaskProtection"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-task-protection))
(common-lisp:progn
 (common-lisp:defun update-task-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster service task-set scale)
   (common-lisp:declare (common-lisp:ignorable cluster service task-set scale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-task-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ecs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateTaskSet"
                                                        "2014-11-13"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-task-set))
