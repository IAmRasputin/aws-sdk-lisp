;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/organizations/api
  (:use)
  (:nicknames #:aws/organizations)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/organizations/api)
(common-lisp:progn
 (common-lisp:defclass organizations-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "organizations" :protocol
                        :json))
 (common-lisp:export 'organizations-request))
(common-lisp:progn
 (common-lisp:define-condition organizations-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'organizations-error))
(common-lisp:defvar *error-map*
  '(("AWSOrganizationsNotInUseException"
     . awsorganizations-not-in-use-exception)
    ("AccessDeniedException" . access-denied-exception)
    ("AccessDeniedForDependencyException"
     . access-denied-for-dependency-exception)
    ("AccountAlreadyClosedException" . account-already-closed-exception)
    ("AccountAlreadyRegisteredException"
     . account-already-registered-exception)
    ("AccountNotFoundException" . account-not-found-exception)
    ("AccountNotRegisteredException" . account-not-registered-exception)
    ("AccountOwnerNotVerifiedException" . account-owner-not-verified-exception)
    ("AlreadyInOrganizationException" . already-in-organization-exception)
    ("ChildNotFoundException" . child-not-found-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConflictException" . conflict-exception)
    ("ConstraintViolationException" . constraint-violation-exception)
    ("CreateAccountStatusNotFoundException"
     . create-account-status-not-found-exception)
    ("DestinationParentNotFoundException"
     . destination-parent-not-found-exception)
    ("DuplicateAccountException" . duplicate-account-exception)
    ("DuplicateHandshakeException" . duplicate-handshake-exception)
    ("DuplicateOrganizationalUnitException"
     . duplicate-organizational-unit-exception)
    ("DuplicatePolicyAttachmentException"
     . duplicate-policy-attachment-exception)
    ("DuplicatePolicyException" . duplicate-policy-exception)
    ("EffectivePolicyNotFoundException" . effective-policy-not-found-exception)
    ("FinalizingOrganizationException" . finalizing-organization-exception)
    ("HandshakeAlreadyInStateException" . handshake-already-in-state-exception)
    ("HandshakeConstraintViolationException"
     . handshake-constraint-violation-exception)
    ("HandshakeNotFoundException" . handshake-not-found-exception)
    ("InvalidHandshakeTransitionException"
     . invalid-handshake-transition-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("MasterCannotLeaveOrganizationException"
     . master-cannot-leave-organization-exception)
    ("OrganizationNotEmptyException" . organization-not-empty-exception)
    ("OrganizationalUnitNotEmptyException"
     . organizational-unit-not-empty-exception)
    ("OrganizationalUnitNotFoundException"
     . organizational-unit-not-found-exception)
    ("ParentNotFoundException" . parent-not-found-exception)
    ("PolicyChangesInProgressException" . policy-changes-in-progress-exception)
    ("PolicyInUseException" . policy-in-use-exception)
    ("PolicyNotAttachedException" . policy-not-attached-exception)
    ("PolicyNotFoundException" . policy-not-found-exception)
    ("PolicyTypeAlreadyEnabledException"
     . policy-type-already-enabled-exception)
    ("PolicyTypeNotAvailableForOrganizationException"
     . policy-type-not-available-for-organization-exception)
    ("PolicyTypeNotEnabledException" . policy-type-not-enabled-exception)
    ("ResourcePolicyNotFoundException" . resource-policy-not-found-exception)
    ("RootNotFoundException" . root-not-found-exception)
    ("ServiceException" . service-exception)
    ("SourceParentNotFoundException" . source-parent-not-found-exception)
    ("TargetNotFoundException" . target-not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnsupportedAPIEndpointException" . unsupported-apiendpoint-exception)))
(common-lisp:progn
 (common-lisp:define-condition awsorganizations-not-in-use-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       awsorganizations-not-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'awsorganizations-not-in-use-exception
                    'awsorganizations-not-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:defclass accept-handshake-request common-lisp:nil
                       ((handshake-id :initarg :handshake-id :type
                         (common-lisp:or handshake-id common-lisp:null)
                         :accessor %accept-handshake-request-handshake-id
                         :initform
                         (common-lisp:error ":handshake-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-handshake-request 'make-accept-handshake-request))
 (common-lisp:defun make-accept-handshake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake-id)
   (common-lisp:apply #'common-lisp:make-instance 'accept-handshake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake-id))
      (common-lisp:list
       (common-lisp:cons "HandshakeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-handshake-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %accept-handshake-response-handshake :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-handshake-response
                    'make-accept-handshake-response))
 (common-lisp:defun make-accept-handshake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance 'accept-handshake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-handshake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-for-dependency-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-for-dependency-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-for-dependency-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-for-dependency-exception
                    'access-denied-for-dependency-exception-message
                    'access-denied-for-dependency-exception-reason)))
(common-lisp:deftype access-denied-for-dependency-exception-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account common-lisp:nil
                       ((joined-timestamp :initarg :joined-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %account-joined-timestamp :initform common-lisp:nil)
                        (joined-method :initarg :joined-method :type
                         (common-lisp:or account-joined-method
                                         common-lisp:null)
                         :accessor %account-joined-method :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or account-status common-lisp:null)
                         :accessor %account-status :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or account-name common-lisp:null)
                         :accessor %account-name :initform common-lisp:nil)
                        (email :initarg :email :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %account-email :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or account-arn common-lisp:null)
                         :accessor %account-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'account 'make-account))
 (common-lisp:defun make-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key joined-timestamp joined-method status
                     name email arn id)
   (common-lisp:apply #'common-lisp:make-instance 'account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'joined-method))
      (common-lisp:list
       (common-lisp:cons "JoinedMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'joined-timestamp))
      (common-lisp:list
       (common-lisp:cons "JoinedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition account-already-closed-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-already-closed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-already-closed-exception
                    'account-already-closed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition account-already-registered-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-already-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-already-registered-exception
                    'account-already-registered-exception-message)))
(common-lisp:deftype account-arn () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype account-joined-method () 'common-lisp:string)
(common-lisp:deftype account-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition account-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-not-found-exception
                    'account-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition account-not-registered-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-not-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-not-registered-exception
                    'account-not-registered-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition account-owner-not-verified-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       account-owner-not-verified-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-owner-not-verified-exception
                    'account-owner-not-verified-exception-message)))
(common-lisp:deftype account-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype accounts () '(trivial-types:proper-list account))
 (common-lisp:defun |make-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition already-in-organization-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-in-organization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-in-organization-exception
                    'already-in-organization-exception-message)))
(common-lisp:progn
 (common-lisp:defclass attach-policy-request common-lisp:nil
                       ((target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %attach-policy-request-target-id :initform
                         (common-lisp:error ":target-id is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %attach-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'attach-policy-request 'make-attach-policy-request))
 (common-lisp:defun make-attach-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-id policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'attach-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   common-lisp:nil))
(common-lisp:deftype aws-managed-policy () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-handshake-request common-lisp:nil
                       ((handshake-id :initarg :handshake-id :type
                         (common-lisp:or handshake-id common-lisp:null)
                         :accessor %cancel-handshake-request-handshake-id
                         :initform
                         (common-lisp:error ":handshake-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-handshake-request 'make-cancel-handshake-request))
 (common-lisp:defun make-cancel-handshake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-handshake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake-id))
      (common-lisp:list
       (common-lisp:cons "HandshakeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-handshake-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %cancel-handshake-response-handshake :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-handshake-response
                    'make-cancel-handshake-response))
 (common-lisp:defun make-cancel-handshake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-handshake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-handshake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass child common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or child-type common-lisp:null) :accessor
                         %child-type :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or child-id common-lisp:null) :accessor
                         %child-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'child 'make-child))
 (common-lisp:defun make-child
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'child
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input child))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input child))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input child))
   common-lisp:nil))
(common-lisp:deftype child-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition child-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       child-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'child-not-found-exception
                    'child-not-found-exception-message)))
(common-lisp:deftype child-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype children () '(trivial-types:proper-list child))
 (common-lisp:defun |make-children|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list child))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass close-account-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %close-account-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'close-account-request 'make-close-account-request))
 (common-lisp:defun make-close-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance 'close-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          close-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          close-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          close-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition constraint-violation-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       constraint-violation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       constraint-violation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'constraint-violation-exception
                    'constraint-violation-exception-message
                    'constraint-violation-exception-reason)))
(common-lisp:deftype constraint-violation-exception-reason ()
  'common-lisp:string)
(common-lisp:deftype create-account-failure-reason () 'common-lisp:string)
(common-lisp:deftype create-account-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-account-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-account-request-tags :initform
                         common-lisp:nil)
                        (iam-user-access-to-billing :initarg
                         :iam-user-access-to-billing :type
                         (common-lisp:or iamuser-access-to-billing
                                         common-lisp:null)
                         :accessor
                         %create-account-request-iam-user-access-to-billing
                         :initform common-lisp:nil)
                        (role-name :initarg :role-name :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %create-account-request-role-name :initform
                         common-lisp:nil)
                        (account-name :initarg :account-name :type
                         (common-lisp:or create-account-name common-lisp:null)
                         :accessor %create-account-request-account-name
                         :initform
                         (common-lisp:error ":account-name is required"))
                        (email :initarg :email :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %create-account-request-email :initform
                         (common-lisp:error ":email is required"))))
 (common-lisp:export
  (common-lisp:list 'create-account-request 'make-create-account-request))
 (common-lisp:defun make-create-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-user-access-to-billing role-name
                     account-name email)
   (common-lisp:apply #'common-lisp:make-instance 'create-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-user-access-to-billing))
      (common-lisp:list
       (common-lisp:cons "IamUserAccessToBilling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-request))
   common-lisp:nil))
(common-lisp:deftype create-account-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-account-response common-lisp:nil
                       ((create-account-status :initarg :create-account-status
                         :type
                         (common-lisp:or create-account-status
                                         common-lisp:null)
                         :accessor
                         %create-account-response-create-account-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-account-response 'make-create-account-response))
 (common-lisp:defun make-create-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-account-status)
   (common-lisp:apply #'common-lisp:make-instance 'create-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-account-status))
      (common-lisp:list
       (common-lisp:cons "CreateAccountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-response))
   common-lisp:nil))
(common-lisp:deftype create-account-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype create-account-states ()
   '(trivial-types:proper-list create-account-state))
 (common-lisp:defun |make-create-account-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-account-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-account-status common-lisp:nil
                       ((failure-reason :initarg :failure-reason :type
                         (common-lisp:or create-account-failure-reason
                                         common-lisp:null)
                         :accessor %create-account-status-failure-reason
                         :initform common-lisp:nil)
                        (gov-cloud-account-id :initarg :gov-cloud-account-id
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %create-account-status-gov-cloud-account-id
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-account-status-account-id :initform
                         common-lisp:nil)
                        (completed-timestamp :initarg :completed-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %create-account-status-completed-timestamp
                         :initform common-lisp:nil)
                        (requested-timestamp :initarg :requested-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %create-account-status-requested-timestamp
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or create-account-state common-lisp:null)
                         :accessor %create-account-status-state :initform
                         common-lisp:nil)
                        (account-name :initarg :account-name :type
                         (common-lisp:or create-account-name common-lisp:null)
                         :accessor %create-account-status-account-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or create-account-request-id
                                         common-lisp:null)
                         :accessor %create-account-status-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-account-status 'make-create-account-status))
 (common-lisp:defun make-create-account-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason gov-cloud-account-id
                     account-id completed-timestamp requested-timestamp state
                     account-name id)
   (common-lisp:apply #'common-lisp:make-instance 'create-account-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-timestamp))
      (common-lisp:list
       (common-lisp:cons "RequestedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-timestamp))
      (common-lisp:list
       (common-lisp:cons "CompletedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gov-cloud-account-id))
      (common-lisp:list
       (common-lisp:cons "GovCloudAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-account-status-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-account-status-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-account-status-not-found-exception
                    'create-account-status-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype create-account-statuses ()
   '(trivial-types:proper-list create-account-status))
 (common-lisp:defun |make-create-account-statuses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-account-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-gov-cloud-account-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-gov-cloud-account-request-tags :initform
                         common-lisp:nil)
                        (iam-user-access-to-billing :initarg
                         :iam-user-access-to-billing :type
                         (common-lisp:or iamuser-access-to-billing
                                         common-lisp:null)
                         :accessor
                         %create-gov-cloud-account-request-iam-user-access-to-billing
                         :initform common-lisp:nil)
                        (role-name :initarg :role-name :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %create-gov-cloud-account-request-role-name :initform
                         common-lisp:nil)
                        (account-name :initarg :account-name :type
                         (common-lisp:or create-account-name common-lisp:null)
                         :accessor
                         %create-gov-cloud-account-request-account-name
                         :initform
                         (common-lisp:error ":account-name is required"))
                        (email :initarg :email :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %create-gov-cloud-account-request-email :initform
                         (common-lisp:error ":email is required"))))
 (common-lisp:export
  (common-lisp:list 'create-gov-cloud-account-request
                    'make-create-gov-cloud-account-request))
 (common-lisp:defun make-create-gov-cloud-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags iam-user-access-to-billing role-name
                     account-name email)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-gov-cloud-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-user-access-to-billing))
      (common-lisp:list
       (common-lisp:cons "IamUserAccessToBilling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gov-cloud-account-response common-lisp:nil
                       ((create-account-status :initarg :create-account-status
                         :type
                         (common-lisp:or create-account-status
                                         common-lisp:null)
                         :accessor
                         %create-gov-cloud-account-response-create-account-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-gov-cloud-account-response
                    'make-create-gov-cloud-account-response))
 (common-lisp:defun make-create-gov-cloud-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-account-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-gov-cloud-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-account-status))
      (common-lisp:list
       (common-lisp:cons "CreateAccountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gov-cloud-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organization-request common-lisp:nil
                       ((feature-set :initarg :feature-set :type
                         (common-lisp:or organization-feature-set
                                         common-lisp:null)
                         :accessor %create-organization-request-feature-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-organization-request
                    'make-create-organization-request))
 (common-lisp:defun make-create-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key feature-set)
   (common-lisp:apply #'common-lisp:make-instance 'create-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-set))
      (common-lisp:list
       (common-lisp:cons "FeatureSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organization-response common-lisp:nil
                       ((organization :initarg :organization :type
                         (common-lisp:or organization common-lisp:null)
                         :accessor %create-organization-response-organization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-organization-response
                    'make-create-organization-response))
 (common-lisp:defun make-create-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organization)
   (common-lisp:apply #'common-lisp:make-instance 'create-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organizational-unit-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-organizational-unit-request-tags :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or organizational-unit-name
                                         common-lisp:null)
                         :accessor %create-organizational-unit-request-name
                         :initform (common-lisp:error ":name is required"))
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %create-organizational-unit-request-parent-id
                         :initform
                         (common-lisp:error ":parent-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-organizational-unit-request
                    'make-create-organizational-unit-request))
 (common-lisp:defun make-create-organizational-unit-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name parent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-organizational-unit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-organizational-unit-response common-lisp:nil
                       ((organizational-unit :initarg :organizational-unit
                         :type
                         (common-lisp:or organizational-unit common-lisp:null)
                         :accessor
                         %create-organizational-unit-response-organizational-unit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-organizational-unit-response
                    'make-create-organizational-unit-response))
 (common-lisp:defun make-create-organizational-unit-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-organizational-unit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organizational-unit))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-organizational-unit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-policy-request-tags :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %create-policy-request-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %create-policy-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %create-policy-request-description :initform
                         (common-lisp:error ":description is required"))
                        (content :initarg :content :type
                         (common-lisp:or policy-content common-lisp:null)
                         :accessor %create-policy-request-content :initform
                         (common-lisp:error ":content is required"))))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defun make-create-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags type name description content)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %create-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defun make-create-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'create-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-handshake-request common-lisp:nil
                       ((handshake-id :initarg :handshake-id :type
                         (common-lisp:or handshake-id common-lisp:null)
                         :accessor %decline-handshake-request-handshake-id
                         :initform
                         (common-lisp:error ":handshake-id is required"))))
 (common-lisp:export
  (common-lisp:list 'decline-handshake-request
                    'make-decline-handshake-request))
 (common-lisp:defun make-decline-handshake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake-id)
   (common-lisp:apply #'common-lisp:make-instance 'decline-handshake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake-id))
      (common-lisp:list
       (common-lisp:cons "HandshakeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-handshake-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %decline-handshake-response-handshake :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decline-handshake-response
                    'make-decline-handshake-response))
 (common-lisp:defun make-decline-handshake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance 'decline-handshake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-handshake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delegated-administrator common-lisp:nil
                       ((delegation-enabled-date :initarg
                         :delegation-enabled-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delegated-administrator-delegation-enabled-date
                         :initform common-lisp:nil)
                        (joined-timestamp :initarg :joined-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delegated-administrator-joined-timestamp :initform
                         common-lisp:nil)
                        (joined-method :initarg :joined-method :type
                         (common-lisp:or account-joined-method
                                         common-lisp:null)
                         :accessor %delegated-administrator-joined-method
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or account-status common-lisp:null)
                         :accessor %delegated-administrator-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or account-name common-lisp:null)
                         :accessor %delegated-administrator-name :initform
                         common-lisp:nil)
                        (email :initarg :email :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %delegated-administrator-email :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or account-arn common-lisp:null)
                         :accessor %delegated-administrator-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delegated-administrator-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delegated-administrator 'make-delegated-administrator))
 (common-lisp:defun make-delegated-administrator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delegation-enabled-date joined-timestamp
                     joined-method status name email arn id)
   (common-lisp:apply #'common-lisp:make-instance 'delegated-administrator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delegated-administrator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delegated-administrator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'joined-method))
      (common-lisp:list
       (common-lisp:cons "JoinedMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'joined-timestamp))
      (common-lisp:list
       (common-lisp:cons "JoinedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegation-enabled-date))
      (common-lisp:list
       (common-lisp:cons "DelegationEnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delegated-administrator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delegated-administrators ()
   '(trivial-types:proper-list delegated-administrator))
 (common-lisp:defun |make-delegated-administrators|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegated-administrator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delegated-service common-lisp:nil
                       ((delegation-enabled-date :initarg
                         :delegation-enabled-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %delegated-service-delegation-enabled-date :initform
                         common-lisp:nil)
                        (service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor %delegated-service-service-principal
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delegated-service 'make-delegated-service))
 (common-lisp:defun make-delegated-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delegation-enabled-date
                     service-principal)
   (common-lisp:apply #'common-lisp:make-instance 'delegated-service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delegated-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delegated-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegation-enabled-date))
      (common-lisp:list
       (common-lisp:cons "DelegationEnabledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delegated-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delegated-services ()
   '(trivial-types:proper-list delegated-service))
 (common-lisp:defun |make-delegated-services|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegated-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-organizational-unit-request common-lisp:nil
                       ((organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor
                         %delete-organizational-unit-request-organizational-unit-id
                         :initform
                         (common-lisp:error
                          ":organizational-unit-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-organizational-unit-request
                    'make-delete-organizational-unit-request))
 (common-lisp:defun make-delete-organizational-unit-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-organizational-unit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organizational-unit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organizational-unit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organizational-unit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %delete-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defun make-delete-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-delegated-administrator-request
                       common-lisp:nil
                       ((service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         %deregister-delegated-administrator-request-service-principal
                         :initform
                         (common-lisp:error ":service-principal is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %deregister-delegated-administrator-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-delegated-administrator-request
                    'make-deregister-delegated-administrator-request))
 (common-lisp:defun make-deregister-delegated-administrator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-principal account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-delegated-administrator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-delegated-administrator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-delegated-administrator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-delegated-administrator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-account-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-account-request 'make-describe-account-request))
 (common-lisp:defun make-describe-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-response common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %describe-account-response-account :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-response
                    'make-describe-account-response))
 (common-lisp:defun make-describe-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account)
   (common-lisp:apply #'common-lisp:make-instance 'describe-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-create-account-status-request common-lisp:nil
                       ((create-account-request-id :initarg
                         :create-account-request-id :type
                         (common-lisp:or create-account-request-id
                                         common-lisp:null)
                         :accessor
                         %describe-create-account-status-request-create-account-request-id
                         :initform
                         (common-lisp:error
                          ":create-account-request-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-create-account-status-request
                    'make-describe-create-account-status-request))
 (common-lisp:defun make-describe-create-account-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-account-request-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-create-account-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-account-request-id))
      (common-lisp:list
       (common-lisp:cons "CreateAccountRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-create-account-status-response common-lisp:nil
                       ((create-account-status :initarg :create-account-status
                         :type
                         (common-lisp:or create-account-status
                                         common-lisp:null)
                         :accessor
                         %describe-create-account-status-response-create-account-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-create-account-status-response
                    'make-describe-create-account-status-response))
 (common-lisp:defun make-describe-create-account-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-account-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-create-account-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-account-status))
      (common-lisp:list
       (common-lisp:cons "CreateAccountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-create-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-policy-request common-lisp:nil
                       ((target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %describe-effective-policy-request-target-id
                         :initform common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or effective-policy-type
                                         common-lisp:null)
                         :accessor
                         %describe-effective-policy-request-policy-type
                         :initform
                         (common-lisp:error ":policy-type is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-effective-policy-request
                    'make-describe-effective-policy-request))
 (common-lisp:defun make-describe-effective-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-id policy-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-policy-response common-lisp:nil
                       ((effective-policy :initarg :effective-policy :type
                         (common-lisp:or effective-policy common-lisp:null)
                         :accessor
                         %describe-effective-policy-response-effective-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-effective-policy-response
                    'make-describe-effective-policy-response))
 (common-lisp:defun make-describe-effective-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key effective-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-policy))
      (common-lisp:list
       (common-lisp:cons "EffectivePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-handshake-request common-lisp:nil
                       ((handshake-id :initarg :handshake-id :type
                         (common-lisp:or handshake-id common-lisp:null)
                         :accessor %describe-handshake-request-handshake-id
                         :initform
                         (common-lisp:error ":handshake-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-handshake-request
                    'make-describe-handshake-request))
 (common-lisp:defun make-describe-handshake-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-handshake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake-id))
      (common-lisp:list
       (common-lisp:cons "HandshakeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-handshake-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %describe-handshake-response-handshake :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-handshake-response
                    'make-describe-handshake-response))
 (common-lisp:defun make-describe-handshake-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance 'describe-handshake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-handshake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-response common-lisp:nil
                       ((organization :initarg :organization :type
                         (common-lisp:or organization common-lisp:null)
                         :accessor %describe-organization-response-organization
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-response
                    'make-describe-organization-response))
 (common-lisp:defun make-describe-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organization)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organizational-unit-request common-lisp:nil
                       ((organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor
                         %describe-organizational-unit-request-organizational-unit-id
                         :initform
                         (common-lisp:error
                          ":organizational-unit-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-organizational-unit-request
                    'make-describe-organizational-unit-request))
 (common-lisp:defun make-describe-organizational-unit-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organizational-unit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organizational-unit-response common-lisp:nil
                       ((organizational-unit :initarg :organizational-unit
                         :type
                         (common-lisp:or organizational-unit common-lisp:null)
                         :accessor
                         %describe-organizational-unit-response-organizational-unit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-organizational-unit-response
                    'make-describe-organizational-unit-response))
 (common-lisp:defun make-describe-organizational-unit-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organizational-unit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organizational-unit))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organizational-unit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %describe-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-policy-request 'make-describe-policy-request))
 (common-lisp:defun make-describe-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %describe-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-policy-response 'make-describe-policy-response))
 (common-lisp:defun make-describe-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'describe-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-policy-response common-lisp:nil
                       ((resource-policy :initarg :resource-policy :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %describe-resource-policy-response-resource-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-policy-response
                    'make-describe-resource-policy-response))
 (common-lisp:defun make-describe-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition destination-parent-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       destination-parent-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'destination-parent-not-found-exception
                    'destination-parent-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass detach-policy-request common-lisp:nil
                       ((target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %detach-policy-request-target-id :initform
                         (common-lisp:error ":target-id is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %detach-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'detach-policy-request 'make-detach-policy-request))
 (common-lisp:defun make-detach-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-id policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'detach-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-awsservice-access-request common-lisp:nil
                       ((service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         %disable-awsservice-access-request-service-principal
                         :initform
                         (common-lisp:error
                          ":service-principal is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-awsservice-access-request
                    'make-disable-awsservice-access-request))
 (common-lisp:defun make-disable-awsservice-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-principal)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-awsservice-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsservice-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsservice-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-awsservice-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-policy-type-request common-lisp:nil
                       ((policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %disable-policy-type-request-policy-type
                         :initform
                         (common-lisp:error ":policy-type is required"))
                        (root-id :initarg :root-id :type
                         (common-lisp:or root-id common-lisp:null) :accessor
                         %disable-policy-type-request-root-id :initform
                         (common-lisp:error ":root-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-policy-type-request
                    'make-disable-policy-type-request))
 (common-lisp:defun make-disable-policy-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type root-id)
   (common-lisp:apply #'common-lisp:make-instance 'disable-policy-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-id))
      (common-lisp:list
       (common-lisp:cons "RootId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-policy-type-response common-lisp:nil
                       ((root :initarg :root :type
                         (common-lisp:or root common-lisp:null) :accessor
                         %disable-policy-type-response-root :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disable-policy-type-response
                    'make-disable-policy-type-response))
 (common-lisp:defun make-disable-policy-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root)
   (common-lisp:apply #'common-lisp:make-instance 'disable-policy-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "Root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-policy-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-account-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-account-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-account-exception
                    'duplicate-account-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-handshake-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-handshake-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-handshake-exception
                    'duplicate-handshake-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-organizational-unit-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-organizational-unit-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-organizational-unit-exception
                    'duplicate-organizational-unit-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-policy-attachment-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-policy-attachment-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-policy-attachment-exception
                    'duplicate-policy-attachment-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-policy-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-policy-exception
                    'duplicate-policy-exception-message)))
(common-lisp:progn
 (common-lisp:defclass effective-policy common-lisp:nil
                       ((policy-type :initarg :policy-type :type
                         (common-lisp:or effective-policy-type
                                         common-lisp:null)
                         :accessor %effective-policy-policy-type :initform
                         common-lisp:nil)
                        (target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %effective-policy-target-id :initform
                         common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %effective-policy-last-updated-timestamp :initform
                         common-lisp:nil)
                        (policy-content :initarg :policy-content :type
                         (common-lisp:or policy-content common-lisp:null)
                         :accessor %effective-policy-policy-content :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'effective-policy 'make-effective-policy))
 (common-lisp:defun make-effective-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type target-id
                     last-updated-timestamp policy-content)
   (common-lisp:apply #'common-lisp:make-instance 'effective-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input effective-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-content))
      (common-lisp:list
       (common-lisp:cons "PolicyContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input effective-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition effective-policy-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       effective-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'effective-policy-not-found-exception
                    'effective-policy-not-found-exception-message)))
(common-lisp:deftype effective-policy-type () 'common-lisp:string)
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-awsservice-access-request common-lisp:nil
                       ((service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         %enable-awsservice-access-request-service-principal
                         :initform
                         (common-lisp:error
                          ":service-principal is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-awsservice-access-request
                    'make-enable-awsservice-access-request))
 (common-lisp:defun make-enable-awsservice-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-principal)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-awsservice-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsservice-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsservice-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-awsservice-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-all-features-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-all-features-request
                    'make-enable-all-features-request))
 (common-lisp:defun make-enable-all-features-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-all-features-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-all-features-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %enable-all-features-response-handshake :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-all-features-response
                    'make-enable-all-features-response))
 (common-lisp:defun make-enable-all-features-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance 'enable-all-features-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-all-features-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-policy-type-request common-lisp:nil
                       ((policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %enable-policy-type-request-policy-type
                         :initform
                         (common-lisp:error ":policy-type is required"))
                        (root-id :initarg :root-id :type
                         (common-lisp:or root-id common-lisp:null) :accessor
                         %enable-policy-type-request-root-id :initform
                         (common-lisp:error ":root-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-policy-type-request
                    'make-enable-policy-type-request))
 (common-lisp:defun make-enable-policy-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type root-id)
   (common-lisp:apply #'common-lisp:make-instance 'enable-policy-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-id))
      (common-lisp:list
       (common-lisp:cons "RootId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-policy-type-response common-lisp:nil
                       ((root :initarg :root :type
                         (common-lisp:or root common-lisp:null) :accessor
                         %enable-policy-type-response-root :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-policy-type-response
                    'make-enable-policy-type-response))
 (common-lisp:defun make-enable-policy-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root)
   (common-lisp:apply #'common-lisp:make-instance 'enable-policy-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root))
      (common-lisp:list
       (common-lisp:cons "Root"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-policy-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enabled-service-principal common-lisp:nil
                       ((date-enabled :initarg :date-enabled :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %enabled-service-principal-date-enabled :initform
                         common-lisp:nil)
                        (service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor %enabled-service-principal-service-principal
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enabled-service-principal
                    'make-enabled-service-principal))
 (common-lisp:defun make-enabled-service-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-enabled service-principal)
   (common-lisp:apply #'common-lisp:make-instance 'enabled-service-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enabled-service-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enabled-service-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-enabled))
      (common-lisp:list
       (common-lisp:cons "DateEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enabled-service-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enabled-service-principals ()
   '(trivial-types:proper-list enabled-service-principal))
 (common-lisp:defun |make-enabled-service-principals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enabled-service-principal))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype exception-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition finalizing-organization-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       finalizing-organization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'finalizing-organization-exception
                    'finalizing-organization-exception-message)))
(common-lisp:deftype generic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass handshake common-lisp:nil
                       ((resources :initarg :resources :type
                         (common-lisp:or handshake-resources common-lisp:null)
                         :accessor %handshake-resources :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %handshake-action :initform common-lisp:nil)
                        (expiration-timestamp :initarg :expiration-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %handshake-expiration-timestamp :initform
                         common-lisp:nil)
                        (requested-timestamp :initarg :requested-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %handshake-requested-timestamp :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or handshake-state common-lisp:null)
                         :accessor %handshake-state :initform common-lisp:nil)
                        (parties :initarg :parties :type
                         (common-lisp:or handshake-parties common-lisp:null)
                         :accessor %handshake-parties :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or handshake-arn common-lisp:null)
                         :accessor %handshake-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or handshake-id common-lisp:null)
                         :accessor %handshake-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'handshake 'make-handshake))
 (common-lisp:defun make-handshake
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources action expiration-timestamp
                     requested-timestamp state parties arn id)
   (common-lisp:apply #'common-lisp:make-instance 'handshake
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input handshake))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input handshake))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parties))
      (common-lisp:list
       (common-lisp:cons "Parties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-timestamp))
      (common-lisp:list
       (common-lisp:cons "RequestedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expiration-timestamp))
      (common-lisp:list
       (common-lisp:cons "ExpirationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input handshake))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition handshake-already-in-state-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       handshake-already-in-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'handshake-already-in-state-exception
                    'handshake-already-in-state-exception-message)))
(common-lisp:deftype handshake-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition handshake-constraint-violation-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       handshake-constraint-violation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       handshake-constraint-violation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'handshake-constraint-violation-exception
                    'handshake-constraint-violation-exception-message
                    'handshake-constraint-violation-exception-reason)))
(common-lisp:deftype handshake-constraint-violation-exception-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass handshake-filter common-lisp:nil
                       ((parent-handshake-id :initarg :parent-handshake-id
                         :type (common-lisp:or handshake-id common-lisp:null)
                         :accessor %handshake-filter-parent-handshake-id
                         :initform common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %handshake-filter-action-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'handshake-filter 'make-handshake-filter))
 (common-lisp:defun make-handshake-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-handshake-id action-type)
   (common-lisp:apply #'common-lisp:make-instance 'handshake-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input handshake-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input handshake-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-handshake-id))
      (common-lisp:list
       (common-lisp:cons "ParentHandshakeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input handshake-filter))
   common-lisp:nil))
(common-lisp:deftype handshake-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition handshake-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       handshake-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'handshake-not-found-exception
                    'handshake-not-found-exception-message)))
(common-lisp:deftype handshake-notes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype handshake-parties ()
   '(trivial-types:proper-list handshake-party))
 (common-lisp:defun |make-handshake-parties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list handshake-party))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass handshake-party common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or handshake-party-type common-lisp:null)
                         :accessor %handshake-party-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or handshake-party-id common-lisp:null)
                         :accessor %handshake-party-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'handshake-party 'make-handshake-party))
 (common-lisp:defun make-handshake-party
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'handshake-party
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input handshake-party))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input handshake-party))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input handshake-party))
   common-lisp:nil))
(common-lisp:deftype handshake-party-id () 'common-lisp:string)
(common-lisp:deftype handshake-party-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass handshake-resource common-lisp:nil
                       ((resources :initarg :resources :type
                         (common-lisp:or handshake-resources common-lisp:null)
                         :accessor %handshake-resource-resources :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or handshake-resource-type
                                         common-lisp:null)
                         :accessor %handshake-resource-type :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or handshake-resource-value
                                         common-lisp:null)
                         :accessor %handshake-resource-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'handshake-resource 'make-handshake-resource))
 (common-lisp:defun make-handshake-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources type value)
   (common-lisp:apply #'common-lisp:make-instance 'handshake-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input handshake-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input handshake-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input handshake-resource))
   common-lisp:nil))
(common-lisp:deftype handshake-resource-type () 'common-lisp:string)
(common-lisp:deftype handshake-resource-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype handshake-resources ()
   '(trivial-types:proper-list handshake-resource))
 (common-lisp:defun |make-handshake-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list handshake-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype handshake-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype handshakes () '(trivial-types:proper-list handshake))
 (common-lisp:defun |make-handshakes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list handshake))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iamuser-access-to-billing () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-handshake-transition-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-handshake-transition-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-handshake-transition-exception
                    'invalid-handshake-transition-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       invalid-input-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-reason)))
(common-lisp:deftype invalid-input-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass invite-account-to-organization-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %invite-account-to-organization-request-tags :initform
                         common-lisp:nil)
                        (notes :initarg :notes :type
                         (common-lisp:or handshake-notes common-lisp:null)
                         :accessor
                         %invite-account-to-organization-request-notes
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or handshake-party common-lisp:null)
                         :accessor
                         %invite-account-to-organization-request-target
                         :initform (common-lisp:error ":target is required"))))
 (common-lisp:export
  (common-lisp:list 'invite-account-to-organization-request
                    'make-invite-account-to-organization-request))
 (common-lisp:defun make-invite-account-to-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags notes target)
   (common-lisp:apply #'common-lisp:make-instance
                      'invite-account-to-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invite-account-to-organization-response common-lisp:nil
                       ((handshake :initarg :handshake :type
                         (common-lisp:or handshake common-lisp:null) :accessor
                         %invite-account-to-organization-response-handshake
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invite-account-to-organization-response
                    'make-invite-account-to-organization-response))
 (common-lisp:defun make-invite-account-to-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key handshake)
   (common-lisp:apply #'common-lisp:make-instance
                      'invite-account-to-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshake))
      (common-lisp:list
       (common-lisp:cons "Handshake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-account-to-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-awsservice-access-for-organization-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-awsservice-access-for-organization-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-awsservice-access-for-organization-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-awsservice-access-for-organization-request
                    'make-list-awsservice-access-for-organization-request))
 (common-lisp:defun make-list-awsservice-access-for-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-awsservice-access-for-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-awsservice-access-for-organization-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-awsservice-access-for-organization-response-next-token
                         :initform common-lisp:nil)
                        (enabled-service-principals :initarg
                         :enabled-service-principals :type
                         (common-lisp:or enabled-service-principals
                                         common-lisp:null)
                         :accessor
                         %list-awsservice-access-for-organization-response-enabled-service-principals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-awsservice-access-for-organization-response
                    'make-list-awsservice-access-for-organization-response))
 (common-lisp:defun make-list-awsservice-access-for-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token enabled-service-principals)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-awsservice-access-for-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-service-principals))
      (common-lisp:list
       (common-lisp:cons "EnabledServicePrincipals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-awsservice-access-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accounts-for-parent-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-accounts-for-parent-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accounts-for-parent-request-next-token :initform
                         common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %list-accounts-for-parent-request-parent-id :initform
                         (common-lisp:error ":parent-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-accounts-for-parent-request
                    'make-list-accounts-for-parent-request))
 (common-lisp:defun make-list-accounts-for-parent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token parent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-accounts-for-parent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accounts-for-parent-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accounts-for-parent-response-next-token
                         :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or accounts common-lisp:null) :accessor
                         %list-accounts-for-parent-response-accounts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accounts-for-parent-response
                    'make-list-accounts-for-parent-response))
 (common-lisp:defun make-list-accounts-for-parent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-accounts-for-parent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-for-parent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accounts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-accounts-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accounts-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accounts-request 'make-list-accounts-request))
 (common-lisp:defun make-list-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accounts-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accounts-response-next-token :initform
                         common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or accounts common-lisp:null) :accessor
                         %list-accounts-response-accounts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accounts-response 'make-list-accounts-response))
 (common-lisp:defun make-list-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token accounts)
   (common-lisp:apply #'common-lisp:make-instance 'list-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-children-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-children-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-children-request-next-token :initform
                         common-lisp:nil)
                        (child-type :initarg :child-type :type
                         (common-lisp:or child-type common-lisp:null) :accessor
                         %list-children-request-child-type :initform
                         (common-lisp:error ":child-type is required"))
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %list-children-request-parent-id :initform
                         (common-lisp:error ":parent-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-children-request 'make-list-children-request))
 (common-lisp:defun make-list-children-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token child-type
                     parent-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-children-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-children-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-children-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-type))
      (common-lisp:list
       (common-lisp:cons "ChildType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-children-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-children-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-children-response-next-token :initform
                         common-lisp:nil)
                        (children :initarg :children :type
                         (common-lisp:or children common-lisp:null) :accessor
                         %list-children-response-children :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-children-response 'make-list-children-response))
 (common-lisp:defun make-list-children-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token children)
   (common-lisp:apply #'common-lisp:make-instance 'list-children-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-children-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-children-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-children-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-create-account-status-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-create-account-status-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-create-account-status-request-next-token
                         :initform common-lisp:nil)
                        (states :initarg :states :type
                         (common-lisp:or create-account-states
                                         common-lisp:null)
                         :accessor %list-create-account-status-request-states
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-create-account-status-request
                    'make-list-create-account-status-request))
 (common-lisp:defun make-list-create-account-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token states)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-create-account-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states))
      (common-lisp:list
       (common-lisp:cons "States"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-create-account-status-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-create-account-status-response-next-token
                         :initform common-lisp:nil)
                        (create-account-statuses :initarg
                         :create-account-statuses :type
                         (common-lisp:or create-account-statuses
                                         common-lisp:null)
                         :accessor
                         %list-create-account-status-response-create-account-statuses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-create-account-status-response
                    'make-list-create-account-status-response))
 (common-lisp:defun make-list-create-account-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token create-account-statuses)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-create-account-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-account-statuses))
      (common-lisp:list
       (common-lisp:cons "CreateAccountStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-create-account-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-delegated-administrators-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-delegated-administrators-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-delegated-administrators-request-next-token
                         :initform common-lisp:nil)
                        (service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         %list-delegated-administrators-request-service-principal
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-delegated-administrators-request
                    'make-list-delegated-administrators-request))
 (common-lisp:defun make-list-delegated-administrators-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token service-principal)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-delegated-administrators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-delegated-administrators-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-delegated-administrators-response-next-token
                         :initform common-lisp:nil)
                        (delegated-administrators :initarg
                         :delegated-administrators :type
                         (common-lisp:or delegated-administrators
                                         common-lisp:null)
                         :accessor
                         %list-delegated-administrators-response-delegated-administrators
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-delegated-administrators-response
                    'make-list-delegated-administrators-response))
 (common-lisp:defun make-list-delegated-administrators-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token delegated-administrators)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-delegated-administrators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-administrators))
      (common-lisp:list
       (common-lisp:cons "DelegatedAdministrators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-administrators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-delegated-services-for-account-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-delegated-services-for-account-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-delegated-services-for-account-request-next-token
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-delegated-services-for-account-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-delegated-services-for-account-request
                    'make-list-delegated-services-for-account-request))
 (common-lisp:defun make-list-delegated-services-for-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-delegated-services-for-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-delegated-services-for-account-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-delegated-services-for-account-response-next-token
                         :initform common-lisp:nil)
                        (delegated-services :initarg :delegated-services :type
                         (common-lisp:or delegated-services common-lisp:null)
                         :accessor
                         %list-delegated-services-for-account-response-delegated-services
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-delegated-services-for-account-response
                    'make-list-delegated-services-for-account-response))
 (common-lisp:defun make-list-delegated-services-for-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token delegated-services)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-delegated-services-for-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delegated-services))
      (common-lisp:list
       (common-lisp:cons "DelegatedServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-delegated-services-for-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-handshakes-for-account-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-handshakes-for-account-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-handshakes-for-account-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or handshake-filter common-lisp:null)
                         :accessor %list-handshakes-for-account-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-handshakes-for-account-request
                    'make-list-handshakes-for-account-request))
 (common-lisp:defun make-list-handshakes-for-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-handshakes-for-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-handshakes-for-account-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-handshakes-for-account-response-next-token
                         :initform common-lisp:nil)
                        (handshakes :initarg :handshakes :type
                         (common-lisp:or handshakes common-lisp:null) :accessor
                         %list-handshakes-for-account-response-handshakes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-handshakes-for-account-response
                    'make-list-handshakes-for-account-response))
 (common-lisp:defun make-list-handshakes-for-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token handshakes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-handshakes-for-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshakes))
      (common-lisp:list
       (common-lisp:cons "Handshakes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-handshakes-for-organization-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-handshakes-for-organization-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-handshakes-for-organization-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or handshake-filter common-lisp:null)
                         :accessor
                         %list-handshakes-for-organization-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-handshakes-for-organization-request
                    'make-list-handshakes-for-organization-request))
 (common-lisp:defun make-list-handshakes-for-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-handshakes-for-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-handshakes-for-organization-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-handshakes-for-organization-response-next-token
                         :initform common-lisp:nil)
                        (handshakes :initarg :handshakes :type
                         (common-lisp:or handshakes common-lisp:null) :accessor
                         %list-handshakes-for-organization-response-handshakes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-handshakes-for-organization-response
                    'make-list-handshakes-for-organization-response))
 (common-lisp:defun make-list-handshakes-for-organization-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token handshakes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-handshakes-for-organization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handshakes))
      (common-lisp:list
       (common-lisp:cons "Handshakes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-handshakes-for-organization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organizational-units-for-parent-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-organizational-units-for-parent-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-organizational-units-for-parent-request-next-token
                         :initform common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %list-organizational-units-for-parent-request-parent-id
                         :initform
                         (common-lisp:error ":parent-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-organizational-units-for-parent-request
                    'make-list-organizational-units-for-parent-request))
 (common-lisp:defun make-list-organizational-units-for-parent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token parent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organizational-units-for-parent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organizational-units-for-parent-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-organizational-units-for-parent-response-next-token
                         :initform common-lisp:nil)
                        (organizational-units :initarg :organizational-units
                         :type
                         (common-lisp:or organizational-units common-lisp:null)
                         :accessor
                         %list-organizational-units-for-parent-response-organizational-units
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organizational-units-for-parent-response
                    'make-list-organizational-units-for-parent-response))
 (common-lisp:defun make-list-organizational-units-for-parent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token organizational-units)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organizational-units-for-parent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-units))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organizational-units-for-parent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parents-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-parents-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-parents-request-next-token :initform
                         common-lisp:nil)
                        (child-id :initarg :child-id :type
                         (common-lisp:or child-id common-lisp:null) :accessor
                         %list-parents-request-child-id :initform
                         (common-lisp:error ":child-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-parents-request 'make-list-parents-request))
 (common-lisp:defun make-list-parents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token child-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-parents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-id))
      (common-lisp:list
       (common-lisp:cons "ChildId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parents-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-parents-response-next-token :initform
                         common-lisp:nil)
                        (parents :initarg :parents :type
                         (common-lisp:or parents common-lisp:null) :accessor
                         %list-parents-response-parents :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-parents-response 'make-list-parents-response))
 (common-lisp:defun make-list-parents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token parents)
   (common-lisp:apply #'common-lisp:make-instance 'list-parents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-parents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-parents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "Parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-parents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-for-target-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-policies-for-target-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-policies-for-target-request-next-token :initform
                         common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %list-policies-for-target-request-filter
                         :initform (common-lisp:error ":filter is required"))
                        (target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %list-policies-for-target-request-target-id
                         :initform
                         (common-lisp:error ":target-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-policies-for-target-request
                    'make-list-policies-for-target-request))
 (common-lisp:defun make-list-policies-for-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter target-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policies-for-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-for-target-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-policies-for-target-response-next-token
                         :initform common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or policies common-lisp:null) :accessor
                         %list-policies-for-target-response-policies :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-policies-for-target-response
                    'make-list-policies-for-target-response))
 (common-lisp:defun make-list-policies-for-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policies-for-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-for-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-policies-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-policies-request-next-token :initform
                         common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %list-policies-request-filter :initform
                         (common-lisp:error ":filter is required"))))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defun make-list-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policies-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-policies-response-next-token :initform
                         common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or policies common-lisp:null) :accessor
                         %list-policies-response-policies :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defun make-list-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token policies)
   (common-lisp:apply #'common-lisp:make-instance 'list-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-roots-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-roots-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-roots-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-roots-request 'make-list-roots-request))
 (common-lisp:defun make-list-roots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-roots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-roots-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-roots-response-next-token :initform
                         common-lisp:nil)
                        (roots :initarg :roots :type
                         (common-lisp:or roots common-lisp:null) :accessor
                         %list-roots-response-roots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-roots-response 'make-list-roots-response))
 (common-lisp:defun make-list-roots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token roots)
   (common-lisp:apply #'common-lisp:make-instance 'list-roots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roots))
      (common-lisp:list
       (common-lisp:cons "Roots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or taggable-resource-id common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-response-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-policy-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-targets-for-policy-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-for-policy-request-next-token :initform
                         common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %list-targets-for-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-request
                    'make-list-targets-for-policy-request))
 (common-lisp:defun make-list-targets-for-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-targets-for-policy-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-targets-for-policy-response-next-token :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or policy-targets common-lisp:null)
                         :accessor %list-targets-for-policy-response-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-targets-for-policy-response
                    'make-list-targets-for-policy-response))
 (common-lisp:defun make-list-targets-for-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-targets-for-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-targets-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition master-cannot-leave-organization-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       master-cannot-leave-organization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'master-cannot-leave-organization-exception
                    'master-cannot-leave-organization-exception-message)))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass move-account-request common-lisp:nil
                       ((destination-parent-id :initarg :destination-parent-id
                         :type (common-lisp:or parent-id common-lisp:null)
                         :accessor %move-account-request-destination-parent-id
                         :initform
                         (common-lisp:error
                          ":destination-parent-id is required"))
                        (source-parent-id :initarg :source-parent-id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %move-account-request-source-parent-id :initform
                         (common-lisp:error ":source-parent-id is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %move-account-request-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'move-account-request 'make-move-account-request))
 (common-lisp:defun make-move-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-parent-id source-parent-id
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance 'move-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input move-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input move-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-parent-id))
      (common-lisp:list
       (common-lisp:cons "SourceParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-parent-id))
      (common-lisp:list
       (common-lisp:cons "DestinationParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input move-account-request))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass organization common-lisp:nil
                       ((available-policy-types :initarg
                         :available-policy-types :type
                         (common-lisp:or policy-types common-lisp:null)
                         :accessor %organization-available-policy-types
                         :initform common-lisp:nil)
                        (master-account-email :initarg :master-account-email
                         :type (common-lisp:or email common-lisp:null)
                         :accessor %organization-master-account-email :initform
                         common-lisp:nil)
                        (master-account-id :initarg :master-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %organization-master-account-id :initform
                         common-lisp:nil)
                        (master-account-arn :initarg :master-account-arn :type
                         (common-lisp:or account-arn common-lisp:null)
                         :accessor %organization-master-account-arn :initform
                         common-lisp:nil)
                        (feature-set :initarg :feature-set :type
                         (common-lisp:or organization-feature-set
                                         common-lisp:null)
                         :accessor %organization-feature-set :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or organization-arn common-lisp:null)
                         :accessor %organization-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor %organization-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'organization 'make-organization))
 (common-lisp:defun make-organization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key available-policy-types
                     master-account-email master-account-id master-account-arn
                     feature-set arn id)
   (common-lisp:apply #'common-lisp:make-instance 'organization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-set))
      (common-lisp:list
       (common-lisp:cons "FeatureSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-arn))
      (common-lisp:list
       (common-lisp:cons "MasterAccountArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-account-id))
      (common-lisp:list
       (common-lisp:cons "MasterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-account-email))
      (common-lisp:list
       (common-lisp:cons "MasterAccountEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-policy-types))
      (common-lisp:list
       (common-lisp:cons "AvailablePolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization))
   common-lisp:nil))
(common-lisp:deftype organization-arn () 'common-lisp:string)
(common-lisp:deftype organization-feature-set () 'common-lisp:string)
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organization-not-empty-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organization-not-empty-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organization-not-empty-exception
                    'organization-not-empty-exception-message)))
(common-lisp:progn
 (common-lisp:defclass organizational-unit common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or organizational-unit-name
                                         common-lisp:null)
                         :accessor %organizational-unit-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or organizational-unit-arn
                                         common-lisp:null)
                         :accessor %organizational-unit-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor %organizational-unit-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'organizational-unit 'make-organizational-unit))
 (common-lisp:defun make-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'organizational-unit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organizational-unit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organizational-unit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organizational-unit))
   common-lisp:nil))
(common-lisp:deftype organizational-unit-arn () 'common-lisp:string)
(common-lisp:deftype organizational-unit-id () 'common-lisp:string)
(common-lisp:deftype organizational-unit-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organizational-unit-not-empty-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organizational-unit-not-empty-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organizational-unit-not-empty-exception
                    'organizational-unit-not-empty-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition organizational-unit-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       organizational-unit-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'organizational-unit-not-found-exception
                    'organizational-unit-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype organizational-units ()
   '(trivial-types:proper-list organizational-unit))
 (common-lisp:defun |make-organizational-units|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parent common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or parent-type common-lisp:null)
                         :accessor %parent-type :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or parent-id common-lisp:null) :accessor
                         %parent-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parent 'make-parent))
 (common-lisp:defun make-parent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type id)
   (common-lisp:apply #'common-lisp:make-instance 'parent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parent))
   common-lisp:nil))
(common-lisp:deftype parent-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition parent-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       parent-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'parent-not-found-exception
                    'parent-not-found-exception-message)))
(common-lisp:deftype parent-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parents () '(trivial-types:proper-list parent))
 (common-lisp:defun |make-parents|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype policies () '(trivial-types:proper-list policy-summary))
 (common-lisp:defun |make-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or policy-content common-lisp:null)
                         :accessor %policy-content :initform common-lisp:nil)
                        (policy-summary :initarg :policy-summary :type
                         (common-lisp:or policy-summary common-lisp:null)
                         :accessor %policy-policy-summary :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defun make-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content policy-summary)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-summary))
      (common-lisp:list
       (common-lisp:cons "PolicySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-changes-in-progress-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-changes-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-changes-in-progress-exception
                    'policy-changes-in-progress-exception-message)))
(common-lisp:deftype policy-content () 'common-lisp:string)
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-in-use-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-in-use-exception 'policy-in-use-exception-message)))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-not-attached-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-not-attached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-not-attached-exception
                    'policy-not-attached-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition policy-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-not-found-exception
                    'policy-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass policy-summary common-lisp:nil
                       ((aws-managed :initarg :aws-managed :type
                         (common-lisp:or aws-managed-policy common-lisp:null)
                         :accessor %policy-summary-aws-managed :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %policy-summary-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %policy-summary-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %policy-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         %policy-summary-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %policy-summary-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-summary 'make-policy-summary))
 (common-lisp:defun make-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-managed type description name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-managed))
      (common-lisp:list
       (common-lisp:cons "AwsManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-summary))
   common-lisp:nil))
(common-lisp:deftype policy-target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-target-summary common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %policy-target-summary-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or target-name common-lisp:null)
                         :accessor %policy-target-summary-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or generic-arn common-lisp:null)
                         :accessor %policy-target-summary-arn :initform
                         common-lisp:nil)
                        (target-id :initarg :target-id :type
                         (common-lisp:or policy-target-id common-lisp:null)
                         :accessor %policy-target-summary-target-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-target-summary 'make-policy-target-summary))
 (common-lisp:defun make-policy-target-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name arn target-id)
   (common-lisp:apply #'common-lisp:make-instance 'policy-target-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-target-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-target-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-target-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-targets ()
   '(trivial-types:proper-list policy-target-summary))
 (common-lisp:defun |make-policy-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-target-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-type-already-enabled-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-type-already-enabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-type-already-enabled-exception
                    'policy-type-already-enabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition policy-type-not-available-for-organization-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-type-not-available-for-organization-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-type-not-available-for-organization-exception
                    'policy-type-not-available-for-organization-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition policy-type-not-enabled-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-type-not-enabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-type-not-enabled-exception
                    'policy-type-not-enabled-exception-message)))
(common-lisp:deftype policy-type-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-type-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or policy-type-status common-lisp:null)
                         :accessor %policy-type-summary-status :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %policy-type-summary-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'policy-type-summary 'make-policy-type-summary))
 (common-lisp:defun make-policy-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status type)
   (common-lisp:apply #'common-lisp:make-instance 'policy-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-types ()
   '(trivial-types:proper-list policy-type-summary))
 (common-lisp:defun |make-policy-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %put-resource-policy-request-tags :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or resource-policy-content
                                         common-lisp:null)
                         :accessor %put-resource-policy-request-content
                         :initform
                         (common-lisp:error ":content is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defun make-put-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags content)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       ((resource-policy :initarg :resource-policy :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %put-resource-policy-response-resource-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defun make-put-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-delegated-administrator-request common-lisp:nil
                       ((service-principal :initarg :service-principal :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         %register-delegated-administrator-request-service-principal
                         :initform
                         (common-lisp:error ":service-principal is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %register-delegated-administrator-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-delegated-administrator-request
                    'make-register-delegated-administrator-request))
 (common-lisp:defun make-register-delegated-administrator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-principal account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-delegated-administrator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-delegated-administrator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-delegated-administrator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-principal))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-delegated-administrator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-account-from-organization-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %remove-account-from-organization-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-account-from-organization-request
                    'make-remove-account-from-organization-request))
 (common-lisp:defun make-remove-account-from-organization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-account-from-organization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-account-from-organization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-account-from-organization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-account-from-organization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or resource-policy-content
                                         common-lisp:null)
                         :accessor %resource-policy-content :initform
                         common-lisp:nil)
                        (resource-policy-summary :initarg
                         :resource-policy-summary :type
                         (common-lisp:or resource-policy-summary
                                         common-lisp:null)
                         :accessor %resource-policy-resource-policy-summary
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defun make-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content resource-policy-summary)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-policy-summary))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:deftype resource-policy-arn () 'common-lisp:string)
(common-lisp:deftype resource-policy-content () 'common-lisp:string)
(common-lisp:deftype resource-policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-policy-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-policy-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-policy-not-found-exception
                    'resource-policy-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-policy-summary common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or resource-policy-arn common-lisp:null)
                         :accessor %resource-policy-summary-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or resource-policy-id common-lisp:null)
                         :accessor %resource-policy-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-policy-summary 'make-resource-policy-summary))
 (common-lisp:defun make-resource-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-policy-summary))
   common-lisp:nil))
(common-lisp:deftype role-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass root common-lisp:nil
                       ((policy-types :initarg :policy-types :type
                         (common-lisp:or policy-types common-lisp:null)
                         :accessor %root-policy-types :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or root-name common-lisp:null) :accessor
                         %root-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or root-arn common-lisp:null) :accessor
                         %root-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or root-id common-lisp:null) :accessor
                         %root-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'root 'make-root))
 (common-lisp:defun make-root
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-types name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'root
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-types))
      (common-lisp:list
       (common-lisp:cons "PolicyTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root))
   common-lisp:nil))
(common-lisp:deftype root-arn () 'common-lisp:string)
(common-lisp:deftype root-id () 'common-lisp:string)
(common-lisp:deftype root-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition root-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       root-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'root-not-found-exception
                    'root-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype roots () '(trivial-types:proper-list root))
 (common-lisp:defun |make-roots|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list root))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-message)))
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition source-parent-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       source-parent-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'source-parent-not-found-exception
                    'source-parent-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or taggable-resource-id common-lisp:null)
                         :accessor %tag-resource-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype taggable-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition target-not-found-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       target-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'target-not-found-exception
                    'target-not-found-exception-message)))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (organizations-error)
     ((type :initarg :type :initform common-lisp:nil :reader
       too-many-requests-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-type
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-apiendpoint-exception
     (organizations-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-apiendpoint-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-apiendpoint-exception
                    'unsupported-apiendpoint-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or taggable-resource-id common-lisp:null)
                         :accessor %untag-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organizational-unit-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or organizational-unit-name
                                         common-lisp:null)
                         :accessor %update-organizational-unit-request-name
                         :initform common-lisp:nil)
                        (organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor
                         %update-organizational-unit-request-organizational-unit-id
                         :initform
                         (common-lisp:error
                          ":organizational-unit-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-organizational-unit-request
                    'make-update-organizational-unit-request))
 (common-lisp:defun make-update-organizational-unit-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name organizational-unit-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organizational-unit-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organizational-unit-response common-lisp:nil
                       ((organizational-unit :initarg :organizational-unit
                         :type
                         (common-lisp:or organizational-unit common-lisp:null)
                         :accessor
                         %update-organizational-unit-response-organizational-unit
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-organizational-unit-response
                    'make-update-organizational-unit-response))
 (common-lisp:defun make-update-organizational-unit-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organizational-unit-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organizational-unit))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organizational-unit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-policy-request common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or policy-content common-lisp:null)
                         :accessor %update-policy-request-content :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %update-policy-request-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or policy-name common-lisp:null)
                         :accessor %update-policy-request-name :initform
                         common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %update-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-policy-request 'make-update-policy-request))
 (common-lisp:defun make-update-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content description name policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %update-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-policy-response 'make-update-policy-response))
 (common-lisp:defun make-update-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'update-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-handshake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key handshake-id)
   (common-lisp:declare (common-lisp:ignorable handshake-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-handshake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptHandshake"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-handshake))
(common-lisp:progn
 (common-lisp:defun attach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id target-id)
   (common-lisp:declare (common-lisp:ignorable policy-id target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AttachPolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-policy))
(common-lisp:progn
 (common-lisp:defun cancel-handshake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key handshake-id)
   (common-lisp:declare (common-lisp:ignorable handshake-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-handshake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelHandshake"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-handshake))
(common-lisp:progn
 (common-lisp:defun close-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-close-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CloseAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'close-account))
(common-lisp:progn
 (common-lisp:defun create-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email account-name role-name
                     iam-user-access-to-billing tags)
   (common-lisp:declare
    (common-lisp:ignorable email account-name role-name
     iam-user-access-to-billing tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account))
(common-lisp:progn
 (common-lisp:defun create-gov-cloud-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email account-name role-name
                     iam-user-access-to-billing tags)
   (common-lisp:declare
    (common-lisp:ignorable email account-name role-name
     iam-user-access-to-billing tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gov-cloud-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateGovCloudAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-gov-cloud-account))
(common-lisp:progn
 (common-lisp:defun create-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-set)
   (common-lisp:declare (common-lisp:ignorable feature-set))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-organization-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateOrganization"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-organization))
(common-lisp:progn
 (common-lisp:defun create-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parent-id name tags)
   (common-lisp:declare (common-lisp:ignorable parent-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-organizational-unit-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateOrganizationalUnit"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-organizational-unit))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content description name type tags)
   (common-lisp:declare
    (common-lisp:ignorable content description name type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun decline-handshake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key handshake-id)
   (common-lisp:declare (common-lisp:ignorable handshake-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-handshake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeclineHandshake"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decline-handshake))
(common-lisp:progn
 (common-lisp:defun delete-organization ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation "DeleteOrganization"
                                :params
                                `(("Action" ,@"DeleteOrganization")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-organization))
(common-lisp:progn
 (common-lisp:defun delete-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organizational-unit-id)
   (common-lisp:declare (common-lisp:ignorable organizational-unit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-organizational-unit-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteOrganizationalUnit"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-organizational-unit))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DeleteResourcePolicy" :params
                                `(("Action" ,@"DeleteResourcePolicy")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun deregister-delegated-administrator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id service-principal)
   (common-lisp:declare (common-lisp:ignorable account-id service-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-delegated-administrator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterDelegatedAdministrator"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-delegated-administrator))
(common-lisp:progn
 (common-lisp:defun describe-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account))
(common-lisp:progn
 (common-lisp:defun describe-create-account-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-account-request-id)
   (common-lisp:declare (common-lisp:ignorable create-account-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-create-account-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCreateAccountStatus"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-create-account-status))
(common-lisp:progn
 (common-lisp:defun describe-effective-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-type target-id)
   (common-lisp:declare (common-lisp:ignorable policy-type target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-effective-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEffectivePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-effective-policy))
(common-lisp:progn
 (common-lisp:defun describe-handshake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key handshake-id)
   (common-lisp:declare (common-lisp:ignorable handshake-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-handshake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeHandshake"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-handshake))
(common-lisp:progn
 (common-lisp:defun describe-organization ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DescribeOrganization" :params
                                `(("Action" ,@"DescribeOrganization")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization))
(common-lisp:progn
 (common-lisp:defun describe-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organizational-unit-id)
   (common-lisp:declare (common-lisp:ignorable organizational-unit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organizational-unit-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeOrganizationalUnit"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-organizational-unit))
(common-lisp:progn
 (common-lisp:defun describe-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-policy))
(common-lisp:progn
 (common-lisp:defun describe-resource-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DescribeResourcePolicy" :params
                                `(("Action" ,@"DescribeResourcePolicy")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-resource-policy))
(common-lisp:progn
 (common-lisp:defun detach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id target-id)
   (common-lisp:declare (common-lisp:ignorable policy-id target-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DetachPolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-policy))
(common-lisp:progn
 (common-lisp:defun disable-awsservice-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-principal)
   (common-lisp:declare (common-lisp:ignorable service-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-awsservice-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableAWSServiceAccess"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-awsservice-access))
(common-lisp:progn
 (common-lisp:defun disable-policy-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key root-id policy-type)
   (common-lisp:declare (common-lisp:ignorable root-id policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-policy-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisablePolicyType"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-policy-type))
(common-lisp:progn
 (common-lisp:defun enable-awsservice-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-principal)
   (common-lisp:declare (common-lisp:ignorable service-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-awsservice-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableAWSServiceAccess"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-awsservice-access))
(common-lisp:progn
 (common-lisp:defun enable-all-features ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation "EnableAllFeatures"
                                :params
                                `(("Action" ,@"EnableAllFeatures")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'enable-all-features))
(common-lisp:progn
 (common-lisp:defun enable-policy-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key root-id policy-type)
   (common-lisp:declare (common-lisp:ignorable root-id policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-policy-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnablePolicyType"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-policy-type))
(common-lisp:progn
 (common-lisp:defun invite-account-to-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target notes tags)
   (common-lisp:declare (common-lisp:ignorable target notes tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-invite-account-to-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "InviteAccountToOrganization"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'invite-account-to-organization))
(common-lisp:progn
 (common-lisp:defun leave-organization ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'organizations-request :method "POST" :path "/"
                                :protocol :json :operation "LeaveOrganization"
                                :params
                                `(("Action" ,@"LeaveOrganization")
                                  ("Version" ,@"2016-11-28"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'leave-organization))
(common-lisp:progn
 (common-lisp:defun list-awsservice-access-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-awsservice-access-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAWSServiceAccessForOrganization"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-awsservice-access-for-organization))
(common-lisp:progn
 (common-lisp:defun list-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAccounts"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accounts))
(common-lisp:progn
 (common-lisp:defun list-accounts-for-parent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parent-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable parent-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accounts-for-parent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAccountsForParent"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accounts-for-parent))
(common-lisp:progn
 (common-lisp:defun list-children
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parent-id child-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable parent-id child-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-children-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListChildren"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-children))
(common-lisp:progn
 (common-lisp:defun list-create-account-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key states next-token max-results)
   (common-lisp:declare (common-lisp:ignorable states next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-create-account-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCreateAccountStatus"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-create-account-status))
(common-lisp:progn
 (common-lisp:defun list-delegated-administrators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-principal next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-principal next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-delegated-administrators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDelegatedAdministrators"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-delegated-administrators))
(common-lisp:progn
 (common-lisp:defun list-delegated-services-for-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable account-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-delegated-services-for-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDelegatedServicesForAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-delegated-services-for-account))
(common-lisp:progn
 (common-lisp:defun list-handshakes-for-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-handshakes-for-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListHandshakesForAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-handshakes-for-account))
(common-lisp:progn
 (common-lisp:defun list-handshakes-for-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-handshakes-for-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListHandshakesForOrganization"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-handshakes-for-organization))
(common-lisp:progn
 (common-lisp:defun list-organizational-units-for-parent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key parent-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable parent-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organizational-units-for-parent-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOrganizationalUnitsForParent"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organizational-units-for-parent))
(common-lisp:progn
 (common-lisp:defun list-parents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key child-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable child-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListParents"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-parents))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPolicies"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policies-for-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-id filter next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable target-id filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-for-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPoliciesForTarget"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policies-for-target))
(common-lisp:progn
 (common-lisp:defun list-roots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-roots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRoots"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-roots))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id next-token)
   (common-lisp:declare (common-lisp:ignorable resource-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-targets-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable policy-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-targets-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTargetsForPolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-targets-for-policy))
(common-lisp:progn
 (common-lisp:defun move-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-parent-id
                     destination-parent-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id source-parent-id destination-parent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-move-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "MoveAccount"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'move-account))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content tags)
   (common-lisp:declare (common-lisp:ignorable content tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutResourcePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun register-delegated-administrator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id service-principal)
   (common-lisp:declare (common-lisp:ignorable account-id service-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-delegated-administrator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterDelegatedAdministrator"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-delegated-administrator))
(common-lisp:progn
 (common-lisp:defun remove-account-from-organization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-account-from-organization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveAccountFromOrganization"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-account-from-organization))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organizational-unit-id name)
   (common-lisp:declare (common-lisp:ignorable organizational-unit-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organizational-unit-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateOrganizationalUnit"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organizational-unit))
(common-lisp:progn
 (common-lisp:defun update-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id name description content)
   (common-lisp:declare
    (common-lisp:ignorable policy-id name description content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'organizations-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdatePolicy"
                                                        "2016-11-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-policy))
