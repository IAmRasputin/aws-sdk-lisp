;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/s3/api
  (:use)
  (:nicknames #:aws/s3)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/s3/api)
(common-lisp:progn
 (common-lisp:defclass s3-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "s3" :protocol :rest-xml))
 (common-lisp:export 's3-request))
(common-lisp:progn
 (common-lisp:define-condition s3-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 's3-error))
(common-lisp:defvar *error-map*
  '(("BucketAlreadyExists" . bucket-already-exists)
    ("BucketAlreadyOwnedByYou" . bucket-already-owned-by-you)
    ("InvalidObjectState" . invalid-object-state)
    ("NoSuchBucket" . no-such-bucket) ("NoSuchKey" . no-such-key)
    ("NoSuchUpload" . no-such-upload)
    ("ObjectAlreadyInActiveTierError" . object-already-in-active-tier-error)
    ("ObjectNotInActiveTierError" . object-not-in-active-tier-error)))
(common-lisp:deftype abort-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass abort-incomplete-multipart-upload common-lisp:nil
                       ((days-after-initiation :initarg :days-after-initiation
                         :type
                         (common-lisp:or days-after-initiation
                                         common-lisp:null)
                         :accessor
                         %abort-incomplete-multipart-upload-days-after-initiation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-incomplete-multipart-upload
                    'make-abort-incomplete-multipart-upload))
 (common-lisp:defun make-abort-incomplete-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key days-after-initiation)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-incomplete-multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-multipart-upload-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %abort-multipart-upload-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-output
                    'make-abort-multipart-upload-output))
 (common-lisp:defun make-abort-multipart-upload-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-multipart-upload-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %abort-multipart-upload-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         %abort-multipart-upload-request-request-payer
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %abort-multipart-upload-request-upload-id
                         :initform
                         (common-lisp:error ":upload-id is required"))
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %abort-multipart-upload-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %abort-multipart-upload-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-request
                    'make-abort-multipart-upload-request))
 (common-lisp:defun make-abort-multipart-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     upload-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   common-lisp:nil))
(common-lisp:deftype abort-rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accelerate-configuration common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or bucket-accelerate-status
                                         common-lisp:null)
                         :accessor %accelerate-configuration-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accelerate-configuration 'make-accelerate-configuration))
 (common-lisp:defun make-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'accelerate-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   common-lisp:nil))
(common-lisp:deftype accept-ranges () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-control-policy common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %access-control-policy-owner :initform
                         common-lisp:nil)
                        (grants :initarg :grants :type
                         (common-lisp:or grants common-lisp:null) :accessor
                         %access-control-policy-grants :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'access-control-policy 'make-access-control-policy))
 (common-lisp:defun make-access-control-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner grants)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control-translation common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner-override common-lisp:null)
                         :accessor %access-control-translation-owner :initform
                         (common-lisp:error ":owner is required"))))
 (common-lisp:export
  (common-lisp:list 'access-control-translation
                    'make-access-control-translation))
 (common-lisp:defun make-access-control-translation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-translation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   common-lisp:nil))
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype allow-quoted-record-delimiter () 'common-lisp:boolean)
(common-lisp:deftype allowed-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-headers ()
   '(trivial-types:proper-list allowed-header))
 (common-lisp:defun |make-allowed-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-methods ()
   '(trivial-types:proper-list allowed-method))
 (common-lisp:defun |make-allowed-methods|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-origins ()
   '(trivial-types:proper-list allowed-origin))
 (common-lisp:defun |make-allowed-origins|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-origin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-and-operator common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %analytics-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %analytics-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analytics-and-operator 'make-analytics-and-operator))
 (common-lisp:defun make-analytics-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags prefix)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-configuration common-lisp:nil
                       ((storage-class-analysis :initarg
                         :storage-class-analysis :type
                         (common-lisp:or storage-class-analysis
                                         common-lisp:null)
                         :accessor
                         %analytics-configuration-storage-class-analysis
                         :initform
                         (common-lisp:error
                          ":storage-class-analysis is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or analytics-filter common-lisp:null)
                         :accessor %analytics-configuration-filter :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor %analytics-configuration-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'analytics-configuration 'make-analytics-configuration))
 (common-lisp:defun make-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class-analysis filter id)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-class-analysis))
      (common-lisp:list
       (common-lisp:cons "StorageClassAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-configuration-list ()
   '(trivial-types:proper-list analytics-configuration))
 (common-lisp:defun |make-analytics-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-export-destination common-lisp:nil
                       ((s3bucket-destination :initarg :s3bucket-destination
                         :type
                         (common-lisp:or analytics-s3bucket-destination
                                         common-lisp:null)
                         :accessor
                         %analytics-export-destination-s3bucket-destination
                         :initform
                         (common-lisp:error
                          ":s3bucket-destination is required"))))
 (common-lisp:export
  (common-lisp:list 'analytics-export-destination
                    'make-analytics-export-destination))
 (common-lisp:defun make-analytics-export-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-destination)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-export-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or analytics-and-operator
                                         common-lisp:null)
                         :accessor %analytics-filter-and :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         %analytics-filter-tag :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %analytics-filter-prefix :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analytics-filter 'make-analytics-filter))
 (common-lisp:defun make-analytics-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analytics-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-s3bucket-destination common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %analytics-s3bucket-destination-prefix :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %analytics-s3bucket-destination-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (bucket-account-id :initarg :bucket-account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %analytics-s3bucket-destination-bucket-account-id
                         :initform common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or analytics-s3export-file-format
                                         common-lisp:null)
                         :accessor %analytics-s3bucket-destination-format
                         :initform (common-lisp:error ":format is required"))))
 (common-lisp:export
  (common-lisp:list 'analytics-s3bucket-destination
                    'make-analytics-s3bucket-destination))
 (common-lisp:defun make-analytics-s3bucket-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix bucket bucket-account-id format)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-s3bucket-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   common-lisp:nil))
(common-lisp:deftype analytics-s3export-file-format () 'common-lisp:string)
(common-lisp:deftype archive-status () 'common-lisp:string)
(common-lisp:deftype body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass bucket common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %bucket-creation-date :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %bucket-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defun make-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date name)
   (common-lisp:apply #'common-lisp:make-instance 'bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:deftype bucket-accelerate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bucket-already-exists
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-exists)))
(common-lisp:progn
 (common-lisp:define-condition bucket-already-owned-by-you
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-owned-by-you)))
(common-lisp:deftype bucket-canned-acl () 'common-lisp:string)
(common-lisp:deftype bucket-key-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bucket-lifecycle-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor %bucket-lifecycle-configuration-rules
                         :initform (common-lisp:error ":rules is required"))))
 (common-lisp:export
  (common-lisp:list 'bucket-lifecycle-configuration
                    'make-bucket-lifecycle-configuration))
 (common-lisp:defun make-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   common-lisp:nil))
(common-lisp:deftype bucket-location-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-logging-status common-lisp:nil
                       ((logging-enabled :initarg :logging-enabled :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor %bucket-logging-status-logging-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bucket-logging-status 'make-bucket-logging-status))
 (common-lisp:defun make-bucket-logging-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-logging-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   common-lisp:nil))
(common-lisp:deftype bucket-logs-permission () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-versioning-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets () '(trivial-types:proper-list bucket))
 (common-lisp:defun |make-buckets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bypass-governance-retention () 'common-lisp:boolean)
(common-lisp:deftype bytes-processed () 'common-lisp:integer)
(common-lisp:deftype bytes-returned () 'common-lisp:integer)
(common-lisp:deftype bytes-scanned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass corsconfiguration common-lisp:nil
                       ((corsrules :initarg :corsrules :type
                         (common-lisp:or corsrules common-lisp:null) :accessor
                         %corsconfiguration-corsrules :initform
                         (common-lisp:error ":corsrules is required"))))
 (common-lisp:export
  (common-lisp:list 'corsconfiguration 'make-corsconfiguration))
 (common-lisp:defun make-corsconfiguration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key corsrules)
   (common-lisp:apply #'common-lisp:make-instance 'corsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass corsrule common-lisp:nil
                       ((max-age-seconds :initarg :max-age-seconds :type
                         (common-lisp:or max-age-seconds common-lisp:null)
                         :accessor %corsrule-max-age-seconds :initform
                         common-lisp:nil)
                        (expose-headers :initarg :expose-headers :type
                         (common-lisp:or expose-headers common-lisp:null)
                         :accessor %corsrule-expose-headers :initform
                         common-lisp:nil)
                        (allowed-origins :initarg :allowed-origins :type
                         (common-lisp:or allowed-origins common-lisp:null)
                         :accessor %corsrule-allowed-origins :initform
                         (common-lisp:error ":allowed-origins is required"))
                        (allowed-methods :initarg :allowed-methods :type
                         (common-lisp:or allowed-methods common-lisp:null)
                         :accessor %corsrule-allowed-methods :initform
                         (common-lisp:error ":allowed-methods is required"))
                        (allowed-headers :initarg :allowed-headers :type
                         (common-lisp:or allowed-headers common-lisp:null)
                         :accessor %corsrule-allowed-headers :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %corsrule-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'corsrule 'make-corsrule))
 (common-lisp:defun make-corsrule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-age-seconds expose-headers
                     allowed-origins allowed-methods allowed-headers id)
   (common-lisp:apply #'common-lisp:make-instance 'corsrule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-headers))
      (common-lisp:list
       (common-lisp:cons "AllowedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-methods))
      (common-lisp:list
       (common-lisp:cons "AllowedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-origins))
      (common-lisp:list
       (common-lisp:cons "AllowedOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxAgeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsrule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype corsrules () '(trivial-types:proper-list corsrule))
 (common-lisp:defun |make-corsrules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list corsrule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass csvinput common-lisp:nil
                       ((allow-quoted-record-delimiter :initarg
                         :allow-quoted-record-delimiter :type
                         (common-lisp:or allow-quoted-record-delimiter
                                         common-lisp:null)
                         :accessor %csvinput-allow-quoted-record-delimiter
                         :initform common-lisp:nil)
                        (quote-character :initarg :quote-character :type
                         (common-lisp:or quote-character common-lisp:null)
                         :accessor %csvinput-quote-character :initform
                         common-lisp:nil)
                        (field-delimiter :initarg :field-delimiter :type
                         (common-lisp:or field-delimiter common-lisp:null)
                         :accessor %csvinput-field-delimiter :initform
                         common-lisp:nil)
                        (record-delimiter :initarg :record-delimiter :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor %csvinput-record-delimiter :initform
                         common-lisp:nil)
                        (quote-escape-character :initarg
                         :quote-escape-character :type
                         (common-lisp:or quote-escape-character
                                         common-lisp:null)
                         :accessor %csvinput-quote-escape-character :initform
                         common-lisp:nil)
                        (comments :initarg :comments :type
                         (common-lisp:or comments common-lisp:null) :accessor
                         %csvinput-comments :initform common-lisp:nil)
                        (file-header-info :initarg :file-header-info :type
                         (common-lisp:or file-header-info common-lisp:null)
                         :accessor %csvinput-file-header-info :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'csvinput 'make-csvinput))
 (common-lisp:defun make-csvinput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-quoted-record-delimiter
                     quote-character field-delimiter record-delimiter
                     quote-escape-character comments file-header-info)
   (common-lisp:apply #'common-lisp:make-instance 'csvinput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-header-info))
      (common-lisp:list
       (common-lisp:cons "FileHeaderInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-quoted-record-delimiter))
      (common-lisp:list
       (common-lisp:cons "AllowQuotedRecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass csvoutput common-lisp:nil
                       ((quote-character :initarg :quote-character :type
                         (common-lisp:or quote-character common-lisp:null)
                         :accessor %csvoutput-quote-character :initform
                         common-lisp:nil)
                        (field-delimiter :initarg :field-delimiter :type
                         (common-lisp:or field-delimiter common-lisp:null)
                         :accessor %csvoutput-field-delimiter :initform
                         common-lisp:nil)
                        (record-delimiter :initarg :record-delimiter :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor %csvoutput-record-delimiter :initform
                         common-lisp:nil)
                        (quote-escape-character :initarg
                         :quote-escape-character :type
                         (common-lisp:or quote-escape-character
                                         common-lisp:null)
                         :accessor %csvoutput-quote-escape-character :initform
                         common-lisp:nil)
                        (quote-fields :initarg :quote-fields :type
                         (common-lisp:or quote-fields common-lisp:null)
                         :accessor %csvoutput-quote-fields :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'csvoutput 'make-csvoutput))
 (common-lisp:defun make-csvoutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quote-character field-delimiter
                     record-delimiter quote-escape-character quote-fields)
   (common-lisp:apply #'common-lisp:make-instance 'csvoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-fields))
      (common-lisp:list
       (common-lisp:cons "QuoteFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvoutput))
   common-lisp:nil))
(common-lisp:deftype cache-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass checksum common-lisp:nil
                       ((checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %checksum-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %checksum-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %checksum-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %checksum-checksum-crc32 :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'checksum 'make-checksum))
 (common-lisp:defun make-checksum
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32)
   (common-lisp:apply #'common-lisp:make-instance 'checksum
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input checksum))
   common-lisp:nil))
(common-lisp:deftype checksum-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype checksum-algorithm-list ()
   '(trivial-types:proper-list checksum-algorithm))
 (common-lisp:defun |make-checksum-algorithm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list checksum-algorithm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype checksum-crc32 () 'common-lisp:string)
(common-lisp:deftype checksum-crc32c () 'common-lisp:string)
(common-lisp:deftype checksum-mode () 'common-lisp:string)
(common-lisp:deftype checksum-sha1 () 'common-lisp:string)
(common-lisp:deftype checksum-sha256 () 'common-lisp:string)
(common-lisp:deftype cloud-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-function-configuration common-lisp:nil
                       ((invocation-role :initarg :invocation-role :type
                         (common-lisp:or cloud-function-invocation-role
                                         common-lisp:null)
                         :accessor
                         %cloud-function-configuration-invocation-role
                         :initform common-lisp:nil)
                        (cloud-function :initarg :cloud-function :type
                         (common-lisp:or cloud-function common-lisp:null)
                         :accessor %cloud-function-configuration-cloud-function
                         :initform common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %cloud-function-configuration-events :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %cloud-function-configuration-event :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %cloud-function-configuration-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-function-configuration
                    'make-cloud-function-configuration))
 (common-lisp:defun make-cloud-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-role cloud-function events
                     event id)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-function))
      (common-lisp:list
       (common-lisp:cons "CloudFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-role))
      (common-lisp:list
       (common-lisp:cons "InvocationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   common-lisp:nil))
(common-lisp:deftype cloud-function-invocation-role () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:deftype comments () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass common-prefix common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %common-prefix-prefix :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'common-prefix 'make-common-prefix))
 (common-lisp:defun make-common-prefix
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix)
   (common-lisp:apply #'common-lisp:make-instance 'common-prefix
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input common-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype common-prefix-list ()
   '(trivial-types:proper-list common-prefix))
 (common-lisp:defun |make-common-prefix-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass complete-multipart-upload-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-request-charged
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-ssekmskey-id
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %complete-multipart-upload-output-version-id
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-server-side-encryption
                         :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-checksum-sha1
                         :initform common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-output-checksum-crc32
                         :initform common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %complete-multipart-upload-output-etag :initform
                         common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %complete-multipart-upload-output-expiration :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %complete-multipart-upload-output-key :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %complete-multipart-upload-output-bucket
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location common-lisp:null) :accessor
                         %complete-multipart-upload-output-location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-output
                    'make-complete-multipart-upload-output))
 (common-lisp:defun make-complete-multipart-upload-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged bucket-key-enabled
                     ssekmskey-id version-id server-side-encryption
                     checksum-sha256 checksum-sha1 checksum-crc32c
                     checksum-crc32 etag expiration key bucket location)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-multipart-upload-request common-lisp:nil
                       ((ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-request-payer
                         :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-checksum-sha1
                         :initform common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-checksum-crc32
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %complete-multipart-upload-request-upload-id
                         :initform
                         (common-lisp:error ":upload-id is required"))
                        (multipart-upload :initarg :multipart-upload :type
                         (common-lisp:or completed-multipart-upload
                                         common-lisp:null)
                         :accessor
                         %complete-multipart-upload-request-multipart-upload
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %complete-multipart-upload-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %complete-multipart-upload-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-request
                    'make-complete-multipart-upload-request))
 (common-lisp:defun make-complete-multipart-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssecustomer-key-md5 ssecustomer-key
                     ssecustomer-algorithm expected-bucket-owner request-payer
                     checksum-sha256 checksum-sha1 checksum-crc32c
                     checksum-crc32 upload-id multipart-upload key bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multipart-upload))
      (common-lisp:list
       (common-lisp:cons "MultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MultipartUpload" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass completed-multipart-upload common-lisp:nil
                       ((parts :initarg :parts :type
                         (common-lisp:or completed-part-list common-lisp:null)
                         :accessor %completed-multipart-upload-parts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'completed-multipart-upload
                    'make-completed-multipart-upload))
 (common-lisp:defun make-completed-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parts)
   (common-lisp:apply #'common-lisp:make-instance 'completed-multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass completed-part common-lisp:nil
                       ((part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %completed-part-part-number :initform
                         common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %completed-part-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %completed-part-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %completed-part-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %completed-part-checksum-crc32 :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %completed-part-etag :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'completed-part 'make-completed-part))
 (common-lisp:defun make-completed-part
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key part-number checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 etag)
   (common-lisp:apply #'common-lisp:make-instance 'completed-part
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input completed-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype completed-part-list ()
   '(trivial-types:proper-list completed-part))
 (common-lisp:defun |make-completed-part-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list completed-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((key-prefix-equals :initarg :key-prefix-equals :type
                         (common-lisp:or key-prefix-equals common-lisp:null)
                         :accessor %condition-key-prefix-equals :initform
                         common-lisp:nil)
                        (http-error-code-returned-equals :initarg
                         :http-error-code-returned-equals :type
                         (common-lisp:or http-error-code-returned-equals
                                         common-lisp:null)
                         :accessor %condition-http-error-code-returned-equals
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defun make-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-prefix-equals
                     http-error-code-returned-equals)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-error-code-returned-equals))
      (common-lisp:list
       (common-lisp:cons "HttpErrorCodeReturnedEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix-equals))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype confirm-remove-self-bucket-access () 'common-lisp:boolean)
(common-lisp:deftype content-disposition () 'common-lisp:string)
(common-lisp:deftype content-encoding () 'common-lisp:string)
(common-lisp:deftype content-language () 'common-lisp:string)
(common-lisp:deftype content-length () 'common-lisp:integer)
(common-lisp:deftype content-md5 () 'common-lisp:string)
(common-lisp:deftype content-range () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass continuation-event common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'continuation-event 'make-continuation-event))
 (common-lisp:defun make-continuation-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'continuation-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input continuation-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-object-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %copy-object-output-request-charged
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %copy-object-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor %copy-object-output-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %copy-object-output-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %copy-object-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %copy-object-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %copy-object-output-server-side-encryption
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %copy-object-output-version-id :initform
                         common-lisp:nil)
                        (copy-source-version-id :initarg
                         :copy-source-version-id :type
                         (common-lisp:or copy-source-version-id
                                         common-lisp:null)
                         :accessor %copy-object-output-copy-source-version-id
                         :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %copy-object-output-expiration :initform
                         common-lisp:nil)
                        (copy-object-result :initarg :copy-object-result :type
                         (common-lisp:or copy-object-result common-lisp:null)
                         :accessor %copy-object-output-copy-object-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-object-output 'make-copy-object-output))
 (common-lisp:defun make-copy-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged bucket-key-enabled
                     ssekmsencryption-context ssekmskey-id ssecustomer-key-md5
                     ssecustomer-algorithm server-side-encryption version-id
                     copy-source-version-id expiration copy-object-result)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-object-result))
      (common-lisp:list
       (common-lisp:cons "CopyObjectResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CopyObjectResult" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass copy-object-request common-lisp:nil
                       ((expected-source-bucket-owner :initarg
                         :expected-source-bucket-owner :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %copy-object-request-expected-source-bucket-owner
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %copy-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor %copy-object-request-object-lock-mode
                         :initform common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging-header common-lisp:null)
                         :accessor %copy-object-request-tagging :initform
                         common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %copy-object-request-request-payer :initform
                         common-lisp:nil)
                        (copy-source-ssecustomer-key-md5 :initarg
                         :copy-source-ssecustomer-key-md5 :type
                         (common-lisp:or copy-source-ssecustomer-key-md5
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (copy-source-ssecustomer-key :initarg
                         :copy-source-ssecustomer-key :type
                         (common-lisp:or copy-source-ssecustomer-key
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-ssecustomer-key
                         :initform common-lisp:nil)
                        (copy-source-ssecustomer-algorithm :initarg
                         :copy-source-ssecustomer-algorithm :type
                         (common-lisp:or copy-source-ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %copy-object-request-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %copy-object-request-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %copy-object-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %copy-object-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %copy-object-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (website-redirect-location :initarg
                         :website-redirect-location :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-website-redirect-location
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %copy-object-request-storage-class :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %copy-object-request-server-side-encryption
                         :initform common-lisp:nil)
                        (tagging-directive :initarg :tagging-directive :type
                         (common-lisp:or tagging-directive common-lisp:null)
                         :accessor %copy-object-request-tagging-directive
                         :initform common-lisp:nil)
                        (metadata-directive :initarg :metadata-directive :type
                         (common-lisp:or metadata-directive common-lisp:null)
                         :accessor %copy-object-request-metadata-directive
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %copy-object-request-metadata :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %copy-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %copy-object-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %copy-object-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %copy-object-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %copy-object-request-grant-full-control
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %copy-object-request-expires :initform
                         common-lisp:nil)
                        (copy-source-if-unmodified-since :initarg
                         :copy-source-if-unmodified-since :type
                         (common-lisp:or copy-source-if-unmodified-since
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-if-unmodified-since
                         :initform common-lisp:nil)
                        (copy-source-if-none-match :initarg
                         :copy-source-if-none-match :type
                         (common-lisp:or copy-source-if-none-match
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-if-none-match
                         :initform common-lisp:nil)
                        (copy-source-if-modified-since :initarg
                         :copy-source-if-modified-since :type
                         (common-lisp:or copy-source-if-modified-since
                                         common-lisp:null)
                         :accessor
                         %copy-object-request-copy-source-if-modified-since
                         :initform common-lisp:nil)
                        (copy-source-if-match :initarg :copy-source-if-match
                         :type
                         (common-lisp:or copy-source-if-match common-lisp:null)
                         :accessor %copy-object-request-copy-source-if-match
                         :initform common-lisp:nil)
                        (copy-source :initarg :copy-source :type
                         (common-lisp:or copy-source common-lisp:null)
                         :accessor %copy-object-request-copy-source :initform
                         (common-lisp:error ":copy-source is required"))
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %copy-object-request-content-type :initform
                         common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor %copy-object-request-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor %copy-object-request-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor %copy-object-request-content-disposition
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %copy-object-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor %copy-object-request-cache-control :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %copy-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (acl :initarg :acl :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor %copy-object-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-object-request 'make-copy-object-request))
 (common-lisp:defun make-copy-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-source-bucket-owner
                     expected-bucket-owner object-lock-legal-hold-status
                     object-lock-retain-until-date object-lock-mode tagging
                     request-payer copy-source-ssecustomer-key-md5
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-algorithm bucket-key-enabled
                     ssekmsencryption-context ssekmskey-id ssecustomer-key-md5
                     ssecustomer-key ssecustomer-algorithm
                     website-redirect-location storage-class
                     server-side-encryption tagging-directive
                     metadata-directive metadata key grant-write-acp
                     grant-read-acp grant-read grant-full-control expires
                     copy-source-if-unmodified-since copy-source-if-none-match
                     copy-source-if-modified-since copy-source-if-match
                     copy-source content-type content-language content-encoding
                     content-disposition checksum-algorithm cache-control
                     bucket acl)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-directive))
      (common-lisp:cons "x-amz-metadata-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging-directive))
      (common-lisp:cons "x-amz-tagging-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-object-result common-lisp:nil
                       ((checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %copy-object-result-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %copy-object-result-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %copy-object-result-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %copy-object-result-checksum-crc32 :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %copy-object-result-last-modified :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %copy-object-result-etag :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-object-result 'make-copy-object-result))
 (common-lisp:defun make-copy-object-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 last-modified etag)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-part-result common-lisp:nil
                       ((checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %copy-part-result-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %copy-part-result-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %copy-part-result-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %copy-part-result-checksum-crc32 :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %copy-part-result-last-modified :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %copy-part-result-etag :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-part-result 'make-copy-part-result))
 (common-lisp:defun make-copy-part-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 last-modified etag)
   (common-lisp:apply #'common-lisp:make-instance 'copy-part-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-part-result))
   common-lisp:nil))
(common-lisp:deftype copy-source () 'common-lisp:string)
(common-lisp:deftype copy-source-if-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-modified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-if-none-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-unmodified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-range () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:deftype copy-source-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-bucket-configuration common-lisp:nil
                       ((location-constraint :initarg :location-constraint
                         :type
                         (common-lisp:or bucket-location-constraint
                                         common-lisp:null)
                         :accessor
                         %create-bucket-configuration-location-constraint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-configuration
                    'make-create-bucket-configuration))
 (common-lisp:defun make-create-bucket-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-constraint)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-output common-lisp:nil
                       ((location :initarg :location :type
                         (common-lisp:or location common-lisp:null) :accessor
                         %create-bucket-output-location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-output 'make-create-bucket-output))
 (common-lisp:defun make-create-bucket-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-request common-lisp:nil
                       ((object-ownership :initarg :object-ownership :type
                         (common-lisp:or object-ownership common-lisp:null)
                         :accessor %create-bucket-request-object-ownership
                         :initform common-lisp:nil)
                        (object-lock-enabled-for-bucket :initarg
                         :object-lock-enabled-for-bucket :type
                         (common-lisp:or object-lock-enabled-for-bucket
                                         common-lisp:null)
                         :accessor
                         %create-bucket-request-object-lock-enabled-for-bucket
                         :initform common-lisp:nil)
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %create-bucket-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-write :initarg :grant-write :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor %create-bucket-request-grant-write :initform
                         common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %create-bucket-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %create-bucket-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %create-bucket-request-grant-full-control
                         :initform common-lisp:nil)
                        (create-bucket-configuration :initarg
                         :create-bucket-configuration :type
                         (common-lisp:or create-bucket-configuration
                                         common-lisp:null)
                         :accessor
                         %create-bucket-request-create-bucket-configuration
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (acl :initarg :acl :type
                         (common-lisp:or bucket-canned-acl common-lisp:null)
                         :accessor %create-bucket-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defun make-create-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-ownership
                     object-lock-enabled-for-bucket grant-write-acp grant-write
                     grant-read-acp grant-read grant-full-control
                     create-bucket-configuration bucket acl)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-enabled-for-bucket))
      (common-lisp:cons "x-amz-bucket-object-lock-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:cons "x-amz-object-ownership"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-bucket-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateBucketConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CreateBucketConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass create-multipart-upload-output common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-checksum-algorithm
                         :initform common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-request-charged
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %create-multipart-upload-output-ssekmskey-id
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-server-side-encryption
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %create-multipart-upload-output-upload-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %create-multipart-upload-output-key :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-multipart-upload-output-bucket
                         :initform common-lisp:nil)
                        (abort-rule-id :initarg :abort-rule-id :type
                         (common-lisp:or abort-rule-id common-lisp:null)
                         :accessor
                         %create-multipart-upload-output-abort-rule-id
                         :initform common-lisp:nil)
                        (abort-date :initarg :abort-date :type
                         (common-lisp:or abort-date common-lisp:null) :accessor
                         %create-multipart-upload-output-abort-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-output
                    'make-create-multipart-upload-output))
 (common-lisp:defun make-create-multipart-upload-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm request-charged
                     bucket-key-enabled ssekmsencryption-context ssekmskey-id
                     ssecustomer-key-md5 ssecustomer-algorithm
                     server-side-encryption upload-id key bucket abort-rule-id
                     abort-date)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multipart-upload-request common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-object-lock-mode
                         :initform common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging-header common-lisp:null)
                         :accessor %create-multipart-upload-request-tagging
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-request-payer
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-ssekmskey-id
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (website-redirect-location :initarg
                         :website-redirect-location :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-website-redirect-location
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-storage-class
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-server-side-encryption
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %create-multipart-upload-request-metadata :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %create-multipart-upload-request-key :initform
                         (common-lisp:error ":key is required"))
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %create-multipart-upload-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-grant-full-control
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %create-multipart-upload-request-expires :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-content-type
                         :initform common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         %create-multipart-upload-request-cache-control
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %create-multipart-upload-request-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (acl :initarg :acl :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor %create-multipart-upload-request-acl
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-request
                    'make-create-multipart-upload-request))
 (common-lisp:defun make-create-multipart-upload-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm expected-bucket-owner
                     object-lock-legal-hold-status
                     object-lock-retain-until-date object-lock-mode tagging
                     request-payer bucket-key-enabled ssekmsencryption-context
                     ssekmskey-id ssecustomer-key-md5 ssecustomer-key
                     ssecustomer-algorithm website-redirect-location
                     storage-class server-side-encryption metadata key
                     grant-write-acp grant-read-acp grant-read
                     grant-full-control expires content-type content-language
                     content-encoding content-disposition cache-control bucket
                     acl)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype days-after-initiation () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass default-retention common-lisp:nil
                       ((years :initarg :years :type
                         (common-lisp:or years common-lisp:null) :accessor
                         %default-retention-years :initform common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %default-retention-days :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or object-lock-retention-mode
                                         common-lisp:null)
                         :accessor %default-retention-mode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-retention 'make-default-retention))
 (common-lisp:defun make-default-retention
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key years days mode)
   (common-lisp:apply #'common-lisp:make-instance 'default-retention
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'years))
      (common-lisp:list
       (common-lisp:cons "Years"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-retention))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete common-lisp:nil
                       ((quiet :initarg :quiet :type
                         (common-lisp:or quiet common-lisp:null) :accessor
                         %delete-quiet :initform common-lisp:nil)
                        (objects :initarg :objects :type
                         (common-lisp:or object-identifier-list
                                         common-lisp:null)
                         :accessor %delete-objects :initform
                         (common-lisp:error ":objects is required"))))
 (common-lisp:export (common-lisp:list 'delete 'make-delete))
 (common-lisp:defun make-delete
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quiet objects)
   (common-lisp:apply #'common-lisp:make-instance 'delete
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet))
      (common-lisp:list
       (common-lisp:cons "Quiet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-analytics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         %delete-bucket-analytics-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-analytics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-analytics-configuration-request
                    'make-delete-bucket-analytics-configuration-request))
 (common-lisp:defun make-delete-bucket-analytics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-cors-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-cors-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-cors-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-cors-request
                    'make-delete-bucket-cors-request))
 (common-lisp:defun make-delete-bucket-cors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-encryption-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-encryption-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-encryption-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-encryption-request
                    'make-delete-bucket-encryption-request))
 (common-lisp:defun make-delete-bucket-encryption-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         %delete-bucket-intelligent-tiering-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-intelligent-tiering-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-intelligent-tiering-configuration-request
                    'make-delete-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defun make-delete-bucket-intelligent-tiering-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-inventory-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         %delete-bucket-inventory-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-inventory-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-inventory-configuration-request
                    'make-delete-bucket-inventory-configuration-request))
 (common-lisp:defun make-delete-bucket-inventory-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-lifecycle-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-lifecycle-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-lifecycle-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-lifecycle-request
                    'make-delete-bucket-lifecycle-request))
 (common-lisp:defun make-delete-bucket-lifecycle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-metrics-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-metrics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         %delete-bucket-metrics-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-metrics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-metrics-configuration-request
                    'make-delete-bucket-metrics-configuration-request))
 (common-lisp:defun make-delete-bucket-metrics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-ownership-controls-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-ownership-controls-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %delete-bucket-ownership-controls-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-ownership-controls-request
                    'make-delete-bucket-ownership-controls-request))
 (common-lisp:defun make-delete-bucket-ownership-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-policy-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-policy-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-policy-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-policy-request
                    'make-delete-bucket-policy-request))
 (common-lisp:defun make-delete-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-replication-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-replication-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-replication-request
                    'make-delete-bucket-replication-request))
 (common-lisp:defun make-delete-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %delete-bucket-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defun make-delete-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-tagging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-tagging-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-tagging-request
                    'make-delete-bucket-tagging-request))
 (common-lisp:defun make-delete-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-website-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-bucket-website-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-bucket-website-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-website-request
                    'make-delete-bucket-website-request))
 (common-lisp:defun make-delete-bucket-website-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   common-lisp:nil))
(common-lisp:deftype delete-marker () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-marker-entry common-lisp:nil
                       ((last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %delete-marker-entry-last-modified :initform
                         common-lisp:nil)
                        (is-latest :initarg :is-latest :type
                         (common-lisp:or is-latest common-lisp:null) :accessor
                         %delete-marker-entry-is-latest :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %delete-marker-entry-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %delete-marker-entry-key :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %delete-marker-entry-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-marker-entry 'make-delete-marker-entry))
 (common-lisp:defun make-delete-marker-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified is-latest version-id key
                     owner)
   (common-lisp:apply #'common-lisp:make-instance 'delete-marker-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-marker-replication common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or delete-marker-replication-status
                                         common-lisp:null)
                         :accessor %delete-marker-replication-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-marker-replication
                    'make-delete-marker-replication))
 (common-lisp:defun make-delete-marker-replication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-marker-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   common-lisp:nil))
(common-lisp:deftype delete-marker-replication-status () 'common-lisp:string)
(common-lisp:deftype delete-marker-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-markers ()
   '(trivial-types:proper-list delete-marker-entry))
 (common-lisp:defun |make-delete-markers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-marker-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-object-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %delete-object-output-request-charged
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %delete-object-output-version-id :initform
                         common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor %delete-object-output-delete-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-object-output 'make-delete-object-output))
 (common-lisp:defun make-delete-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged version-id delete-marker)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %delete-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         %delete-object-request-bypass-governance-retention
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %delete-object-request-request-payer
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %delete-object-request-version-id :initform
                         common-lisp:nil)
                        (mfa :initarg :mfa :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         %delete-object-request-mfa :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %delete-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-object-request 'make-delete-object-request))
 (common-lisp:defun make-delete-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     bypass-governance-retention request-payer version-id mfa
                     key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-tagging-output common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %delete-object-tagging-output-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-output
                    'make-delete-object-tagging-output))
 (common-lisp:defun make-delete-object-tagging-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-tagging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-object-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %delete-object-tagging-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %delete-object-tagging-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-object-tagging-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-request
                    'make-delete-object-tagging-request))
 (common-lisp:defun make-delete-object-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner version-id key
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-output common-lisp:nil
                       ((errors :initarg :errors :type
                         (common-lisp:or errors common-lisp:null) :accessor
                         %delete-objects-output-errors :initform
                         common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %delete-objects-output-request-charged
                         :initform common-lisp:nil)
                        (deleted :initarg :deleted :type
                         (common-lisp:or deleted-objects common-lisp:null)
                         :accessor %delete-objects-output-deleted :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-objects-output 'make-delete-objects-output))
 (common-lisp:defun make-delete-objects-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors request-charged deleted)
   (common-lisp:apply #'common-lisp:make-instance 'delete-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-request common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %delete-objects-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-objects-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         %delete-objects-request-bypass-governance-retention
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %delete-objects-request-request-payer
                         :initform common-lisp:nil)
                        (mfa :initarg :mfa :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         %delete-objects-request-mfa :initform common-lisp:nil)
                        (delete :initarg :delete :type
                         (common-lisp:or delete common-lisp:null) :accessor
                         %delete-objects-request-delete :initform
                         (common-lisp:error ":delete is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-objects-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-objects-request 'make-delete-objects-request))
 (common-lisp:defun make-delete-objects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm expected-bucket-owner
                     bypass-governance-retention request-payer mfa delete
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'delete-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete))
      (common-lisp:list
       (common-lisp:cons "Delete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Delete" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass delete-public-access-block-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %delete-public-access-block-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %delete-public-access-block-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-public-access-block-request
                    'make-delete-public-access-block-request))
 (common-lisp:defun make-delete-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deleted-object common-lisp:nil
                       ((delete-marker-version-id :initarg
                         :delete-marker-version-id :type
                         (common-lisp:or delete-marker-version-id
                                         common-lisp:null)
                         :accessor %deleted-object-delete-marker-version-id
                         :initform common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor %deleted-object-delete-marker :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %deleted-object-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %deleted-object-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deleted-object 'make-deleted-object))
 (common-lisp:defun make-deleted-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-marker-version-id delete-marker
                     version-id key)
   (common-lisp:apply #'common-lisp:make-instance 'deleted-object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:list
       (common-lisp:cons "DeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-version-id))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deleted-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deleted-objects ()
   '(trivial-types:proper-list deleted-object))
 (common-lisp:defun |make-deleted-objects|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deleted-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((metrics :initarg :metrics :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         %destination-metrics :initform common-lisp:nil)
                        (replication-time :initarg :replication-time :type
                         (common-lisp:or replication-time common-lisp:null)
                         :accessor %destination-replication-time :initform
                         common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor %destination-encryption-configuration
                         :initform common-lisp:nil)
                        (access-control-translation :initarg
                         :access-control-translation :type
                         (common-lisp:or access-control-translation
                                         common-lisp:null)
                         :accessor %destination-access-control-translation
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %destination-storage-class :initform
                         common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %destination-account :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %destination-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defun make-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metrics replication-time
                     encryption-configuration access-control-translation
                     storage-class account bucket)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-translation))
      (common-lisp:list
       (common-lisp:cons "AccessControlTranslation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype etag () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype enable-request-progress () 'common-lisp:boolean)
(common-lisp:deftype encoding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption common-lisp:nil
                       ((kmscontext :initarg :kmscontext :type
                         (common-lisp:or kmscontext common-lisp:null) :accessor
                         %encryption-kmscontext :initform common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %encryption-kmskey-id :initform
                         common-lisp:nil)
                        (encryption-type :initarg :encryption-type :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %encryption-encryption-type :initform
                         (common-lisp:error ":encryption-type is required"))))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defun make-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kmscontext kmskey-id encryption-type)
   (common-lisp:apply #'common-lisp:make-instance 'encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmscontext))
      (common-lisp:list
       (common-lisp:cons "KMSContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((replica-kms-key-id :initarg :replica-kms-key-id :type
                         (common-lisp:or replica-kms-key-id common-lisp:null)
                         :accessor %encryption-configuration-replica-kms-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defun make-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ReplicaKmsKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype end () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass end-event common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'end-event 'make-end-event))
 (common-lisp:defun make-end-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'end-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %error-message :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or code common-lisp:null) :accessor
                         %error-code :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %error-version-id :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %error-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error 'make-error))
 (common-lisp:defun make-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code version-id key)
   (common-lisp:apply #'common-lisp:make-instance 'error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-document common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %error-document-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'error-document 'make-error-document))
 (common-lisp:defun make-error-document
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key)
   (common-lisp:apply #'common-lisp:make-instance 'error-document
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-document))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype errors () '(trivial-types:proper-list error))
 (common-lisp:defun |make-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bridge-configuration common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-bridge-configuration
                    'make-event-bridge-configuration))
 (common-lisp:defun make-event-bridge-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'event-bridge-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass existing-object-replication common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or existing-object-replication-status
                                         common-lisp:null)
                         :accessor %existing-object-replication-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'existing-object-replication
                    'make-existing-object-replication))
 (common-lisp:defun make-existing-object-replication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'existing-object-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   common-lisp:nil))
(common-lisp:deftype existing-object-replication-status () 'common-lisp:string)
(common-lisp:deftype expiration () 'common-lisp:string)
(common-lisp:deftype expiration-status () 'common-lisp:string)
(common-lisp:deftype expired-object-delete-marker () 'common-lisp:boolean)
(common-lisp:deftype expires () 'common-lisp:string)
(common-lisp:deftype expose-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype expose-headers ()
   '(trivial-types:proper-list expose-header))
 (common-lisp:defun |make-expose-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expose-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:deftype expression-type () 'common-lisp:string)
(common-lisp:deftype fetch-owner () 'common-lisp:boolean)
(common-lisp:deftype field-delimiter () 'common-lisp:string)
(common-lisp:deftype file-header-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-rule common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or filter-rule-value common-lisp:null)
                         :accessor %filter-rule-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filter-rule-name common-lisp:null)
                         :accessor %filter-rule-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter-rule 'make-filter-rule))
 (common-lisp:defun make-filter-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'filter-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-rule-list ()
   '(trivial-types:proper-list filter-rule))
 (common-lisp:defun |make-filter-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-rule-name () 'common-lisp:string)
(common-lisp:deftype filter-rule-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-bucket-accelerate-configuration-output
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or bucket-accelerate-status
                                         common-lisp:null)
                         :accessor
                         %get-bucket-accelerate-configuration-output-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-output
                    'make-get-bucket-accelerate-configuration-output))
 (common-lisp:defun make-get-bucket-accelerate-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-accelerate-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-accelerate-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-accelerate-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-accelerate-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-request
                    'make-get-bucket-accelerate-configuration-request))
 (common-lisp:defun make-get-bucket-accelerate-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-accelerate-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-acl-output common-lisp:nil
                       ((grants :initarg :grants :type
                         (common-lisp:or grants common-lisp:null) :accessor
                         %get-bucket-acl-output-grants :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %get-bucket-acl-output-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-output 'make-get-bucket-acl-output))
 (common-lisp:defun make-get-bucket-acl-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grants owner)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-acl-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-acl-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-acl-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-request 'make-get-bucket-acl-request))
 (common-lisp:defun make-get-bucket-acl-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-analytics-configuration-output
                       common-lisp:nil
                       ((analytics-configuration :initarg
                         :analytics-configuration :type
                         (common-lisp:or analytics-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-analytics-configuration-output-analytics-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-output
                    'make-get-bucket-analytics-configuration-output))
 (common-lisp:defun make-get-bucket-analytics-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analytics-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-analytics-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("AnalyticsConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-analytics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         %get-bucket-analytics-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-analytics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-request
                    'make-get-bucket-analytics-configuration-request))
 (common-lisp:defun make-get-bucket-analytics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-cors-output common-lisp:nil
                       ((corsrules :initarg :corsrules :type
                         (common-lisp:or corsrules common-lisp:null) :accessor
                         %get-bucket-cors-output-corsrules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-output 'make-get-bucket-cors-output))
 (common-lisp:defun make-get-bucket-cors-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key corsrules)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-cors-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-cors-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-cors-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-cors-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-request 'make-get-bucket-cors-request))
 (common-lisp:defun make-get-bucket-cors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-encryption-output common-lisp:nil
                       ((server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-encryption-output-server-side-encryption-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-output
                    'make-get-bucket-encryption-output))
 (common-lisp:defun make-get-bucket-encryption-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-side-encryption-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-encryption-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ServerSideEncryptionConfiguration"
                              common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-encryption-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-encryption-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-encryption-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-request
                    'make-get-bucket-encryption-request))
 (common-lisp:defun make-get-bucket-encryption-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-intelligent-tiering-configuration-output
                       common-lisp:nil
                       ((intelligent-tiering-configuration :initarg
                         :intelligent-tiering-configuration :type
                         (common-lisp:or intelligent-tiering-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-intelligent-tiering-configuration-output-intelligent-tiering-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-output
                    'make-get-bucket-intelligent-tiering-configuration-output))
 (common-lisp:defun make-get-bucket-intelligent-tiering-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intelligent-tiering-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-intelligent-tiering-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("IntelligentTieringConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         %get-bucket-intelligent-tiering-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-intelligent-tiering-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-request
                    'make-get-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defun make-get-bucket-intelligent-tiering-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-inventory-configuration-output
                       common-lisp:nil
                       ((inventory-configuration :initarg
                         :inventory-configuration :type
                         (common-lisp:or inventory-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-inventory-configuration-output-inventory-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-output
                    'make-get-bucket-inventory-configuration-output))
 (common-lisp:defun make-get-bucket-inventory-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key inventory-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-inventory-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("InventoryConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-inventory-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         %get-bucket-inventory-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-inventory-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-request
                    'make-get-bucket-inventory-configuration-request))
 (common-lisp:defun make-get-bucket-inventory-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-output
                       common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-configuration-output-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-output
                    'make-get-bucket-lifecycle-configuration-output))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-request
                    'make-get-bucket-lifecycle-configuration-request))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-output common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %get-bucket-lifecycle-output-rules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-output
                    'make-get-bucket-lifecycle-output))
 (common-lisp:defun make-get-bucket-lifecycle-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-lifecycle-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-lifecycle-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-lifecycle-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-request
                    'make-get-bucket-lifecycle-request))
 (common-lisp:defun make-get-bucket-lifecycle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-location-output common-lisp:nil
                       ((location-constraint :initarg :location-constraint
                         :type
                         (common-lisp:or bucket-location-constraint
                                         common-lisp:null)
                         :accessor
                         %get-bucket-location-output-location-constraint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-output
                    'make-get-bucket-location-output))
 (common-lisp:defun make-get-bucket-location-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location-constraint)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-location-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-location-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-location-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-location-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-request
                    'make-get-bucket-location-request))
 (common-lisp:defun make-get-bucket-location-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-location-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-logging-output common-lisp:nil
                       ((logging-enabled :initarg :logging-enabled :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor %get-bucket-logging-output-logging-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-output
                    'make-get-bucket-logging-output))
 (common-lisp:defun make-get-bucket-logging-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-logging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-logging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-logging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-logging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-request
                    'make-get-bucket-logging-request))
 (common-lisp:defun make-get-bucket-logging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-logging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metrics-configuration-output common-lisp:nil
                       ((metrics-configuration :initarg :metrics-configuration
                         :type
                         (common-lisp:or metrics-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-metrics-configuration-output-metrics-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-output
                    'make-get-bucket-metrics-configuration-output))
 (common-lisp:defun make-get-bucket-metrics-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metrics-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metrics-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MetricsConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metrics-configuration-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-metrics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         %get-bucket-metrics-configuration-request-id :initform
                         (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-metrics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-request
                    'make-get-bucket-metrics-configuration-request))
 (common-lisp:defun make-get-bucket-metrics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-notification-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-notification-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-notification-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-notification-configuration-request
                    'make-get-bucket-notification-configuration-request))
 (common-lisp:defun make-get-bucket-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-ownership-controls-output common-lisp:nil
                       ((ownership-controls :initarg :ownership-controls :type
                         (common-lisp:or ownership-controls common-lisp:null)
                         :accessor
                         %get-bucket-ownership-controls-output-ownership-controls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-output
                    'make-get-bucket-ownership-controls-output))
 (common-lisp:defun make-get-bucket-ownership-controls-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ownership-controls)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-ownership-controls-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OwnershipControls" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-ownership-controls-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-ownership-controls-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-bucket-ownership-controls-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-request
                    'make-get-bucket-ownership-controls-request))
 (common-lisp:defun make-get-bucket-ownership-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-output common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-bucket-policy-output-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-output 'make-get-bucket-policy-output))
 (common-lisp:defun make-get-bucket-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Policy" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-policy-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-policy-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-request
                    'make-get-bucket-policy-request))
 (common-lisp:defun make-get-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-status-output common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or policy-status common-lisp:null)
                         :accessor
                         %get-bucket-policy-status-output-policy-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-output
                    'make-get-bucket-policy-status-output))
 (common-lisp:defun make-get-bucket-policy-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-policy-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PolicyStatus" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-status-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-policy-status-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-policy-status-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-request
                    'make-get-bucket-policy-status-request))
 (common-lisp:defun make-get-bucket-policy-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-policy-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-output common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         %get-bucket-replication-output-replication-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-output
                    'make-get-bucket-replication-output))
 (common-lisp:defun make-get-bucket-replication-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ReplicationConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-replication-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-request
                    'make-get-bucket-replication-request))
 (common-lisp:defun make-get-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-request-payment-output common-lisp:nil
                       ((payer :initarg :payer :type
                         (common-lisp:or payer common-lisp:null) :accessor
                         %get-bucket-request-payment-output-payer :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-output
                    'make-get-bucket-request-payment-output))
 (common-lisp:defun make-get-bucket-request-payment-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payer)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-request-payment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-request-payment-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-request-payment-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-request-payment-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-request
                    'make-get-bucket-request-payment-request))
 (common-lisp:defun make-get-bucket-request-payment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-request-payment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-output common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %get-bucket-tagging-output-tag-set :initform
                         (common-lisp:error ":tag-set is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-output
                    'make-get-bucket-tagging-output))
 (common-lisp:defun make-get-bucket-tagging-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-request
                    'make-get-bucket-tagging-request))
 (common-lisp:defun make-get-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-output common-lisp:nil
                       ((mfadelete :initarg :mfadelete :type
                         (common-lisp:or mfadelete-status common-lisp:null)
                         :accessor %get-bucket-versioning-output-mfadelete
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor %get-bucket-versioning-output-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-output
                    'make-get-bucket-versioning-output))
 (common-lisp:defun make-get-bucket-versioning-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mfadelete status)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-versioning-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-versioning-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-versioning-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-request
                    'make-get-bucket-versioning-request))
 (common-lisp:defun make-get-bucket-versioning-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-website-output common-lisp:nil
                       ((routing-rules :initarg :routing-rules :type
                         (common-lisp:or routing-rules common-lisp:null)
                         :accessor %get-bucket-website-output-routing-rules
                         :initform common-lisp:nil)
                        (error-document :initarg :error-document :type
                         (common-lisp:or error-document common-lisp:null)
                         :accessor %get-bucket-website-output-error-document
                         :initform common-lisp:nil)
                        (index-document :initarg :index-document :type
                         (common-lisp:or index-document common-lisp:null)
                         :accessor %get-bucket-website-output-index-document
                         :initform common-lisp:nil)
                        (redirect-all-requests-to :initarg
                         :redirect-all-requests-to :type
                         (common-lisp:or redirect-all-requests-to
                                         common-lisp:null)
                         :accessor
                         %get-bucket-website-output-redirect-all-requests-to
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-output
                    'make-get-bucket-website-output))
 (common-lisp:defun make-get-bucket-website-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routing-rules error-document
                     index-document redirect-all-requests-to)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-website-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-website-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-bucket-website-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-bucket-website-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-request
                    'make-get-bucket-website-request))
 (common-lisp:defun make-get-bucket-website-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-acl-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %get-object-acl-output-request-charged
                         :initform common-lisp:nil)
                        (grants :initarg :grants :type
                         (common-lisp:or grants common-lisp:null) :accessor
                         %get-object-acl-output-grants :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %get-object-acl-output-owner :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-output 'make-get-object-acl-output))
 (common-lisp:defun make-get-object-acl-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged grants owner)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-acl-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-acl-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-acl-request-request-payer
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-acl-request-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-acl-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-acl-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-request 'make-get-object-acl-request))
 (common-lisp:defun make-get-object-acl-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-output common-lisp:nil
                       ((object-size :initarg :object-size :type
                         (common-lisp:or object-size common-lisp:null)
                         :accessor %get-object-attributes-output-object-size
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %get-object-attributes-output-storage-class
                         :initform common-lisp:nil)
                        (object-parts :initarg :object-parts :type
                         (common-lisp:or get-object-attributes-parts
                                         common-lisp:null)
                         :accessor %get-object-attributes-output-object-parts
                         :initform common-lisp:nil)
                        (checksum :initarg :checksum :type
                         (common-lisp:or checksum common-lisp:null) :accessor
                         %get-object-attributes-output-checksum :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %get-object-attributes-output-etag :initform
                         common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %get-object-attributes-output-request-charged
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-attributes-output-version-id
                         :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %get-object-attributes-output-last-modified
                         :initform common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor %get-object-attributes-output-delete-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-output
                    'make-get-object-attributes-output))
 (common-lisp:defun make-get-object-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-size storage-class object-parts
                     checksum etag request-charged version-id last-modified
                     delete-marker)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "Checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-parts))
      (common-lisp:list
       (common-lisp:cons "ObjectParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-size))
      (common-lisp:list
       (common-lisp:cons "ObjectSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-parts common-lisp:nil
                       ((parts :initarg :parts :type
                         (common-lisp:or parts-list common-lisp:null) :accessor
                         %get-object-attributes-parts-parts :initform
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %get-object-attributes-parts-is-truncated
                         :initform common-lisp:nil)
                        (max-parts :initarg :max-parts :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         %get-object-attributes-parts-max-parts :initform
                         common-lisp:nil)
                        (next-part-number-marker :initarg
                         :next-part-number-marker :type
                         (common-lisp:or next-part-number-marker
                                         common-lisp:null)
                         :accessor
                         %get-object-attributes-parts-next-part-number-marker
                         :initform common-lisp:nil)
                        (part-number-marker :initarg :part-number-marker :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         %get-object-attributes-parts-part-number-marker
                         :initform common-lisp:nil)
                        (total-parts-count :initarg :total-parts-count :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor
                         %get-object-attributes-parts-total-parts-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-parts
                    'make-get-object-attributes-parts))
 (common-lisp:defun make-get-object-attributes-parts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parts is-truncated max-parts
                     next-part-number-marker part-number-marker
                     total-parts-count)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-attributes-parts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-parts-count))
      (common-lisp:list
       (common-lisp:cons "TotalPartsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-request common-lisp:nil
                       ((object-attributes :initarg :object-attributes :type
                         (common-lisp:or object-attributes-list
                                         common-lisp:null)
                         :accessor
                         %get-object-attributes-request-object-attributes
                         :initform
                         (common-lisp:error ":object-attributes is required"))
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-attributes-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-attributes-request-request-payer
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %get-object-attributes-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         %get-object-attributes-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %get-object-attributes-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (part-number-marker :initarg :part-number-marker :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         %get-object-attributes-request-part-number-marker
                         :initform common-lisp:nil)
                        (max-parts :initarg :max-parts :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         %get-object-attributes-request-max-parts :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-attributes-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-attributes-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-attributes-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-request
                    'make-get-object-attributes-request))
 (common-lisp:defun make-get-object-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-attributes expected-bucket-owner
                     request-payer ssecustomer-key-md5 ssecustomer-key
                     ssecustomer-algorithm part-number-marker max-parts
                     version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:cons "x-amz-max-parts" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:cons "x-amz-part-number-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-attributes))
      (common-lisp:cons "x-amz-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-legal-hold-output common-lisp:nil
                       ((legal-hold :initarg :legal-hold :type
                         (common-lisp:or object-lock-legal-hold
                                         common-lisp:null)
                         :accessor %get-object-legal-hold-output-legal-hold
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-output
                    'make-get-object-legal-hold-output))
 (common-lisp:defun make-get-object-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key legal-hold)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("LegalHold" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-object-legal-hold-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-legal-hold-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-legal-hold-request-request-payer
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-legal-hold-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-legal-hold-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-legal-hold-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-request
                    'make-get-object-legal-hold-request))
 (common-lisp:defun make-get-object-legal-hold-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-legal-hold-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-lock-configuration-output common-lisp:nil
                       ((object-lock-configuration :initarg
                         :object-lock-configuration :type
                         (common-lisp:or object-lock-configuration
                                         common-lisp:null)
                         :accessor
                         %get-object-lock-configuration-output-object-lock-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-output
                    'make-get-object-lock-configuration-output))
 (common-lisp:defun make-get-object-lock-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-lock-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-lock-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ObjectLockConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-object-lock-configuration-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-lock-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %get-object-lock-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-request
                    'make-get-object-lock-configuration-request))
 (common-lisp:defun make-get-object-lock-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-lock-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-output common-lisp:nil
                       ((object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %get-object-output-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %get-object-output-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor %get-object-output-object-lock-mode
                         :initform common-lisp:nil)
                        (tag-count :initarg :tag-count :type
                         (common-lisp:or tag-count common-lisp:null) :accessor
                         %get-object-output-tag-count :initform
                         common-lisp:nil)
                        (parts-count :initarg :parts-count :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor %get-object-output-parts-count :initform
                         common-lisp:nil)
                        (replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor %get-object-output-replication-status
                         :initform common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %get-object-output-request-charged :initform
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %get-object-output-storage-class :initform
                         common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %get-object-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %get-object-output-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %get-object-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %get-object-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %get-object-output-metadata :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %get-object-output-server-side-encryption
                         :initform common-lisp:nil)
                        (website-redirect-location :initarg
                         :website-redirect-location :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor %get-object-output-website-redirect-location
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %get-object-output-expires :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %get-object-output-content-type :initform
                         common-lisp:nil)
                        (content-range :initarg :content-range :type
                         (common-lisp:or content-range common-lisp:null)
                         :accessor %get-object-output-content-range :initform
                         common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor %get-object-output-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor %get-object-output-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor %get-object-output-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor %get-object-output-cache-control :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-output-version-id :initform
                         common-lisp:nil)
                        (missing-meta :initarg :missing-meta :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor %get-object-output-missing-meta :initform
                         common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %get-object-output-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %get-object-output-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %get-object-output-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %get-object-output-checksum-crc32 :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %get-object-output-etag :initform common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor %get-object-output-content-length :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %get-object-output-last-modified :initform
                         common-lisp:nil)
                        (restore :initarg :restore :type
                         (common-lisp:or restore common-lisp:null) :accessor
                         %get-object-output-restore :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %get-object-output-expiration :initform
                         common-lisp:nil)
                        (accept-ranges :initarg :accept-ranges :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor %get-object-output-accept-ranges :initform
                         common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor %get-object-output-delete-marker :initform
                         common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor %get-object-output-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-output 'make-get-object-output))
 (common-lisp:defun make-get-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-lock-legal-hold-status
                     object-lock-retain-until-date object-lock-mode tag-count
                     parts-count replication-status request-charged
                     storage-class bucket-key-enabled ssekmskey-id
                     ssecustomer-key-md5 ssecustomer-algorithm metadata
                     server-side-encryption website-redirect-location expires
                     content-type content-range content-language
                     content-encoding content-disposition cache-control
                     version-id missing-meta checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 etag content-length
                     last-modified restore expiration accept-ranges
                     delete-marker body)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "Content-Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-tagging-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Body" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-object-request common-lisp:nil
                       ((checksum-mode :initarg :checksum-mode :type
                         (common-lisp:or checksum-mode common-lisp:null)
                         :accessor %get-object-request-checksum-mode :initform
                         common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %get-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %get-object-request-part-number :initform
                         common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-request-request-payer :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %get-object-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %get-object-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %get-object-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-request-version-id :initform
                         common-lisp:nil)
                        (response-expires :initarg :response-expires :type
                         (common-lisp:or response-expires common-lisp:null)
                         :accessor %get-object-request-response-expires
                         :initform common-lisp:nil)
                        (response-content-type :initarg :response-content-type
                         :type
                         (common-lisp:or response-content-type
                                         common-lisp:null)
                         :accessor %get-object-request-response-content-type
                         :initform common-lisp:nil)
                        (response-content-language :initarg
                         :response-content-language :type
                         (common-lisp:or response-content-language
                                         common-lisp:null)
                         :accessor
                         %get-object-request-response-content-language
                         :initform common-lisp:nil)
                        (response-content-encoding :initarg
                         :response-content-encoding :type
                         (common-lisp:or response-content-encoding
                                         common-lisp:null)
                         :accessor
                         %get-object-request-response-content-encoding
                         :initform common-lisp:nil)
                        (response-content-disposition :initarg
                         :response-content-disposition :type
                         (common-lisp:or response-content-disposition
                                         common-lisp:null)
                         :accessor
                         %get-object-request-response-content-disposition
                         :initform common-lisp:nil)
                        (response-cache-control :initarg
                         :response-cache-control :type
                         (common-lisp:or response-cache-control
                                         common-lisp:null)
                         :accessor %get-object-request-response-cache-control
                         :initform common-lisp:nil)
                        (range :initarg :range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %get-object-request-range :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (if-unmodified-since :initarg :if-unmodified-since
                         :type
                         (common-lisp:or if-unmodified-since common-lisp:null)
                         :accessor %get-object-request-if-unmodified-since
                         :initform common-lisp:nil)
                        (if-none-match :initarg :if-none-match :type
                         (common-lisp:or if-none-match common-lisp:null)
                         :accessor %get-object-request-if-none-match :initform
                         common-lisp:nil)
                        (if-modified-since :initarg :if-modified-since :type
                         (common-lisp:or if-modified-since common-lisp:null)
                         :accessor %get-object-request-if-modified-since
                         :initform common-lisp:nil)
                        (if-match :initarg :if-match :type
                         (common-lisp:or if-match common-lisp:null) :accessor
                         %get-object-request-if-match :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-request 'make-get-object-request))
 (common-lisp:defun make-get-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-mode expected-bucket-owner
                     part-number request-payer ssecustomer-key-md5
                     ssecustomer-key ssecustomer-algorithm version-id
                     response-expires response-content-type
                     response-content-language response-content-encoding
                     response-content-disposition response-cache-control range
                     key if-unmodified-since if-none-match if-modified-since
                     if-match bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-request))
   common-lisp:nil))
(common-lisp:deftype get-object-response-status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-object-retention-output common-lisp:nil
                       ((retention :initarg :retention :type
                         (common-lisp:or object-lock-retention
                                         common-lisp:null)
                         :accessor %get-object-retention-output-retention
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-output
                    'make-get-object-retention-output))
 (common-lisp:defun make-get-object-retention-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-retention-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Retention" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-object-retention-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-retention-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-retention-request-request-payer
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-retention-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-retention-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-retention-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-request
                    'make-get-object-retention-request))
 (common-lisp:defun make-get-object-retention-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-retention-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-tagging-output common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %get-object-tagging-output-tag-set :initform
                         (common-lisp:error ":tag-set is required"))
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-tagging-output-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-output
                    'make-get-object-tagging-output))
 (common-lisp:defun make-get-object-tagging-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set version-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-tagging-request common-lisp:nil
                       ((request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-tagging-request-request-payer
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %get-object-tagging-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-tagging-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-request
                    'make-get-object-tagging-request))
 (common-lisp:defun make-get-object-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-payer expected-bucket-owner
                     version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-torrent-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %get-object-torrent-output-request-charged
                         :initform common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor %get-object-torrent-output-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-output
                    'make-get-object-torrent-output))
 (common-lisp:defun make-get-object-torrent-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged body)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-torrent-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Body" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-object-torrent-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-object-torrent-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %get-object-torrent-request-request-payer
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %get-object-torrent-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-object-torrent-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-request
                    'make-get-object-torrent-request))
 (common-lisp:defun make-get-object-torrent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer key
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-torrent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-output common-lisp:nil
                       ((public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %get-public-access-block-output-public-access-block-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-output
                    'make-get-public-access-block-output))
 (common-lisp:defun make-get-public-access-block-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-access-block-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicAccessBlockConfiguration" common-lisp:nil
                              common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %get-public-access-block-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %get-public-access-block-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-request
                    'make-get-public-access-block-request))
 (common-lisp:defun make-get-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass glacier-job-parameters common-lisp:nil
                       ((tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %glacier-job-parameters-tier :initform
                         (common-lisp:error ":tier is required"))))
 (common-lisp:export
  (common-lisp:list 'glacier-job-parameters 'make-glacier-job-parameters))
 (common-lisp:defun make-glacier-job-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tier)
   (common-lisp:apply #'common-lisp:make-instance 'glacier-job-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant common-lisp:nil
                       ((permission :initarg :permission :type
                         (common-lisp:or permission common-lisp:null) :accessor
                         %grant-permission :initform common-lisp:nil)
                        (grantee :initarg :grantee :type
                         (common-lisp:or grantee common-lisp:null) :accessor
                         %grant-grantee :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'grant 'make-grant))
 (common-lisp:defun make-grant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permission grantee)
   (common-lisp:apply #'common-lisp:make-instance 'grant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant))
   common-lisp:nil))
(common-lisp:deftype grant-full-control () 'common-lisp:string)
(common-lisp:deftype grant-read () 'common-lisp:string)
(common-lisp:deftype grant-read-acp () 'common-lisp:string)
(common-lisp:deftype grant-write () 'common-lisp:string)
(common-lisp:deftype grant-write-acp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass grantee common-lisp:nil
                       ((uri :initarg :uri :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %grantee-uri :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %grantee-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %grantee-id :initform common-lisp:nil)
                        (email-address :initarg :email-address :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor %grantee-email-address :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %grantee-display-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'grantee 'make-grantee))
 (common-lisp:defun make-grantee
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uri type id email-address display-name)
   (common-lisp:apply #'common-lisp:make-instance 'grantee
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grantee))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grants () '(trivial-types:proper-list grant))
 (common-lisp:defun |make-grants|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass head-bucket-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %head-bucket-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %head-bucket-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'head-bucket-request 'make-head-bucket-request))
 (common-lisp:defun make-head-bucket-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner bucket)
   (common-lisp:apply #'common-lisp:make-instance 'head-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass head-object-output common-lisp:nil
                       ((object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %head-object-output-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %head-object-output-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor %head-object-output-object-lock-mode
                         :initform common-lisp:nil)
                        (parts-count :initarg :parts-count :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor %head-object-output-parts-count :initform
                         common-lisp:nil)
                        (replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor %head-object-output-replication-status
                         :initform common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %head-object-output-request-charged
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %head-object-output-storage-class :initform
                         common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %head-object-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %head-object-output-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %head-object-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %head-object-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %head-object-output-metadata :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %head-object-output-server-side-encryption
                         :initform common-lisp:nil)
                        (website-redirect-location :initarg
                         :website-redirect-location :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         %head-object-output-website-redirect-location
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %head-object-output-expires :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %head-object-output-content-type :initform
                         common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor %head-object-output-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor %head-object-output-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor %head-object-output-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor %head-object-output-cache-control :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %head-object-output-version-id :initform
                         common-lisp:nil)
                        (missing-meta :initarg :missing-meta :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor %head-object-output-missing-meta :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %head-object-output-etag :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %head-object-output-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %head-object-output-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %head-object-output-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %head-object-output-checksum-crc32 :initform
                         common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor %head-object-output-content-length :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %head-object-output-last-modified :initform
                         common-lisp:nil)
                        (archive-status :initarg :archive-status :type
                         (common-lisp:or archive-status common-lisp:null)
                         :accessor %head-object-output-archive-status :initform
                         common-lisp:nil)
                        (restore :initarg :restore :type
                         (common-lisp:or restore common-lisp:null) :accessor
                         %head-object-output-restore :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %head-object-output-expiration :initform
                         common-lisp:nil)
                        (accept-ranges :initarg :accept-ranges :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor %head-object-output-accept-ranges :initform
                         common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor %head-object-output-delete-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'head-object-output 'make-head-object-output))
 (common-lisp:defun make-head-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-lock-legal-hold-status
                     object-lock-retain-until-date object-lock-mode parts-count
                     replication-status request-charged storage-class
                     bucket-key-enabled ssekmskey-id ssecustomer-key-md5
                     ssecustomer-algorithm metadata server-side-encryption
                     website-redirect-location expires content-type
                     content-language content-encoding content-disposition
                     cache-control version-id missing-meta etag checksum-sha256
                     checksum-sha1 checksum-crc32c checksum-crc32
                     content-length last-modified archive-status restore
                     expiration accept-ranges delete-marker)
   (common-lisp:apply #'common-lisp:make-instance 'head-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-status))
      (common-lisp:cons "x-amz-archive-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass head-object-request common-lisp:nil
                       ((checksum-mode :initarg :checksum-mode :type
                         (common-lisp:or checksum-mode common-lisp:null)
                         :accessor %head-object-request-checksum-mode :initform
                         common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %head-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %head-object-request-part-number :initform
                         common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %head-object-request-request-payer :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %head-object-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %head-object-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %head-object-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %head-object-request-version-id :initform
                         common-lisp:nil)
                        (range :initarg :range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %head-object-request-range :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %head-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (if-unmodified-since :initarg :if-unmodified-since
                         :type
                         (common-lisp:or if-unmodified-since common-lisp:null)
                         :accessor %head-object-request-if-unmodified-since
                         :initform common-lisp:nil)
                        (if-none-match :initarg :if-none-match :type
                         (common-lisp:or if-none-match common-lisp:null)
                         :accessor %head-object-request-if-none-match :initform
                         common-lisp:nil)
                        (if-modified-since :initarg :if-modified-since :type
                         (common-lisp:or if-modified-since common-lisp:null)
                         :accessor %head-object-request-if-modified-since
                         :initform common-lisp:nil)
                        (if-match :initarg :if-match :type
                         (common-lisp:or if-match common-lisp:null) :accessor
                         %head-object-request-if-match :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %head-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'head-object-request 'make-head-object-request))
 (common-lisp:defun make-head-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-mode expected-bucket-owner
                     part-number request-payer ssecustomer-key-md5
                     ssecustomer-key ssecustomer-algorithm version-id range key
                     if-unmodified-since if-none-match if-modified-since
                     if-match bucket)
   (common-lisp:apply #'common-lisp:make-instance 'head-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-request))
   common-lisp:nil))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype http-error-code-returned-equals () 'common-lisp:string)
(common-lisp:deftype http-redirect-code () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype if-match () 'common-lisp:string)
(common-lisp:deftype if-modified-since () 'common-lisp:string)
(common-lisp:deftype if-none-match () 'common-lisp:string)
(common-lisp:deftype if-unmodified-since () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-document common-lisp:nil
                       ((suffix :initarg :suffix :type
                         (common-lisp:or suffix common-lisp:null) :accessor
                         %index-document-suffix :initform
                         (common-lisp:error ":suffix is required"))))
 (common-lisp:export (common-lisp:list 'index-document 'make-index-document))
 (common-lisp:defun make-index-document
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suffix)
   (common-lisp:apply #'common-lisp:make-instance 'index-document
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-document))
   common-lisp:nil))
(common-lisp:deftype initiated () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initiator common-lisp:nil
                       ((display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %initiator-display-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %initiator-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'initiator 'make-initiator))
 (common-lisp:defun make-initiator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name id)
   (common-lisp:apply #'common-lisp:make-instance 'initiator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input initiator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-serialization common-lisp:nil
                       ((parquet :initarg :parquet :type
                         (common-lisp:or parquet-input common-lisp:null)
                         :accessor %input-serialization-parquet :initform
                         common-lisp:nil)
                        (json :initarg :json :type
                         (common-lisp:or jsoninput common-lisp:null) :accessor
                         %input-serialization-json :initform common-lisp:nil)
                        (compression-type :initarg :compression-type :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor %input-serialization-compression-type
                         :initform common-lisp:nil)
                        (csv :initarg :csv :type
                         (common-lisp:or csvinput common-lisp:null) :accessor
                         %input-serialization-csv :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-serialization 'make-input-serialization))
 (common-lisp:defun make-input-serialization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parquet json compression-type csv)
   (common-lisp:apply #'common-lisp:make-instance 'input-serialization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet))
      (common-lisp:list
       (common-lisp:cons "Parquet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-serialization))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-access-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-and-operator common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %intelligent-tiering-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %intelligent-tiering-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-and-operator
                    'make-intelligent-tiering-and-operator))
 (common-lisp:defun make-intelligent-tiering-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'intelligent-tiering-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-configuration common-lisp:nil
                       ((tierings :initarg :tierings :type
                         (common-lisp:or tiering-list common-lisp:null)
                         :accessor %intelligent-tiering-configuration-tierings
                         :initform (common-lisp:error ":tierings is required"))
                        (status :initarg :status :type
                         (common-lisp:or intelligent-tiering-status
                                         common-lisp:null)
                         :accessor %intelligent-tiering-configuration-status
                         :initform (common-lisp:error ":status is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or intelligent-tiering-filter
                                         common-lisp:null)
                         :accessor %intelligent-tiering-configuration-filter
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor %intelligent-tiering-configuration-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-configuration
                    'make-intelligent-tiering-configuration))
 (common-lisp:defun make-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tierings status filter id)
   (common-lisp:apply #'common-lisp:make-instance
                      'intelligent-tiering-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tierings))
      (common-lisp:list
       (common-lisp:cons "Tierings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intelligent-tiering-configuration-list ()
   '(trivial-types:proper-list intelligent-tiering-configuration))
 (common-lisp:defun |make-intelligent-tiering-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            intelligent-tiering-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype intelligent-tiering-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or intelligent-tiering-and-operator
                                         common-lisp:null)
                         :accessor %intelligent-tiering-filter-and :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         %intelligent-tiering-filter-tag :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %intelligent-tiering-filter-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-filter
                    'make-intelligent-tiering-filter))
 (common-lisp:defun make-intelligent-tiering-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'intelligent-tiering-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-id () 'common-lisp:string)
(common-lisp:deftype intelligent-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-object-state
     (s3-error)
     ((storage-class :initarg :storage-class :initform common-lisp:nil :reader
       invalid-object-state-storage-class)
      (access-tier :initarg :access-tier :initform common-lisp:nil :reader
       invalid-object-state-access-tier)))
 (common-lisp:export
  (common-lisp:list 'invalid-object-state 'invalid-object-state-storage-class
                    'invalid-object-state-access-tier)))
(common-lisp:progn
 (common-lisp:defclass inventory-configuration common-lisp:nil
                       ((schedule :initarg :schedule :type
                         (common-lisp:or inventory-schedule common-lisp:null)
                         :accessor %inventory-configuration-schedule :initform
                         (common-lisp:error ":schedule is required"))
                        (optional-fields :initarg :optional-fields :type
                         (common-lisp:or inventory-optional-fields
                                         common-lisp:null)
                         :accessor %inventory-configuration-optional-fields
                         :initform common-lisp:nil)
                        (included-object-versions :initarg
                         :included-object-versions :type
                         (common-lisp:or inventory-included-object-versions
                                         common-lisp:null)
                         :accessor
                         %inventory-configuration-included-object-versions
                         :initform
                         (common-lisp:error
                          ":included-object-versions is required"))
                        (id :initarg :id :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor %inventory-configuration-id :initform
                         (common-lisp:error ":id is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or inventory-filter common-lisp:null)
                         :accessor %inventory-configuration-filter :initform
                         common-lisp:nil)
                        (is-enabled :initarg :is-enabled :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         %inventory-configuration-is-enabled :initform
                         (common-lisp:error ":is-enabled is required"))
                        (destination :initarg :destination :type
                         (common-lisp:or inventory-destination
                                         common-lisp:null)
                         :accessor %inventory-configuration-destination
                         :initform
                         (common-lisp:error ":destination is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-configuration 'make-inventory-configuration))
 (common-lisp:defun make-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule optional-fields
                     included-object-versions id filter is-enabled destination)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-object-versions))
      (common-lisp:list
       (common-lisp:cons "IncludedObjectVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-fields))
      (common-lisp:list
       (common-lisp:cons "OptionalFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-configuration-list ()
   '(trivial-types:proper-list inventory-configuration))
 (common-lisp:defun |make-inventory-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-destination common-lisp:nil
                       ((s3bucket-destination :initarg :s3bucket-destination
                         :type
                         (common-lisp:or inventory-s3bucket-destination
                                         common-lisp:null)
                         :accessor %inventory-destination-s3bucket-destination
                         :initform
                         (common-lisp:error
                          ":s3bucket-destination is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-destination 'make-inventory-destination))
 (common-lisp:defun make-inventory-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-destination)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-encryption common-lisp:nil
                       ((ssekms :initarg :ssekms :type
                         (common-lisp:or ssekms common-lisp:null) :accessor
                         %inventory-encryption-ssekms :initform
                         common-lisp:nil)
                        (sses3 :initarg :sses3 :type
                         (common-lisp:or sses3 common-lisp:null) :accessor
                         %inventory-encryption-sses3 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-encryption 'make-inventory-encryption))
 (common-lisp:defun make-inventory-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssekms sses3)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-filter common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %inventory-filter-prefix :initform
                         (common-lisp:error ":prefix is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defun make-inventory-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-format () 'common-lisp:string)
(common-lisp:deftype inventory-frequency () 'common-lisp:string)
(common-lisp:deftype inventory-id () 'common-lisp:string)
(common-lisp:deftype inventory-included-object-versions () 'common-lisp:string)
(common-lisp:deftype inventory-optional-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-optional-fields ()
   '(trivial-types:proper-list inventory-optional-field))
 (common-lisp:defun |make-inventory-optional-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-optional-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-s3bucket-destination common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or inventory-encryption common-lisp:null)
                         :accessor %inventory-s3bucket-destination-encryption
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %inventory-s3bucket-destination-prefix :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or inventory-format common-lisp:null)
                         :accessor %inventory-s3bucket-destination-format
                         :initform (common-lisp:error ":format is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %inventory-s3bucket-destination-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %inventory-s3bucket-destination-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-s3bucket-destination
                    'make-inventory-s3bucket-destination))
 (common-lisp:defun make-inventory-s3bucket-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption prefix format bucket
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'inventory-s3bucket-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-schedule common-lisp:nil
                       ((frequency :initarg :frequency :type
                         (common-lisp:or inventory-frequency common-lisp:null)
                         :accessor %inventory-schedule-frequency :initform
                         (common-lisp:error ":frequency is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-schedule 'make-inventory-schedule))
 (common-lisp:defun make-inventory-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key frequency)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-schedule))
   common-lisp:nil))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:deftype is-latest () 'common-lisp:boolean)
(common-lisp:deftype is-public () 'common-lisp:boolean)
(common-lisp:deftype is-truncated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass jsoninput common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or jsontype common-lisp:null) :accessor
                         %jsoninput-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'jsoninput 'make-jsoninput))
 (common-lisp:defun make-jsoninput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'jsoninput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsoninput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jsonoutput common-lisp:nil
                       ((record-delimiter :initarg :record-delimiter :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor %jsonoutput-record-delimiter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'jsonoutput 'make-jsonoutput))
 (common-lisp:defun make-jsonoutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-delimiter)
   (common-lisp:apply #'common-lisp:make-instance 'jsonoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsonoutput))
   common-lisp:nil))
(common-lisp:deftype jsontype () 'common-lisp:string)
(common-lisp:deftype kmscontext () 'common-lisp:string)
(common-lisp:deftype key-count () 'common-lisp:integer)
(common-lisp:deftype key-marker () 'common-lisp:string)
(common-lisp:deftype key-prefix-equals () 'common-lisp:string)
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function-configuration common-lisp:nil
                       ((filter :initarg :filter :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor %lambda-function-configuration-filter
                         :initform common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %lambda-function-configuration-events :initform
                         (common-lisp:error ":events is required"))
                        (lambda-function-arn :initarg :lambda-function-arn
                         :type
                         (common-lisp:or lambda-function-arn common-lisp:null)
                         :accessor
                         %lambda-function-configuration-lambda-function-arn
                         :initform
                         (common-lisp:error
                          ":lambda-function-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %lambda-function-configuration-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-configuration
                    'make-lambda-function-configuration))
 (common-lisp:defun make-lambda-function-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter events lambda-function-arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-function-configuration-list ()
   '(trivial-types:proper-list lambda-function-configuration))
 (common-lisp:defun |make-lambda-function-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lambda-function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %lifecycle-configuration-rules :initform
                         (common-lisp:error ":rules is required"))))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration 'make-lifecycle-configuration))
 (common-lisp:defun make-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-expiration common-lisp:nil
                       ((expired-object-delete-marker :initarg
                         :expired-object-delete-marker :type
                         (common-lisp:or expired-object-delete-marker
                                         common-lisp:null)
                         :accessor
                         %lifecycle-expiration-expired-object-delete-marker
                         :initform common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %lifecycle-expiration-days :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %lifecycle-expiration-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-expiration 'make-lifecycle-expiration))
 (common-lisp:defun make-lifecycle-expiration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expired-object-delete-marker days date)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule common-lisp:nil
                       ((abort-incomplete-multipart-upload :initarg
                         :abort-incomplete-multipart-upload :type
                         (common-lisp:or abort-incomplete-multipart-upload
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-abort-incomplete-multipart-upload
                         :initform common-lisp:nil)
                        (noncurrent-version-expiration :initarg
                         :noncurrent-version-expiration :type
                         (common-lisp:or noncurrent-version-expiration
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-noncurrent-version-expiration
                         :initform common-lisp:nil)
                        (noncurrent-version-transitions :initarg
                         :noncurrent-version-transitions :type
                         (common-lisp:or noncurrent-version-transition-list
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-noncurrent-version-transitions
                         :initform common-lisp:nil)
                        (transitions :initarg :transitions :type
                         (common-lisp:or transition-list common-lisp:null)
                         :accessor %lifecycle-rule-transitions :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or expiration-status common-lisp:null)
                         :accessor %lifecycle-rule-status :initform
                         (common-lisp:error ":status is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or lifecycle-rule-filter
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %lifecycle-rule-prefix :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %lifecycle-rule-id :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or lifecycle-expiration common-lisp:null)
                         :accessor %lifecycle-rule-expiration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lifecycle-rule 'make-lifecycle-rule))
 (common-lisp:defun make-lifecycle-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key abort-incomplete-multipart-upload
                     noncurrent-version-expiration
                     noncurrent-version-transitions transitions status filter
                     prefix id expiration)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-and-operator common-lisp:nil
                       ((object-size-less-than :initarg :object-size-less-than
                         :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-and-operator-object-size-less-than
                         :initform common-lisp:nil)
                        (object-size-greater-than :initarg
                         :object-size-greater-than :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-and-operator-object-size-greater-than
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %lifecycle-rule-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %lifecycle-rule-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-and-operator
                    'make-lifecycle-rule-and-operator))
 (common-lisp:defun make-lifecycle-rule-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-size-less-than
                     object-size-greater-than tags prefix)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or lifecycle-rule-and-operator
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter-and :initform
                         common-lisp:nil)
                        (object-size-less-than :initarg :object-size-less-than
                         :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor %lifecycle-rule-filter-object-size-less-than
                         :initform common-lisp:nil)
                        (object-size-greater-than :initarg
                         :object-size-greater-than :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         %lifecycle-rule-filter-object-size-greater-than
                         :initform common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         %lifecycle-rule-filter-tag :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %lifecycle-rule-filter-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-filter 'make-lifecycle-rule-filter))
 (common-lisp:defun make-lifecycle-rule-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and object-size-less-than
                     object-size-greater-than tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-rules ()
   '(trivial-types:proper-list lifecycle-rule))
 (common-lisp:defun |make-lifecycle-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-bucket-analytics-configurations-output
                       common-lisp:nil
                       ((analytics-configuration-list :initarg
                         :analytics-configuration-list :type
                         (common-lisp:or analytics-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-bucket-analytics-configurations-output-analytics-configuration-list
                         :initform common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bucket-analytics-configurations-output-next-continuation-token
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-analytics-configurations-output-continuation-token
                         :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         %list-bucket-analytics-configurations-output-is-truncated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-output
                    'make-list-bucket-analytics-configurations-output))
 (common-lisp:defun make-list-bucket-analytics-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analytics-configuration-list
                     next-continuation-token continuation-token is-truncated)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-analytics-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-analytics-configurations-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-bucket-analytics-configurations-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-analytics-configurations-request-continuation-token
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %list-bucket-analytics-configurations-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-request
                    'make-list-bucket-analytics-configurations-request))
 (common-lisp:defun make-list-bucket-analytics-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner continuation-token
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-analytics-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-intelligent-tiering-configurations-output
                       common-lisp:nil
                       ((intelligent-tiering-configuration-list :initarg
                         :intelligent-tiering-configuration-list :type
                         (common-lisp:or intelligent-tiering-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-bucket-intelligent-tiering-configurations-output-intelligent-tiering-configuration-list
                         :initform common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bucket-intelligent-tiering-configurations-output-next-continuation-token
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-intelligent-tiering-configurations-output-continuation-token
                         :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         %list-bucket-intelligent-tiering-configurations-output-is-truncated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-output
                    'make-list-bucket-intelligent-tiering-configurations-output))
 (common-lisp:defun make-list-bucket-intelligent-tiering-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intelligent-tiering-configuration-list
                     next-continuation-token continuation-token is-truncated)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-intelligent-tiering-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration-list))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-intelligent-tiering-configurations-request
                       common-lisp:nil
                       ((continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-intelligent-tiering-configurations-request-continuation-token
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %list-bucket-intelligent-tiering-configurations-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-request
                    'make-list-bucket-intelligent-tiering-configurations-request))
 (common-lisp:defun make-list-bucket-intelligent-tiering-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key continuation-token bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-intelligent-tiering-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-inventory-configurations-output
                       common-lisp:nil
                       ((next-continuation-token :initarg
                         :next-continuation-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bucket-inventory-configurations-output-next-continuation-token
                         :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         %list-bucket-inventory-configurations-output-is-truncated
                         :initform common-lisp:nil)
                        (inventory-configuration-list :initarg
                         :inventory-configuration-list :type
                         (common-lisp:or inventory-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-bucket-inventory-configurations-output-inventory-configuration-list
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-inventory-configurations-output-continuation-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-output
                    'make-list-bucket-inventory-configurations-output))
 (common-lisp:defun make-list-bucket-inventory-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-continuation-token is-truncated
                     inventory-configuration-list continuation-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-inventory-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration-list))
      (common-lisp:list
       (common-lisp:cons "InventoryConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-inventory-configurations-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-bucket-inventory-configurations-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-inventory-configurations-request-continuation-token
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %list-bucket-inventory-configurations-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-request
                    'make-list-bucket-inventory-configurations-request))
 (common-lisp:defun make-list-bucket-inventory-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner continuation-token
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-inventory-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-metrics-configurations-output
                       common-lisp:nil
                       ((metrics-configuration-list :initarg
                         :metrics-configuration-list :type
                         (common-lisp:or metrics-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-bucket-metrics-configurations-output-metrics-configuration-list
                         :initform common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bucket-metrics-configurations-output-next-continuation-token
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-metrics-configurations-output-continuation-token
                         :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         %list-bucket-metrics-configurations-output-is-truncated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-output
                    'make-list-bucket-metrics-configurations-output))
 (common-lisp:defun make-list-bucket-metrics-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metrics-configuration-list
                     next-continuation-token continuation-token is-truncated)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-metrics-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "MetricsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-metrics-configurations-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-bucket-metrics-configurations-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-bucket-metrics-configurations-request-continuation-token
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %list-bucket-metrics-configurations-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-request
                    'make-list-bucket-metrics-configurations-request))
 (common-lisp:defun make-list-bucket-metrics-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner continuation-token
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-metrics-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-buckets-output common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %list-buckets-output-owner :initform common-lisp:nil)
                        (buckets :initarg :buckets :type
                         (common-lisp:or buckets common-lisp:null) :accessor
                         %list-buckets-output-buckets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-buckets-output 'make-list-buckets-output))
 (common-lisp:defun make-list-buckets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner buckets)
   (common-lisp:apply #'common-lisp:make-instance 'list-buckets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-buckets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multipart-uploads-output common-lisp:nil
                       ((encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-multipart-uploads-output-encoding-type
                         :initform common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor
                         %list-multipart-uploads-output-common-prefixes
                         :initform common-lisp:nil)
                        (uploads :initarg :uploads :type
                         (common-lisp:or multipart-upload-list
                                         common-lisp:null)
                         :accessor %list-multipart-uploads-output-uploads
                         :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %list-multipart-uploads-output-is-truncated
                         :initform common-lisp:nil)
                        (max-uploads :initarg :max-uploads :type
                         (common-lisp:or max-uploads common-lisp:null)
                         :accessor %list-multipart-uploads-output-max-uploads
                         :initform common-lisp:nil)
                        (next-upload-id-marker :initarg :next-upload-id-marker
                         :type
                         (common-lisp:or next-upload-id-marker
                                         common-lisp:null)
                         :accessor
                         %list-multipart-uploads-output-next-upload-id-marker
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-multipart-uploads-output-delimiter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-multipart-uploads-output-prefix :initform
                         common-lisp:nil)
                        (next-key-marker :initarg :next-key-marker :type
                         (common-lisp:or next-key-marker common-lisp:null)
                         :accessor
                         %list-multipart-uploads-output-next-key-marker
                         :initform common-lisp:nil)
                        (upload-id-marker :initarg :upload-id-marker :type
                         (common-lisp:or upload-id-marker common-lisp:null)
                         :accessor
                         %list-multipart-uploads-output-upload-id-marker
                         :initform common-lisp:nil)
                        (key-marker :initarg :key-marker :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         %list-multipart-uploads-output-key-marker :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-multipart-uploads-output-bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-output
                    'make-list-multipart-uploads-output))
 (common-lisp:defun make-list-multipart-uploads-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoding-type common-prefixes uploads
                     is-truncated max-uploads next-upload-id-marker delimiter
                     prefix next-key-marker upload-id-marker key-marker bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multipart-uploads-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "UploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextUploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-uploads))
      (common-lisp:list
       (common-lisp:cons "MaxUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uploads))
      (common-lisp:list
       (common-lisp:cons "Uploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multipart-uploads-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-multipart-uploads-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (upload-id-marker :initarg :upload-id-marker :type
                         (common-lisp:or upload-id-marker common-lisp:null)
                         :accessor
                         %list-multipart-uploads-request-upload-id-marker
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-multipart-uploads-request-prefix :initform
                         common-lisp:nil)
                        (max-uploads :initarg :max-uploads :type
                         (common-lisp:or max-uploads common-lisp:null)
                         :accessor %list-multipart-uploads-request-max-uploads
                         :initform common-lisp:nil)
                        (key-marker :initarg :key-marker :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         %list-multipart-uploads-request-key-marker :initform
                         common-lisp:nil)
                        (encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         %list-multipart-uploads-request-encoding-type
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-multipart-uploads-request-delimiter :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-multipart-uploads-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-request
                    'make-list-multipart-uploads-request))
 (common-lisp:defun make-list-multipart-uploads-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner upload-id-marker
                     prefix max-uploads key-marker encoding-type delimiter
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multipart-uploads-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-object-versions-output common-lisp:nil
                       ((encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-object-versions-output-encoding-type
                         :initform common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor %list-object-versions-output-common-prefixes
                         :initform common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-object-versions-output-max-keys :initform
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-object-versions-output-delimiter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-object-versions-output-prefix :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-object-versions-output-name :initform
                         common-lisp:nil)
                        (delete-markers :initarg :delete-markers :type
                         (common-lisp:or delete-markers common-lisp:null)
                         :accessor %list-object-versions-output-delete-markers
                         :initform common-lisp:nil)
                        (versions :initarg :versions :type
                         (common-lisp:or object-version-list common-lisp:null)
                         :accessor %list-object-versions-output-versions
                         :initform common-lisp:nil)
                        (next-version-id-marker :initarg
                         :next-version-id-marker :type
                         (common-lisp:or next-version-id-marker
                                         common-lisp:null)
                         :accessor
                         %list-object-versions-output-next-version-id-marker
                         :initform common-lisp:nil)
                        (next-key-marker :initarg :next-key-marker :type
                         (common-lisp:or next-key-marker common-lisp:null)
                         :accessor %list-object-versions-output-next-key-marker
                         :initform common-lisp:nil)
                        (version-id-marker :initarg :version-id-marker :type
                         (common-lisp:or version-id-marker common-lisp:null)
                         :accessor
                         %list-object-versions-output-version-id-marker
                         :initform common-lisp:nil)
                        (key-marker :initarg :key-marker :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         %list-object-versions-output-key-marker :initform
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %list-object-versions-output-is-truncated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-output
                    'make-list-object-versions-output))
 (common-lisp:defun make-list-object-versions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoding-type common-prefixes max-keys
                     delimiter prefix name delete-markers versions
                     next-version-id-marker next-key-marker version-id-marker
                     key-marker is-truncated)
   (common-lisp:apply #'common-lisp:make-instance 'list-object-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id-marker))
      (common-lisp:list
       (common-lisp:cons "VersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-version-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextVersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-markers))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-object-versions-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-object-versions-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (version-id-marker :initarg :version-id-marker :type
                         (common-lisp:or version-id-marker common-lisp:null)
                         :accessor
                         %list-object-versions-request-version-id-marker
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-object-versions-request-prefix :initform
                         common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-object-versions-request-max-keys :initform
                         common-lisp:nil)
                        (key-marker :initarg :key-marker :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         %list-object-versions-request-key-marker :initform
                         common-lisp:nil)
                        (encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-object-versions-request-encoding-type
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-object-versions-request-delimiter :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-object-versions-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-request
                    'make-list-object-versions-request))
 (common-lisp:defun make-list-object-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner version-id-marker
                     prefix max-keys key-marker encoding-type delimiter bucket)
   (common-lisp:apply #'common-lisp:make-instance 'list-object-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-output common-lisp:nil
                       ((encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-objects-output-encoding-type :initform
                         common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor %list-objects-output-common-prefixes
                         :initform common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-objects-output-max-keys :initform
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-objects-output-delimiter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-objects-output-prefix :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-objects-output-name :initform
                         common-lisp:nil)
                        (contents :initarg :contents :type
                         (common-lisp:or object-list common-lisp:null)
                         :accessor %list-objects-output-contents :initform
                         common-lisp:nil)
                        (next-marker :initarg :next-marker :type
                         (common-lisp:or next-marker common-lisp:null)
                         :accessor %list-objects-output-next-marker :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %list-objects-output-marker :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %list-objects-output-is-truncated :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-objects-output 'make-list-objects-output))
 (common-lisp:defun make-list-objects-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoding-type common-prefixes max-keys
                     delimiter prefix name contents next-marker marker
                     is-truncated)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %list-objects-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %list-objects-request-request-payer
                         :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-objects-request-prefix :initform
                         common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-objects-request-max-keys :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %list-objects-request-marker :initform
                         common-lisp:nil)
                        (encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-objects-request-encoding-type
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-objects-request-delimiter :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-objects-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-objects-request 'make-list-objects-request))
 (common-lisp:defun make-list-objects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     prefix max-keys marker encoding-type delimiter bucket)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-v2output common-lisp:nil
                       ((start-after :initarg :start-after :type
                         (common-lisp:or start-after common-lisp:null)
                         :accessor %list-objects-v2output-start-after :initform
                         common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-objects-v2output-next-continuation-token
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-objects-v2output-continuation-token :initform
                         common-lisp:nil)
                        (key-count :initarg :key-count :type
                         (common-lisp:or key-count common-lisp:null) :accessor
                         %list-objects-v2output-key-count :initform
                         common-lisp:nil)
                        (encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-objects-v2output-encoding-type
                         :initform common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor %list-objects-v2output-common-prefixes
                         :initform common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-objects-v2output-max-keys :initform
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-objects-v2output-delimiter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-objects-v2output-prefix :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-objects-v2output-name :initform
                         common-lisp:nil)
                        (contents :initarg :contents :type
                         (common-lisp:or object-list common-lisp:null)
                         :accessor %list-objects-v2output-contents :initform
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %list-objects-v2output-is-truncated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2output 'make-list-objects-v2output))
 (common-lisp:defun make-list-objects-v2output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-after next-continuation-token
                     continuation-token key-count encoding-type common-prefixes
                     max-keys delimiter prefix name contents is-truncated)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-v2output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-count))
      (common-lisp:list
       (common-lisp:cons "KeyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "StartAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-v2request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-objects-v2request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %list-objects-v2request-request-payer
                         :initform common-lisp:nil)
                        (start-after :initarg :start-after :type
                         (common-lisp:or start-after common-lisp:null)
                         :accessor %list-objects-v2request-start-after
                         :initform common-lisp:nil)
                        (fetch-owner :initarg :fetch-owner :type
                         (common-lisp:or fetch-owner common-lisp:null)
                         :accessor %list-objects-v2request-fetch-owner
                         :initform common-lisp:nil)
                        (continuation-token :initarg :continuation-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-objects-v2request-continuation-token :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %list-objects-v2request-prefix :initform
                         common-lisp:nil)
                        (max-keys :initarg :max-keys :type
                         (common-lisp:or max-keys common-lisp:null) :accessor
                         %list-objects-v2request-max-keys :initform
                         common-lisp:nil)
                        (encoding-type :initarg :encoding-type :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor %list-objects-v2request-encoding-type
                         :initform common-lisp:nil)
                        (delimiter :initarg :delimiter :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         %list-objects-v2request-delimiter :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-objects-v2request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2request 'make-list-objects-v2request))
 (common-lisp:defun make-list-objects-v2request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     start-after fetch-owner continuation-token prefix max-keys
                     encoding-type delimiter bucket)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parts-output common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %list-parts-output-checksum-algorithm
                         :initform common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %list-parts-output-request-charged :initform
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %list-parts-output-storage-class :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %list-parts-output-owner :initform common-lisp:nil)
                        (initiator :initarg :initiator :type
                         (common-lisp:or initiator common-lisp:null) :accessor
                         %list-parts-output-initiator :initform
                         common-lisp:nil)
                        (parts :initarg :parts :type
                         (common-lisp:or parts common-lisp:null) :accessor
                         %list-parts-output-parts :initform common-lisp:nil)
                        (is-truncated :initarg :is-truncated :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor %list-parts-output-is-truncated :initform
                         common-lisp:nil)
                        (max-parts :initarg :max-parts :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         %list-parts-output-max-parts :initform
                         common-lisp:nil)
                        (next-part-number-marker :initarg
                         :next-part-number-marker :type
                         (common-lisp:or next-part-number-marker
                                         common-lisp:null)
                         :accessor %list-parts-output-next-part-number-marker
                         :initform common-lisp:nil)
                        (part-number-marker :initarg :part-number-marker :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor %list-parts-output-part-number-marker
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %list-parts-output-upload-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %list-parts-output-key :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-parts-output-bucket :initform
                         common-lisp:nil)
                        (abort-rule-id :initarg :abort-rule-id :type
                         (common-lisp:or abort-rule-id common-lisp:null)
                         :accessor %list-parts-output-abort-rule-id :initform
                         common-lisp:nil)
                        (abort-date :initarg :abort-date :type
                         (common-lisp:or abort-date common-lisp:null) :accessor
                         %list-parts-output-abort-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-parts-output 'make-list-parts-output))
 (common-lisp:defun make-list-parts-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm request-charged
                     storage-class owner initiator parts is-truncated max-parts
                     next-part-number-marker part-number-marker upload-id key
                     bucket abort-rule-id abort-date)
   (common-lisp:apply #'common-lisp:make-instance 'list-parts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parts-request common-lisp:nil
                       ((ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %list-parts-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %list-parts-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %list-parts-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %list-parts-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %list-parts-request-request-payer :initform
                         common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %list-parts-request-upload-id :initform
                         (common-lisp:error ":upload-id is required"))
                        (part-number-marker :initarg :part-number-marker :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor %list-parts-request-part-number-marker
                         :initform common-lisp:nil)
                        (max-parts :initarg :max-parts :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         %list-parts-request-max-parts :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %list-parts-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %list-parts-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'list-parts-request 'make-list-parts-request))
 (common-lisp:defun make-list-parts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssecustomer-key-md5 ssecustomer-key
                     ssecustomer-algorithm expected-bucket-owner request-payer
                     upload-id part-number-marker max-parts key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'list-parts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-request))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype location-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-enabled common-lisp:nil
                       ((target-prefix :initarg :target-prefix :type
                         (common-lisp:or target-prefix common-lisp:null)
                         :accessor %logging-enabled-target-prefix :initform
                         (common-lisp:error ":target-prefix is required"))
                        (target-grants :initarg :target-grants :type
                         (common-lisp:or target-grants common-lisp:null)
                         :accessor %logging-enabled-target-grants :initform
                         common-lisp:nil)
                        (target-bucket :initarg :target-bucket :type
                         (common-lisp:or target-bucket common-lisp:null)
                         :accessor %logging-enabled-target-bucket :initform
                         (common-lisp:error ":target-bucket is required"))))
 (common-lisp:export (common-lisp:list 'logging-enabled 'make-logging-enabled))
 (common-lisp:defun make-logging-enabled
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-prefix target-grants
                     target-bucket)
   (common-lisp:apply #'common-lisp:make-instance 'logging-enabled
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-grants))
      (common-lisp:list
       (common-lisp:cons "TargetGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-prefix))
      (common-lisp:list
       (common-lisp:cons "TargetPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-enabled))
   common-lisp:nil))
(common-lisp:deftype mfa () 'common-lisp:string)
(common-lisp:deftype mfadelete () 'common-lisp:string)
(common-lisp:deftype mfadelete-status () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-age-seconds () 'common-lisp:integer)
(common-lisp:deftype max-keys () 'common-lisp:integer)
(common-lisp:deftype max-parts () 'common-lisp:integer)
(common-lisp:deftype max-uploads () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-directive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-entry common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or metadata-value common-lisp:null)
                         :accessor %metadata-entry-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or metadata-key common-lisp:null)
                         :accessor %metadata-entry-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metadata-entry 'make-metadata-entry))
 (common-lisp:defun make-metadata-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-entry))
   common-lisp:nil))
(common-lisp:deftype metadata-key () 'common-lisp:string)
(common-lisp:deftype metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metrics common-lisp:nil
                       ((event-threshold :initarg :event-threshold :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor %metrics-event-threshold :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or metrics-status common-lisp:null)
                         :accessor %metrics-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defun make-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-threshold status)
   (common-lisp:apply #'common-lisp:make-instance 'metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-threshold))
      (common-lisp:list
       (common-lisp:cons "EventThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-and-operator common-lisp:nil
                       ((access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or access-point-arn common-lisp:null)
                         :accessor %metrics-and-operator-access-point-arn
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %metrics-and-operator-tags :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %metrics-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metrics-and-operator 'make-metrics-and-operator))
 (common-lisp:defun make-metrics-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point-arn tags prefix)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-configuration common-lisp:nil
                       ((filter :initarg :filter :type
                         (common-lisp:or metrics-filter common-lisp:null)
                         :accessor %metrics-configuration-filter :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         %metrics-configuration-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'metrics-configuration 'make-metrics-configuration))
 (common-lisp:defun make-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter id)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics-configuration-list ()
   '(trivial-types:proper-list metrics-configuration))
 (common-lisp:defun |make-metrics-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metrics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metrics-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or metrics-and-operator common-lisp:null)
                         :accessor %metrics-filter-and :initform
                         common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :type
                         (common-lisp:or access-point-arn common-lisp:null)
                         :accessor %metrics-filter-access-point-arn :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         %metrics-filter-tag :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %metrics-filter-prefix :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metrics-filter 'make-metrics-filter))
 (common-lisp:defun make-metrics-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and access-point-arn tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-filter))
   common-lisp:nil))
(common-lisp:deftype metrics-id () 'common-lisp:string)
(common-lisp:deftype metrics-status () 'common-lisp:string)
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:deftype missing-meta () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass multipart-upload common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %multipart-upload-checksum-algorithm
                         :initform common-lisp:nil)
                        (initiator :initarg :initiator :type
                         (common-lisp:or initiator common-lisp:null) :accessor
                         %multipart-upload-initiator :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %multipart-upload-owner :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %multipart-upload-storage-class :initform
                         common-lisp:nil)
                        (initiated :initarg :initiated :type
                         (common-lisp:or initiated common-lisp:null) :accessor
                         %multipart-upload-initiated :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %multipart-upload-key :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %multipart-upload-upload-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multipart-upload 'make-multipart-upload))
 (common-lisp:defun make-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm initiator owner
                     storage-class initiated key upload-id)
   (common-lisp:apply #'common-lisp:make-instance 'multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "Initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multipart-upload))
   common-lisp:nil))
(common-lisp:deftype multipart-upload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype multipart-upload-list ()
   '(trivial-types:proper-list multipart-upload))
 (common-lisp:defun |make-multipart-upload-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multipart-upload))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-key-marker () 'common-lisp:string)
(common-lisp:deftype next-marker () 'common-lisp:string)
(common-lisp:deftype next-part-number-marker () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype next-upload-id-marker () 'common-lisp:string)
(common-lisp:deftype next-version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-bucket
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-bucket)))
(common-lisp:progn
 (common-lisp:define-condition no-such-key
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-key)))
(common-lisp:progn
 (common-lisp:define-condition no-such-upload
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-upload)))
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-expiration common-lisp:nil
                       ((newer-noncurrent-versions :initarg
                         :newer-noncurrent-versions :type
                         (common-lisp:or version-count common-lisp:null)
                         :accessor
                         %noncurrent-version-expiration-newer-noncurrent-versions
                         :initform common-lisp:nil)
                        (noncurrent-days :initarg :noncurrent-days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %noncurrent-version-expiration-noncurrent-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-expiration
                    'make-noncurrent-version-expiration))
 (common-lisp:defun make-noncurrent-version-expiration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key newer-noncurrent-versions
                     noncurrent-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-transition common-lisp:nil
                       ((newer-noncurrent-versions :initarg
                         :newer-noncurrent-versions :type
                         (common-lisp:or version-count common-lisp:null)
                         :accessor
                         %noncurrent-version-transition-newer-noncurrent-versions
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor %noncurrent-version-transition-storage-class
                         :initform common-lisp:nil)
                        (noncurrent-days :initarg :noncurrent-days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %noncurrent-version-transition-noncurrent-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-transition
                    'make-noncurrent-version-transition))
 (common-lisp:defun make-noncurrent-version-transition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key newer-noncurrent-versions storage-class
                     noncurrent-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-transition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype noncurrent-version-transition-list ()
   '(trivial-types:proper-list noncurrent-version-transition))
 (common-lisp:defun |make-noncurrent-version-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            noncurrent-version-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((event-bridge-configuration :initarg
                         :event-bridge-configuration :type
                         (common-lisp:or event-bridge-configuration
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-event-bridge-configuration
                         :initform common-lisp:nil)
                        (lambda-function-configurations :initarg
                         :lambda-function-configurations :type
                         (common-lisp:or lambda-function-configuration-list
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-lambda-function-configurations
                         :initform common-lisp:nil)
                        (queue-configurations :initarg :queue-configurations
                         :type
                         (common-lisp:or queue-configuration-list
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-queue-configurations
                         :initform common-lisp:nil)
                        (topic-configurations :initarg :topic-configurations
                         :type
                         (common-lisp:or topic-configuration-list
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-topic-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defun make-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-bridge-configuration
                     lambda-function-configurations queue-configurations
                     topic-configurations)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations))
      (common-lisp:list
       (common-lisp:cons "TopicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'queue-configurations))
      (common-lisp:list
       (common-lisp:cons "QueueConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-configurations))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-configuration))
      (common-lisp:list
       (common-lisp:cons "EventBridgeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-configuration-deprecated common-lisp:nil
                       ((cloud-function-configuration :initarg
                         :cloud-function-configuration :type
                         (common-lisp:or cloud-function-configuration
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-deprecated-cloud-function-configuration
                         :initform common-lisp:nil)
                        (queue-configuration :initarg :queue-configuration
                         :type
                         (common-lisp:or queue-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-deprecated-queue-configuration
                         :initform common-lisp:nil)
                        (topic-configuration :initarg :topic-configuration
                         :type
                         (common-lisp:or topic-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         %notification-configuration-deprecated-topic-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-deprecated
                    'make-notification-configuration-deprecated))
 (common-lisp:defun make-notification-configuration-deprecated
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-function-configuration
                     queue-configuration topic-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'notification-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-configuration))
      (common-lisp:list
       (common-lisp:cons "TopicConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configuration))
      (common-lisp:list
       (common-lisp:cons "QueueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-function-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudFunctionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-configuration-filter common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or s3key-filter common-lisp:null)
                         :accessor %notification-configuration-filter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-filter
                    'make-notification-configuration-filter))
 (common-lisp:defun make-notification-configuration-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key)
   (common-lisp:apply #'common-lisp:make-instance
                      'notification-configuration-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   common-lisp:nil))
(common-lisp:deftype notification-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %object-owner :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or object-storage-class common-lisp:null)
                         :accessor %object-storage-class :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size common-lisp:null) :accessor
                         %object-size :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm-list
                                         common-lisp:null)
                         :accessor %object-checksum-algorithm :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %object-etag :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %object-last-modified :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %object-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'object 'make-object))
 (common-lisp:defun make-object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner storage-class size
                     checksum-algorithm etag last-modified key)
   (common-lisp:apply #'common-lisp:make-instance 'object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition object-already-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-already-in-active-tier-error)))
(common-lisp:deftype object-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-attributes-list ()
   '(trivial-types:proper-list object-attributes))
 (common-lisp:defun |make-object-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-identifier common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %object-identifier-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %object-identifier-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'object-identifier 'make-object-identifier))
 (common-lisp:defun make-object-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id key)
   (common-lisp:apply #'common-lisp:make-instance 'object-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-identifier-list ()
   '(trivial-types:proper-list object-identifier))
 (common-lisp:defun |make-object-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-list () '(trivial-types:proper-list object))
 (common-lisp:defun |make-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass object-lock-configuration common-lisp:nil
                       ((rule :initarg :rule :type
                         (common-lisp:or object-lock-rule common-lisp:null)
                         :accessor %object-lock-configuration-rule :initform
                         common-lisp:nil)
                        (object-lock-enabled :initarg :object-lock-enabled
                         :type
                         (common-lisp:or object-lock-enabled common-lisp:null)
                         :accessor
                         %object-lock-configuration-object-lock-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lock-configuration
                    'make-object-lock-configuration))
 (common-lisp:defun make-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule object-lock-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-enabled))
      (common-lisp:list
       (common-lisp:cons "ObjectLockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   common-lisp:nil))
(common-lisp:deftype object-lock-enabled () 'common-lisp:string)
(common-lisp:deftype object-lock-enabled-for-bucket () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass object-lock-legal-hold common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor %object-lock-legal-hold-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lock-legal-hold 'make-object-lock-legal-hold))
 (common-lisp:defun make-object-lock-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-legal-hold
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   common-lisp:nil))
(common-lisp:deftype object-lock-legal-hold-status () 'common-lisp:string)
(common-lisp:deftype object-lock-mode () 'common-lisp:string)
(common-lisp:deftype object-lock-retain-until-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lock-retention common-lisp:nil
                       ((retain-until-date :initarg :retain-until-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %object-lock-retention-retain-until-date :initform
                         common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or object-lock-retention-mode
                                         common-lisp:null)
                         :accessor %object-lock-retention-mode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lock-retention 'make-object-lock-retention))
 (common-lisp:defun make-object-lock-retention
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-until-date mode)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-retention
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-until-date))
      (common-lisp:list
       (common-lisp:cons "RetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   common-lisp:nil))
(common-lisp:deftype object-lock-retention-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lock-rule common-lisp:nil
                       ((default-retention :initarg :default-retention :type
                         (common-lisp:or default-retention common-lisp:null)
                         :accessor %object-lock-rule-default-retention
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'object-lock-rule 'make-object-lock-rule))
 (common-lisp:defun make-object-lock-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-retention)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-retention))
      (common-lisp:list
       (common-lisp:cons "DefaultRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-lock-rule))
   common-lisp:nil))
(common-lisp:deftype object-lock-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition object-not-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-not-in-active-tier-error)))
(common-lisp:deftype object-ownership () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-part common-lisp:nil
                       ((checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %object-part-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %object-part-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %object-part-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %object-part-checksum-crc32 :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size common-lisp:null) :accessor
                         %object-part-size :initform common-lisp:nil)
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %object-part-part-number :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'object-part 'make-object-part))
 (common-lisp:defun make-object-part
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 size part-number)
   (common-lisp:apply #'common-lisp:make-instance 'object-part
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-part))
   common-lisp:nil))
(common-lisp:deftype object-size () 'common-lisp:integer)
(common-lisp:deftype object-size-greater-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-size-less-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-version common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %object-version-owner :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %object-version-last-modified :initform
                         common-lisp:nil)
                        (is-latest :initarg :is-latest :type
                         (common-lisp:or is-latest common-lisp:null) :accessor
                         %object-version-is-latest :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %object-version-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %object-version-key :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or object-version-storage-class
                                         common-lisp:null)
                         :accessor %object-version-storage-class :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size common-lisp:null) :accessor
                         %object-version-size :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm-list
                                         common-lisp:null)
                         :accessor %object-version-checksum-algorithm :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %object-version-etag :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'object-version 'make-object-version))
 (common-lisp:defun make-object-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner last-modified is-latest version-id
                     key storage-class size checksum-algorithm etag)
   (common-lisp:apply #'common-lisp:make-instance 'object-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-version))
   common-lisp:nil))
(common-lisp:deftype object-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-version-list ()
   '(trivial-types:proper-list object-version))
 (common-lisp:defun |make-object-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-version-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-location common-lisp:nil
                       ((s3 :initarg :s3 :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %output-location-s3 :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-location 'make-output-location))
 (common-lisp:defun make-output-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3)
   (common-lisp:apply #'common-lisp:make-instance 'output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-serialization common-lisp:nil
                       ((json :initarg :json :type
                         (common-lisp:or jsonoutput common-lisp:null) :accessor
                         %output-serialization-json :initform common-lisp:nil)
                        (csv :initarg :csv :type
                         (common-lisp:or csvoutput common-lisp:null) :accessor
                         %output-serialization-csv :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-serialization 'make-output-serialization))
 (common-lisp:defun make-output-serialization
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key json csv)
   (common-lisp:apply #'common-lisp:make-instance 'output-serialization
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-serialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass owner common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %owner-id :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %owner-display-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'owner 'make-owner))
 (common-lisp:defun make-owner
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id display-name)
   (common-lisp:apply #'common-lisp:make-instance 'owner
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner))
   common-lisp:nil))
(common-lisp:deftype owner-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ownership-controls common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or ownership-controls-rules
                                         common-lisp:null)
                         :accessor %ownership-controls-rules :initform
                         (common-lisp:error ":rules is required"))))
 (common-lisp:export
  (common-lisp:list 'ownership-controls 'make-ownership-controls))
 (common-lisp:defun make-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'ownership-controls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ownership-controls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ownership-controls-rule common-lisp:nil
                       ((object-ownership :initarg :object-ownership :type
                         (common-lisp:or object-ownership common-lisp:null)
                         :accessor %ownership-controls-rule-object-ownership
                         :initform
                         (common-lisp:error ":object-ownership is required"))))
 (common-lisp:export
  (common-lisp:list 'ownership-controls-rule 'make-ownership-controls-rule))
 (common-lisp:defun make-ownership-controls-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-ownership)
   (common-lisp:apply #'common-lisp:make-instance 'ownership-controls-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:list
       (common-lisp:cons "ObjectOwnership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ownership-controls-rules ()
   '(trivial-types:proper-list ownership-controls-rule))
 (common-lisp:defun |make-ownership-controls-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ownership-controls-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parquet-input common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'parquet-input 'make-parquet-input))
 (common-lisp:defun make-parquet-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'parquet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parquet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass part common-lisp:nil
                       ((checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %part-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %part-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %part-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %part-checksum-crc32 :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or size common-lisp:null) :accessor
                         %part-size :initform common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %part-etag :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor %part-last-modified :initform
                         common-lisp:nil)
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %part-part-number :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'part 'make-part))
 (common-lisp:defun make-part
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 size etag last-modified
                     part-number)
   (common-lisp:apply #'common-lisp:make-instance 'part
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input part))
   common-lisp:nil))
(common-lisp:deftype part-number () 'common-lisp:integer)
(common-lisp:deftype part-number-marker () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parts () '(trivial-types:proper-list part))
 (common-lisp:defun |make-parts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parts-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parts-list () '(trivial-types:proper-list object-part))
 (common-lisp:defun |make-parts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype payer () 'common-lisp:string)
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-status common-lisp:nil
                       ((is-public :initarg :is-public :type
                         (common-lisp:or is-public common-lisp:null) :accessor
                         %policy-status-is-public :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-status 'make-policy-status))
 (common-lisp:defun make-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-public)
   (common-lisp:apply #'common-lisp:make-instance 'policy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "IsPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-status))
   common-lisp:nil))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass progress common-lisp:nil
                       ((bytes-returned :initarg :bytes-returned :type
                         (common-lisp:or bytes-returned common-lisp:null)
                         :accessor %progress-bytes-returned :initform
                         common-lisp:nil)
                        (bytes-processed :initarg :bytes-processed :type
                         (common-lisp:or bytes-processed common-lisp:null)
                         :accessor %progress-bytes-processed :initform
                         common-lisp:nil)
                        (bytes-scanned :initarg :bytes-scanned :type
                         (common-lisp:or bytes-scanned common-lisp:null)
                         :accessor %progress-bytes-scanned :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'progress 'make-progress))
 (common-lisp:defun make-progress
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bytes-returned bytes-processed
                     bytes-scanned)
   (common-lisp:apply #'common-lisp:make-instance 'progress
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass progress-event common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or progress common-lisp:null) :accessor
                         %progress-event-details :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'progress-event 'make-progress-event))
 (common-lisp:defun make-progress-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'progress-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-event))
   common-lisp:nil))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass public-access-block-configuration common-lisp:nil
                       ((restrict-public-buckets :initarg
                         :restrict-public-buckets :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-restrict-public-buckets
                         :initform common-lisp:nil)
                        (block-public-policy :initarg :block-public-policy
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         %public-access-block-configuration-block-public-policy
                         :initform common-lisp:nil)
                        (ignore-public-acls :initarg :ignore-public-acls :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-ignore-public-acls
                         :initform common-lisp:nil)
                        (block-public-acls :initarg :block-public-acls :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         %public-access-block-configuration-block-public-acls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'public-access-block-configuration
                    'make-public-access-block-configuration))
 (common-lisp:defun make-public-access-block-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrict-public-buckets
                     block-public-policy ignore-public-acls block-public-acls)
   (common-lisp:apply #'common-lisp:make-instance
                      'public-access-block-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bucket-accelerate-configuration-request
                       common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-accelerate-configuration-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-accelerate-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (accelerate-configuration :initarg
                         :accelerate-configuration :type
                         (common-lisp:or accelerate-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-accelerate-configuration-request-accelerate-configuration
                         :initform
                         (common-lisp:error
                          ":accelerate-configuration is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-accelerate-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-accelerate-configuration-request
                    'make-put-bucket-accelerate-configuration-request))
 (common-lisp:defun make-put-bucket-accelerate-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm expected-bucket-owner
                     accelerate-configuration bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-accelerate-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerate-configuration))
      (common-lisp:list
       (common-lisp:cons "AccelerateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("AccelerateConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-acl-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-acl-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %put-bucket-acl-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-write :initarg :grant-write :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor %put-bucket-acl-request-grant-write
                         :initform common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %put-bucket-acl-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %put-bucket-acl-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %put-bucket-acl-request-grant-full-control
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %put-bucket-acl-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-acl-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-acl-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (access-control-policy :initarg :access-control-policy
                         :type
                         (common-lisp:or access-control-policy
                                         common-lisp:null)
                         :accessor
                         %put-bucket-acl-request-access-control-policy
                         :initform common-lisp:nil)
                        (acl :initarg :acl :type
                         (common-lisp:or bucket-canned-acl common-lisp:null)
                         :accessor %put-bucket-acl-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-acl-request 'make-put-bucket-acl-request))
 (common-lisp:defun make-put-bucket-acl-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner grant-write-acp
                     grant-write grant-read-acp grant-read grant-full-control
                     checksum-algorithm content-md5 bucket
                     access-control-policy acl)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("AccessControlPolicy" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-analytics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (analytics-configuration :initarg
                         :analytics-configuration :type
                         (common-lisp:or analytics-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-analytics-configuration-request-analytics-configuration
                         :initform
                         (common-lisp:error
                          ":analytics-configuration is required"))
                        (id :initarg :id :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         %put-bucket-analytics-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-analytics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-analytics-configuration-request
                    'make-put-bucket-analytics-configuration-request))
 (common-lisp:defun make-put-bucket-analytics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     analytics-configuration id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("AnalyticsConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-cors-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-cors-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %put-bucket-cors-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-cors-request-content-md5
                         :initform common-lisp:nil)
                        (corsconfiguration :initarg :corsconfiguration :type
                         (common-lisp:or corsconfiguration common-lisp:null)
                         :accessor %put-bucket-cors-request-corsconfiguration
                         :initform
                         (common-lisp:error ":corsconfiguration is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-cors-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-cors-request 'make-put-bucket-cors-request))
 (common-lisp:defun make-put-bucket-cors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     content-md5 corsconfiguration bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsconfiguration))
      (common-lisp:list
       (common-lisp:cons "CORSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CORSConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-encryption-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-encryption-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-encryption-request-server-side-encryption-configuration
                         :initform
                         (common-lisp:error
                          ":server-side-encryption-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-encryption-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-encryption-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-encryption-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-encryption-request
                    'make-put-bucket-encryption-request))
 (common-lisp:defun make-put-bucket-encryption-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     server-side-encryption-configuration checksum-algorithm
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ServerSideEncryptionConfiguration"
                              common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((intelligent-tiering-configuration :initarg
                         :intelligent-tiering-configuration :type
                         (common-lisp:or intelligent-tiering-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-intelligent-tiering-configuration-request-intelligent-tiering-configuration
                         :initform
                         (common-lisp:error
                          ":intelligent-tiering-configuration is required"))
                        (id :initarg :id :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         %put-bucket-intelligent-tiering-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-intelligent-tiering-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-intelligent-tiering-configuration-request
                    'make-put-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defun make-put-bucket-intelligent-tiering-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intelligent-tiering-configuration id
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("IntelligentTieringConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-inventory-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (inventory-configuration :initarg
                         :inventory-configuration :type
                         (common-lisp:or inventory-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-inventory-configuration-request-inventory-configuration
                         :initform
                         (common-lisp:error
                          ":inventory-configuration is required"))
                        (id :initarg :id :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         %put-bucket-inventory-configuration-request-id
                         :initform (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-inventory-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-inventory-configuration-request
                    'make-put-bucket-inventory-configuration-request))
 (common-lisp:defun make-put-bucket-inventory-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     inventory-configuration id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("InventoryConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :type
                         (common-lisp:or bucket-lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-lifecycle-configuration
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-configuration-request
                    'make-put-bucket-lifecycle-configuration-request))
 (common-lisp:defun make-put-bucket-lifecycle-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     lifecycle-configuration checksum-algorithm bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("LifecycleConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-lifecycle-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :type
                         (common-lisp:or lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-request-lifecycle-configuration
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-lifecycle-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-lifecycle-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-lifecycle-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-request
                    'make-put-bucket-lifecycle-request))
 (common-lisp:defun make-put-bucket-lifecycle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     lifecycle-configuration checksum-algorithm content-md5
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("LifecycleConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-logging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-logging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-logging-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-logging-request-content-md5
                         :initform common-lisp:nil)
                        (bucket-logging-status :initarg :bucket-logging-status
                         :type
                         (common-lisp:or bucket-logging-status
                                         common-lisp:null)
                         :accessor
                         %put-bucket-logging-request-bucket-logging-status
                         :initform
                         (common-lisp:error
                          ":bucket-logging-status is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-logging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-logging-request
                    'make-put-bucket-logging-request))
 (common-lisp:defun make-put-bucket-logging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     content-md5 bucket-logging-status bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-logging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-logging-status))
      (common-lisp:list
       (common-lisp:cons "BucketLoggingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("BucketLoggingStatus" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-metrics-configuration-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-metrics-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (metrics-configuration :initarg :metrics-configuration
                         :type
                         (common-lisp:or metrics-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-metrics-configuration-request-metrics-configuration
                         :initform
                         (common-lisp:error
                          ":metrics-configuration is required"))
                        (id :initarg :id :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         %put-bucket-metrics-configuration-request-id :initform
                         (common-lisp:error ":id is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-metrics-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-metrics-configuration-request
                    'make-put-bucket-metrics-configuration-request))
 (common-lisp:defun make-put-bucket-metrics-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     metrics-configuration id bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("MetricsConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-notification-configuration-request
                       common-lisp:nil
                       ((skip-destination-validation :initarg
                         :skip-destination-validation :type
                         (common-lisp:or skip-validation common-lisp:null)
                         :accessor
                         %put-bucket-notification-configuration-request-skip-destination-validation
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-notification-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-notification-configuration-request-notification-configuration
                         :initform
                         (common-lisp:error
                          ":notification-configuration is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-notification-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-configuration-request
                    'make-put-bucket-notification-configuration-request))
 (common-lisp:defun make-put-bucket-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key skip-destination-validation
                     expected-bucket-owner notification-configuration bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skip-destination-validation))
      (common-lisp:cons "x-amz-skip-destination-validation"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("NotificationConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-notification-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-notification-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (notification-configuration :initarg
                         :notification-configuration :type
                         (common-lisp:or notification-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         %put-bucket-notification-request-notification-configuration
                         :initform
                         (common-lisp:error
                          ":notification-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-notification-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-notification-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-notification-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-request
                    'make-put-bucket-notification-request))
 (common-lisp:defun make-put-bucket-notification-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     notification-configuration checksum-algorithm content-md5
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("NotificationConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-ownership-controls-request common-lisp:nil
                       ((ownership-controls :initarg :ownership-controls :type
                         (common-lisp:or ownership-controls common-lisp:null)
                         :accessor
                         %put-bucket-ownership-controls-request-ownership-controls
                         :initform
                         (common-lisp:error ":ownership-controls is required"))
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-ownership-controls-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         %put-bucket-ownership-controls-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-bucket-ownership-controls-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-ownership-controls-request
                    'make-put-bucket-ownership-controls-request))
 (common-lisp:defun make-put-bucket-ownership-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ownership-controls expected-bucket-owner
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("OwnershipControls" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-policy-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-policy-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-bucket-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (confirm-remove-self-bucket-access :initarg
                         :confirm-remove-self-bucket-access :type
                         (common-lisp:or confirm-remove-self-bucket-access
                                         common-lisp:null)
                         :accessor
                         %put-bucket-policy-request-confirm-remove-self-bucket-access
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-policy-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-policy-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-policy-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-policy-request
                    'make-put-bucket-policy-request))
 (common-lisp:defun make-put-bucket-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner policy
                     confirm-remove-self-bucket-access checksum-algorithm
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirm-remove-self-bucket-access))
      (common-lisp:cons "x-amz-confirm-remove-self-bucket-access"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Policy" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-replication-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-replication-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (token :initarg :token :type
                         (common-lisp:or object-lock-token common-lisp:null)
                         :accessor %put-bucket-replication-request-token
                         :initform common-lisp:nil)
                        (replication-configuration :initarg
                         :replication-configuration :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-replication-request-replication-configuration
                         :initform
                         (common-lisp:error
                          ":replication-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-replication-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-replication-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-replication-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-replication-request
                    'make-put-bucket-replication-request))
 (common-lisp:defun make-put-bucket-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner token
                     replication-configuration checksum-algorithm content-md5
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ReplicationConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-request-payment-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-request-payment-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payment-configuration :initarg
                         :request-payment-configuration :type
                         (common-lisp:or request-payment-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-request-payment-request-request-payment-configuration
                         :initform
                         (common-lisp:error
                          ":request-payment-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-request-payment-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         %put-bucket-request-payment-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-request-payment-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-request-payment-request
                    'make-put-bucket-request-payment-request))
 (common-lisp:defun make-put-bucket-request-payment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     request-payment-configuration checksum-algorithm
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-request-payment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-payment-configuration))
      (common-lisp:list
       (common-lisp:cons "RequestPaymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("RequestPaymentConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-tagging-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         %put-bucket-tagging-request-tagging :initform
                         (common-lisp:error ":tagging is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-tagging-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-tagging-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-tagging-request
                    'make-put-bucket-tagging-request))
 (common-lisp:defun make-put-bucket-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner tagging
                     checksum-algorithm content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Tagging" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-versioning-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-versioning-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (versioning-configuration :initarg
                         :versioning-configuration :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-versioning-request-versioning-configuration
                         :initform
                         (common-lisp:error
                          ":versioning-configuration is required"))
                        (mfa :initarg :mfa :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         %put-bucket-versioning-request-mfa :initform
                         common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-versioning-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-versioning-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-versioning-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-versioning-request
                    'make-put-bucket-versioning-request))
 (common-lisp:defun make-put-bucket-versioning-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     versioning-configuration mfa checksum-algorithm
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "VersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("VersioningConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-bucket-website-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-bucket-website-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (website-configuration :initarg :website-configuration
                         :type
                         (common-lisp:or website-configuration
                                         common-lisp:null)
                         :accessor
                         %put-bucket-website-request-website-configuration
                         :initform
                         (common-lisp:error
                          ":website-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-bucket-website-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-bucket-website-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-bucket-website-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bucket-website-request
                    'make-put-bucket-website-request))
 (common-lisp:defun make-put-bucket-website-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     website-configuration checksum-algorithm content-md5
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-configuration))
      (common-lisp:list
       (common-lisp:cons "WebsiteConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("WebsiteConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-acl-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %put-object-acl-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-output 'make-put-object-acl-output))
 (common-lisp:defun make-put-object-acl-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-acl-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-object-acl-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-acl-request-version-id :initform
                         common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %put-object-acl-request-request-payer
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %put-object-acl-request-key :initform
                         (common-lisp:error ":key is required"))
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %put-object-acl-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-write :initarg :grant-write :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor %put-object-acl-request-grant-write
                         :initform common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %put-object-acl-request-grant-read-acp
                         :initform common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %put-object-acl-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %put-object-acl-request-grant-full-control
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %put-object-acl-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-object-acl-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-object-acl-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (access-control-policy :initarg :access-control-policy
                         :type
                         (common-lisp:or access-control-policy
                                         common-lisp:null)
                         :accessor
                         %put-object-acl-request-access-control-policy
                         :initform common-lisp:nil)
                        (acl :initarg :acl :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor %put-object-acl-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-request 'make-put-object-acl-request))
 (common-lisp:defun make-put-object-acl-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner version-id
                     request-payer key grant-write-acp grant-write
                     grant-read-acp grant-read grant-full-control
                     checksum-algorithm content-md5 bucket
                     access-control-policy acl)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("AccessControlPolicy" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-legal-hold-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %put-object-legal-hold-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-output
                    'make-put-object-legal-hold-output))
 (common-lisp:defun make-put-object-legal-hold-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-legal-hold-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-object-legal-hold-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-object-legal-hold-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-object-legal-hold-request-content-md5
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-legal-hold-request-version-id
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %put-object-legal-hold-request-request-payer
                         :initform common-lisp:nil)
                        (legal-hold :initarg :legal-hold :type
                         (common-lisp:or object-lock-legal-hold
                                         common-lisp:null)
                         :accessor %put-object-legal-hold-request-legal-hold
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %put-object-legal-hold-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-object-legal-hold-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-request
                    'make-put-object-legal-hold-request))
 (common-lisp:defun make-put-object-legal-hold-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     content-md5 version-id request-payer legal-hold key
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-legal-hold-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("LegalHold" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-lock-configuration-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-output
                    'make-put-object-lock-configuration-output))
 (common-lisp:defun make-put-object-lock-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-lock-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-lock-configuration-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-content-md5
                         :initform common-lisp:nil)
                        (token :initarg :token :type
                         (common-lisp:or object-lock-token common-lisp:null)
                         :accessor %put-object-lock-configuration-request-token
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-request-payer
                         :initform common-lisp:nil)
                        (object-lock-configuration :initarg
                         :object-lock-configuration :type
                         (common-lisp:or object-lock-configuration
                                         common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-object-lock-configuration
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %put-object-lock-configuration-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-request
                    'make-put-object-lock-configuration-request))
 (common-lisp:defun make-put-object-lock-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     content-md5 token request-payer object-lock-configuration
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-lock-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("ObjectLockConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %put-object-output-request-charged :initform
                         common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %put-object-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor %put-object-output-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %put-object-output-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %put-object-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %put-object-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-output-version-id :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %put-object-output-server-side-encryption
                         :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %put-object-output-checksum-sha256 :initform
                         common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %put-object-output-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %put-object-output-checksum-crc32c :initform
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %put-object-output-checksum-crc32 :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %put-object-output-etag :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %put-object-output-expiration :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-output 'make-put-object-output))
 (common-lisp:defun make-put-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged bucket-key-enabled
                     ssekmsencryption-context ssekmskey-id ssecustomer-key-md5
                     ssecustomer-algorithm version-id server-side-encryption
                     checksum-sha256 checksum-sha1 checksum-crc32c
                     checksum-crc32 etag expiration)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %put-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %put-object-request-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %put-object-request-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor %put-object-request-object-lock-mode
                         :initform common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging-header common-lisp:null)
                         :accessor %put-object-request-tagging :initform
                         common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %put-object-request-request-payer :initform
                         common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %put-object-request-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor %put-object-request-ssekmsencryption-context
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %put-object-request-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %put-object-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %put-object-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %put-object-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (website-redirect-location :initarg
                         :website-redirect-location :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         %put-object-request-website-redirect-location
                         :initform common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %put-object-request-storage-class :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %put-object-request-server-side-encryption
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %put-object-request-metadata :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %put-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (grant-write-acp :initarg :grant-write-acp :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor %put-object-request-grant-write-acp
                         :initform common-lisp:nil)
                        (grant-read-acp :initarg :grant-read-acp :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor %put-object-request-grant-read-acp :initform
                         common-lisp:nil)
                        (grant-read :initarg :grant-read :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         %put-object-request-grant-read :initform
                         common-lisp:nil)
                        (grant-full-control :initarg :grant-full-control :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor %put-object-request-grant-full-control
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %put-object-request-expires :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %put-object-request-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %put-object-request-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %put-object-request-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %put-object-request-checksum-crc32 :initform
                         common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %put-object-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %put-object-request-content-type :initform
                         common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-object-request-content-md5 :initform
                         common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor %put-object-request-content-length :initform
                         common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor %put-object-request-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor %put-object-request-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor %put-object-request-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor %put-object-request-cache-control :initform
                         common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (body :initarg :body :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor %put-object-request-body :initform
                         common-lisp:nil)
                        (acl :initarg :acl :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor %put-object-request-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-request 'make-put-object-request))
 (common-lisp:defun make-put-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     object-lock-legal-hold-status
                     object-lock-retain-until-date object-lock-mode tagging
                     request-payer bucket-key-enabled ssekmsencryption-context
                     ssekmskey-id ssecustomer-key-md5 ssecustomer-key
                     ssecustomer-algorithm website-redirect-location
                     storage-class server-side-encryption metadata key
                     grant-write-acp grant-read-acp grant-read
                     grant-full-control expires checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 checksum-algorithm
                     content-type content-md5 content-length content-language
                     content-encoding content-disposition cache-control bucket
                     body acl)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Body" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-retention-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %put-object-retention-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-output
                    'make-put-object-retention-output))
 (common-lisp:defun make-put-object-retention-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-retention-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-retention-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-object-retention-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-object-retention-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-object-retention-request-content-md5
                         :initform common-lisp:nil)
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         %put-object-retention-request-bypass-governance-retention
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-retention-request-version-id
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %put-object-retention-request-request-payer
                         :initform common-lisp:nil)
                        (retention :initarg :retention :type
                         (common-lisp:or object-lock-retention
                                         common-lisp:null)
                         :accessor %put-object-retention-request-retention
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %put-object-retention-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-object-retention-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-request
                    'make-put-object-retention-request))
 (common-lisp:defun make-put-object-retention-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     content-md5 bypass-governance-retention version-id
                     request-payer retention key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-retention-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Retention" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-object-tagging-output common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-tagging-output-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-output
                    'make-put-object-tagging-output))
 (common-lisp:defun make-put-object-tagging-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-tagging-request common-lisp:nil
                       ((request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %put-object-tagging-request-request-payer
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-object-tagging-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         %put-object-tagging-request-tagging :initform
                         (common-lisp:error ":tagging is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-object-tagging-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-object-tagging-request-content-md5
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %put-object-tagging-request-version-id
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %put-object-tagging-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-object-tagging-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-request
                    'make-put-object-tagging-request))
 (common-lisp:defun make-put-object-tagging-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-payer expected-bucket-owner
                     tagging checksum-algorithm content-md5 version-id key
                     bucket)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Tagging" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass put-public-access-block-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %put-public-access-block-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %put-public-access-block-request-public-access-block-configuration
                         :initform
                         (common-lisp:error
                          ":public-access-block-configuration is required"))
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-public-access-block-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %put-public-access-block-request-content-md5
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %put-public-access-block-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'put-public-access-block-request
                    'make-put-public-access-block-request))
 (common-lisp:defun make-put-public-access-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner
                     public-access-block-configuration checksum-algorithm
                     content-md5 bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("PublicAccessBlockConfiguration" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:deftype queue-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass queue-configuration common-lisp:nil
                       ((filter :initarg :filter :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor %queue-configuration-filter :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %queue-configuration-events :initform
                         (common-lisp:error ":events is required"))
                        (queue-arn :initarg :queue-arn :type
                         (common-lisp:or queue-arn common-lisp:null) :accessor
                         %queue-configuration-queue-arn :initform
                         (common-lisp:error ":queue-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %queue-configuration-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'queue-configuration 'make-queue-configuration))
 (common-lisp:defun make-queue-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter events queue-arn id)
   (common-lisp:apply #'common-lisp:make-instance 'queue-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass queue-configuration-deprecated common-lisp:nil
                       ((queue :initarg :queue :type
                         (common-lisp:or queue-arn common-lisp:null) :accessor
                         %queue-configuration-deprecated-queue :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %queue-configuration-deprecated-events :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %queue-configuration-deprecated-event :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %queue-configuration-deprecated-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'queue-configuration-deprecated
                    'make-queue-configuration-deprecated))
 (common-lisp:defun make-queue-configuration-deprecated
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue events event id)
   (common-lisp:apply #'common-lisp:make-instance
                      'queue-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-configuration-list ()
   '(trivial-types:proper-list queue-configuration))
 (common-lisp:defun |make-queue-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quiet () 'common-lisp:boolean)
(common-lisp:deftype quote-character () 'common-lisp:string)
(common-lisp:deftype quote-escape-character () 'common-lisp:string)
(common-lisp:deftype quote-fields () 'common-lisp:string)
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:deftype record-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass records-event common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or body common-lisp:null) :accessor
                         %records-event-payload :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'records-event 'make-records-event))
 (common-lisp:defun make-records-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload)
   (common-lisp:apply #'common-lisp:make-instance 'records-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input records-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redirect common-lisp:nil
                       ((replace-key-with :initarg :replace-key-with :type
                         (common-lisp:or replace-key-with common-lisp:null)
                         :accessor %redirect-replace-key-with :initform
                         common-lisp:nil)
                        (replace-key-prefix-with :initarg
                         :replace-key-prefix-with :type
                         (common-lisp:or replace-key-prefix-with
                                         common-lisp:null)
                         :accessor %redirect-replace-key-prefix-with :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %redirect-protocol :initform common-lisp:nil)
                        (http-redirect-code :initarg :http-redirect-code :type
                         (common-lisp:or http-redirect-code common-lisp:null)
                         :accessor %redirect-http-redirect-code :initform
                         common-lisp:nil)
                        (host-name :initarg :host-name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %redirect-host-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'redirect 'make-redirect))
 (common-lisp:defun make-redirect
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replace-key-with replace-key-prefix-with
                     protocol http-redirect-code host-name)
   (common-lisp:apply #'common-lisp:make-instance 'redirect
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-redirect-code))
      (common-lisp:list
       (common-lisp:cons "HttpRedirectCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-key-prefix-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyPrefixWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-key-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redirect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redirect-all-requests-to common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %redirect-all-requests-to-protocol :initform
                         common-lisp:nil)
                        (host-name :initarg :host-name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %redirect-all-requests-to-host-name :initform
                         (common-lisp:error ":host-name is required"))))
 (common-lisp:export
  (common-lisp:list 'redirect-all-requests-to 'make-redirect-all-requests-to))
 (common-lisp:defun make-redirect-all-requests-to
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol host-name)
   (common-lisp:apply #'common-lisp:make-instance 'redirect-all-requests-to
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   common-lisp:nil))
(common-lisp:deftype replace-key-prefix-with () 'common-lisp:string)
(common-lisp:deftype replace-key-with () 'common-lisp:string)
(common-lisp:deftype replica-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replica-modifications common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or replica-modifications-status
                                         common-lisp:null)
                         :accessor %replica-modifications-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'replica-modifications 'make-replica-modifications))
 (common-lisp:defun make-replica-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'replica-modifications
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   common-lisp:nil))
(common-lisp:deftype replica-modifications-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or replication-rules common-lisp:null)
                         :accessor %replication-configuration-rules :initform
                         (common-lisp:error ":rules is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %replication-configuration-role :initform
                         (common-lisp:error ":role is required"))))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defun make-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules role)
   (common-lisp:apply #'common-lisp:make-instance 'replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule common-lisp:nil
                       ((delete-marker-replication :initarg
                         :delete-marker-replication :type
                         (common-lisp:or delete-marker-replication
                                         common-lisp:null)
                         :accessor %replication-rule-delete-marker-replication
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor %replication-rule-destination :initform
                         (common-lisp:error ":destination is required"))
                        (existing-object-replication :initarg
                         :existing-object-replication :type
                         (common-lisp:or existing-object-replication
                                         common-lisp:null)
                         :accessor
                         %replication-rule-existing-object-replication
                         :initform common-lisp:nil)
                        (source-selection-criteria :initarg
                         :source-selection-criteria :type
                         (common-lisp:or source-selection-criteria
                                         common-lisp:null)
                         :accessor %replication-rule-source-selection-criteria
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or replication-rule-status
                                         common-lisp:null)
                         :accessor %replication-rule-status :initform
                         (common-lisp:error ":status is required"))
                        (filter :initarg :filter :type
                         (common-lisp:or replication-rule-filter
                                         common-lisp:null)
                         :accessor %replication-rule-filter :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-prefix :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         %replication-rule-priority :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %replication-rule-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defun make-replication-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key delete-marker-replication destination
                     existing-object-replication source-selection-criteria
                     status filter prefix priority id)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SourceSelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-object-replication))
      (common-lisp:list
       (common-lisp:cons "ExistingObjectReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-replication))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-and-operator common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %replication-rule-and-operator-tags :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-and-operator-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-and-operator
                    'make-replication-rule-and-operator))
 (common-lisp:defun make-replication-rule-and-operator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-filter common-lisp:nil
                       ((and :initarg :and :type
                         (common-lisp:or replication-rule-and-operator
                                         common-lisp:null)
                         :accessor %replication-rule-filter-and :initform
                         common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         %replication-rule-filter-tag :initform
                         common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %replication-rule-filter-prefix :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-filter 'make-replication-rule-filter))
 (common-lisp:defun make-replication-rule-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key and tag prefix)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   common-lisp:nil))
(common-lisp:deftype replication-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-rules ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun |make-replication-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time common-lisp:nil
                       ((time :initarg :time :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor %replication-time-time :initform
                         (common-lisp:error ":time is required"))
                        (status :initarg :status :type
                         (common-lisp:or replication-time-status
                                         common-lisp:null)
                         :accessor %replication-time-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'replication-time 'make-replication-time))
 (common-lisp:defun make-replication-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time status)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-time))
   common-lisp:nil))
(common-lisp:deftype replication-time-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time-value common-lisp:nil
                       ((minutes :initarg :minutes :type
                         (common-lisp:or minutes common-lisp:null) :accessor
                         %replication-time-value-minutes :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-time-value 'make-replication-time-value))
 (common-lisp:defun make-replication-time-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minutes)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   common-lisp:nil))
(common-lisp:deftype request-charged () 'common-lisp:string)
(common-lisp:deftype request-payer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass request-payment-configuration common-lisp:nil
                       ((payer :initarg :payer :type
                         (common-lisp:or payer common-lisp:null) :accessor
                         %request-payment-configuration-payer :initform
                         (common-lisp:error ":payer is required"))))
 (common-lisp:export
  (common-lisp:list 'request-payment-configuration
                    'make-request-payment-configuration))
 (common-lisp:defun make-request-payment-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payer)
   (common-lisp:apply #'common-lisp:make-instance
                      'request-payment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-progress common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or enable-request-progress
                                         common-lisp:null)
                         :accessor %request-progress-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'request-progress 'make-request-progress))
 (common-lisp:defun make-request-progress
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'request-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-progress))
   common-lisp:nil))
(common-lisp:deftype request-route () 'common-lisp:string)
(common-lisp:deftype request-token () 'common-lisp:string)
(common-lisp:deftype response-cache-control () 'common-lisp:string)
(common-lisp:deftype response-content-disposition () 'common-lisp:string)
(common-lisp:deftype response-content-encoding () 'common-lisp:string)
(common-lisp:deftype response-content-language () 'common-lisp:string)
(common-lisp:deftype response-content-type () 'common-lisp:string)
(common-lisp:deftype response-expires () 'common-lisp:string)
(common-lisp:deftype restore () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-object-output common-lisp:nil
                       ((restore-output-path :initarg :restore-output-path
                         :type
                         (common-lisp:or restore-output-path common-lisp:null)
                         :accessor %restore-object-output-restore-output-path
                         :initform common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %restore-object-output-request-charged
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-object-output 'make-restore-object-output))
 (common-lisp:defun make-restore-object-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-output-path request-charged)
   (common-lisp:apply #'common-lisp:make-instance 'restore-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-output-path))
      (common-lisp:cons "x-amz-restore-output-path"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-object-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %restore-object-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %restore-object-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %restore-object-request-request-payer
                         :initform common-lisp:nil)
                        (restore-request :initarg :restore-request :type
                         (common-lisp:or restore-request common-lisp:null)
                         :accessor %restore-object-request-restore-request
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor %restore-object-request-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %restore-object-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %restore-object-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-object-request 'make-restore-object-request))
 (common-lisp:defun make-restore-object-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner checksum-algorithm
                     request-payer restore-request version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 'restore-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-request))
      (common-lisp:list
       (common-lisp:cons "RestoreRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("RestoreRequest" common-lisp:nil
                              "http://s3.amazonaws.com/doc/2006-03-01/")
         common-lisp:nil)))))
(common-lisp:deftype restore-output-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-request common-lisp:nil
                       ((output-location :initarg :output-location :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor %restore-request-output-location :initform
                         common-lisp:nil)
                        (select-parameters :initarg :select-parameters :type
                         (common-lisp:or select-parameters common-lisp:null)
                         :accessor %restore-request-select-parameters :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %restore-request-description :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %restore-request-tier :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or restore-request-type common-lisp:null)
                         :accessor %restore-request-type :initform
                         common-lisp:nil)
                        (glacier-job-parameters :initarg
                         :glacier-job-parameters :type
                         (common-lisp:or glacier-job-parameters
                                         common-lisp:null)
                         :accessor %restore-request-glacier-job-parameters
                         :initform common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %restore-request-days :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'restore-request 'make-restore-request))
 (common-lisp:defun make-restore-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-location select-parameters
                     description tier type glacier-job-parameters days)
   (common-lisp:apply #'common-lisp:make-instance 'restore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glacier-job-parameters))
      (common-lisp:list
       (common-lisp:cons "GlacierJobParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-parameters))
      (common-lisp:list
       (common-lisp:cons "SelectParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-request))
   common-lisp:nil))
(common-lisp:deftype restore-request-type () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass routing-rule common-lisp:nil
                       ((redirect :initarg :redirect :type
                         (common-lisp:or redirect common-lisp:null) :accessor
                         %routing-rule-redirect :initform
                         (common-lisp:error ":redirect is required"))
                        (condition :initarg :condition :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         %routing-rule-condition :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'routing-rule 'make-routing-rule))
 (common-lisp:defun make-routing-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key redirect condition)
   (common-lisp:apply #'common-lisp:make-instance 'routing-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect))
      (common-lisp:list
       (common-lisp:cons "Redirect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-rules ()
   '(trivial-types:proper-list routing-rule))
 (common-lisp:defun |make-routing-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((abort-incomplete-multipart-upload :initarg
                         :abort-incomplete-multipart-upload :type
                         (common-lisp:or abort-incomplete-multipart-upload
                                         common-lisp:null)
                         :accessor %rule-abort-incomplete-multipart-upload
                         :initform common-lisp:nil)
                        (noncurrent-version-expiration :initarg
                         :noncurrent-version-expiration :type
                         (common-lisp:or noncurrent-version-expiration
                                         common-lisp:null)
                         :accessor %rule-noncurrent-version-expiration
                         :initform common-lisp:nil)
                        (noncurrent-version-transition :initarg
                         :noncurrent-version-transition :type
                         (common-lisp:or noncurrent-version-transition
                                         common-lisp:null)
                         :accessor %rule-noncurrent-version-transition
                         :initform common-lisp:nil)
                        (transition :initarg :transition :type
                         (common-lisp:or transition common-lisp:null) :accessor
                         %rule-transition :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or expiration-status common-lisp:null)
                         :accessor %rule-status :initform
                         (common-lisp:error ":status is required"))
                        (prefix :initarg :prefix :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         %rule-prefix :initform
                         (common-lisp:error ":prefix is required"))
                        (id :initarg :id :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %rule-id :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or lifecycle-expiration common-lisp:null)
                         :accessor %rule-expiration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defun make-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key abort-incomplete-multipart-upload
                     noncurrent-version-expiration
                     noncurrent-version-transition transition status prefix id
                     expiration)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition))
      (common-lisp:list
       (common-lisp:cons "Transition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transition))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3key-filter common-lisp:nil
                       ((filter-rules :initarg :filter-rules :type
                         (common-lisp:or filter-rule-list common-lisp:null)
                         :accessor %s3key-filter-filter-rules :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3key-filter 'make-s3key-filter))
 (common-lisp:defun make-s3key-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-rules)
   (common-lisp:apply #'common-lisp:make-instance 's3key-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rules))
      (common-lisp:list
       (common-lisp:cons "FilterRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor %s3location-storage-class :initform
                         common-lisp:nil)
                        (user-metadata :initarg :user-metadata :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor %s3location-user-metadata :initform
                         common-lisp:nil)
                        (tagging :initarg :tagging :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         %s3location-tagging :initform common-lisp:nil)
                        (access-control-list :initarg :access-control-list
                         :type (common-lisp:or grants common-lisp:null)
                         :accessor %s3location-access-control-list :initform
                         common-lisp:nil)
                        (canned-acl :initarg :canned-acl :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor %s3location-canned-acl :initform
                         common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %s3location-encryption :initform common-lisp:nil)
                        (prefix :initarg :prefix :type
                         (common-lisp:or location-prefix common-lisp:null)
                         :accessor %s3location-prefix :initform
                         (common-lisp:error ":prefix is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %s3location-bucket-name :initform
                         (common-lisp:error ":bucket-name is required"))))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class user-metadata tagging
                     access-control-list canned-acl encryption prefix
                     bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssekms common-lisp:nil
                       ((key-id :initarg :key-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %ssekms-key-id :initform
                         (common-lisp:error ":key-id is required"))))
 (common-lisp:export (common-lisp:list 'ssekms 'make-ssekms))
 (common-lisp:defun make-ssekms
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-id)
   (common-lisp:apply #'common-lisp:make-instance 'ssekms
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekms))
   common-lisp:nil))
(common-lisp:deftype ssekmsencryption-context () 'common-lisp:string)
(common-lisp:deftype ssekmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sses3 common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'sses3 'make-sses3))
 (common-lisp:defun make-sses3
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'sses3
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-range common-lisp:nil
                       ((end :initarg :end :type
                         (common-lisp:or end common-lisp:null) :accessor
                         %scan-range-end :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or start common-lisp:null) :accessor
                         %scan-range-start :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scan-range 'make-scan-range))
 (common-lisp:defun make-scan-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end start)
   (common-lisp:apply #'common-lisp:make-instance 'scan-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-object-content-event-stream common-lisp:nil
                       ((end :initarg :end :type
                         (common-lisp:or end-event common-lisp:null) :accessor
                         %select-object-content-event-stream-end :initform
                         common-lisp:nil)
                        (cont :initarg :cont :type
                         (common-lisp:or continuation-event common-lisp:null)
                         :accessor %select-object-content-event-stream-cont
                         :initform common-lisp:nil)
                        (progress :initarg :progress :type
                         (common-lisp:or progress-event common-lisp:null)
                         :accessor %select-object-content-event-stream-progress
                         :initform common-lisp:nil)
                        (stats :initarg :stats :type
                         (common-lisp:or stats-event common-lisp:null)
                         :accessor %select-object-content-event-stream-stats
                         :initform common-lisp:nil)
                        (records :initarg :records :type
                         (common-lisp:or records-event common-lisp:null)
                         :accessor %select-object-content-event-stream-records
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'select-object-content-event-stream
                    'make-select-object-content-event-stream))
 (common-lisp:defun make-select-object-content-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end cont progress stats records)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-object-content-event-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "Stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cont))
      (common-lisp:list
       (common-lisp:cons "Cont"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-object-content-output common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or select-object-content-event-stream
                                         common-lisp:null)
                         :accessor %select-object-content-output-payload
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'select-object-content-output
                    'make-select-object-content-output))
 (common-lisp:defun make-select-object-content-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload)
   (common-lisp:apply #'common-lisp:make-instance 'select-object-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Payload" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass select-object-content-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %select-object-content-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (scan-range :initarg :scan-range :type
                         (common-lisp:or scan-range common-lisp:null) :accessor
                         %select-object-content-request-scan-range :initform
                         common-lisp:nil)
                        (output-serialization :initarg :output-serialization
                         :type
                         (common-lisp:or output-serialization common-lisp:null)
                         :accessor
                         %select-object-content-request-output-serialization
                         :initform
                         (common-lisp:error
                          ":output-serialization is required"))
                        (input-serialization :initarg :input-serialization
                         :type
                         (common-lisp:or input-serialization common-lisp:null)
                         :accessor
                         %select-object-content-request-input-serialization
                         :initform
                         (common-lisp:error
                          ":input-serialization is required"))
                        (request-progress :initarg :request-progress :type
                         (common-lisp:or request-progress common-lisp:null)
                         :accessor
                         %select-object-content-request-request-progress
                         :initform common-lisp:nil)
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor
                         %select-object-content-request-expression-type
                         :initform
                         (common-lisp:error ":expression-type is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %select-object-content-request-expression :initform
                         (common-lisp:error ":expression is required"))
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %select-object-content-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         %select-object-content-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %select-object-content-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %select-object-content-request-key :initform
                         (common-lisp:error ":key is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %select-object-content-request-bucket
                         :initform (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'select-object-content-request
                    'make-select-object-content-request))
 (common-lisp:defun make-select-object-content-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner scan-range
                     output-serialization input-serialization request-progress
                     expression-type expression ssecustomer-key-md5
                     ssecustomer-key ssecustomer-algorithm key bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-object-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-progress))
      (common-lisp:list
       (common-lisp:cons "RequestProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-range))
      (common-lisp:list
       (common-lisp:cons "ScanRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-parameters common-lisp:nil
                       ((output-serialization :initarg :output-serialization
                         :type
                         (common-lisp:or output-serialization common-lisp:null)
                         :accessor %select-parameters-output-serialization
                         :initform
                         (common-lisp:error
                          ":output-serialization is required"))
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %select-parameters-expression :initform
                         (common-lisp:error ":expression is required"))
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor %select-parameters-expression-type :initform
                         (common-lisp:error ":expression-type is required"))
                        (input-serialization :initarg :input-serialization
                         :type
                         (common-lisp:or input-serialization common-lisp:null)
                         :accessor %select-parameters-input-serialization
                         :initform
                         (common-lisp:error
                          ":input-serialization is required"))))
 (common-lisp:export
  (common-lisp:list 'select-parameters 'make-select-parameters))
 (common-lisp:defun make-select-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-serialization expression
                     expression-type input-serialization)
   (common-lisp:apply #'common-lisp:make-instance 'select-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-parameters))
   common-lisp:nil))
(common-lisp:deftype server-side-encryption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-by-default common-lisp:nil
                       ((kmsmaster-key-id :initarg :kmsmaster-key-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         %server-side-encryption-by-default-kmsmaster-key-id
                         :initform common-lisp:nil)
                        (ssealgorithm :initarg :ssealgorithm :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %server-side-encryption-by-default-ssealgorithm
                         :initform
                         (common-lisp:error ":ssealgorithm is required"))))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-by-default
                    'make-server-side-encryption-by-default))
 (common-lisp:defun make-server-side-encryption-by-default
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kmsmaster-key-id ssealgorithm)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-by-default
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsmaster-key-id))
      (common-lisp:list
       (common-lisp:cons "KMSMasterKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-configuration common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or server-side-encryption-rules
                                         common-lisp:null)
                         :accessor %server-side-encryption-configuration-rules
                         :initform (common-lisp:error ":rules is required"))))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defun make-server-side-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-rule common-lisp:nil
                       ((bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         %server-side-encryption-rule-bucket-key-enabled
                         :initform common-lisp:nil)
                        (apply-server-side-encryption-by-default :initarg
                         :apply-server-side-encryption-by-default :type
                         (common-lisp:or server-side-encryption-by-default
                                         common-lisp:null)
                         :accessor
                         %server-side-encryption-rule-apply-server-side-encryption-by-default
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-rule
                    'make-server-side-encryption-rule))
 (common-lisp:defun make-server-side-encryption-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-key-enabled
                     apply-server-side-encryption-by-default)
   (common-lisp:apply #'common-lisp:make-instance 'server-side-encryption-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-server-side-encryption-by-default))
      (common-lisp:list
       (common-lisp:cons "ApplyServerSideEncryptionByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:list
       (common-lisp:cons "BucketKeyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-side-encryption-rules ()
   '(trivial-types:proper-list server-side-encryption-rule))
 (common-lisp:defun |make-server-side-encryption-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-side-encryption-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype setting () 'common-lisp:boolean)
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype skip-validation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass source-selection-criteria common-lisp:nil
                       ((replica-modifications :initarg :replica-modifications
                         :type
                         (common-lisp:or replica-modifications
                                         common-lisp:null)
                         :accessor
                         %source-selection-criteria-replica-modifications
                         :initform common-lisp:nil)
                        (sse-kms-encrypted-objects :initarg
                         :sse-kms-encrypted-objects :type
                         (common-lisp:or sse-kms-encrypted-objects
                                         common-lisp:null)
                         :accessor
                         %source-selection-criteria-sse-kms-encrypted-objects
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-selection-criteria
                    'make-source-selection-criteria))
 (common-lisp:defun make-source-selection-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-modifications
                     sse-kms-encrypted-objects)
   (common-lisp:apply #'common-lisp:make-instance 'source-selection-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sse-kms-encrypted-objects))
      (common-lisp:list
       (common-lisp:cons "SseKmsEncryptedObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-modifications))
      (common-lisp:list
       (common-lisp:cons "ReplicaModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sse-kms-encrypted-objects common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or sse-kms-encrypted-objects-status
                                         common-lisp:null)
                         :accessor %sse-kms-encrypted-objects-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'sse-kms-encrypted-objects
                    'make-sse-kms-encrypted-objects))
 (common-lisp:defun make-sse-kms-encrypted-objects
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'sse-kms-encrypted-objects
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   common-lisp:nil))
(common-lisp:deftype sse-kms-encrypted-objects-status () 'common-lisp:string)
(common-lisp:deftype start () 'common-lisp:integer)
(common-lisp:deftype start-after () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stats common-lisp:nil
                       ((bytes-returned :initarg :bytes-returned :type
                         (common-lisp:or bytes-returned common-lisp:null)
                         :accessor %stats-bytes-returned :initform
                         common-lisp:nil)
                        (bytes-processed :initarg :bytes-processed :type
                         (common-lisp:or bytes-processed common-lisp:null)
                         :accessor %stats-bytes-processed :initform
                         common-lisp:nil)
                        (bytes-scanned :initarg :bytes-scanned :type
                         (common-lisp:or bytes-scanned common-lisp:null)
                         :accessor %stats-bytes-scanned :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stats 'make-stats))
 (common-lisp:defun make-stats
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bytes-returned bytes-processed
                     bytes-scanned)
   (common-lisp:apply #'common-lisp:make-instance 'stats
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stats-event common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or stats common-lisp:null) :accessor
                         %stats-event-details :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stats-event 'make-stats-event))
 (common-lisp:defun make-stats-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'stats-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats-event))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-class-analysis common-lisp:nil
                       ((data-export :initarg :data-export :type
                         (common-lisp:or storage-class-analysis-data-export
                                         common-lisp:null)
                         :accessor %storage-class-analysis-data-export
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis 'make-storage-class-analysis))
 (common-lisp:defun make-storage-class-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-export)
   (common-lisp:apply #'common-lisp:make-instance 'storage-class-analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-export))
      (common-lisp:list
       (common-lisp:cons "DataExport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-class-analysis-data-export common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or analytics-export-destination
                                         common-lisp:null)
                         :accessor
                         %storage-class-analysis-data-export-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (output-schema-version :initarg :output-schema-version
                         :type
                         (common-lisp:or storage-class-analysis-schema-version
                                         common-lisp:null)
                         :accessor
                         %storage-class-analysis-data-export-output-schema-version
                         :initform
                         (common-lisp:error
                          ":output-schema-version is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis-data-export
                    'make-storage-class-analysis-data-export))
 (common-lisp:defun make-storage-class-analysis-data-export
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination output-schema-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'storage-class-analysis-data-export
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-schema-version))
      (common-lisp:list
       (common-lisp:cons "OutputSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   common-lisp:nil))
(common-lisp:deftype storage-class-analysis-schema-version ()
  'common-lisp:string)
(common-lisp:deftype suffix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype tag-set () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tagging common-lisp:nil
                       ((tag-set :initarg :tag-set :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         %tagging-tag-set :initform
                         (common-lisp:error ":tag-set is required"))))
 (common-lisp:export (common-lisp:list 'tagging 'make-tagging))
 (common-lisp:defun make-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-set)
   (common-lisp:apply #'common-lisp:make-instance 'tagging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagging))
   common-lisp:nil))
(common-lisp:deftype tagging-directive () 'common-lisp:string)
(common-lisp:deftype tagging-header () 'common-lisp:string)
(common-lisp:deftype target-bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-grant common-lisp:nil
                       ((permission :initarg :permission :type
                         (common-lisp:or bucket-logs-permission
                                         common-lisp:null)
                         :accessor %target-grant-permission :initform
                         common-lisp:nil)
                        (grantee :initarg :grantee :type
                         (common-lisp:or grantee common-lisp:null) :accessor
                         %target-grant-grantee :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target-grant 'make-target-grant))
 (common-lisp:defun make-target-grant
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permission grantee)
   (common-lisp:apply #'common-lisp:make-instance 'target-grant
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-grants ()
   '(trivial-types:proper-list target-grant))
 (common-lisp:defun |make-target-grants|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-grant))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-prefix () 'common-lisp:string)
(common-lisp:deftype tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tiering common-lisp:nil
                       ((access-tier :initarg :access-tier :type
                         (common-lisp:or intelligent-tiering-access-tier
                                         common-lisp:null)
                         :accessor %tiering-access-tier :initform
                         (common-lisp:error ":access-tier is required"))
                        (days :initarg :days :type
                         (common-lisp:or intelligent-tiering-days
                                         common-lisp:null)
                         :accessor %tiering-days :initform
                         (common-lisp:error ":days is required"))))
 (common-lisp:export (common-lisp:list 'tiering 'make-tiering))
 (common-lisp:defun make-tiering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-tier days)
   (common-lisp:apply #'common-lisp:make-instance 'tiering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-tier))
      (common-lisp:list
       (common-lisp:cons "AccessTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tiering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tiering-list () '(trivial-types:proper-list tiering))
 (common-lisp:defun |make-tiering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tiering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic-configuration common-lisp:nil
                       ((filter :initarg :filter :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor %topic-configuration-filter :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %topic-configuration-events :initform
                         (common-lisp:error ":events is required"))
                        (topic-arn :initarg :topic-arn :type
                         (common-lisp:or topic-arn common-lisp:null) :accessor
                         %topic-configuration-topic-arn :initform
                         (common-lisp:error ":topic-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %topic-configuration-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'topic-configuration 'make-topic-configuration))
 (common-lisp:defun make-topic-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter events topic-arn id)
   (common-lisp:apply #'common-lisp:make-instance 'topic-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass topic-configuration-deprecated common-lisp:nil
                       ((topic :initarg :topic :type
                         (common-lisp:or topic-arn common-lisp:null) :accessor
                         %topic-configuration-deprecated-topic :initform
                         common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %topic-configuration-deprecated-event :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %topic-configuration-deprecated-events :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor %topic-configuration-deprecated-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'topic-configuration-deprecated
                    'make-topic-configuration-deprecated))
 (common-lisp:defun make-topic-configuration-deprecated
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic event events id)
   (common-lisp:apply #'common-lisp:make-instance
                      'topic-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "Topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-configuration-list ()
   '(trivial-types:proper-list topic-configuration))
 (common-lisp:defun |make-topic-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transition common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor %transition-storage-class :initform
                         common-lisp:nil)
                        (days :initarg :days :type
                         (common-lisp:or days common-lisp:null) :accessor
                         %transition-days :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %transition-date :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'transition 'make-transition))
 (common-lisp:defun make-transition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class days date)
   (common-lisp:apply #'common-lisp:make-instance 'transition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transition-list ()
   '(trivial-types:proper-list transition))
 (common-lisp:defun |make-transition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transition-storage-class () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype upload-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upload-part-copy-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %upload-part-copy-output-request-charged
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %upload-part-copy-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %upload-part-copy-output-ssekmskey-id
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %upload-part-copy-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-output-server-side-encryption
                         :initform common-lisp:nil)
                        (copy-part-result :initarg :copy-part-result :type
                         (common-lisp:or copy-part-result common-lisp:null)
                         :accessor %upload-part-copy-output-copy-part-result
                         :initform common-lisp:nil)
                        (copy-source-version-id :initarg
                         :copy-source-version-id :type
                         (common-lisp:or copy-source-version-id
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-output-copy-source-version-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-output 'make-upload-part-copy-output))
 (common-lisp:defun make-upload-part-copy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged bucket-key-enabled
                     ssekmskey-id ssecustomer-key-md5 ssecustomer-algorithm
                     server-side-encryption copy-part-result
                     copy-source-version-id)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-copy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-part-result))
      (common-lisp:list
       (common-lisp:cons "CopyPartResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("CopyPartResult" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:defclass upload-part-copy-request common-lisp:nil
                       ((expected-source-bucket-owner :initarg
                         :expected-source-bucket-owner :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %upload-part-copy-request-expected-source-bucket-owner
                         :initform common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %upload-part-copy-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %upload-part-copy-request-request-payer
                         :initform common-lisp:nil)
                        (copy-source-ssecustomer-key-md5 :initarg
                         :copy-source-ssecustomer-key-md5 :type
                         (common-lisp:or copy-source-ssecustomer-key-md5
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (copy-source-ssecustomer-key :initarg
                         :copy-source-ssecustomer-key :type
                         (common-lisp:or copy-source-ssecustomer-key
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-ssecustomer-key
                         :initform common-lisp:nil)
                        (copy-source-ssecustomer-algorithm :initarg
                         :copy-source-ssecustomer-algorithm :type
                         (common-lisp:or copy-source-ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %upload-part-copy-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %upload-part-copy-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %upload-part-copy-request-upload-id
                         :initform
                         (common-lisp:error ":upload-id is required"))
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %upload-part-copy-request-part-number
                         :initform
                         (common-lisp:error ":part-number is required"))
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %upload-part-copy-request-key :initform
                         (common-lisp:error ":key is required"))
                        (copy-source-range :initarg :copy-source-range :type
                         (common-lisp:or copy-source-range common-lisp:null)
                         :accessor %upload-part-copy-request-copy-source-range
                         :initform common-lisp:nil)
                        (copy-source-if-unmodified-since :initarg
                         :copy-source-if-unmodified-since :type
                         (common-lisp:or copy-source-if-unmodified-since
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-if-unmodified-since
                         :initform common-lisp:nil)
                        (copy-source-if-none-match :initarg
                         :copy-source-if-none-match :type
                         (common-lisp:or copy-source-if-none-match
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-if-none-match
                         :initform common-lisp:nil)
                        (copy-source-if-modified-since :initarg
                         :copy-source-if-modified-since :type
                         (common-lisp:or copy-source-if-modified-since
                                         common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-if-modified-since
                         :initform common-lisp:nil)
                        (copy-source-if-match :initarg :copy-source-if-match
                         :type
                         (common-lisp:or copy-source-if-match common-lisp:null)
                         :accessor
                         %upload-part-copy-request-copy-source-if-match
                         :initform common-lisp:nil)
                        (copy-source :initarg :copy-source :type
                         (common-lisp:or copy-source common-lisp:null)
                         :accessor %upload-part-copy-request-copy-source
                         :initform
                         (common-lisp:error ":copy-source is required"))
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %upload-part-copy-request-bucket :initform
                         (common-lisp:error ":bucket is required"))))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-request 'make-upload-part-copy-request))
 (common-lisp:defun make-upload-part-copy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-source-bucket-owner
                     expected-bucket-owner request-payer
                     copy-source-ssecustomer-key-md5
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-algorithm ssecustomer-key-md5
                     ssecustomer-key ssecustomer-algorithm upload-id
                     part-number key copy-source-range
                     copy-source-if-unmodified-since copy-source-if-none-match
                     copy-source-if-modified-since copy-source-if-match
                     copy-source bucket)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-copy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source-range))
      (common-lisp:cons "x-amz-copy-source-range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-part-output common-lisp:nil
                       ((request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor %upload-part-output-request-charged
                         :initform common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor %upload-part-output-bucket-key-enabled
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor %upload-part-output-ssekmskey-id :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %upload-part-output-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %upload-part-output-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %upload-part-output-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %upload-part-output-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %upload-part-output-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %upload-part-output-checksum-crc32 :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %upload-part-output-etag :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor %upload-part-output-server-side-encryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upload-part-output 'make-upload-part-output))
 (common-lisp:defun make-upload-part-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-charged bucket-key-enabled
                     ssekmskey-id ssecustomer-key-md5 ssecustomer-algorithm
                     checksum-sha256 checksum-sha1 checksum-crc32c
                     checksum-crc32 etag server-side-encryption)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-part-request common-lisp:nil
                       ((expected-bucket-owner :initarg :expected-bucket-owner
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %upload-part-request-expected-bucket-owner
                         :initform common-lisp:nil)
                        (request-payer :initarg :request-payer :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor %upload-part-request-request-payer :initform
                         common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor %upload-part-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssecustomer-key :initarg :ssecustomer-key :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor %upload-part-request-ssecustomer-key
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor %upload-part-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (upload-id :initarg :upload-id :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor %upload-part-request-upload-id :initform
                         (common-lisp:error ":upload-id is required"))
                        (part-number :initarg :part-number :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor %upload-part-request-part-number :initform
                         (common-lisp:error ":part-number is required"))
                        (key :initarg :key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %upload-part-request-key :initform
                         (common-lisp:error ":key is required"))
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor %upload-part-request-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor %upload-part-request-checksum-sha1 :initform
                         common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor %upload-part-request-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor %upload-part-request-checksum-crc32
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor %upload-part-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (content-md5 :initarg :content-md5 :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor %upload-part-request-content-md5 :initform
                         common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor %upload-part-request-content-length
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %upload-part-request-bucket :initform
                         (common-lisp:error ":bucket is required"))
                        (body :initarg :body :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor %upload-part-request-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upload-part-request 'make-upload-part-request))
 (common-lisp:defun make-upload-part-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-bucket-owner request-payer
                     ssecustomer-key-md5 ssecustomer-key ssecustomer-algorithm
                     upload-id part-number key checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 checksum-algorithm
                     content-md5 content-length bucket body)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Body" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:progn
 (common-lisp:deftype user-metadata ()
   '(trivial-types:proper-list metadata-entry))
 (common-lisp:defun |make-user-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version-count () 'common-lisp:integer)
(common-lisp:deftype version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass versioning-configuration common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor %versioning-configuration-status :initform
                         common-lisp:nil)
                        (mfadelete :initarg :mfadelete :type
                         (common-lisp:or mfadelete common-lisp:null) :accessor
                         %versioning-configuration-mfadelete :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defun make-versioning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status mfadelete)
   (common-lisp:apply #'common-lisp:make-instance 'versioning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass website-configuration common-lisp:nil
                       ((routing-rules :initarg :routing-rules :type
                         (common-lisp:or routing-rules common-lisp:null)
                         :accessor %website-configuration-routing-rules
                         :initform common-lisp:nil)
                        (redirect-all-requests-to :initarg
                         :redirect-all-requests-to :type
                         (common-lisp:or redirect-all-requests-to
                                         common-lisp:null)
                         :accessor
                         %website-configuration-redirect-all-requests-to
                         :initform common-lisp:nil)
                        (index-document :initarg :index-document :type
                         (common-lisp:or index-document common-lisp:null)
                         :accessor %website-configuration-index-document
                         :initform common-lisp:nil)
                        (error-document :initarg :error-document :type
                         (common-lisp:or error-document common-lisp:null)
                         :accessor %website-configuration-error-document
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'website-configuration 'make-website-configuration))
 (common-lisp:defun make-website-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routing-rules redirect-all-requests-to
                     index-document error-document)
   (common-lisp:apply #'common-lisp:make-instance 'website-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   common-lisp:nil))
(common-lisp:deftype website-redirect-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass write-get-object-response-request common-lisp:nil
                       ((bucket-key-enabled :initarg :bucket-key-enabled :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         %write-get-object-response-request-bucket-key-enabled
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         %write-get-object-response-request-version-id
                         :initform common-lisp:nil)
                        (tag-count :initarg :tag-count :type
                         (common-lisp:or tag-count common-lisp:null) :accessor
                         %write-get-object-response-request-tag-count :initform
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         %write-get-object-response-request-storage-class
                         :initform common-lisp:nil)
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         %write-get-object-response-request-ssecustomer-key-md5
                         :initform common-lisp:nil)
                        (ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         %write-get-object-response-request-ssekmskey-id
                         :initform common-lisp:nil)
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         %write-get-object-response-request-ssecustomer-algorithm
                         :initform common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         %write-get-object-response-request-server-side-encryption
                         :initform common-lisp:nil)
                        (restore :initarg :restore :type
                         (common-lisp:or restore common-lisp:null) :accessor
                         %write-get-object-response-request-restore :initform
                         common-lisp:nil)
                        (request-charged :initarg :request-charged :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         %write-get-object-response-request-request-charged
                         :initform common-lisp:nil)
                        (replication-status :initarg :replication-status :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor
                         %write-get-object-response-request-replication-status
                         :initform common-lisp:nil)
                        (parts-count :initarg :parts-count :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor
                         %write-get-object-response-request-parts-count
                         :initform common-lisp:nil)
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         %write-get-object-response-request-object-lock-retain-until-date
                         :initform common-lisp:nil)
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         %write-get-object-response-request-object-lock-legal-hold-status
                         :initform common-lisp:nil)
                        (object-lock-mode :initarg :object-lock-mode :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         %write-get-object-response-request-object-lock-mode
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %write-get-object-response-request-metadata :initform
                         common-lisp:nil)
                        (missing-meta :initarg :missing-meta :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor
                         %write-get-object-response-request-missing-meta
                         :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         %write-get-object-response-request-last-modified
                         :initform common-lisp:nil)
                        (expiration :initarg :expiration :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         %write-get-object-response-request-expiration
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %write-get-object-response-request-expires :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         %write-get-object-response-request-etag :initform
                         common-lisp:nil)
                        (delete-marker :initarg :delete-marker :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor
                         %write-get-object-response-request-delete-marker
                         :initform common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         %write-get-object-response-request-checksum-sha256
                         :initform common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         %write-get-object-response-request-checksum-sha1
                         :initform common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         %write-get-object-response-request-checksum-crc32c
                         :initform common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         %write-get-object-response-request-checksum-crc32
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-type
                         :initform common-lisp:nil)
                        (content-range :initarg :content-range :type
                         (common-lisp:or content-range common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-range
                         :initform common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-length
                         :initform common-lisp:nil)
                        (content-language :initarg :content-language :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-language
                         :initform common-lisp:nil)
                        (content-encoding :initarg :content-encoding :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-encoding
                         :initform common-lisp:nil)
                        (content-disposition :initarg :content-disposition
                         :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         %write-get-object-response-request-content-disposition
                         :initform common-lisp:nil)
                        (cache-control :initarg :cache-control :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         %write-get-object-response-request-cache-control
                         :initform common-lisp:nil)
                        (accept-ranges :initarg :accept-ranges :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor
                         %write-get-object-response-request-accept-ranges
                         :initform common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %write-get-object-response-request-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %write-get-object-response-request-error-code
                         :initform common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or get-object-response-status-code
                                         common-lisp:null)
                         :accessor
                         %write-get-object-response-request-status-code
                         :initform common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor %write-get-object-response-request-body
                         :initform common-lisp:nil)
                        (request-token :initarg :request-token :type
                         (common-lisp:or request-token common-lisp:null)
                         :accessor
                         %write-get-object-response-request-request-token
                         :initform
                         (common-lisp:error ":request-token is required"))
                        (request-route :initarg :request-route :type
                         (common-lisp:or request-route common-lisp:null)
                         :accessor
                         %write-get-object-response-request-request-route
                         :initform
                         (common-lisp:error ":request-route is required"))))
 (common-lisp:export
  (common-lisp:list 'write-get-object-response-request
                    'make-write-get-object-response-request))
 (common-lisp:defun make-write-get-object-response-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-key-enabled version-id tag-count
                     storage-class ssecustomer-key-md5 ssekmskey-id
                     ssecustomer-algorithm server-side-encryption restore
                     request-charged replication-status parts-count
                     object-lock-retain-until-date
                     object-lock-legal-hold-status object-lock-mode metadata
                     missing-meta last-modified expiration expires etag
                     delete-marker checksum-sha256 checksum-sha1
                     checksum-crc32c checksum-crc32 content-type content-range
                     content-length content-language content-encoding
                     content-disposition cache-control accept-ranges
                     error-message error-code status-code body request-token
                     request-route)
   (common-lisp:apply #'common-lisp:make-instance
                      'write-get-object-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-route))
      (common-lisp:cons "x-amz-request-route" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token))
      (common-lisp:cons "x-amz-request-token" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:cons "x-amz-fwd-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:cons "x-amz-fwd-error-code" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:cons "x-amz-fwd-error-message"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "x-amz-fwd-header-accept-ranges"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "x-amz-fwd-header-Cache-Control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "x-amz-fwd-header-Content-Disposition"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "x-amz-fwd-header-Content-Encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "x-amz-fwd-header-Content-Language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "x-amz-fwd-header-Content-Range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "x-amz-fwd-header-Content-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha1"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-fwd-header-x-amz-delete-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "x-amz-fwd-header-ETag"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "x-amz-fwd-header-Expires"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-fwd-header-x-amz-expiration"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "x-amz-fwd-header-Last-Modified"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-fwd-header-x-amz-missing-meta"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-mp-parts-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-fwd-header-x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-fwd-header-x-amz-restore"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-fwd-header-x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-fwd-header-x-amz-storage-class"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-tagging-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-fwd-header-x-amz-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled"
       aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:with-output-to-string (aws-sdk/generator/shape::s)
     (common-lisp:format common-lisp:t "~s~%"
                         (com.inuoe.jzon:stringify
                          aws-sdk/generator/shape::input :pretty
                          common-lisp:t))
     (xml-emitter:with-xml-output (aws-sdk/generator/shape::s :encoding "UTF-8")
       (xml-emitter:with-tag ("Body" common-lisp:nil common-lisp:nil)
         common-lisp:nil)))))
(common-lisp:deftype years () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun abort-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key upload-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key upload-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-abort-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "AbortMultipartUpload"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-multipart-upload))
(common-lisp:progn
 (common-lisp:defun complete-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key multipart-upload upload-id
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key multipart-upload upload-id checksum-crc32
     checksum-crc32c checksum-sha1 checksum-sha256 request-payer
     expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-complete-multipart-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CompleteMultipartUpload"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'complete-multipart-upload))
(common-lisp:progn
 (common-lisp:defun copy-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     checksum-algorithm content-disposition content-encoding
                     content-language content-type copy-source
                     copy-source-if-match copy-source-if-modified-since
                     copy-source-if-none-match copy-source-if-unmodified-since
                     expires grant-full-control grant-read grant-read-acp
                     grant-write-acp key metadata metadata-directive
                     tagging-directive server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer tagging
                     object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control checksum-algorithm
     content-disposition content-encoding content-language content-type
     copy-source copy-source-if-match copy-source-if-modified-since
     copy-source-if-none-match copy-source-if-unmodified-since expires
     grant-full-control grant-read grant-read-acp grant-write-acp key metadata
     metadata-directive tagging-directive server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled copy-source-ssecustomer-algorithm
     copy-source-ssecustomer-key copy-source-ssecustomer-key-md5 request-payer
     tagging object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CopyObject"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-object))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket create-bucket-configuration
                     grant-full-control grant-read grant-read-acp grant-write
                     grant-write-acp object-lock-enabled-for-bucket
                     object-ownership)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket create-bucket-configuration
     grant-full-control grant-read grant-read-acp grant-write grant-write-acp
     object-lock-enabled-for-bucket object-ownership))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "CreateBucket"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     content-disposition content-encoding content-language
                     content-type expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control content-disposition
     content-encoding content-language content-type expires grant-full-control
     grant-read grant-read-acp grant-write-acp key metadata
     server-side-encryption storage-class website-redirect-location
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 ssekmskey-id
     ssekmsencryption-context bucket-key-enabled request-payer tagging
     object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CreateMultipartUpload"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multipart-upload))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucket"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketAnalyticsConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketCors"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-cors))
(common-lisp:progn
 (common-lisp:defun delete-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketEncryption"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun delete-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketIntelligentTieringConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketInventoryConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketLifecycle"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun delete-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketMetricsConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketOwnershipControls"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun delete-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketPolicy"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-policy))
(common-lisp:progn
 (common-lisp:defun delete-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketReplication"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-replication))
(common-lisp:progn
 (common-lisp:defun delete-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun delete-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketWebsite"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-website))
(common-lisp:progn
 (common-lisp:defun delete-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key mfa version-id request-payer
                     bypass-governance-retention expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key mfa version-id request-payer
     bypass-governance-retention expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObject"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-object))
(common-lisp:progn
 (common-lisp:defun delete-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObjectTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-object-tagging))
(common-lisp:progn
 (common-lisp:defun delete-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delete mfa request-payer
                     bypass-governance-retention expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket delete mfa request-payer
     bypass-governance-retention expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteObjects"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-objects))
(common-lisp:progn
 (common-lisp:defun delete-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-public-access-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeletePublicAccessBlock"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-public-access-block))
(common-lisp:progn
 (common-lisp:defun get-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAccelerateConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAcl"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-acl))
(common-lisp:progn
 (common-lisp:defun get-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAnalyticsConfiguration"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketCors"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-cors))
(common-lisp:progn
 (common-lisp:defun get-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketEncryption"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun get-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketIntelligentTieringConfiguration"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketInventoryConfiguration"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycle"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycleConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?location"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLocation"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-location))
(common-lisp:progn
 (common-lisp:defun get-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLogging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-logging))
(common-lisp:progn
 (common-lisp:defun get-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketMetricsConfiguration"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotification"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-notification))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotificationConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketOwnershipControls"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicy"
                                                        "2006-03-01"))
      "string" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicyStatus"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy-status))
(common-lisp:progn
 (common-lisp:defun get-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketReplication"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-replication))
(common-lisp:progn
 (common-lisp:defun get-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketRequestPayment"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun get-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun get-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketVersioning"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun get-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketWebsite"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-website))
(common-lisp:progn
 (common-lisp:defun get-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range
                     response-cache-control response-content-disposition
                     response-content-encoding response-content-language
                     response-content-type response-expires version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range response-cache-control
     response-content-disposition response-content-encoding
     response-content-language response-content-type response-expires
     version-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     request-payer part-number expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObject"
                                                        "2006-03-01")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object))
(common-lisp:progn
 (common-lisp:defun get-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAcl"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-acl))
(common-lisp:progn
 (common-lisp:defun get-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id max-parts
                     part-number-marker ssecustomer-algorithm ssecustomer-key
                     ssecustomer-key-md5 request-payer expected-bucket-owner
                     object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id max-parts part-number-marker
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 request-payer
     expected-bucket-owner object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?attributes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAttributes"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-attributes))
(common-lisp:progn
 (common-lisp:defun get-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectLegalHold"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun get-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetObjectLockConfiguration"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun get-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectRetention"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-retention))
(common-lisp:progn
 (common-lisp:defun get-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner
     request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-tagging))
(common-lisp:progn
 (common-lisp:defun get-object-torrent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-torrent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?torrent"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTorrent"
                                                        "2006-03-01")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-torrent))
(common-lisp:progn
 (common-lisp:defun get-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetPublicAccessBlock"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-access-block))
(common-lisp:progn
 (common-lisp:defun head-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "HeadBucket"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'head-bucket))
(common-lisp:progn
 (common-lisp:defun head-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range version-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer part-number
     expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "HeadObject"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'head-object))
(common-lisp:progn
 (common-lisp:defun list-bucket-analytics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-analytics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketAnalyticsConfigurations"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-analytics-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-intelligent-tiering-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token)
   (common-lisp:declare (common-lisp:ignorable bucket continuation-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-intelligent-tiering-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketIntelligentTieringConfigurations"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-intelligent-tiering-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-inventory-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-inventory-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketInventoryConfigurations"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-inventory-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-metrics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-metrics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketMetricsConfigurations"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-metrics-configurations))
(common-lisp:progn
 (common-lisp:defun list-buckets ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 's3-request :method "GET" :path "/" :protocol
                                :rest-xml :operation "ListBuckets" :params
                                `(("Action" ,@"ListBuckets")
                                  ("Version" ,@"2006-03-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'list-buckets))
(common-lisp:progn
 (common-lisp:defun list-multipart-uploads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-uploads prefix upload-id-marker expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker
     max-uploads prefix upload-id-marker expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multipart-uploads-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListMultipartUploads"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multipart-uploads))
(common-lisp:progn
 (common-lisp:defun list-object-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-keys prefix version-id-marker expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker max-keys
     prefix version-id-marker expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectVersions"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-versions))
(common-lisp:progn
 (common-lisp:defun list-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type marker
                     max-keys prefix request-payer expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type marker max-keys
     prefix request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjects"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-objects))
(common-lisp:progn
 (common-lisp:defun list-objects-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type max-keys
                     prefix continuation-token fetch-owner start-after
                     request-payer expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type max-keys prefix
     continuation-token fetch-owner start-after request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?list-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectsV2"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-objects-v2))
(common-lisp:progn
 (common-lisp:defun list-parts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key max-parts part-number-marker
                     upload-id request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key max-parts part-number-marker upload-id
     request-payer expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "ListParts"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-parts))
(common-lisp:progn
 (common-lisp:defun put-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket accelerate-configuration
                     expected-bucket-owner checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket accelerate-configuration
     expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAccelerateConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAcl"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-acl))
(common-lisp:progn
 (common-lisp:defun put-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id analytics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id analytics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAnalyticsConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket corsconfiguration content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket corsconfiguration content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketCors"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-cors))
(common-lisp:progn
 (common-lisp:defun put-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     server-side-encryption-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     server-side-encryption-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketEncryption"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun put-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id
                     intelligent-tiering-configuration)
   (common-lisp:declare
    (common-lisp:ignorable bucket id intelligent-tiering-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketIntelligentTieringConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id inventory-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id inventory-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketInventoryConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     lifecycle-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycle"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket checksum-algorithm lifecycle-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycleConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket bucket-logging-status content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket bucket-logging-status content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLogging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-logging))
(common-lisp:progn
 (common-lisp:defun put-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id metrics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id metrics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketMetricsConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     notification-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     notification-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotification"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-notification))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket notification-configuration
                     expected-bucket-owner skip-destination-validation)
   (common-lisp:declare
    (common-lisp:ignorable bucket notification-configuration
     expected-bucket-owner skip-destination-validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotificationConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 expected-bucket-owner
                     ownership-controls)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 expected-bucket-owner
     ownership-controls))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketOwnershipControls"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun put-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     confirm-remove-self-bucket-access policy
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     confirm-remove-self-bucket-access policy expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketPolicy"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-policy))
(common-lisp:progn
 (common-lisp:defun put-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     replication-configuration token expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     replication-configuration token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketReplication"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-replication))
(common-lisp:progn
 (common-lisp:defun put-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     request-payment-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     request-payment-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketRequestPayment"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun put-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     tagging expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm tagging
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun put-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm mfa
                     versioning-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm mfa
     versioning-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketVersioning"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun put-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     website-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     website-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketWebsite"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-website))
(common-lisp:progn
 (common-lisp:defun put-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl body bucket cache-control
                     content-disposition content-encoding content-language
                     content-length content-md5 content-type checksum-algorithm
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl body bucket cache-control content-disposition
     content-encoding content-language content-length content-md5 content-type
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 expires grant-full-control grant-read grant-read-acp
     grant-write-acp key metadata server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled request-payer tagging object-lock-mode
     object-lock-retain-until-date object-lock-legal-hold-status
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObject"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object))
(common-lisp:progn
 (common-lisp:defun put-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp key
                     request-payer version-id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp key request-payer version-id
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectAcl"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-acl))
(common-lisp:progn
 (common-lisp:defun put-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key legal-hold request-payer
                     version-id content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key legal-hold request-payer version-id
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectLegalHold"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun put-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket object-lock-configuration
                     request-payer token content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket object-lock-configuration request-payer token
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutObjectLockConfiguration"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun put-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key retention request-payer
                     version-id bypass-governance-retention content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key retention request-payer version-id
     bypass-governance-retention content-md5 checksum-algorithm
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectRetention"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-retention))
(common-lisp:progn
 (common-lisp:defun put-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id content-md5
                     checksum-algorithm tagging expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id content-md5 checksum-algorithm
     tagging expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectTagging"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-tagging))
(common-lisp:progn
 (common-lisp:defun put-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     public-access-block-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     public-access-block-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutPublicAccessBlock"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-public-access-block))
(common-lisp:progn
 (common-lisp:defun restore-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id restore-request
                     request-payer checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id restore-request request-payer
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?restore"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "RestoreObject"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-object))
(common-lisp:progn
 (common-lisp:defun select-object-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 expression
                     expression-type request-progress input-serialization
                     output-serialization scan-range expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 expression expression-type request-progress
     input-serialization output-serialization scan-range
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-select-object-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?select&select-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "SelectObjectContent"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'select-object-content))
(common-lisp:progn
 (common-lisp:defun upload-part
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body bucket content-length content-md5
                     checksum-algorithm checksum-crc32 checksum-crc32c
                     checksum-sha1 checksum-sha256 key part-number upload-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable body bucket content-length content-md5
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 key part-number upload-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPart"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upload-part))
(common-lisp:progn
 (common-lisp:defun upload-part-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket copy-source copy-source-if-match
                     copy-source-if-modified-since copy-source-if-none-match
                     copy-source-if-unmodified-since copy-source-range key
                     part-number upload-id ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer
                     expected-bucket-owner expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket copy-source copy-source-if-match
     copy-source-if-modified-since copy-source-if-none-match
     copy-source-if-unmodified-since copy-source-range key part-number
     upload-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     copy-source-ssecustomer-algorithm copy-source-ssecustomer-key
     copy-source-ssecustomer-key-md5 request-payer expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-copy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-xml
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPartCopy"
                                                        "2006-03-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'upload-part-copy))
(common-lisp:progn
 (common-lisp:defun write-get-object-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-route request-token body
                     status-code error-code error-message accept-ranges
                     cache-control content-disposition content-encoding
                     content-language content-length content-range content-type
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 delete-marker etag expires expiration
                     last-modified missing-meta metadata object-lock-mode
                     object-lock-legal-hold-status
                     object-lock-retain-until-date parts-count
                     replication-status request-charged restore
                     server-side-encryption ssecustomer-algorithm ssekmskey-id
                     ssecustomer-key-md5 storage-class tag-count version-id
                     bucket-key-enabled)
   (common-lisp:declare
    (common-lisp:ignorable request-route request-token body status-code
     error-code error-message accept-ranges cache-control content-disposition
     content-encoding content-language content-length content-range
     content-type checksum-crc32 checksum-crc32c checksum-sha1 checksum-sha256
     delete-marker etag expires expiration last-modified missing-meta metadata
     object-lock-mode object-lock-legal-hold-status
     object-lock-retain-until-date parts-count replication-status
     request-charged restore server-side-encryption ssecustomer-algorithm
     ssekmskey-id ssecustomer-key-md5 storage-class tag-count version-id
     bucket-key-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-write-get-object-response-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-xml
                                                        "/WriteGetObjectResponse"
                                                        "WriteGetObjectResponse"
                                                        "2006-03-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'write-get-object-response))
